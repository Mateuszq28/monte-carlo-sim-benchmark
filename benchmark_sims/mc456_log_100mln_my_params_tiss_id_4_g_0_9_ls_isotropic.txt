time elapsed: 3902.5441 seconds

=================================

sim results:

number of photons = 100000000
overflow: 4.66660212828050181270e+07
sum: 5.33335985566203966737e+07
sum: 5.33339787171949818730e+07
avg: 5.33335985566203985009e-01
perc_in: 53.33

number of photons = 100000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.93475287669731324525e-02 	 1.73523817876401392768e-01 	 8.02633968091603478001e-01 
0.01250 	 3.77795557017300900893e-02 	 1.74312297114732117631e-01 	 8.02602641236907166089e-01 
0.02083 	 3.57095555388124985541e-02 	 1.74446932677339072715e-01 	 8.03074978246702597673e-01 
0.02917 	 3.49754728134541933993e-02 	 1.74337164468975097664e-01 	 8.03713708406507576498e-01 
0.03750 	 3.52149710126013482103e-02 	 1.74700324182517074956e-01 	 8.04229606292777288168e-01 
0.04583 	 3.48978511473696934031e-02 	 1.74389858590793450643e-01 	 8.04980842602424639942e-01 
0.05417 	 3.48585796938027034364e-02 	 1.74705813457245479059e-01 	 8.06135554418100475083e-01 
0.06250 	 3.50921960815539779599e-02 	 1.74924948581196920694e-01 	 8.07293938012795475601e-01 
0.07083 	 3.50638769974711272948e-02 	 1.75039519913780805549e-01 	 8.08482266679613204019e-01 
0.07917 	 3.51638590170939568935e-02 	 1.74942975522498850305e-01 	 8.09730492340516527783e-01 
0.08750 	 3.49901618677192979834e-02 	 1.75335892183758862428e-01 	 8.11541855328531736014e-01 
0.09583 	 3.50705373116747542994e-02 	 1.75433249070261171321e-01 	 8.13395293714338385449e-01 
0.10417 	 3.50843458891268097921e-02 	 1.75574014605871880912e-01 	 8.15319838019964659992e-01 
0.11250 	 3.49985585078682812088e-02 	 1.75952437564914465629e-01 	 8.17423289561743371401e-01 
0.12083 	 3.50358223235450461086e-02 	 1.76162669039094110790e-01 	 8.19513809186310226984e-01 
0.12917 	 3.51248105560760665034e-02 	 1.76481239008583895567e-01 	 8.21857921720012041256e-01 
0.13750 	 3.50445104262879295054e-02 	 1.76797998561680214102e-01 	 8.24683882877897178609e-01 
0.14583 	 3.52845826643678542323e-02 	 1.77044118152412471856e-01 	 8.27338508718685972099e-01 
0.15417 	 3.52363447850010669260e-02 	 1.77468878587734274488e-01 	 8.30134915938752770970e-01 
0.16250 	 3.52632553079543428765e-02 	 1.77613884581912823135e-01 	 8.33344301484961302862e-01 
0.17083 	 3.53862605216992906487e-02 	 1.77934966866029331545e-01 	 8.36506174579110250988e-01 
0.17917 	 3.54268882651641650594e-02 	 1.78385591566379120287e-01 	 8.39865444280980977254e-01 
0.18750 	 3.54207864013688436544e-02 	 1.78737185495082051556e-01 	 8.43375567230090550375e-01 
0.19583 	 3.54401731635862471403e-02 	 1.79198777575298562326e-01 	 8.47125123132098312162e-01 
0.20417 	 3.55230937799930063248e-02 	 1.79650321252232486602e-01 	 8.51157906287677179513e-01 
0.21250 	 3.56184190374089562625e-02 	 1.80097478250069803485e-01 	 8.55506622632189683841e-01 
0.22083 	 3.56204460254678223485e-02 	 1.80439333929359346786e-01 	 8.59923002598385721740e-01 
0.22917 	 3.57387973004945208588e-02 	 1.81017323929965945339e-01 	 8.64306619400186493252e-01 
0.23750 	 3.57472885339983198483e-02 	 1.81495109998939835316e-01 	 8.68800385830271415522e-01 
0.24583 	 3.57563439515925299284e-02 	 1.81825375133269823147e-01 	 8.73651293190233824149e-01 
0.25417 	 3.58945098394263875652e-02 	 1.82574140155836950328e-01 	 8.78806530670695695839e-01 
0.26250 	 3.60210367129750047566e-02 	 1.83099741660477294269e-01 	 8.84233018570569351269e-01 
0.27083 	 3.60350173320137454058e-02 	 1.83734865162818256090e-01 	 8.89222339012827101001e-01 
0.27917 	 3.61646467647149527647e-02 	 1.84420281750045461644e-01 	 8.94213665269565027849e-01 
0.28750 	 3.62280569523792811415e-02 	 1.84930522474504838160e-01 	 9.00325717297256189475e-01 
0.29583 	 3.62925020393021838250e-02 	 1.85641021293680097415e-01 	 9.06283446510944945551e-01 
0.30417 	 3.63603195343180779497e-02 	 1.86308004446417041500e-01 	 9.12365421922628816453e-01 
0.31250 	 3.65560016405206272827e-02 	 1.86975645651812016901e-01 	 9.19008682963153744616e-01 
0.32083 	 3.65478269291028487475e-02 	 1.87698953919735012086e-01 	 9.25184930005369166039e-01 
0.32917 	 3.66868208338786624956e-02 	 1.88372956750710529583e-01 	 9.31782434441782658752e-01 
0.33750 	 3.67743157831523087564e-02 	 1.89118166191710401769e-01 	 9.38474625928697570032e-01 
0.34583 	 3.68269704821970605968e-02 	 1.89886340936221920117e-01 	 9.45086717870763370897e-01 
0.35417 	 3.69959752347614398427e-02 	 1.90627424408258167032e-01 	 9.52373294771283740445e-01 
0.36250 	 3.71409827679019671764e-02 	 1.91466576425965984143e-01 	 9.59952768354761065694e-01 
0.37083 	 3.72269424287150485497e-02 	 1.92343946780745622682e-01 	 9.67505810743679139918e-01 
0.37917 	 3.73495373929808097135e-02 	 1.93174723963647265723e-01 	 9.75269387365197193418e-01 
0.38750 	 3.74263732788680317243e-02 	 1.93946199065435753717e-01 	 9.83359189382610576757e-01 
0.39583 	 3.75393959551520162155e-02 	 1.94872546833556425927e-01 	 9.91422263415992710556e-01 
0.40417 	 3.76150730558479570731e-02 	 1.95779220389778407796e-01 	 9.99747721291181945524e-01 
0.41250 	 3.77688743510734420417e-02 	 1.96734127303217792848e-01 	 1.00848831257540028083e+00 
0.42083 	 3.78853485188685584761e-02 	 1.97749619067157655916e-01 	 1.01753843963275092399e+00 
0.42917 	 3.80193363748178095318e-02 	 1.98686635133985128876e-01 	 1.02688112820943078241e+00 
0.43750 	 3.81469743519969317624e-02 	 1.99734307686322415387e-01 	 1.03587359862991013060e+00 
0.44583 	 3.83044160990858029159e-02 	 2.00750951215220657664e-01 	 1.04537208156386518532e+00 
0.45417 	 3.84374811559506576741e-02 	 2.01749488934131554485e-01 	 1.05471508835083715994e+00 
0.46250 	 3.85350823493617322679e-02 	 2.02844181338014212246e-01 	 1.06468217028668798996e+00 
0.47083 	 3.86852555445767604114e-02 	 2.03844012936200774666e-01 	 1.07478762722206955260e+00 
0.47917 	 3.88539272673798438684e-02 	 2.05001822630508839795e-01 	 1.08532310899025041806e+00 
0.48750 	 3.89585772817319375694e-02 	 2.06162525765729659488e-01 	 1.09570878504717739155e+00 
0.49583 	 3.91295866403339395734e-02 	 2.07316803396999010944e-01 	 1.10675323111401446852e+00 
0.50417 	 3.92608446177439285307e-02 	 2.08568006405091599387e-01 	 1.11802576461385339002e+00 
0.51250 	 3.94153764704372744365e-02 	 2.09713132642293020869e-01 	 1.12941572985660387829e+00 
0.52083 	 3.95629999528201090064e-02 	 2.10900080110885540519e-01 	 1.14088827413975923974e+00 
0.52917 	 3.97505024127937089951e-02 	 2.12159825031190046873e-01 	 1.15292634459685117143e+00 
0.53750 	 3.98992223715224289537e-02 	 2.13632008303370174440e-01 	 1.16490963820410797780e+00 
0.54583 	 4.00775560340183301111e-02 	 2.14899302109440554220e-01 	 1.17698124314962893067e+00 
0.55417 	 4.02551978129254486860e-02 	 2.16213238836375915009e-01 	 1.18998074397010644709e+00 
0.56250 	 4.04451941888977067885e-02 	 2.17584360090675693611e-01 	 1.20304895551785540064e+00 
0.57083 	 4.05715233565290406270e-02 	 2.18979061080853493193e-01 	 1.21629750459034102761e+00 
0.57917 	 4.07920873432374639367e-02 	 2.20409640951239438333e-01 	 1.23019755090835802847e+00 
0.58750 	 4.09942314088518472426e-02 	 2.21861483120395858171e-01 	 1.24395123875336288677e+00 
0.59583 	 4.11367944652440281628e-02 	 2.23404568389972246756e-01 	 1.25802930507706700602e+00 
0.60417 	 4.13039796843156573058e-02 	 2.24959259666618449636e-01 	 1.27262882213695815992e+00 
0.61250 	 4.15161045857153285232e-02 	 2.26489074636485876457e-01 	 1.28749625038905834984e+00 
0.62083 	 4.17126047275234862477e-02 	 2.28165502240838591330e-01 	 1.30259530976278314895e+00 
0.62917 	 4.19378641064374335645e-02 	 2.29754442050099344508e-01 	 1.31826879456724110895e+00 
0.63750 	 4.21046709005095248779e-02 	 2.31330858299818281631e-01 	 1.33384300227850749465e+00 
0.64583 	 4.23279274775734612457e-02 	 2.33012237214984374578e-01 	 1.35035021881179639891e+00 
0.65417 	 4.25378148904622596649e-02 	 2.34725980621404456405e-01 	 1.36693141711988408460e+00 
0.66250 	 4.27450312472718446655e-02 	 2.36612130281037363888e-01 	 1.38413777921369107737e+00 
0.67083 	 4.29595249247053737052e-02 	 2.38400595559947220403e-01 	 1.40122760313147165512e+00 
0.67917 	 4.31641516628977553460e-02 	 2.40203146596761563103e-01 	 1.41902215671033937738e+00 
0.68750 	 4.33787024151372144209e-02 	 2.42109965348501432469e-01 	 1.43794608396053269495e+00 
0.69583 	 4.35967457854750939372e-02 	 2.44075974718515692485e-01 	 1.45653082249564280737e+00 
0.70417 	 4.38692272673808086880e-02 	 2.46013483893386925017e-01 	 1.47565278283246215096e+00 
0.71250 	 4.41029731093845814294e-02 	 2.48049718624398063405e-01 	 1.49559228947007705202e+00 
0.72083 	 4.43263214265050414786e-02 	 2.50015506537053677771e-01 	 1.51580175311888143419e+00 
0.72917 	 4.45702474644712465235e-02 	 2.52216498980102898919e-01 	 1.53660380913490834942e+00 
0.73750 	 4.47925400678069393634e-02 	 2.54386465500534453277e-01 	 1.55777041227156232139e+00 
0.74583 	 4.50403319353258752011e-02 	 2.56558482776772289746e-01 	 1.58010833469803313456e+00 
0.75417 	 4.53053376150912151532e-02 	 2.58842893219363545665e-01 	 1.60283805014875579964e+00 
0.76250 	 4.55525207546921273583e-02 	 2.61297072953548870089e-01 	 1.62572698928067782553e+00 
0.77083 	 4.58076347787243973175e-02 	 2.63663954489306129325e-01 	 1.64940873137091714717e+00 
0.77917 	 4.60707446242885898524e-02 	 2.66139870516491572339e-01 	 1.67356268988670464637e+00 
0.78750 	 4.63413752053529123809e-02 	 2.68568391118996552258e-01 	 1.69963668856156480125e+00 
0.79583 	 4.66249161527309274877e-02 	 2.71232090485352184128e-01 	 1.72627924128412146842e+00 
0.80417 	 4.68953216160485561459e-02 	 2.73862656105909096915e-01 	 1.75344069820550796379e+00 
0.81250 	 4.71591982587774571911e-02 	 2.76615045111220758667e-01 	 1.78235959548084332837e+00 
0.82083 	 4.74370466082591618617e-02 	 2.79474780203135098056e-01 	 1.81125585176259917830e+00 
0.82917 	 4.77242791713309300050e-02 	 2.82364071543496297778e-01 	 1.84269350642787510530e+00 
0.83750 	 4.80284664372299871515e-02 	 2.85523673436284042282e-01 	 1.87459912700465980429e+00 
0.84583 	 4.83414300402848703953e-02 	 2.88637131572094141063e-01 	 1.90827260927514696931e+00 
0.85417 	 4.86168848984594170748e-02 	 2.91906341918883094344e-01 	 1.94342806950681890044e+00 
0.86250 	 4.89248703035381066195e-02 	 2.95276963745240983439e-01 	 1.98030613145785161500e+00 
0.87083 	 4.92255134766697161064e-02 	 2.98816086753027621015e-01 	 2.01939307272097945400e+00 
0.87917 	 4.95346343180638401527e-02 	 3.02573716504967393792e-01 	 2.06131936372137802849e+00 
0.88750 	 4.98476955340528687932e-02 	 3.06438162499013122542e-01 	 2.10547200993847516415e+00 
0.89583 	 5.01507249834025337076e-02 	 3.10484989520615761727e-01 	 2.15285317802429521095e+00 
0.90417 	 5.05020010448818390536e-02 	 3.14802236775780786004e-01 	 2.20415763024427047156e+00 
0.91250 	 5.08493434402276789363e-02 	 3.19248239805542732839e-01 	 2.26051901422475598480e+00 
0.92083 	 5.11580146308759989293e-02 	 3.24163600399601625757e-01 	 2.32182350746964072385e+00 
0.92917 	 5.15140885500901465899e-02 	 3.29201920789873869744e-01 	 2.38998382546502208257e+00 
0.93750 	 5.18873730378946809716e-02 	 3.34543011212658392139e-01 	 2.46717241273249010547e+00 
0.94583 	 5.22320951761152535431e-02 	 3.40348958574464843796e-01 	 2.55730018067965536588e+00 
0.95417 	 5.25781513076538711826e-02 	 3.46596723653874339011e-01 	 2.66382386504563539731e+00 
0.96250 	 5.29258221431468944829e-02 	 3.53482812229091725165e-01 	 2.79467117045540147657e+00 
0.97083 	 5.32789273167335736270e-02 	 3.60931693046577684036e-01 	 2.97065613140791073832e+00 
0.97917 	 5.36559287000742332618e-02 	 3.69440999564274508149e-01 	 3.23769449147542998091e+00 
0.98750 	 5.40405804807219530828e-02 	 3.78876553320810993686e-01 	 3.93533379842150132788e+00 
0.99583 	 5.44598026841059332237e-02 	 3.89719582307057443860e-01 	 3.93429764037761220408e+00 
1.00417 	 5.48586575841415596821e-02 	 4.02282872382242251419e-01 	 3.23435155709188171258e+00 
1.01250 	 5.52431340488545863376e-02 	 4.17651400333834910139e-01 	 2.96553611544000306210e+00 
1.02083 	 5.56489771432774546489e-02 	 4.37008943450332809633e-01 	 2.78792146091872394820e+00 
1.02917 	 5.60490510388450269286e-02 	 4.63443983492711819583e-01 	 2.65440945291344521095e+00 
1.03750 	 5.64877395079116453869e-02 	 5.05683742228204780034e-01 	 2.54567558357035395034e+00 
1.04583 	 5.69107142528470916210e-02 	 6.32289367972005744711e-01 	 2.45375111028873460484e+00 
1.05417 	 5.73729956196662588264e-02 	 5.68080366660059121742e-01 	 2.37432130334261293214e+00 
1.06250 	 5.77936215568564323752e-02 	 4.84791164476998326371e-01 	 2.30358781450141636427e+00 
1.07083 	 5.82359603217353499760e-02 	 4.45301447757443291664e-01 	 2.24068154329184698881e+00 
1.07917 	 5.87211095764235344041e-02 	 4.18291003333055522173e-01 	 2.18240611782013438358e+00 
1.08750 	 5.91930828517851989612e-02 	 3.97431351829917733909e-01 	 2.12933924275633845724e+00 
1.09583 	 5.96641343803069948426e-02 	 3.80221665947524878337e-01 	 2.07959889327056002273e+00 
1.10417 	 6.01371878591848707529e-02 	 3.65692764042680973358e-01 	 2.03332056941400818317e+00 
1.11250 	 6.06686872317682771016e-02 	 3.52847458016118276092e-01 	 1.98903127889416508900e+00 
1.12083 	 6.11787469865327920848e-02 	 3.41313826956311738847e-01 	 1.94780198726396669429e+00 
1.12917 	 6.16775363764063902505e-02 	 3.30973032566171054825e-01 	 1.90878999459725440246e+00 
1.13750 	 6.22256403972737889840e-02 	 3.21385452442251751126e-01 	 1.87124591563498410274e+00 
1.14583 	 6.27718838092325703837e-02 	 3.12497759665793295447e-01 	 1.83516987794272234957e+00 
1.15417 	 6.33369792476369403156e-02 	 3.04236118817297174211e-01 	 1.80138528026876598709e+00 
1.16250 	 6.39225724883817070232e-02 	 2.96642402788183268125e-01 	 1.76833578500455490534e+00 
1.17083 	 6.44962246251691712073e-02 	 2.89347325379427422476e-01 	 1.73665659564187291330e+00 
1.17917 	 6.50752846714600097222e-02 	 2.82466314244051774907e-01 	 1.70602469208167062398e+00 
1.18750 	 6.57028416321083774676e-02 	 2.75983539034058533712e-01 	 1.67630250911206224451e+00 
1.19583 	 6.63128730645174274683e-02 	 2.69667886953843749520e-01 	 1.64799819224993537858e+00 
1.20417 	 6.69842761485785753717e-02 	 2.63696266504267140540e-01 	 1.62008989268464786981e+00 
1.21250 	 6.76686292398101935097e-02 	 2.58121583828652079173e-01 	 1.59229337398958215033e+00 
1.22083 	 6.83702846041991108006e-02 	 2.52649594966045665245e-01 	 1.56614903034761199230e+00 
1.22917 	 6.90768432338760285383e-02 	 2.47318327879275129400e-01 	 1.54118066598863290295e+00 
1.23750 	 6.98298193298990399480e-02 	 2.42245798818039204114e-01 	 1.51638021027582015066e+00 
1.24583 	 7.06122715348606322383e-02 	 2.37260304232827984317e-01 	 1.49193307565123811642e+00 
1.25417 	 7.13716035315099112113e-02 	 2.32584958889085091638e-01 	 1.46812804868669721792e+00 
1.26250 	 7.22088038534195730822e-02 	 2.27951147947246912651e-01 	 1.44511850453136192485e+00 
1.27083 	 7.30847003594094213330e-02 	 2.23496803645960584461e-01 	 1.42208154031155764585e+00 
1.27917 	 7.40120216507423739349e-02 	 2.19154687330883973795e-01 	 1.40036039838990711281e+00 
1.28750 	 7.49629292417276632543e-02 	 2.14954201014671664183e-01 	 1.37865849890520886234e+00 
1.29583 	 7.59589834434433869292e-02 	 2.10856282585626414461e-01 	 1.35774854645217768478e+00 
1.30417 	 7.70449081841190347442e-02 	 2.06901664447210642539e-01 	 1.33718245654530942801e+00 
1.31250 	 7.81646537407739566694e-02 	 2.03102955870086393508e-01 	 1.31693392100275330492e+00 
1.32083 	 7.93528567361844600070e-02 	 1.99303501311030639709e-01 	 1.29733213302430394620e+00 
1.32917 	 8.06141036791313270182e-02 	 1.95582033500573265750e-01 	 1.27720399479005974896e+00 
1.33750 	 8.19893821558176638664e-02 	 1.92035136307959763968e-01 	 1.25836673876366034186e+00 
1.34583 	 8.34385474692601603053e-02 	 1.88544151444237140236e-01 	 1.23930498169354841309e+00 
1.35417 	 8.50796739421415953997e-02 	 1.85158269595295660315e-01 	 1.22109302345015735547e+00 
1.36250 	 8.68049301648613630400e-02 	 1.81848556594945726106e-01 	 1.20305433924436711024e+00 
1.37083 	 8.87456237625099259025e-02 	 1.78617087340760094527e-01 	 1.18559884521416725178e+00 
1.37917 	 9.09286972420420835928e-02 	 1.75390663673238078601e-01 	 1.16777569144857151784e+00 
1.38750 	 9.34342147562531588623e-02 	 1.72321935358435068819e-01 	 1.15089739715914229912e+00 
1.39583 	 9.63307137313935551992e-02 	 1.69274382098951986508e-01 	 1.13365959282646122652e+00 
1.40417 	 9.98092611163176879341e-02 	 1.66314981434820763351e-01 	 1.11754131103870024688e+00 
1.41250 	 1.04152573003523291062e-01 	 1.63395524520225959852e-01 	 1.10105430837679274525e+00 
1.42083 	 1.09952389981681802889e-01 	 1.60528911233377563628e-01 	 1.08470215377380974076e+00 
1.42917 	 1.18627476565441217216e-01 	 1.57728366066735709028e-01 	 1.06895785788844754904e+00 
1.43750 	 1.36587005503627789693e-01 	 1.54968404221128397413e-01 	 1.05356451526477079561e+00 
1.44583 	 1.56521341062518748455e-01 	 1.52278175369192497746e-01 	 1.03864787278943881965e+00 
1.45417 	 1.22379461431393221638e-01 	 1.49644415040343342627e-01 	 1.02338270071024228791e+00 
1.46250 	 1.10253491999140737501e-01 	 1.47104474431122539402e-01 	 1.00851034721701648955e+00 
1.47083 	 1.02505250674343476036e-01 	 1.44585106537539892502e-01 	 9.93619415304163866587e-01 
1.47917 	 9.67220747470406011503e-02 	 1.42122565884010843007e-01 	 9.79865896501819100273e-01 
1.48750 	 9.20314870026784082047e-02 	 1.39694968251485029942e-01 	 9.65556024687590164213e-01 
1.49583 	 8.81081857779443533563e-02 	 1.37360781608326820713e-01 	 9.51993928867233329960e-01 
1.50417 	 8.46368468734469692194e-02 	 1.35011843860308206056e-01 	 9.38316657440201207230e-01 
1.51250 	 8.16132669843224606288e-02 	 1.32702691168636893737e-01 	 9.24488195132179502167e-01 
1.52083 	 7.88413085024826792990e-02 	 1.30465263085403404553e-01 	 9.11519084606447260732e-01 
1.52917 	 7.63182971307194285560e-02 	 1.28253901845632095613e-01 	 8.98167523716598026340e-01 
1.53750 	 7.39841309014091647045e-02 	 1.26121548981326853101e-01 	 8.85729864705772307332e-01 
1.54583 	 7.18487591859550966955e-02 	 1.24003487285334237922e-01 	 8.72811344510118436446e-01 
1.55417 	 6.98054161714851129084e-02 	 1.21897768278735302294e-01 	 8.60341586392748380874e-01 
1.56250 	 6.79219926630513504140e-02 	 1.19860324374507734579e-01 	 8.48222819632173052895e-01 
1.57083 	 6.61301238127550011781e-02 	 1.17797063958680961471e-01 	 8.35896880778125184186e-01 
1.57917 	 6.44279132927185888002e-02 	 1.15823295675036380681e-01 	 8.24229208086571740743e-01 
1.58750 	 6.28236151447226637279e-02 	 1.13885258664550514940e-01 	 8.13021066760189481393e-01 
1.59583 	 6.12815542091266970970e-02 	 1.12030164729088929643e-01 	 8.01258584958908670615e-01 
1.60417 	 5.98188246983609936414e-02 	 1.10144328410049743838e-01 	 7.90127443803780415976e-01 
1.61250 	 5.83970170759435872054e-02 	 1.08318524058760773388e-01 	 7.78802329895131428827e-01 
1.62083 	 5.70442743463184798181e-02 	 1.06521726821316761735e-01 	 7.67607326942696177596e-01 
1.62917 	 5.57336653084645264333e-02 	 1.04738487499870580599e-01 	 7.56735635079710977635e-01 
1.63750 	 5.44807187064042103275e-02 	 1.02981332237356171255e-01 	 7.45954720673992599522e-01 
1.64583 	 5.32830162343884208842e-02 	 1.01285614469779447488e-01 	 7.35247267873594290144e-01 
1.65417 	 5.21053280661679177332e-02 	 9.96174148592633285082e-02 	 7.25236288330598388718e-01 
1.66250 	 5.09715367727119131325e-02 	 9.79684638070969504575e-02 	 7.15144954630940077323e-01 
1.67083 	 4.98694481276473894349e-02 	 9.63232041875311528756e-02 	 7.04682547335109599196e-01 
1.67917 	 4.88169120244772644646e-02 	 9.47449832816696924098e-02 	 6.94709641830511870353e-01 
1.68750 	 4.77778524638403853664e-02 	 9.32068402513552551891e-02 	 6.85105231532146863316e-01 
1.69583 	 4.67855201138137749561e-02 	 9.16435043742909460907e-02 	 6.75343804688293469773e-01 
1.70417 	 4.58180134178952994106e-02 	 9.01409851027369229959e-02 	 6.65723862021466161742e-01 
1.71250 	 4.48680968942976529656e-02 	 8.86573772171652813023e-02 	 6.56367644144962070207e-01 
1.72083 	 4.39600603360603692238e-02 	 8.72284579301545182073e-02 	 6.47186069711208289412e-01 
1.72917 	 4.30691110307714411509e-02 	 8.57823245545626805741e-02 	 6.38005151437080364474e-01 
1.73750 	 4.21848953057848627402e-02 	 8.43802023465887451881e-02 	 6.28946971229702223027e-01 
1.74583 	 4.13309028640041556391e-02 	 8.29898798443908514155e-02 	 6.20343200844711395447e-01 
1.75417 	 4.05198912457409507470e-02 	 8.16465697471180501532e-02 	 6.11675547118706308680e-01 
1.76250 	 3.97152492491417222209e-02 	 8.03214127972644853504e-02 	 6.02995520555243191829e-01 
1.77083 	 3.89235306821678964107e-02 	 7.90016064711500931583e-02 	 5.94426255837322337072e-01 
1.77917 	 3.81586746140531660187e-02 	 7.77092663931784749520e-02 	 5.86178978063470745852e-01 
1.78750 	 3.74131454793695458760e-02 	 7.64529675255078283724e-02 	 5.77932989908531480339e-01 
1.79583 	 3.66835938984925030715e-02 	 7.51962170138285590504e-02 	 5.69944860687955578982e-01 
1.80417 	 3.59645672209951694498e-02 	 7.39926080379586653679e-02 	 5.61838923758570807365e-01 
1.81250 	 3.52766928357811579420e-02 	 7.27772982378350752342e-02 	 5.53899305468594893576e-01 
1.82083 	 3.45830131777113553015e-02 	 7.16080159657766779358e-02 	 5.46113952105563016381e-01 
1.82917 	 3.39335675401796280082e-02 	 7.04553670540427473545e-02 	 5.38446993538586382577e-01 
1.83750 	 3.32772492618493842542e-02 	 6.92843570720238638438e-02 	 5.30788184079571512264e-01 
1.84583 	 3.26462525466610711811e-02 	 6.81838689770629113873e-02 	 5.23220612786774785796e-01 
1.85417 	 3.20263779231744552534e-02 	 6.70448872525687411539e-02 	 5.15772082829861644448e-01 
1.86250 	 3.14138067225305309127e-02 	 6.60094191341587116506e-02 	 5.08441873364118945844e-01 
1.87083 	 3.08164125714870049122e-02 	 6.49215923386103205273e-02 	 5.01491067654745825699e-01 
1.87917 	 3.02300828938171159410e-02 	 6.38599148531595328659e-02 	 4.94678200279073276846e-01 
1.88750 	 2.96606690774567707813e-02 	 6.28566996001148348139e-02 	 4.87568535608193021069e-01 
1.89583 	 2.91092805438667272255e-02 	 6.18260446718483028250e-02 	 4.80762473785604937948e-01 
1.90417 	 2.85526404177395137785e-02 	 6.08320978658033612030e-02 	 4.74081046063342781416e-01 
1.91250 	 2.80278709111286515598e-02 	 5.98561530257679802469e-02 	 4.67467130005345010701e-01 
1.92083 	 2.75025956473399016411e-02 	 5.88726972659875599780e-02 	 4.60775482295199934057e-01 
1.92917 	 2.69869772979264219148e-02 	 5.79285756482774000231e-02 	 4.54453840911883677478e-01 
1.93750 	 2.64743914348156486605e-02 	 5.70040141913805767371e-02 	 4.48067182834650190593e-01 
1.94583 	 2.59898747725454994095e-02 	 5.60822616007801283411e-02 	 4.41860762628625891590e-01 
1.95417 	 2.55097620512046326102e-02 	 5.51882266145419797532e-02 	 4.35554745357400741046e-01 
1.96250 	 2.50315754030858983459e-02 	 5.42978777459763445323e-02 	 4.29612823486291317554e-01 
1.97083 	 2.45750596486267111618e-02 	 5.34413631143693321213e-02 	 4.23228280733426498461e-01 
1.97917 	 2.41183868140544786784e-02 	 5.25861036764190895032e-02 	 4.17374547974109444404e-01 
1.98750 	 2.36734166380842478428e-02 	 5.17444360009819068202e-02 	 4.11620944718847803223e-01 
1.99583 	 2.32446409934429533417e-02 	 5.08842871060342163969e-02 	 4.05894289202013647255e-01 
2.00417 	 2.08974823388612707120e+00 	 4.04952054916159820408e+00 	 2.85262559373369803950e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */
double z_focus, x_focus, b_rad, w_rad;


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */ /*ID_EDIT_4_1*/
mus         = 23.8888943003376;  /* cm^-1 */ /*ID_EDIT_4_2*/
g           = 0.9;  /*ID_EDIT_5*/
nt          = 1.36;  /*ID_EDIT_4_3*/
Nphotons    = 100000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */ /*ID_EDIT_6_FIXED*/
y = y_start; /*ID_EDIT_6_DEL*/
z = z_start - 120 * dr; /*ID_EDIT_6_DEL*/
/*ID_EDIT_6_DEL*/
/* Randomly set photon trajectory to yield an isotropic source. */ /*ID_EDIT_6_DEL*/
costheta = 2.0*RandomNum - 1.0; /*ID_EDIT_6_DEL*/
sintheta = sqrt(1.0 - costheta*costheta);	/* sintheta is always positive */ /*ID_EDIT_6_DEL*/
psi = 2.0*PI*RandomNum; /*ID_EDIT_6_DEL*/
ux = sintheta*cos(psi); /*ID_EDIT_6_DEL*/
uy = sintheta*sin(psi); /*ID_EDIT_6_DEL*/
uz = costheta; /*ID_EDIT_6_DEL*/


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

printf("saving cube into file...\n");
double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);
printf("saving cube completed\n");

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);