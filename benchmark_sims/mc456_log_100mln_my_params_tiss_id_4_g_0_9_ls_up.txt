time elapsed: 3672.3744 seconds

=================================

sim results:

number of photons = 100000000
overflow: 8.90801677959983348846e+07
sum: 1.09195860213845521212e+07
sum: 1.09198322040016651154e+07
avg: 1.09195860213845516440e-01
perc_in: 10.92

number of photons = 100000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 3.62378544911272056431e-03 	 1.62291999344200882360e-01 	 7.07334288584946235812e-02 
0.01250 	 2.69972001489482676256e-03 	 1.61619874326013351906e-01 	 7.07580802682370307854e-02 
0.02083 	 2.61377671057512472874e-03 	 1.61215287041009708302e-01 	 7.08072306119145594705e-02 
0.02917 	 2.56860628635963410965e-03 	 1.61242391824421404944e-01 	 7.08607824168611677429e-02 
0.03750 	 2.57820816991380635103e-03 	 1.61178840345555129954e-01 	 7.08683631616471160219e-02 
0.04583 	 2.53307423291956618910e-03 	 1.61305608919821902303e-01 	 7.09426202338809819281e-02 
0.05417 	 2.51434309301773115108e-03 	 1.61691393556260831765e-01 	 7.10633521862095857147e-02 
0.06250 	 2.49057083199465210260e-03 	 1.61845753818920051748e-01 	 7.11205720444304800854e-02 
0.07083 	 2.53607305043350352708e-03 	 1.61679243651362769540e-01 	 7.12310578334415661628e-02 
0.07917 	 2.52169565716501469302e-03 	 1.61887353409222611855e-01 	 7.13482005113574291322e-02 
0.08750 	 2.57028171200553113770e-03 	 1.62030330888862317273e-01 	 7.14904771565242069808e-02 
0.09583 	 2.56920938797125476480e-03 	 1.62078132595973589680e-01 	 7.16482362030711472656e-02 
0.10417 	 2.54232900615821225121e-03 	 1.62233753580272282990e-01 	 7.18414616435267272543e-02 
0.11250 	 2.57205201673960494671e-03 	 1.62563332127717480313e-01 	 7.20107253393276053322e-02 
0.12083 	 2.54690655867715037147e-03 	 1.62871870269691049193e-01 	 7.22076227996465425107e-02 
0.12917 	 2.57908599306671095300e-03 	 1.63075657900943804535e-01 	 7.24517442371025305325e-02 
0.13750 	 2.55804293850624793125e-03 	 1.63319366328108867004e-01 	 7.26565249457113288001e-02 
0.14583 	 2.56334229419053014759e-03 	 1.63540528250557537504e-01 	 7.29224627342661968488e-02 
0.15417 	 2.56413685116602335992e-03 	 1.63870272161876218142e-01 	 7.31255131165485794398e-02 
0.16250 	 2.58719582200203288003e-03 	 1.64167081882096749235e-01 	 7.34265822104517434932e-02 
0.17083 	 2.57190015484920920380e-03 	 1.64647688560377897238e-01 	 7.37140816034271700863e-02 
0.17917 	 2.59202360531889672637e-03 	 1.64998819914869893077e-01 	 7.39814622578595926239e-02 
0.18750 	 2.58943921830129958339e-03 	 1.65352196473035478741e-01 	 7.43563274711950134011e-02 
0.19583 	 2.58817821222493598191e-03 	 1.65689528801251095835e-01 	 7.46615628702689548835e-02 
0.20417 	 2.59696372304127906863e-03 	 1.66164809064228619073e-01 	 7.49882968681067907379e-02 
0.21250 	 2.59964470659926729160e-03 	 1.66539390165714562553e-01 	 7.53515417274597254504e-02 
0.22083 	 2.59916393506341497285e-03 	 1.66875315834774773371e-01 	 7.57773746285747007434e-02 
0.22917 	 2.60087808631082615177e-03 	 1.67402102129432850397e-01 	 7.61526835471326157823e-02 
0.23750 	 2.61352840570094674053e-03 	 1.67835512463362951374e-01 	 7.65612404218932035560e-02 
0.24583 	 2.62724220608188041223e-03 	 1.68337648769030123752e-01 	 7.69581396545457735447e-02 
0.25417 	 2.62776206929844031654e-03 	 1.68874385209867333701e-01 	 7.73784563548578496750e-02 
0.26250 	 2.63280880136189301272e-03 	 1.69402664322987145384e-01 	 7.78593669257475889944e-02 
0.27083 	 2.63291554941480401147e-03 	 1.69828640810784081694e-01 	 7.83230414997385243625e-02 
0.27917 	 2.64635189162445516944e-03 	 1.70490884775759354852e-01 	 7.88237221635003371123e-02 
0.28750 	 2.65073898606983443180e-03 	 1.71017065561088504877e-01 	 7.93078450893191372328e-02 
0.29583 	 2.64410699494953401953e-03 	 1.71662527677482051880e-01 	 7.97704227357456385761e-02 
0.30417 	 2.65804396776337780589e-03 	 1.72200629950471528762e-01 	 8.02852828376323657267e-02 
0.31250 	 2.65972544060727976445e-03 	 1.72712582952770754563e-01 	 8.08605485363443204916e-02 
0.32083 	 2.66708476531499118906e-03 	 1.73429296877359362394e-01 	 8.14225730495319321989e-02 
0.32917 	 2.66358773804223868120e-03 	 1.74244738129585963193e-01 	 8.20019634685233006488e-02 
0.33750 	 2.68480823199760635506e-03 	 1.74893225887048281431e-01 	 8.26333461271296781936e-02 
0.34583 	 2.68105650511107126283e-03 	 1.75594748648838477889e-01 	 8.32807099634163827684e-02 
0.35417 	 2.69312772819231896482e-03 	 1.76274636122817851547e-01 	 8.39096490221343804805e-02 
0.36250 	 2.69509176270199242789e-03 	 1.77086158238971086432e-01 	 8.44916516967540720540e-02 
0.37083 	 2.71031256540120316437e-03 	 1.77789419742724469353e-01 	 8.52221941520488329713e-02 
0.37917 	 2.71942090925017618958e-03 	 1.78624740660397518521e-01 	 8.58798359851484505167e-02 
0.38750 	 2.72027966658852171991e-03 	 1.79369733902916383972e-01 	 8.66456719596951363549e-02 
0.39583 	 2.72874333870644532329e-03 	 1.80267475861189435671e-01 	 8.73361121049460870092e-02 
0.40417 	 2.74187701771819343499e-03 	 1.81141087716529092244e-01 	 8.80852703972463541016e-02 
0.41250 	 2.75044514734515540763e-03 	 1.82020978764238422487e-01 	 8.87699392391385205814e-02 
0.42083 	 2.75985417979376273026e-03 	 1.82901051752644872028e-01 	 8.95850505640447408728e-02 
0.42917 	 2.76887121908229311140e-03 	 1.83871410039498500710e-01 	 9.03525407003301916919e-02 
0.43750 	 2.77675489394365627993e-03 	 1.84714533181041473675e-01 	 9.11315977263857518453e-02 
0.44583 	 2.78080883467841238899e-03 	 1.85631260317983742825e-01 	 9.19484476203157319318e-02 
0.45417 	 2.79156664963522115064e-03 	 1.86635724818355608345e-01 	 9.28020891815757448251e-02 
0.46250 	 2.80860470503079039453e-03 	 1.87677832460734911324e-01 	 9.36461136257969867236e-02 
0.47083 	 2.81036160922636460424e-03 	 1.88638562214998445343e-01 	 9.45343290816589021386e-02 
0.47917 	 2.82970209659601191696e-03 	 1.89666451401550417710e-01 	 9.54309634443453874697e-02 
0.48750 	 2.83583920265627039206e-03 	 1.90714431661165584320e-01 	 9.63715897914057956219e-02 
0.49583 	 2.84817352576054345914e-03 	 1.91822359007050302626e-01 	 9.73271593045169081115e-02 
0.50417 	 2.85621823183684897529e-03 	 1.92961008784339305144e-01 	 9.82698547795035626251e-02 
0.51250 	 2.87309802587244452268e-03 	 1.94218715764977678528e-01 	 9.92672631181639592013e-02 
0.52083 	 2.87718929694036123709e-03 	 1.95285492390477904978e-01 	 1.00291671727377823542e-01 
0.52917 	 2.89366414512113407850e-03 	 1.96472453625867654603e-01 	 1.01200202653964538291e-01 
0.53750 	 2.90198286507411216950e-03 	 1.97694198142429333753e-01 	 1.02268725843300212208e-01 
0.54583 	 2.91758200588978274664e-03 	 1.98931472603147335709e-01 	 1.03338132707743973748e-01 
0.55417 	 2.92785823682221351197e-03 	 2.00210846388436614074e-01 	 1.04410479123026089798e-01 
0.56250 	 2.94675305410924646965e-03 	 2.01572687696303209925e-01 	 1.05520263273215703093e-01 
0.57083 	 2.96039030994355153656e-03 	 2.02819105102051866485e-01 	 1.06647677712992425270e-01 
0.57917 	 2.96716181319870830196e-03 	 2.04176773168400244041e-01 	 1.07747387067857108844e-01 
0.58750 	 2.98156340375774295964e-03 	 2.05590464621501656239e-01 	 1.08927987365269457465e-01 
0.59583 	 2.99273743147688382413e-03 	 2.06976819837962761062e-01 	 1.10123606728021850021e-01 
0.60417 	 3.00995224314664407833e-03 	 2.08481665479741729019e-01 	 1.11338384857284380947e-01 
0.61250 	 3.02646749716359558108e-03 	 2.10053578668416479625e-01 	 1.12556493035946725279e-01 
0.62083 	 3.04332576660305484384e-03 	 2.11490075052364834285e-01 	 1.13759807046523872542e-01 
0.62917 	 3.05696460748824776210e-03 	 2.13066119164070560954e-01 	 1.15077795009172381691e-01 
0.63750 	 3.06803843504830199909e-03 	 2.14703111686669473324e-01 	 1.16358975589059485123e-01 
0.64583 	 3.08694052321265705041e-03 	 2.16232154459004760616e-01 	 1.17624875830505806751e-01 
0.65417 	 3.10024633709341402438e-03 	 2.18000260080867647172e-01 	 1.19015340546388556642e-01 
0.66250 	 3.11559563398259957434e-03 	 2.19653089825958852677e-01 	 1.20367379012342498590e-01 
0.67083 	 3.12972610485486154794e-03 	 2.21459635744538724245e-01 	 1.21782844070524295943e-01 
0.67917 	 3.14217938164649233934e-03 	 2.23227615811643548271e-01 	 1.23168101593904705249e-01 
0.68750 	 3.16073872370758362019e-03 	 2.25003720337883322822e-01 	 1.24618453582696783744e-01 
0.69583 	 3.17944438258243797235e-03 	 2.26982178456884453599e-01 	 1.26072447927262826228e-01 
0.70417 	 3.18940461841728164355e-03 	 2.28946475810740318613e-01 	 1.27594108415611418028e-01 
0.71250 	 3.20862844649241621756e-03 	 2.30874993337980310981e-01 	 1.29102487200699195258e-01 
0.72083 	 3.22743734389118776262e-03 	 2.32968605957769664405e-01 	 1.30609031878293313511e-01 
0.72917 	 3.24045924921388282455e-03 	 2.35073965814793145457e-01 	 1.32248913294670367158e-01 
0.73750 	 3.25881868828478866995e-03 	 2.37206448464045427382e-01 	 1.33802329088090143916e-01 
0.74583 	 3.27801069791514802093e-03 	 2.39481321233080773903e-01 	 1.35472952326503026654e-01 
0.75417 	 3.29748569764560161763e-03 	 2.41776469475219024652e-01 	 1.37037381272966912737e-01 
0.76250 	 3.31606135006570898124e-03 	 2.44171463656476017690e-01 	 1.38755119398778353768e-01 
0.77083 	 3.33257822522792972533e-03 	 2.46598858663251263579e-01 	 1.40432670141593107793e-01 
0.77917 	 3.34864813339836708134e-03 	 2.49098486749359471215e-01 	 1.42161688466960450805e-01 
0.78750 	 3.37228806944431247494e-03 	 2.51763855996660734782e-01 	 1.43886714732698706154e-01 
0.79583 	 3.38530755095410498118e-03 	 2.54406516087897494049e-01 	 1.45761291529198200312e-01 
0.80417 	 3.40611416145457672131e-03 	 2.57257851647554713903e-01 	 1.47529879454984580445e-01 
0.81250 	 3.42807448489403348429e-03 	 2.60125771354365875609e-01 	 1.49407065891834223148e-01 
0.82083 	 3.44615970253902984335e-03 	 2.63247608399278243407e-01 	 1.51185168753809107134e-01 
0.82917 	 3.46159708405041057974e-03 	 2.66367244953893467230e-01 	 1.53157377225398766418e-01 
0.83750 	 3.48574340190791918601e-03 	 2.69751509144650514216e-01 	 1.55024734793208662786e-01 
0.84583 	 3.50965570362941426188e-03 	 2.73190706617718381821e-01 	 1.57066632645799009182e-01 
0.85417 	 3.52819343668012803603e-03 	 2.76761453284299629996e-01 	 1.58995667359268150198e-01 
0.86250 	 3.54861752664952434175e-03 	 2.80596790067301038452e-01 	 1.61017102357093960796e-01 
0.87083 	 3.57294065770030581930e-03 	 2.84591075973036622404e-01 	 1.63062345354834242750e-01 
0.87917 	 3.59367509487218536254e-03 	 2.88905004057847414334e-01 	 1.65127249392490071944e-01 
0.88750 	 3.61368475785037168713e-03 	 2.93411874529059257810e-01 	 1.67335557009631791248e-01 
0.89583 	 3.63526116850264703964e-03 	 2.98212369857625558822e-01 	 1.69449441709543652257e-01 
0.90417 	 3.65958592112978348121e-03 	 3.03339902760285273775e-01 	 1.71736929266440269126e-01 
0.91250 	 3.68580551198649259553e-03 	 3.08815598092414100861e-01 	 1.73899685029801798208e-01 
0.92083 	 3.71155204055723282608e-03 	 3.14819734085844515903e-01 	 1.76148904447915061189e-01 
0.92917 	 3.73261814909619854194e-03 	 3.21171251207477137513e-01 	 1.78345099893795211443e-01 
0.93750 	 3.75538796804356349995e-03 	 3.28245924816161938065e-01 	 1.80881845723226991618e-01 
0.94583 	 3.78081926233003696655e-03 	 3.36019286476820000509e-01 	 1.83227657403835841876e-01 
0.95417 	 3.80675534239058440886e-03 	 3.44561758328075340430e-01 	 1.85559803166751857706e-01 
0.96250 	 3.83056288210764520411e-03 	 3.54375926681639252802e-01 	 1.88040573504910796254e-01 
0.97083 	 3.85831179067097759447e-03 	 3.65322216108007802315e-01 	 1.90528424522637379601e-01 
0.97917 	 3.88125024993593798275e-03 	 3.77997305021656349044e-01 	 1.93040551582622399440e-01 
0.98750 	 3.90735007268698877891e-03 	 3.92985942369370733207e-01 	 1.95495921749567286296e-01 
0.99583 	 3.93244946981163509547e-03 	 4.11073019813048279314e-01 	 1.98214889233741448082e-01 
1.00417 	 3.96252297582564902423e-03 	 4.33401544327356225139e-01 	 2.00757450633019945974e-01 
1.01250 	 3.98705343832490757133e-03 	 4.62625001596458640396e-01 	 2.03435769158413354285e-01 
1.02083 	 4.01480903072024084693e-03 	 5.02849800326876650303e-01 	 2.06227198136950701235e-01 
1.02917 	 4.04227246629877429857e-03 	 5.65060440855188805820e-01 	 2.08882045038345981469e-01 
1.03750 	 4.07118754188533736593e-03 	 6.84018468925390310531e-01 	 2.11745279030196381642e-01 
1.04583 	 4.09794490752845262660e-03 	 1.98734326922972615037e+00 	 2.14564563852424894375e-01 
1.05417 	 4.13111673048661195290e-03 	 9.25777487640273788472e-01 	 2.17487571754534564361e-01 
1.06250 	 4.16001525910467129243e-03 	 6.32563689871408652010e-01 	 2.20376527514733189239e-01 
1.07083 	 4.18842973300121747260e-03 	 5.33148353003482733392e-01 	 2.23371694634713513494e-01 
1.07917 	 4.21757008163416331759e-03 	 4.75995326408546304275e-01 	 2.26424820402138932129e-01 
1.08750 	 4.25098604199934150538e-03 	 4.36663947606522606648e-01 	 2.29561073669570431255e-01 
1.09583 	 4.28040978565772788772e-03 	 4.07178820183117240461e-01 	 2.32667379353398789954e-01 
1.10417 	 4.30918038137882535021e-03 	 3.83967831278176852106e-01 	 2.35821687879051222758e-01 
1.11250 	 4.34167566939222798056e-03 	 3.64559239642516130786e-01 	 2.39009136464563204383e-01 
1.12083 	 4.37454154005545870626e-03 	 3.48266391782047879389e-01 	 2.42282904444095337215e-01 
1.12917 	 4.40522573001572367857e-03 	 3.34053083721176702348e-01 	 2.45530832047436142762e-01 
1.13750 	 4.43724392128077172598e-03 	 3.21517945357643997184e-01 	 2.48874657909439300774e-01 
1.14583 	 4.47106833792942567896e-03 	 3.10258096722511367282e-01 	 2.52249584561320572274e-01 
1.15417 	 4.50412878820575027228e-03 	 3.00045560166545322023e-01 	 2.55926375772484615556e-01 
1.16250 	 4.53724379070567004207e-03 	 2.90828941244281047318e-01 	 2.59309406430179967273e-01 
1.17083 	 4.57192819425881937651e-03 	 2.82177035548934418419e-01 	 2.62867343829388255827e-01 
1.17917 	 4.60506342379170957591e-03 	 2.74120763023736446762e-01 	 2.66465220305417249680e-01 
1.18750 	 4.64389898607749963821e-03 	 2.66677967996513110016e-01 	 2.70191356074942101717e-01 
1.19583 	 4.67875132421559022933e-03 	 2.59741549611798794306e-01 	 2.73849502273773304228e-01 
1.20417 	 4.71577558180502447172e-03 	 2.53204422096062253811e-01 	 2.77689804790315075689e-01 
1.21250 	 4.75021109103240107840e-03 	 2.46954929042381476911e-01 	 2.81298258371166509662e-01 
1.22083 	 4.78497280827595850017e-03 	 2.40979141714388528372e-01 	 2.85371216090998858217e-01 
1.22917 	 4.82229921980553352667e-03 	 2.35395555793357164065e-01 	 2.89206815232410430205e-01 
1.23750 	 4.85978057302383949223e-03 	 2.30068368515396415308e-01 	 2.93175213164536763166e-01 
1.24583 	 4.90321415752611230315e-03 	 2.24942810930538417136e-01 	 2.97172545948844568642e-01 
1.25417 	 4.94018113237251147579e-03 	 2.20063854236071221315e-01 	 3.01262925416774962617e-01 
1.26250 	 4.98346820977498081856e-03 	 2.15409252608318391164e-01 	 3.05554013859269002484e-01 
1.27083 	 5.02070380896364222567e-03 	 2.10766998481446699021e-01 	 3.09673093176651925695e-01 
1.27917 	 5.05737569671902212343e-03 	 2.06451075424013863469e-01 	 3.13976756157817005199e-01 
1.28750 	 5.10002473912750040053e-03 	 2.02207713869437810672e-01 	 3.18511875524957688288e-01 
1.29583 	 5.14056094387684622132e-03 	 1.98102960437425451579e-01 	 3.22785809267945755785e-01 
1.30417 	 5.18449372683002247114e-03 	 1.94199695818115997126e-01 	 3.27224001614250858960e-01 
1.31250 	 5.22133168161026135073e-03 	 1.90370250365031329354e-01 	 3.31791227123570509061e-01 
1.32083 	 5.26804997731320119592e-03 	 1.86643759063728903458e-01 	 3.36507419154774278791e-01 
1.32917 	 5.30938249321231264810e-03 	 1.83086122428671754792e-01 	 3.41098147072685597969e-01 
1.33750 	 5.35470843761070691008e-03 	 1.79479338164704377290e-01 	 3.45933433635682185958e-01 
1.34583 	 5.39933297654638776758e-03 	 1.76095469648529262541e-01 	 3.50758495957144977861e-01 
1.35417 	 5.44548457851599162355e-03 	 1.72824643537264038828e-01 	 3.55646214923249548434e-01 
1.36250 	 5.49232122689707544239e-03 	 1.69616468489959093535e-01 	 3.60630726694684156097e-01 
1.37083 	 5.53678054944658441100e-03 	 1.66470516139823498936e-01 	 3.65771074499426307458e-01 
1.37917 	 5.58382706405044677844e-03 	 1.63438547696397262765e-01 	 3.70778824698875186794e-01 
1.38750 	 5.63049212358528259476e-03 	 1.60418844284999528860e-01 	 3.76011772279886635761e-01 
1.39583 	 5.67721325582168714896e-03 	 1.57513406888757950819e-01 	 3.81347630381948021761e-01 
1.40417 	 5.72542909031844866191e-03 	 1.54690999695322128904e-01 	 3.86577420779451785826e-01 
1.41250 	 5.77508089011657347461e-03 	 1.51926779036690606794e-01 	 3.91925088351819828070e-01 
1.42083 	 5.82389354363710854551e-03 	 1.49202536265305302221e-01 	 3.97482325386325607841e-01 
1.42917 	 5.87176608824984628404e-03 	 1.46552897684633504083e-01 	 4.02784882431659219115e-01 
1.43750 	 5.92394897650396542316e-03 	 1.43973701960283528845e-01 	 4.08597251418663265365e-01 
1.44583 	 5.97352670891196195491e-03 	 1.41424570443364344685e-01 	 4.14272423442079595901e-01 
1.45417 	 6.02344210417571704341e-03 	 1.38972034619377404763e-01 	 4.19904524791479771828e-01 
1.46250 	 6.07505781050054430997e-03 	 1.36516228927944488492e-01 	 4.26036202046069290006e-01 
1.47083 	 6.12883533073786592599e-03 	 1.34124658173329414090e-01 	 4.31903483306161961597e-01 
1.47917 	 6.18192581642776003981e-03 	 1.31815905974824232327e-01 	 4.38143554451620065304e-01 
1.48750 	 6.24094340320338787642e-03 	 1.29523009150731976957e-01 	 4.44188678226131117288e-01 
1.49583 	 6.29667446355901359173e-03 	 1.27288369945343149414e-01 	 4.50329962127049288068e-01 
1.50417 	 6.35163511481573982154e-03 	 1.25100884430579067930e-01 	 4.56864482770850011129e-01 
1.51250 	 6.40401479562848884725e-03 	 1.22978349993287730535e-01 	 4.63084564467085846307e-01 
1.52083 	 6.45986151822686236607e-03 	 1.20860804258090454022e-01 	 4.69794935878758812553e-01 
1.52917 	 6.51664334920840949972e-03 	 1.18815070993224372597e-01 	 4.76270632868189658371e-01 
1.53750 	 6.57496447075170582786e-03 	 1.16761944531408118353e-01 	 4.82940140073303381119e-01 
1.54583 	 6.63556739170613300860e-03 	 1.14822290545769103987e-01 	 4.90171913173075679548e-01 
1.55417 	 6.69240746701326143925e-03 	 1.12889156992904929333e-01 	 4.97135692304331133773e-01 
1.56250 	 6.75261973651866773821e-03 	 1.10949317969560104502e-01 	 5.03942450493838345338e-01 
1.57083 	 6.81242451231039124193e-03 	 1.09094030496692889765e-01 	 5.11404120291209296489e-01 
1.57917 	 6.87292918733740931803e-03 	 1.07258864814652146724e-01 	 5.18511945221438952380e-01 
1.58750 	 6.93115419030354736052e-03 	 1.05475693547668114558e-01 	 5.26016584937588294046e-01 
1.59583 	 7.00069165554843744065e-03 	 1.03718361156712637894e-01 	 5.33411651146561860415e-01 
1.60417 	 7.06759729441393865640e-03 	 1.01942419290449573510e-01 	 5.40990186511070780817e-01 
1.61250 	 7.12770784609912007312e-03 	 1.00262553025215403468e-01 	 5.48836485540367124969e-01 
1.62083 	 7.19078888589318263730e-03 	 9.85585689789634372682e-02 	 5.56579932495833262784e-01 
1.62917 	 7.25968255519646513130e-03 	 9.69606857429236579371e-02 	 5.64645349520802475318e-01 
1.63750 	 7.32593440116512204657e-03 	 9.53505826040609710814e-02 	 5.72852701568285715972e-01 
1.64583 	 7.39444147785885824709e-03 	 9.37452714274969317598e-02 	 5.80953910743791102078e-01 
1.65417 	 7.45696822176018705303e-03 	 9.21851663165184492810e-02 	 5.89372602169947912287e-01 
1.66250 	 7.52700087856669145664e-03 	 9.06658204582721782838e-02 	 5.97828880709812326977e-01 
1.67083 	 7.60310541607211315407e-03 	 8.91643821281393883504e-02 	 6.06150564928945256860e-01 
1.67917 	 7.66702191049052714927e-03 	 8.76783523186701330143e-02 	 6.14964230420841140301e-01 
1.68750 	 7.74467131626390727084e-03 	 8.62401062562642428677e-02 	 6.24225590630961391092e-01 
1.69583 	 7.81087560851396415368e-03 	 8.48233362901465171024e-02 	 6.33162588797940739660e-01 
1.70417 	 7.88564897255959740274e-03 	 8.34422510066754746783e-02 	 6.42219031005847873494e-01 
1.71250 	 7.96389133194367986046e-03 	 8.20642079250952782843e-02 	 6.51850527384284061938e-01 
1.72083 	 8.03909771554012220207e-03 	 8.07016299622005106595e-02 	 6.61518388275540880628e-01 
1.72917 	 8.11320974459006118151e-03 	 7.93753465950583214639e-02 	 6.71034071063175252547e-01 
1.73750 	 8.19260451740545792010e-03 	 7.80575953433016583860e-02 	 6.81129179923003702513e-01 
1.74583 	 8.26869697654531582431e-03 	 7.67841006177994861437e-02 	 6.90834759977758561256e-01 
1.75417 	 8.34851803686239950231e-03 	 7.55041138668492012309e-02 	 7.01614930902626832143e-01 
1.76250 	 8.42905324705436713451e-03 	 7.42653104580434098025e-02 	 7.11803116869778373932e-01 
1.77083 	 8.51101992352752169391e-03 	 7.30754078644076515703e-02 	 7.22541952542005705418e-01 
1.77917 	 8.58856074211724641876e-03 	 7.18632888736811803465e-02 	 7.33460173970790663134e-01 
1.78750 	 8.67511570911793511440e-03 	 7.06881347320810343726e-02 	 7.44323587568844979856e-01 
1.79583 	 8.75527607477464241137e-03 	 6.95271575561198229565e-02 	 7.55694922801459445516e-01 
1.80417 	 8.84047789058270590268e-03 	 6.84157066012041625847e-02 	 7.67449876256305008049e-01 
1.81250 	 8.92767978950854620979e-03 	 6.73078610579666281044e-02 	 7.79294041848274998685e-01 
1.82083 	 9.01322006862552080331e-03 	 6.62275888687604702421e-02 	 7.91504156974423445092e-01 
1.82917 	 9.10416748092746953847e-03 	 6.51221240971997655800e-02 	 8.03948223307300979812e-01 
1.83750 	 9.19428866258594108818e-03 	 6.40835612159965234413e-02 	 8.16553119387171122412e-01 
1.84583 	 9.28737406699709812374e-03 	 6.30412466383514502599e-02 	 8.29590819176533988966e-01 
1.85417 	 9.37530502577867304315e-03 	 6.20181580608555882428e-02 	 8.43010010886063865243e-01 
1.86250 	 9.46378620641550628856e-03 	 6.10141777131656473654e-02 	 8.56703639089007484841e-01 
1.87083 	 9.56293004184507848542e-03 	 6.00410034099067776991e-02 	 8.71003029551960072929e-01 
1.87917 	 9.66072893270575848435e-03 	 5.90425556843578447364e-02 	 8.85281640128305569171e-01 
1.88750 	 9.75475741378848890117e-03 	 5.81073048472943859410e-02 	 9.00374887445436811184e-01 
1.89583 	 9.85865280505895773266e-03 	 5.71480957108559048385e-02 	 9.15929232193060438583e-01 
1.90417 	 9.95644467148929825095e-03 	 5.62179709874216226861e-02 	 9.32082195647047084819e-01 
1.91250 	 1.00533564166037578391e-02 	 5.53307888749561271879e-02 	 9.48098805629284280272e-01 
1.92083 	 1.01593645523795107766e-02 	 5.44489274401453240970e-02 	 9.66014431261908002035e-01 
1.92917 	 1.02657149837385129609e-02 	 5.35603794255897353027e-02 	 9.83867794853684696221e-01 
1.93750 	 1.03691133668172823928e-02 	 5.27069308190792479296e-02 	 1.00275241832682393550e+00 
1.94583 	 1.04739634844107469547e-02 	 5.18617516557199134675e-02 	 1.02307245530030965774e+00 
1.95417 	 1.05847817593474665537e-02 	 5.10166412975575425670e-02 	 1.04414928217831759483e+00 
1.96250 	 1.07006030198333254577e-02 	 5.01947295444486046856e-02 	 1.06709161197156632284e+00 
1.97083 	 1.08068299374090934922e-02 	 4.93697461566341214145e-02 	 1.09221826225239948549e+00 
1.97917 	 1.09237358303516350622e-02 	 4.86016360671799388382e-02 	 1.12016367290676521762e+00 
1.98750 	 1.10411031775331010957e-02 	 4.78009623283712076214e-02 	 1.15448967569177995962e+00 
1.99583 	 1.11604249967752859607e-02 	 4.70393463083903159982e-02 	 2.20320117323357411721e+00 
2.00417 	 5.87016959557548112514e+00 	 3.74126065927537743150e+00 	 2.47706815120092898042e+02 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */
double z_focus, x_focus, b_rad, w_rad;


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */ /*ID_EDIT_4_1*/
mus         = 23.8888943003376;  /* cm^-1 */ /*ID_EDIT_4_2*/
g           = 0.9;  /*ID_EDIT_5*/
nt          = 1.36;  /*ID_EDIT_4_3*/
Nphotons    = 100000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */ /*ID_EDIT_6_FIXED*/
y = y_start; /*ID_EDIT_6_DEL*/
z = z_start; /*ID_EDIT_6_DEL*/
/*ID_EDIT_6_DEL*/
/* source - vartical up [0,0,1] */ /*ID_EDIT_6_DEL*/
ux = 0; /*ID_EDIT_6_DEL*/
uy = 0; /*ID_EDIT_6_DEL*/
uz = 1; /*ID_EDIT_6_DEL*/


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

printf("saving cube into file...\n");
double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);
printf("saving cube completed\n");

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);