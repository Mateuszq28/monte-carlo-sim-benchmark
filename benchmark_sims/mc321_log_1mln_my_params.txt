time elapsed: 134.7727 seconds

=================================

sim results:

number of photons = 1000000.000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.617e+03 	 6.121e+01 	 7.720e+00 
0.01250 	 5.194e+02 	 2.112e+01 	 6.312e+00 
0.02083 	 1.891e+02 	 1.298e+01 	 5.797e+00 
0.02917 	 9.759e+01 	 9.494e+00 	 5.441e+00 
0.03750 	 6.005e+01 	 7.519e+00 	 5.173e+00 
0.04583 	 4.072e+01 	 6.261e+00 	 4.959e+00 
0.05417 	 2.954e+01 	 5.395e+00 	 4.777e+00 
0.06250 	 2.243e+01 	 4.724e+00 	 4.614e+00 
0.07083 	 1.770e+01 	 4.239e+00 	 4.468e+00 
0.07917 	 1.443e+01 	 3.827e+00 	 4.348e+00 
0.08750 	 1.193e+01 	 3.495e+00 	 4.234e+00 
0.09583 	 1.006e+01 	 3.231e+00 	 4.126e+00 
0.10417 	 8.640e+00 	 3.001e+00 	 4.031e+00 
0.11250 	 7.480e+00 	 2.786e+00 	 3.935e+00 
0.12083 	 6.557e+00 	 2.623e+00 	 3.850e+00 
0.12917 	 5.812e+00 	 2.476e+00 	 3.774e+00 
0.13750 	 5.191e+00 	 2.338e+00 	 3.693e+00 
0.14583 	 4.665e+00 	 2.217e+00 	 3.626e+00 
0.15417 	 4.211e+00 	 2.111e+00 	 3.553e+00 
0.16250 	 3.839e+00 	 2.010e+00 	 3.492e+00 
0.17083 	 3.515e+00 	 1.922e+00 	 3.424e+00 
0.17917 	 3.229e+00 	 1.844e+00 	 3.360e+00 
0.18750 	 2.980e+00 	 1.766e+00 	 3.296e+00 
0.19583 	 2.765e+00 	 1.699e+00 	 3.240e+00 
0.20417 	 2.566e+00 	 1.633e+00 	 3.184e+00 
0.21250 	 2.391e+00 	 1.573e+00 	 3.126e+00 
0.22083 	 2.226e+00 	 1.516e+00 	 3.082e+00 
0.22917 	 2.098e+00 	 1.464e+00 	 3.031e+00 
0.23750 	 1.965e+00 	 1.411e+00 	 2.983e+00 
0.24583 	 1.853e+00 	 1.367e+00 	 2.932e+00 
0.25417 	 1.750e+00 	 1.330e+00 	 2.880e+00 
0.26250 	 1.653e+00 	 1.280e+00 	 2.843e+00 
0.27083 	 1.563e+00 	 1.242e+00 	 2.797e+00 
0.27917 	 1.479e+00 	 1.204e+00 	 2.745e+00 
0.28750 	 1.411e+00 	 1.173e+00 	 2.711e+00 
0.29583 	 1.338e+00 	 1.140e+00 	 2.661e+00 
0.30417 	 1.272e+00 	 1.105e+00 	 2.625e+00 
0.31250 	 1.210e+00 	 1.074e+00 	 2.585e+00 
0.32083 	 1.160e+00 	 1.043e+00 	 2.542e+00 
0.32917 	 1.108e+00 	 1.017e+00 	 2.505e+00 
0.33750 	 1.054e+00 	 9.902e-01 	 2.470e+00 
0.34583 	 1.012e+00 	 9.639e-01 	 2.430e+00 
0.35417 	 9.711e-01 	 9.393e-01 	 2.398e+00 
0.36250 	 9.291e-01 	 9.167e-01 	 2.357e+00 
0.37083 	 8.918e-01 	 8.912e-01 	 2.330e+00 
0.37917 	 8.596e-01 	 8.684e-01 	 2.289e+00 
0.38750 	 8.252e-01 	 8.508e-01 	 2.254e+00 
0.39583 	 7.919e-01 	 8.288e-01 	 2.222e+00 
0.40417 	 7.642e-01 	 8.080e-01 	 2.190e+00 
0.41250 	 7.364e-01 	 7.890e-01 	 2.158e+00 
0.42083 	 7.082e-01 	 7.714e-01 	 2.128e+00 
0.42917 	 6.857e-01 	 7.533e-01 	 2.097e+00 
0.43750 	 6.602e-01 	 7.358e-01 	 2.066e+00 
0.44583 	 6.379e-01 	 7.216e-01 	 2.035e+00 
0.45417 	 6.146e-01 	 7.041e-01 	 2.002e+00 
0.46250 	 5.940e-01 	 6.879e-01 	 1.974e+00 
0.47083 	 5.759e-01 	 6.715e-01 	 1.949e+00 
0.47917 	 5.554e-01 	 6.568e-01 	 1.922e+00 
0.48750 	 5.372e-01 	 6.420e-01 	 1.893e+00 
0.49583 	 5.210e-01 	 6.279e-01 	 1.865e+00 
0.50417 	 5.044e-01 	 6.149e-01 	 1.841e+00 
0.51250 	 4.885e-01 	 6.010e-01 	 1.812e+00 
0.52083 	 4.731e-01 	 5.889e-01 	 1.786e+00 
0.52917 	 4.593e-01 	 5.766e-01 	 1.764e+00 
0.53750 	 4.452e-01 	 5.641e-01 	 1.737e+00 
0.54583 	 4.314e-01 	 5.531e-01 	 1.713e+00 
0.55417 	 4.209e-01 	 5.394e-01 	 1.690e+00 
0.56250 	 4.080e-01 	 5.282e-01 	 1.664e+00 
0.57083 	 3.949e-01 	 5.165e-01 	 1.642e+00 
0.57917 	 3.821e-01 	 5.072e-01 	 1.617e+00 
0.58750 	 3.712e-01 	 4.975e-01 	 1.595e+00 
0.59583 	 3.612e-01 	 4.875e-01 	 1.572e+00 
0.60417 	 3.509e-01 	 4.769e-01 	 1.551e+00 
0.61250 	 3.412e-01 	 4.666e-01 	 1.529e+00 
0.62083 	 3.309e-01 	 4.574e-01 	 1.506e+00 
0.62917 	 3.220e-01 	 4.494e-01 	 1.485e+00 
0.63750 	 3.128e-01 	 4.400e-01 	 1.466e+00 
0.64583 	 3.050e-01 	 4.316e-01 	 1.444e+00 
0.65417 	 2.972e-01 	 4.220e-01 	 1.425e+00 
0.66250 	 2.888e-01 	 4.142e-01 	 1.407e+00 
0.67083 	 2.806e-01 	 4.067e-01 	 1.386e+00 
0.67917 	 2.736e-01 	 3.981e-01 	 1.365e+00 
0.68750 	 2.664e-01 	 3.903e-01 	 1.344e+00 
0.69583 	 2.591e-01 	 3.828e-01 	 1.323e+00 
0.70417 	 2.526e-01 	 3.747e-01 	 1.306e+00 
0.71250 	 2.458e-01 	 3.683e-01 	 1.286e+00 
0.72083 	 2.387e-01 	 3.601e-01 	 1.271e+00 
0.72917 	 2.333e-01 	 3.543e-01 	 1.252e+00 
0.73750 	 2.274e-01 	 3.481e-01 	 1.234e+00 
0.74583 	 2.219e-01 	 3.407e-01 	 1.215e+00 
0.75417 	 2.160e-01 	 3.342e-01 	 1.202e+00 
0.76250 	 2.107e-01 	 3.276e-01 	 1.185e+00 
0.77083 	 2.057e-01 	 3.212e-01 	 1.165e+00 
0.77917 	 2.002e-01 	 3.150e-01 	 1.154e+00 
0.78750 	 1.956e-01 	 3.102e-01 	 1.135e+00 
0.79583 	 1.904e-01 	 3.037e-01 	 1.121e+00 
0.80417 	 1.859e-01 	 2.983e-01 	 1.105e+00 
0.81250 	 1.810e-01 	 2.927e-01 	 1.087e+00 
0.82083 	 1.769e-01 	 2.872e-01 	 1.073e+00 
0.82917 	 1.728e-01 	 2.818e-01 	 1.057e+00 
0.83750 	 1.684e-01 	 2.766e-01 	 1.044e+00 
0.84583 	 1.647e-01 	 2.711e-01 	 1.027e+00 
0.85417 	 1.607e-01 	 2.664e-01 	 1.016e+00 
0.86250 	 1.566e-01 	 2.621e-01 	 9.997e-01 
0.87083 	 1.531e-01 	 2.573e-01 	 9.838e-01 
0.87917 	 1.492e-01 	 2.521e-01 	 9.742e-01 
0.88750 	 1.460e-01 	 2.481e-01 	 9.592e-01 
0.89583 	 1.426e-01 	 2.435e-01 	 9.413e-01 
0.90417 	 1.396e-01 	 2.384e-01 	 9.276e-01 
0.91250 	 1.362e-01 	 2.336e-01 	 9.182e-01 
0.92083 	 1.328e-01 	 2.299e-01 	 9.054e-01 
0.92917 	 1.298e-01 	 2.254e-01 	 8.931e-01 
0.93750 	 1.268e-01 	 2.215e-01 	 8.811e-01 
0.94583 	 1.243e-01 	 2.177e-01 	 8.699e-01 
0.95417 	 1.212e-01 	 2.138e-01 	 8.573e-01 
0.96250 	 1.182e-01 	 2.100e-01 	 8.453e-01 
0.97083 	 1.157e-01 	 2.064e-01 	 8.311e-01 
0.97917 	 1.131e-01 	 2.024e-01 	 8.214e-01 
0.98750 	 1.108e-01 	 1.991e-01 	 8.071e-01 
0.99583 	 1.081e-01 	 1.951e-01 	 7.981e-01 
1.00417 	 1.059e-01 	 1.917e-01 	 7.865e-01 
1.01250 	 1.033e-01 	 1.884e-01 	 7.741e-01 
1.02083 	 1.011e-01 	 1.851e-01 	 7.636e-01 
1.02917 	 9.853e-02 	 1.810e-01 	 7.558e-01 
1.03750 	 9.677e-02 	 1.778e-01 	 7.431e-01 
1.04583 	 9.442e-02 	 1.748e-01 	 7.332e-01 
1.05417 	 9.237e-02 	 1.718e-01 	 7.220e-01 
1.06250 	 9.020e-02 	 1.691e-01 	 7.124e-01 
1.07083 	 8.827e-02 	 1.660e-01 	 7.028e-01 
1.07917 	 8.657e-02 	 1.630e-01 	 6.947e-01 
1.08750 	 8.461e-02 	 1.596e-01 	 6.835e-01 
1.09583 	 8.275e-02 	 1.576e-01 	 6.736e-01 
1.10417 	 8.096e-02 	 1.549e-01 	 6.635e-01 
1.11250 	 7.917e-02 	 1.521e-01 	 6.551e-01 
1.12083 	 7.755e-02 	 1.492e-01 	 6.439e-01 
1.12917 	 7.574e-02 	 1.465e-01 	 6.346e-01 
1.13750 	 7.421e-02 	 1.441e-01 	 6.278e-01 
1.14583 	 7.260e-02 	 1.416e-01 	 6.196e-01 
1.15417 	 7.119e-02 	 1.394e-01 	 6.077e-01 
1.16250 	 6.960e-02 	 1.369e-01 	 6.024e-01 
1.17083 	 6.814e-02 	 1.342e-01 	 5.943e-01 
1.17917 	 6.675e-02 	 1.316e-01 	 5.849e-01 
1.18750 	 6.525e-02 	 1.299e-01 	 5.774e-01 
1.19583 	 6.406e-02 	 1.275e-01 	 5.693e-01 
1.20417 	 6.262e-02 	 1.257e-01 	 5.609e-01 
1.21250 	 6.139e-02 	 1.233e-01 	 5.534e-01 
1.22083 	 6.023e-02 	 1.209e-01 	 5.461e-01 
1.22917 	 5.876e-02 	 1.191e-01 	 5.361e-01 
1.23750 	 5.764e-02 	 1.173e-01 	 5.304e-01 
1.24583 	 5.629e-02 	 1.148e-01 	 5.219e-01 
1.25417 	 5.531e-02 	 1.133e-01 	 5.158e-01 
1.26250 	 5.407e-02 	 1.114e-01 	 5.090e-01 
1.27083 	 5.297e-02 	 1.092e-01 	 5.024e-01 
1.27917 	 5.188e-02 	 1.076e-01 	 4.952e-01 
1.28750 	 5.084e-02 	 1.060e-01 	 4.874e-01 
1.29583 	 4.986e-02 	 1.041e-01 	 4.790e-01 
1.30417 	 4.881e-02 	 1.021e-01 	 4.722e-01 
1.31250 	 4.796e-02 	 1.004e-01 	 4.659e-01 
1.32083 	 4.691e-02 	 9.877e-02 	 4.606e-01 
1.32917 	 4.584e-02 	 9.697e-02 	 4.533e-01 
1.33750 	 4.494e-02 	 9.559e-02 	 4.472e-01 
1.34583 	 4.400e-02 	 9.383e-02 	 4.418e-01 
1.35417 	 4.327e-02 	 9.208e-02 	 4.357e-01 
1.36250 	 4.228e-02 	 9.063e-02 	 4.276e-01 
1.37083 	 4.151e-02 	 8.908e-02 	 4.231e-01 
1.37917 	 4.066e-02 	 8.763e-02 	 4.157e-01 
1.38750 	 3.990e-02 	 8.600e-02 	 4.097e-01 
1.39583 	 3.903e-02 	 8.446e-02 	 4.041e-01 
1.40417 	 3.817e-02 	 8.334e-02 	 3.986e-01 
1.41250 	 3.739e-02 	 8.177e-02 	 3.931e-01 
1.42083 	 3.668e-02 	 8.037e-02 	 3.873e-01 
1.42917 	 3.592e-02 	 7.931e-02 	 3.815e-01 
1.43750 	 3.525e-02 	 7.800e-02 	 3.765e-01 
1.44583 	 3.452e-02 	 7.666e-02 	 3.717e-01 
1.45417 	 3.389e-02 	 7.529e-02 	 3.675e-01 
1.46250 	 3.321e-02 	 7.415e-02 	 3.606e-01 
1.47083 	 3.260e-02 	 7.278e-02 	 3.559e-01 
1.47917 	 3.185e-02 	 7.158e-02 	 3.509e-01 
1.48750 	 3.138e-02 	 7.054e-02 	 3.466e-01 
1.49583 	 3.071e-02 	 6.933e-02 	 3.419e-01 
1.50417 	 3.013e-02 	 6.795e-02 	 3.365e-01 
1.51250 	 2.955e-02 	 6.704e-02 	 3.306e-01 
1.52083 	 2.902e-02 	 6.578e-02 	 3.266e-01 
1.52917 	 2.839e-02 	 6.462e-02 	 3.226e-01 
1.53750 	 2.779e-02 	 6.346e-02 	 3.179e-01 
1.54583 	 2.731e-02 	 6.264e-02 	 3.139e-01 
1.55417 	 2.680e-02 	 6.146e-02 	 3.091e-01 
1.56250 	 2.627e-02 	 6.058e-02 	 3.046e-01 
1.57083 	 2.574e-02 	 5.947e-02 	 3.009e-01 
1.57917 	 2.534e-02 	 5.857e-02 	 2.959e-01 
1.58750 	 2.475e-02 	 5.747e-02 	 2.918e-01 
1.59583 	 2.429e-02 	 5.662e-02 	 2.875e-01 
1.60417 	 2.375e-02 	 5.570e-02 	 2.834e-01 
1.61250 	 2.332e-02 	 5.471e-02 	 2.799e-01 
1.62083 	 2.292e-02 	 5.403e-02 	 2.763e-01 
1.62917 	 2.245e-02 	 5.298e-02 	 2.717e-01 
1.63750 	 2.205e-02 	 5.216e-02 	 2.676e-01 
1.64583 	 2.164e-02 	 5.127e-02 	 2.646e-01 
1.65417 	 2.121e-02 	 5.040e-02 	 2.602e-01 
1.66250 	 2.083e-02 	 4.971e-02 	 2.571e-01 
1.67083 	 2.036e-02 	 4.889e-02 	 2.529e-01 
1.67917 	 2.010e-02 	 4.812e-02 	 2.502e-01 
1.68750 	 1.967e-02 	 4.740e-02 	 2.467e-01 
1.69583 	 1.926e-02 	 4.644e-02 	 2.419e-01 
1.70417 	 1.892e-02 	 4.597e-02 	 2.392e-01 
1.71250 	 1.858e-02 	 4.496e-02 	 2.357e-01 
1.72083 	 1.823e-02 	 4.427e-02 	 2.328e-01 
1.72917 	 1.785e-02 	 4.363e-02 	 2.296e-01 
1.73750 	 1.750e-02 	 4.288e-02 	 2.251e-01 
1.74583 	 1.717e-02 	 4.216e-02 	 2.232e-01 
1.75417 	 1.690e-02 	 4.152e-02 	 2.204e-01 
1.76250 	 1.656e-02 	 4.083e-02 	 2.169e-01 
1.77083 	 1.630e-02 	 4.015e-02 	 2.144e-01 
1.77917 	 1.596e-02 	 3.959e-02 	 2.113e-01 
1.78750 	 1.566e-02 	 3.884e-02 	 2.084e-01 
1.79583 	 1.537e-02 	 3.817e-02 	 2.047e-01 
1.80417 	 1.506e-02 	 3.766e-02 	 2.023e-01 
1.81250 	 1.478e-02 	 3.701e-02 	 1.984e-01 
1.82083 	 1.453e-02 	 3.646e-02 	 1.965e-01 
1.82917 	 1.426e-02 	 3.577e-02 	 1.944e-01 
1.83750 	 1.398e-02 	 3.524e-02 	 1.914e-01 
1.84583 	 1.373e-02 	 3.463e-02 	 1.886e-01 
1.85417 	 1.354e-02 	 3.414e-02 	 1.853e-01 
1.86250 	 1.323e-02 	 3.366e-02 	 1.829e-01 
1.87083 	 1.301e-02 	 3.307e-02 	 1.802e-01 
1.87917 	 1.277e-02 	 3.246e-02 	 1.778e-01 
1.88750 	 1.255e-02 	 3.188e-02 	 1.749e-01 
1.89583 	 1.232e-02 	 3.134e-02 	 1.735e-01 
1.90417 	 1.210e-02 	 3.089e-02 	 1.712e-01 
1.91250 	 1.189e-02 	 3.048e-02 	 1.694e-01 
1.92083 	 1.164e-02 	 2.995e-02 	 1.662e-01 
1.92917 	 1.140e-02 	 2.937e-02 	 1.631e-01 
1.93750 	 1.120e-02 	 2.886e-02 	 1.612e-01 
1.94583 	 1.100e-02 	 2.855e-02 	 1.590e-01 
1.95417 	 1.080e-02 	 2.811e-02 	 1.569e-01 
1.96250 	 1.058e-02 	 2.756e-02 	 1.549e-01 
1.97083 	 1.047e-02 	 2.719e-02 	 1.521e-01 
1.97917 	 1.022e-02 	 2.664e-02 	 1.499e-01 
1.98750 	 1.005e-02 	 2.635e-02 	 1.487e-01 
1.99583 	 9.862e-03 	 2.578e-02 	 1.467e-01 
2.00417 	 8.898e-01 	 2.060e+00 	 1.026e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   1.0E-4		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
double	i_photon;   /* current photon */
double	W;          /* photon weight */
double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */
double	Fsph;       /* fluence in spherical shell */
double	Fcyl;       /* fluence in cylindrical shell */
double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
double	Nphotons;   /* number of photons in simulation */
short	NR;         /* number of radial positions */
double	radial_size;  /* maximum radial size */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
double  rnd;        /* assigned random value 0-1 */
double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1e6; /* set number of photons in simulation */
radial_size = 2.0;   /* cm, total range over which bins extend */
NR          = 240;	 /* set number of bins.  */
   /* IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1. */
dr          = radial_size/NR;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
i_photon = 0;
InitRandomGen;
for (ir=0; ir<=NR; ir++) {
   Csph[ir] = 0;
   Ccyl[ir] = 0;
   Cpla[ir] = 0;
   }
   
/**** RUN
   Launch N photons, initializing each one before progation.
*****/
do {


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements an isotropic point source.
*****/
i_photon += 1;	/* increment photon count */
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = 0;                      /* Set photon position to origin. */
y = 0;
z = 0;

/* Randomly set photon trajectory to yield an isotropic source. */
costheta = 2.0*RandomNum - 1.0;   
sintheta = sqrt(1.0 - costheta*costheta);	/* sintheta is always positive */
psi = 2.0*PI*RandomNum;
ux = sintheta*cos(psi);
uy = sintheta*sin(psi);
uz = costheta;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR) ir = NR;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR) ir = NR;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR) ir = NR;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */
   

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */
while (i_photon < Nphotons);


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
target = fopen("mc321_out.txt", "w");

/* print header */
fprintf(target, "number of photons = %f\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %4.3e \t %4.3e \t %4.3e \n", r, Fsph, Fcyl, Fpla);
  	}

fclose(target);


} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC

