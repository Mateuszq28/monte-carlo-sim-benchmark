time elapsed: 53.8940 seconds

=================================

sim results:

number of photons = 1000000
overflow: 4.90809485945810098201e+05
sum: 5.09167316866526613012e+05
sum: 5.09190514054189901799e+05
avg: 5.09167316866526609154e-01
perc_in: 50.92

number of photons = 1000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.95110854242993957824e-03 	 1.61988487397669439494e-01 	 2.70249460625510473655e-01 
0.01250 	 1.14036210661530943572e-02 	 1.62753743557014024512e-01 	 2.69682634744217442080e-01 
0.02083 	 1.22020130854451729074e-02 	 1.60436833135368633885e-01 	 2.69756684576936134334e-01 
0.02917 	 1.08691300588776660480e-02 	 1.61066097302851901629e-01 	 2.70399668577128715619e-01 
0.03750 	 1.01482933991192906392e-02 	 1.62154159445139334217e-01 	 2.69595655549504820137e-01 
0.04583 	 1.00566524950746194467e-02 	 1.62572384040477330158e-01 	 2.69464023604640334764e-01 
0.05417 	 1.11892451446410686605e-02 	 1.58929702753684509720e-01 	 2.69390770574469473608e-01 
0.06250 	 1.08745378372027187014e-02 	 1.61973962791750469847e-01 	 2.71040378572006079860e-01 
0.07083 	 1.07304873951079744743e-02 	 1.61946085478747003883e-01 	 2.70533569954696906379e-01 
0.07917 	 1.09527918877274695747e-02 	 1.61595921408939469099e-01 	 2.72009581526249932804e-01 
0.08750 	 1.07576664545945607093e-02 	 1.60636528305261927496e-01 	 2.72997077480049810116e-01 
0.09583 	 1.08934046709199920666e-02 	 1.61649456515179812399e-01 	 2.73528222304974699686e-01 
0.10417 	 1.08717068256322449415e-02 	 1.62777191003803084479e-01 	 2.73547214844182040583e-01 
0.11250 	 1.05461467829553613013e-02 	 1.62717674764757236350e-01 	 2.74261467671307046512e-01 
0.12083 	 1.10033311091667189430e-02 	 1.60603370264694983449e-01 	 2.75173739475532863619e-01 
0.12917 	 1.10992867677286131955e-02 	 1.61486168997481555065e-01 	 2.77390166633382728723e-01 
0.13750 	 1.16061277975625098957e-02 	 1.62442859812830325827e-01 	 2.76467858955449508063e-01 
0.14583 	 1.12392224731578446034e-02 	 1.64494084237764209844e-01 	 2.77448259957830345446e-01 
0.15417 	 1.15259750827720955368e-02 	 1.64441784622245651404e-01 	 2.79436772283649159654e-01 
0.16250 	 1.11168893625031902500e-02 	 1.64497068165928045369e-01 	 2.79440500176008688182e-01 
0.17083 	 1.14761445516903815012e-02 	 1.65140120442823584712e-01 	 2.80847292148551752611e-01 
0.17917 	 1.16818509577794795579e-02 	 1.64866225655094816860e-01 	 2.82944491674782694357e-01 
0.18750 	 1.13218197982138876756e-02 	 1.65458076516504820619e-01 	 2.83391472905617114453e-01 
0.19583 	 1.18656091127877783009e-02 	 1.66342633073681522848e-01 	 2.85061604025488413150e-01 
0.20417 	 1.16301324303083666867e-02 	 1.66668223596129566610e-01 	 2.86261419369474579000e-01 
0.21250 	 1.15083867471435005031e-02 	 1.65924380824684858382e-01 	 2.87410011633350837013e-01 
0.22083 	 1.14892982166430578789e-02 	 1.65918311245184163516e-01 	 2.89458493420141849128e-01 
0.22917 	 1.14182650876904368681e-02 	 1.66052235316556107136e-01 	 2.91107378434135533052e-01 
0.23750 	 1.16394589741849862480e-02 	 1.66950612336028370031e-01 	 2.91585158979598746409e-01 
0.24583 	 1.16822061224575949462e-02 	 1.69416210593397870143e-01 	 2.93764228141626282387e-01 
0.25417 	 1.14599206429286254449e-02 	 1.68384215381061463912e-01 	 2.95301105843221778358e-01 
0.26250 	 1.15631835487948770452e-02 	 1.69492001062377217746e-01 	 2.97325617862271407432e-01 
0.27083 	 1.15230886193984846666e-02 	 1.70751584248495569263e-01 	 2.98482532816735646186e-01 
0.27917 	 1.18838951790124318364e-02 	 1.70896479532997469519e-01 	 3.00597576121463982979e-01 
0.28750 	 1.17457917011544316077e-02 	 1.71490298895410564484e-01 	 3.02260176600439356420e-01 
0.29583 	 1.17534704809223265048e-02 	 1.71191568277702349521e-01 	 3.03996559171292257684e-01 
0.30417 	 1.13933226887190878346e-02 	 1.72654711270855187877e-01 	 3.06070098377399457679e-01 
0.31250 	 1.18485098012409660606e-02 	 1.72348858230840784600e-01 	 3.09213046753413212109e-01 
0.32083 	 1.15569126933832370258e-02 	 1.74335066072533156900e-01 	 3.10461034790927903337e-01 
0.32917 	 1.16998152974558088102e-02 	 1.74293936305515401175e-01 	 3.13746386946335831247e-01 
0.33750 	 1.20200802406207861439e-02 	 1.75249335326920885336e-01 	 3.15426209986850614175e-01 
0.34583 	 1.19553904506793338969e-02 	 1.75482087755059718015e-01 	 3.17336447496480544839e-01 
0.35417 	 1.20339509721434350514e-02 	 1.76506837010900641260e-01 	 3.20369050134700239507e-01 
0.36250 	 1.21425882871066849467e-02 	 1.77066206521158675535e-01 	 3.21804976514772800300e-01 
0.37083 	 1.19146204991981297799e-02 	 1.77578096206575497540e-01 	 3.23535198062773698968e-01 
0.37917 	 1.20189943570165169023e-02 	 1.78894380863957286332e-01 	 3.27195521821701362786e-01 
0.38750 	 1.19725683895404392404e-02 	 1.79556805741271613419e-01 	 3.29591872386442608089e-01 
0.39583 	 1.22064544017391474195e-02 	 1.79625446509901420811e-01 	 3.34342015497206712649e-01 
0.40417 	 1.20980779037136252502e-02 	 1.80995186376586014720e-01 	 3.35715172043867693397e-01 
0.41250 	 1.22865835075052429182e-02 	 1.81644221404509281781e-01 	 3.37223127963510560523e-01 
0.42083 	 1.22755544310552706239e-02 	 1.83024177372711926992e-01 	 3.39774690287917624509e-01 
0.42917 	 1.22625005395369315875e-02 	 1.83063473645773411302e-01 	 3.43436554307148700360e-01 
0.43750 	 1.23394704477307170370e-02 	 1.84612602500784456216e-01 	 3.46729636071945623854e-01 
0.44583 	 1.23608140960556420890e-02 	 1.85548539372629939237e-01 	 3.50189946880305247312e-01 
0.45417 	 1.25501775861606885976e-02 	 1.87117983077833088812e-01 	 3.52739462112574675423e-01 
0.46250 	 1.24988007086916739358e-02 	 1.87461253998605498206e-01 	 3.57611275326255362295e-01 
0.47083 	 1.23406117158934430789e-02 	 1.88839722009633725897e-01 	 3.60921339650749906092e-01 
0.47917 	 1.24357022160214436557e-02 	 1.90161379248346973370e-01 	 3.64029820501970025060e-01 
0.48750 	 1.24682210437418727889e-02 	 1.90813622197994470220e-01 	 3.67736734089312344853e-01 
0.49583 	 1.26001113867934277923e-02 	 1.92090548367991637013e-01 	 3.70818188212986288299e-01 
0.50417 	 1.28160705819287332186e-02 	 1.93192252702063471670e-01 	 3.74827236151065834591e-01 
0.51250 	 1.26894795436744770023e-02 	 1.94331427363232334127e-01 	 3.77045068671471084176e-01 
0.52083 	 1.28763136240123490794e-02 	 1.95457492315227215895e-01 	 3.82808606093917924706e-01 
0.52917 	 1.27683871735174408329e-02 	 1.96486853039164299783e-01 	 3.88079833320648714956e-01 
0.53750 	 1.27789691896194185228e-02 	 1.98284460704389264851e-01 	 3.91069443540405958792e-01 
0.54583 	 1.29284958610556052067e-02 	 1.99568261208445646426e-01 	 3.95086275765975047936e-01 
0.55417 	 1.29909980842547231189e-02 	 2.00519631113324020566e-01 	 3.99833012254076525238e-01 
0.56250 	 1.28984967604867748620e-02 	 2.02415227013222898123e-01 	 4.02794920184742222258e-01 
0.57083 	 1.30620672286500989767e-02 	 2.02953400553056939604e-01 	 4.06355179846135339261e-01 
0.57917 	 1.30559945705003930400e-02 	 2.04684682327086669984e-01 	 4.10850792288012300890e-01 
0.58750 	 1.32524739323041252509e-02 	 2.06394944987938144809e-01 	 4.16571067545525919318e-01 
0.59583 	 1.31994158552242429189e-02 	 2.07052648606228517636e-01 	 4.21303157362498237326e-01 
0.60417 	 1.31783250188494439892e-02 	 2.07918540011574309867e-01 	 4.25940291727932407451e-01 
0.61250 	 1.32748021336738641213e-02 	 2.09271341934823051911e-01 	 4.30048109882379681057e-01 
0.62083 	 1.33625558600672812021e-02 	 2.11372022366862588605e-01 	 4.34175575139537750502e-01 
0.62917 	 1.33900923549630113812e-02 	 2.13462112872663395402e-01 	 4.39321948237212489552e-01 
0.63750 	 1.34836148796665788313e-02 	 2.14967153437245400704e-01 	 4.43851451926489115607e-01 
0.64583 	 1.35534458439111570038e-02 	 2.16471004759368979009e-01 	 4.49635559918898086718e-01 
0.65417 	 1.35846052790695118878e-02 	 2.18152569117909117535e-01 	 4.55443791693948496491e-01 
0.66250 	 1.36576439630529539171e-02 	 2.19773497088707109315e-01 	 4.58984563194136940822e-01 
0.67083 	 1.36906912949284371994e-02 	 2.21264306736470989234e-01 	 4.64881464538890287752e-01 
0.67917 	 1.37178360943951103967e-02 	 2.22270789122130163484e-01 	 4.68688756590730726259e-01 
0.68750 	 1.38237713015370300429e-02 	 2.23936562815557793638e-01 	 4.76126088461114926886e-01 
0.69583 	 1.40027286429338006929e-02 	 2.26748266960605737719e-01 	 4.79403075305244508186e-01 
0.70417 	 1.41747794247734891504e-02 	 2.28341875319831494329e-01 	 4.86995377188718436834e-01 
0.71250 	 1.41426616181024641244e-02 	 2.30144220603706345374e-01 	 4.91095250677747341417e-01 
0.72083 	 1.42972882934131999971e-02 	 2.32267227707702889061e-01 	 4.98437785371166730553e-01 
0.72917 	 1.43444988868539693994e-02 	 2.34800428540231975738e-01 	 5.05326108683509023223e-01 
0.73750 	 1.44329106414190291852e-02 	 2.37369463101236854996e-01 	 5.09712929907940148766e-01 
0.74583 	 1.44633933003531899714e-02 	 2.40468325315883080240e-01 	 5.17240986650039147321e-01 
0.75417 	 1.45666689843559609557e-02 	 2.40914384625365518566e-01 	 5.22598241910831040613e-01 
0.76250 	 1.47495463982568516398e-02 	 2.44127800527923627394e-01 	 5.26953150329635744420e-01 
0.77083 	 1.47331472954009435467e-02 	 2.46198113915010813324e-01 	 5.34736289141567344707e-01 
0.77917 	 1.47960922372806554653e-02 	 2.49196896461407885193e-01 	 5.44482939570276824881e-01 
0.78750 	 1.50436899936037121739e-02 	 2.51297360940719749500e-01 	 5.51003504256021625629e-01 
0.79583 	 1.50284415715725844231e-02 	 2.54162007658496835738e-01 	 5.58954272375871585865e-01 
0.80417 	 1.50847744738158741351e-02 	 2.57079145127761699019e-01 	 5.63942445298818428867e-01 
0.81250 	 1.52083713214916493167e-02 	 2.59998248502194384546e-01 	 5.70960958598955015120e-01 
0.82083 	 1.53145670905954472268e-02 	 2.63137720705132527321e-01 	 5.75816296212677047883e-01 
0.82917 	 1.53740193145712276263e-02 	 2.65484834533473379459e-01 	 5.86249595183975458212e-01 
0.83750 	 1.53983630903420272429e-02 	 2.69987443337525945264e-01 	 5.93038099897762571722e-01 
0.84583 	 1.55951030138259619934e-02 	 2.71960024663478239226e-01 	 5.98434287903978456846e-01 
0.85417 	 1.56459414066526490694e-02 	 2.76357335429823214312e-01 	 6.07129633773512256134e-01 
0.86250 	 1.56926204343426252408e-02 	 2.80837236492531061582e-01 	 6.16787797614486765774e-01 
0.87083 	 1.58303269453083650387e-02 	 2.84689386622012707839e-01 	 6.23352606182810076163e-01 
0.87917 	 1.59317923650217803389e-02 	 2.88025696506754080861e-01 	 6.31446748921307698943e-01 
0.88750 	 1.61040728669085177194e-02 	 2.92729841549794922440e-01 	 6.36939949282404160869e-01 
0.89583 	 1.60411119256818647527e-02 	 2.98270646283571527757e-01 	 6.47026723298957384678e-01 
0.90417 	 1.62865016787044243618e-02 	 3.03377649166360341404e-01 	 6.53979591587515285411e-01 
0.91250 	 1.63617282204861734518e-02 	 3.07997602816573512463e-01 	 6.64877541800519611392e-01 
0.92083 	 1.64653049401393899998e-02 	 3.14460466518237280464e-01 	 6.73354874200975062060e-01 
0.92917 	 1.65441700404423790161e-02 	 3.21059210080482271277e-01 	 6.81626094674022464659e-01 
0.93750 	 1.66536233477102349476e-02 	 3.27183934856562219640e-01 	 6.88360695675723666120e-01 
0.94583 	 1.68198546534334657243e-02 	 3.34846388580766929355e-01 	 6.94174436284799245556e-01 
0.95417 	 1.68838301099683042727e-02 	 3.44449479789084189729e-01 	 7.07045074161795628065e-01 
0.96250 	 1.69846356737845365081e-02 	 3.54507975256033946998e-01 	 7.16383916413577348514e-01 
0.97083 	 1.71788242975937366364e-02 	 3.64950648175144554131e-01 	 7.23458636333246252192e-01 
0.97917 	 1.72957832373675929327e-02 	 3.77517790419136578528e-01 	 7.34723592763212751677e-01 
0.98750 	 1.72679318038140884595e-02 	 3.92079222928283954719e-01 	 7.42068113122606010101e-01 
0.99583 	 1.73887064281734518567e-02 	 4.10876419155508321168e-01 	 7.52484313582738262305e-01 
1.00417 	 1.75290781347935964440e-02 	 4.32886640515717679989e-01 	 7.65983228425426432295e-01 
1.01250 	 1.77153913493878871488e-02 	 4.62863781529992968089e-01 	 7.73704161213072616476e-01 
1.02083 	 1.77610579190115892845e-02 	 5.02826598035248650831e-01 	 7.86040366456422390229e-01 
1.02917 	 1.79018374958059625635e-02 	 5.63942261650186571487e-01 	 7.97502939463255011709e-01 
1.03750 	 1.80326291454743457832e-02 	 6.83188439670659231062e-01 	 8.07994564652613767031e-01 
1.04583 	 1.81910651851540788870e-02 	 1.98663479251426711159e+00 	 8.14692328494259210281e-01 
1.05417 	 1.81774537362649792060e-02 	 9.25011697267195120986e-01 	 8.27407254709486061905e-01 
1.06250 	 1.82714194631024492987e-02 	 6.32285198268577208758e-01 	 8.38087708953032195502e-01 
1.07083 	 1.85199679823142837609e-02 	 5.33861485180840866782e-01 	 8.50201730472867511779e-01 
1.07917 	 1.86737270592130348568e-02 	 4.76764726374998892844e-01 	 8.63875594235675059451e-01 
1.08750 	 1.86625072986327696090e-02 	 4.37871384478462910561e-01 	 8.75631865042663770637e-01 
1.09583 	 1.87751325984273770286e-02 	 4.07694249391459928589e-01 	 8.86768078178426177871e-01 
1.10417 	 1.89912168622308266674e-02 	 3.83461085687897829111e-01 	 8.95087454550126615516e-01 
1.11250 	 1.91065601201727240654e-02 	 3.64129901989173332399e-01 	 9.11139270028568981630e-01 
1.12083 	 1.92596984807158339015e-02 	 3.48676041418304827335e-01 	 9.20414523604353607134e-01 
1.12917 	 1.94394736743978314986e-02 	 3.34865724549899212992e-01 	 9.35317406114273497408e-01 
1.13750 	 1.96493389570451676418e-02 	 3.21668838263780898501e-01 	 9.48556920626434152410e-01 
1.14583 	 1.96079499605543092211e-02 	 3.10873935334200712788e-01 	 9.59670796953477900360e-01 
1.15417 	 1.98347496324116460975e-02 	 3.00253321561919250815e-01 	 9.74903459948289641268e-01 
1.16250 	 1.99931283133277133690e-02 	 2.90401946609184946624e-01 	 9.90742692115347933779e-01 
1.17083 	 2.00950333563728114616e-02 	 2.83078487422537106166e-01 	 1.00223755357837629454e+00 
1.17917 	 2.02883975549229891855e-02 	 2.74435688850158676644e-01 	 1.01131232333299769799e+00 
1.18750 	 2.04571845239507575653e-02 	 2.66906661973921099928e-01 	 1.02466054707044973426e+00 
1.19583 	 2.05832084585336680393e-02 	 2.59756869706226134475e-01 	 1.03813277548824611785e+00 
1.20417 	 2.07985503623500413151e-02 	 2.53996404165601263880e-01 	 1.05239507769354734279e+00 
1.21250 	 2.09384149170978028920e-02 	 2.47477551402346868104e-01 	 1.06766720312988305785e+00 
1.22083 	 2.11057011793951629364e-02 	 2.41430484669619332960e-01 	 1.08080662222521084459e+00 
1.22917 	 2.12437428509880676941e-02 	 2.35419896328541378150e-01 	 1.09716285208950248276e+00 
1.23750 	 2.14550425308176126449e-02 	 2.29972828979214727330e-01 	 1.11075617390108427607e+00 
1.24583 	 2.16084331249136521458e-02 	 2.25601934685526278601e-01 	 1.12651996754040584214e+00 
1.25417 	 2.17726132100697876426e-02 	 2.20752925177475578522e-01 	 1.14586271617576307413e+00 
1.26250 	 2.19756800576565540506e-02 	 2.16007559212038180441e-01 	 1.15772365062966287041e+00 
1.27083 	 2.21973536891938300064e-02 	 2.11053604827155238954e-01 	 1.17458648698170042834e+00 
1.27917 	 2.23878516876436957361e-02 	 2.07212012755421809418e-01 	 1.18616228703646164888e+00 
1.28750 	 2.24387657354491801276e-02 	 2.01716866816883166891e-01 	 1.20169366764387830493e+00 
1.29583 	 2.26187192158857353075e-02 	 1.98140695985774384358e-01 	 1.22053846584540348630e+00 
1.30417 	 2.28857745148168222060e-02 	 1.93834525077014402372e-01 	 1.23933054846740930977e+00 
1.31250 	 2.29969470948037137126e-02 	 1.90879872218033597164e-01 	 1.25644681750404907383e+00 
1.32083 	 2.32076727696654792898e-02 	 1.87007846882602940530e-01 	 1.27357275504398925747e+00 
1.32917 	 2.34203054999999361885e-02 	 1.83270876769212998081e-01 	 1.28951494815188927312e+00 
1.33750 	 2.36130992494192476494e-02 	 1.79413292016114889194e-01 	 1.30880344960971761736e+00 
1.34583 	 2.38587730382426206621e-02 	 1.76863211594414565520e-01 	 1.32287680700216703222e+00 
1.35417 	 2.40293248364668449168e-02 	 1.73116879297648101899e-01 	 1.34466131783360998142e+00 
1.36250 	 2.43091325841875323388e-02 	 1.69899334964604797893e-01 	 1.36397963293223556391e+00 
1.37083 	 2.44749634283371701737e-02 	 1.66083402114613670753e-01 	 1.38100422203711636904e+00 
1.37917 	 2.47308906956436903857e-02 	 1.63352799391846686961e-01 	 1.39790850852104719948e+00 
1.38750 	 2.49875412894463057312e-02 	 1.60802277348803368540e-01 	 1.41276595817412076173e+00 
1.39583 	 2.51668121938164630891e-02 	 1.57575853057008663516e-01 	 1.43313709746326134464e+00 
1.40417 	 2.52535975084976112293e-02 	 1.54485962266844384372e-01 	 1.44863429388741882242e+00 
1.41250 	 2.55828725911509055613e-02 	 1.51854965559722554502e-01 	 1.47305662979173646043e+00 
1.42083 	 2.57282564728485776961e-02 	 1.49003152812592520871e-01 	 1.49499489576168831384e+00 
1.42917 	 2.59755535141508869801e-02 	 1.46225672940151540935e-01 	 1.50989693161500948548e+00 
1.43750 	 2.61367877821114188985e-02 	 1.44531369775259210808e-01 	 1.53148846657419057671e+00 
1.44583 	 2.63968151464373836090e-02 	 1.42042028825796917690e-01 	 1.55935618265257325277e+00 
1.45417 	 2.66332128228590273022e-02 	 1.39429373042828430584e-01 	 1.57523736166397165803e+00 
1.46250 	 2.68019144735071462859e-02 	 1.36859418474227445550e-01 	 1.59586465818722245125e+00 
1.47083 	 2.70492766077714726081e-02 	 1.34238288530638960605e-01 	 1.61603685606740166136e+00 
1.47917 	 2.72393558790010800741e-02 	 1.31743894019589163902e-01 	 1.63431573767778681727e+00 
1.48750 	 2.74554418942452964358e-02 	 1.30007437597974256915e-01 	 1.65514085863036597424e+00 
1.49583 	 2.77510297549042606047e-02 	 1.27951496073668596898e-01 	 1.67369831985760741944e+00 
1.50417 	 2.80897404201776237920e-02 	 1.25458593747678287533e-01 	 1.69925425911114769129e+00 
1.51250 	 2.81706525737978018264e-02 	 1.22978810093597845654e-01 	 1.71960460409836657369e+00 
1.52083 	 2.85003512795716819339e-02 	 1.21030331738561064414e-01 	 1.74289431546903395009e+00 
1.52917 	 2.87923024447649979207e-02 	 1.18890291914274748297e-01 	 1.75853254258893176853e+00 
1.53750 	 2.90919971498276655475e-02 	 1.16956936286992954632e-01 	 1.78230591314440744988e+00 
1.54583 	 2.92594290199068435276e-02 	 1.14920753555143376201e-01 	 1.81015484480297850212e+00 
1.55417 	 2.96040259407185889218e-02 	 1.12614029741183702127e-01 	 1.82779540204030332973e+00 
1.56250 	 2.99375747640245638836e-02 	 1.11103053342507057666e-01 	 1.84624041227727175851e+00 
1.57083 	 3.00883898775234290279e-02 	 1.09260777174526091393e-01 	 1.86635549061708871932e+00 
1.57917 	 3.04314078295531455221e-02 	 1.07328436014794303954e-01 	 1.89305839012754595352e+00 
1.58750 	 3.07253313990360002461e-02 	 1.05728265365573489976e-01 	 1.91966824517006040551e+00 
1.59583 	 3.08370874957455548548e-02 	 1.04145261422836546417e-01 	 1.93502102059589020655e+00 
1.60417 	 3.12132940796443249243e-02 	 1.02024679124287004361e-01 	 1.95953359420719319672e+00 
1.61250 	 3.14697809364212210959e-02 	 1.00072285617319289841e-01 	 1.97606632723164432619e+00 
1.62083 	 3.18289774488646481920e-02 	 9.83459364936978830407e-02 	 1.99494860876142965367e+00 
1.62917 	 3.22262277796052584722e-02 	 9.70469199638946816711e-02 	 2.02326634421510398454e+00 
1.63750 	 3.24526985186145006113e-02 	 9.55453592008910085331e-02 	 2.04728702006312790473e+00 
1.64583 	 3.26519624389665155673e-02 	 9.39648191894462969653e-02 	 2.06558059378623193325e+00 
1.65417 	 3.29673839143460184475e-02 	 9.21450405953621459743e-02 	 2.08690904149778333476e+00 
1.66250 	 3.31879302872631828936e-02 	 9.07473153700588397452e-02 	 2.10403554914438561951e+00 
1.67083 	 3.36623788771993059932e-02 	 8.93080742137270094938e-02 	 2.13271646536191017418e+00 
1.67917 	 3.38194693066947785209e-02 	 8.75566032596759302731e-02 	 2.14806719950088176319e+00 
1.68750 	 3.42263748963606700970e-02 	 8.61725972439774806633e-02 	 2.16989407251701349466e+00 
1.69583 	 3.45357982763487766920e-02 	 8.47882388532126968217e-02 	 2.18699003732581376269e+00 
1.70417 	 3.48187143790898365192e-02 	 8.33956759641644868042e-02 	 2.20590644674360181199e+00 
1.71250 	 3.51828887258133840565e-02 	 8.19995132828767459010e-02 	 2.22742804619924861242e+00 
1.72083 	 3.54084141126500689944e-02 	 8.06132395598996298602e-02 	 2.24799717734502335631e+00 
1.72917 	 3.57334776676443560683e-02 	 7.96788117456138089700e-02 	 2.27201815493822190106e+00 
1.73750 	 3.61725737834081087496e-02 	 7.80445048623272380484e-02 	 2.28952350759026002081e+00 
1.74583 	 3.63713758126802885751e-02 	 7.66781562733911126184e-02 	 2.30447401435813192805e+00 
1.75417 	 3.67380924745209086479e-02 	 7.57640590485331305581e-02 	 2.32170456529116275846e+00 
1.76250 	 3.70897225894321336259e-02 	 7.44109426983722010984e-02 	 2.33755903676914300604e+00 
1.77083 	 3.74556331655923752111e-02 	 7.33558449392460454330e-02 	 2.35001843798719667333e+00 
1.77917 	 3.78142893408814906309e-02 	 7.22706715703251845184e-02 	 2.36121768960836231344e+00 
1.78750 	 3.80743624942547209677e-02 	 7.08928364902549623672e-02 	 2.37416856631448647263e+00 
1.79583 	 3.84502969501125599350e-02 	 6.93824855917967442398e-02 	 2.38739602746461754279e+00 
1.80417 	 3.87968596384724792592e-02 	 6.84546709108597717375e-02 	 2.40297533235295368570e+00 
1.81250 	 3.92322557629506338261e-02 	 6.73193660390735970633e-02 	 2.40524950555473360225e+00 
1.82083 	 3.95138661339413874152e-02 	 6.61178735740574202717e-02 	 2.41398871476728738017e+00 
1.82917 	 3.98782218891002085415e-02 	 6.49026963337954315714e-02 	 2.42400123536888489895e+00 
1.83750 	 4.02276713655826609339e-02 	 6.41123998760421004439e-02 	 2.42430269414634880221e+00 
1.84583 	 4.06483305087448343329e-02 	 6.28569615039181739391e-02 	 2.44167110758521932468e+00 
1.85417 	 4.09735749220664843828e-02 	 6.16574852514039303819e-02 	 2.44186759817876319900e+00 
1.86250 	 4.13123309115882783593e-02 	 6.10503638898845790717e-02 	 2.45184837271827671401e+00 
1.87083 	 4.17939274208119423970e-02 	 5.99564150406856413711e-02 	 2.45121237039817252423e+00 
1.87917 	 4.20362322637059110386e-02 	 5.90927558349453041497e-02 	 2.44674802969812121844e+00 
1.88750 	 4.23383928437842602110e-02 	 5.81165263732587727974e-02 	 2.44087783157358773067e+00 
1.89583 	 4.28578098349731706485e-02 	 5.71874314895135307801e-02 	 2.43535376268790493270e+00 
1.90417 	 4.31245104689410713172e-02 	 5.62431539987662959534e-02 	 2.42714511653969955418e+00 
1.91250 	 4.34804771571123335749e-02 	 5.51988404161925863556e-02 	 2.41802685780617476752e+00 
1.92083 	 4.39100303175869038919e-02 	 5.43740192145976547478e-02 	 2.40149841691233545404e+00 
1.92917 	 4.42200880238681828804e-02 	 5.33716366339328229795e-02 	 2.39069129219926956864e+00 
1.93750 	 4.45566594900725920780e-02 	 5.27099748635935366758e-02 	 2.37184816590722258312e+00 
1.94583 	 4.50040456330446786426e-02 	 5.18233055921219695761e-02 	 2.34912476356005539557e+00 
1.95417 	 4.52175469918110403689e-02 	 5.08994906838168698071e-02 	 2.33527802217861113476e+00 
1.96250 	 4.55937256156728268341e-02 	 5.03002836838154845922e-02 	 2.30927386447663263169e+00 
1.97083 	 4.59452409776040168743e-02 	 4.93927884276341364056e-02 	 2.28164114075121826630e+00 
1.97917 	 4.63083521539497597330e-02 	 4.85822717360448672053e-02 	 2.24687218774346719741e+00 
1.98750 	 4.66354900340224462485e-02 	 4.78190965267595163857e-02 	 2.20640133822562178878e+00 
1.99583 	 4.69489081175598621520e-02 	 4.69987388788079135660e-02 	 1.15516320441150210918e+00 
2.00417 	 3.99517913821740711100e+00 	 3.73781941595544520140e+00 	 7.36425333095208571876e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);