time elapsed: 162.7858 seconds

=================================

sim results:

number of photons = 1000000
overflow: 4.90606738046399608720e+05
sum: 5.09393322581511747558e+05
sum: 5.09393261953600391280e+05
avg: 5.09393322581511709402e-01
perc_in: 50.94

number of photons = 1000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 2.22497694577668790605e-02 	 1.65500266358696995761e-01 	 2.69235615584975940262e-01 
0.01250 	 7.33343531307248993473e-03 	 1.65963082027457187184e-01 	 2.68456950986122544478e-01 
0.02083 	 1.18644162703082072657e-02 	 1.64919230507261205254e-01 	 2.67801480168141703420e-01 
0.02917 	 1.04872860523978171654e-02 	 1.62312337724718175336e-01 	 2.69776917541804051037e-01 
0.03750 	 1.07507552986045896992e-02 	 1.60983712593153138748e-01 	 2.70035043968814891802e-01 
0.04583 	 1.11627280646174435741e-02 	 1.59720855721426607809e-01 	 2.69017125167093529292e-01 
0.05417 	 1.12115923904908612596e-02 	 1.60863663429981873509e-01 	 2.69964702624435393119e-01 
0.06250 	 1.06382187171282557164e-02 	 1.59993969495425991667e-01 	 2.70607947496201151072e-01 
0.07083 	 1.08696115585254562963e-02 	 1.61079692617829811629e-01 	 2.71145625825679026377e-01 
0.07917 	 1.05573460337150919208e-02 	 1.60936062466678575511e-01 	 2.71925621284802188082e-01 
0.08750 	 1.11016526642406920117e-02 	 1.62319491697909018546e-01 	 2.72574050686743007965e-01 
0.09583 	 1.10271555615832177188e-02 	 1.60557214946444981596e-01 	 2.71997126190717419814e-01 
0.10417 	 1.07393804482358509733e-02 	 1.62344766600718171112e-01 	 2.72496360697715211963e-01 
0.11250 	 1.12818505685359869034e-02 	 1.62352277672817985055e-01 	 2.74184592216242029039e-01 
0.12083 	 1.12259583270951923684e-02 	 1.62569953776350112351e-01 	 2.73690456631290435219e-01 
0.12917 	 1.13215363923112859873e-02 	 1.62196006118939861640e-01 	 2.75256337547483076467e-01 
0.13750 	 1.16133667682669274729e-02 	 1.62927158128667953774e-01 	 2.75404160742763859382e-01 
0.14583 	 1.15134134541882617725e-02 	 1.63626805005197079046e-01 	 2.75673588120492751852e-01 
0.15417 	 1.16844468846528676959e-02 	 1.64206718045876387535e-01 	 2.78217302908501884495e-01 
0.16250 	 1.08856151653351669595e-02 	 1.63922889556581352632e-01 	 2.78299692109775731463e-01 
0.17083 	 1.07433493547525842071e-02 	 1.64135745589133241751e-01 	 2.80158054301367920313e-01 
0.17917 	 1.09988922203367364000e-02 	 1.64284935343264465457e-01 	 2.81090834156280222622e-01 
0.18750 	 1.11887925991831834599e-02 	 1.64516135655815853855e-01 	 2.82933706329863920992e-01 
0.19583 	 1.12701667913152163425e-02 	 1.64102263875712472974e-01 	 2.84497300667783725725e-01 
0.20417 	 1.16129085983827824713e-02 	 1.66434076786752566113e-01 	 2.84918179073097577181e-01 
0.21250 	 1.12137741369000096953e-02 	 1.65984317503656192416e-01 	 2.86663909939808392302e-01 
0.22083 	 1.14511176380771816097e-02 	 1.66610536484476989827e-01 	 2.87337545429503238292e-01 
0.22917 	 1.15388376692460454392e-02 	 1.66286054489512280519e-01 	 2.90646399276286604429e-01 
0.23750 	 1.12012882183062361524e-02 	 1.66855355355932627459e-01 	 2.91263963696737238074e-01 
0.24583 	 1.15786001484690509455e-02 	 1.67678826629731908548e-01 	 2.92513809278899306054e-01 
0.25417 	 1.14944379566041046670e-02 	 1.67455200868259379554e-01 	 2.94403518332576219496e-01 
0.26250 	 1.15332611752058649540e-02 	 1.69142193795653261734e-01 	 2.97785321194544927437e-01 
0.27083 	 1.16126144728091462710e-02 	 1.69254714793092037040e-01 	 2.97973729252308139337e-01 
0.27917 	 1.17337563082206778470e-02 	 1.70400078366947232977e-01 	 2.99869508115935434756e-01 
0.28750 	 1.17416911003982056549e-02 	 1.69799275043300418320e-01 	 3.01714464938134141470e-01 
0.29583 	 1.16600771319593232711e-02 	 1.70860031102474912990e-01 	 3.04099548343111925064e-01 
0.30417 	 1.18977330566484729851e-02 	 1.71731636345363647411e-01 	 3.05845333213632664116e-01 
0.31250 	 1.17918159509204107521e-02 	 1.72313945261364453998e-01 	 3.06748692139201417639e-01 
0.32083 	 1.18120997732027860350e-02 	 1.73178148041551432934e-01 	 3.09572337326678992397e-01 
0.32917 	 1.19250176860717684024e-02 	 1.73400954925777478488e-01 	 3.12212608699615812302e-01 
0.33750 	 1.19253633868741260732e-02 	 1.74800345350853314486e-01 	 3.14576855739434779746e-01 
0.34583 	 1.19422604974319269272e-02 	 1.74991706924379458732e-01 	 3.17445503163353626164e-01 
0.35417 	 1.18768866930377380020e-02 	 1.76155730721811176753e-01 	 3.19572845767101321179e-01 
0.36250 	 1.20019156790039729921e-02 	 1.76689473617895248525e-01 	 3.21804981679334634048e-01 
0.37083 	 1.19892983145485406554e-02 	 1.77565742970180101556e-01 	 3.24028643864849530409e-01 
0.37917 	 1.21060024860387190765e-02 	 1.78404822868929113788e-01 	 3.26936085323919989332e-01 
0.38750 	 1.20973243618394815657e-02 	 1.77907396291989788883e-01 	 3.29517875055610198753e-01 
0.39583 	 1.20516515758074538311e-02 	 1.79812730209197607634e-01 	 3.33496911107843185818e-01 
0.40417 	 1.21966407144806707197e-02 	 1.81260064658921887792e-01 	 3.36617542987812323751e-01 
0.41250 	 1.21429816022739760911e-02 	 1.81752256217485336220e-01 	 3.39359544075835906085e-01 
0.42083 	 1.21385880528471074014e-02 	 1.82672177495318277529e-01 	 3.41612023898124006482e-01 
0.42917 	 1.21605045039760023551e-02 	 1.82852871080436962803e-01 	 3.44635833203459585050e-01 
0.43750 	 1.23719045071704215194e-02 	 1.84611570350667331120e-01 	 3.48866476708413530972e-01 
0.44583 	 1.23250661396239746814e-02 	 1.85931166172576406437e-01 	 3.52545899133018980631e-01 
0.45417 	 1.23275134493451756640e-02 	 1.85977264483127485706e-01 	 3.55456934072176211625e-01 
0.46250 	 1.24349028706395477173e-02 	 1.87423537998939515603e-01 	 3.57847558376410745939e-01 
0.47083 	 1.25855082437061338574e-02 	 1.88942445903429012688e-01 	 3.61475188381530254667e-01 
0.47917 	 1.24510114152333283000e-02 	 1.90000150182886073935e-01 	 3.65030726318788800722e-01 
0.48750 	 1.26042959324171883334e-02 	 1.90723755068229500198e-01 	 3.70976139446184904891e-01 
0.49583 	 1.26406145044657153981e-02 	 1.91902242527858868382e-01 	 3.72182921411197908945e-01 
0.50417 	 1.26994259118265503256e-02 	 1.92096015826141497396e-01 	 3.76399789599743239688e-01 
0.51250 	 1.28134715579195611335e-02 	 1.94157706364906423868e-01 	 3.80288597147245888141e-01 
0.52083 	 1.26693360033404960746e-02 	 1.95099850509079020267e-01 	 3.83062579834798300205e-01 
0.52917 	 1.27513791124094950924e-02 	 1.96366405170271624003e-01 	 3.86496210244077043061e-01 
0.53750 	 1.29295763352199905710e-02 	 1.97070098145528588285e-01 	 3.90298659462675057163e-01 
0.54583 	 1.28813497318411799425e-02 	 1.98255338053809765375e-01 	 3.94554461915092913316e-01 
0.55417 	 1.30668943843847296798e-02 	 2.00972748865251737982e-01 	 3.97587839475775139952e-01 
0.56250 	 1.28950015335900138730e-02 	 2.01026321002134994442e-01 	 4.02165220370989895393e-01 
0.57083 	 1.30209546793812625670e-02 	 2.02751268300581766191e-01 	 4.06549138877058013897e-01 
0.57917 	 1.30639961015553036916e-02 	 2.04550452778679781041e-01 	 4.10957428618623110683e-01 
0.58750 	 1.30798488991796853925e-02 	 2.05519390478898278385e-01 	 4.15410694640652444765e-01 
0.59583 	 1.30986429559613055257e-02 	 2.07583871156560434423e-01 	 4.20277763937047077469e-01 
0.60417 	 1.33530016137252943026e-02 	 2.08854262020484127138e-01 	 4.25205955853421191382e-01 
0.61250 	 1.33271851786282580915e-02 	 2.10331401374588611297e-01 	 4.30160084370611317528e-01 
0.62083 	 1.34553142446562426504e-02 	 2.11436661822286292578e-01 	 4.34836063736837863392e-01 
0.62917 	 1.33850256646789334686e-02 	 2.13252861140502514292e-01 	 4.40224298358276644461e-01 
0.63750 	 1.35600750598709306888e-02 	 2.15237533285948329231e-01 	 4.44774640563252832148e-01 
0.64583 	 1.38153947890817460631e-02 	 2.16477053395038032679e-01 	 4.51127793501850171687e-01 
0.65417 	 1.37734507276113197355e-02 	 2.17785783275925154401e-01 	 4.56313676111031463201e-01 
0.66250 	 1.39033863534160848086e-02 	 2.20295419889782795320e-01 	 4.61751393725026881842e-01 
0.67083 	 1.37953896187443317278e-02 	 2.22560921006425049828e-01 	 4.68034592153510731194e-01 
0.67917 	 1.39599151721863309894e-02 	 2.22989162640096438839e-01 	 4.72368546232289021614e-01 
0.68750 	 1.39077695454351765725e-02 	 2.25086507104296035253e-01 	 4.76673372459432365122e-01 
0.69583 	 1.40311604224827597004e-02 	 2.26738079576077528055e-01 	 4.82356524753317528198e-01 
0.70417 	 1.41898543222847839385e-02 	 2.29217514631807645076e-01 	 4.87943135403985706056e-01 
0.71250 	 1.42784581904182861223e-02 	 2.31402225746559470076e-01 	 4.94612913012453525585e-01 
0.72083 	 1.42658612766362047353e-02 	 2.33297943936328272541e-01 	 5.04133859740078182909e-01 
0.72917 	 1.44400359164866022577e-02 	 2.35581267709724206938e-01 	 5.06655967431002385304e-01 
0.73750 	 1.44200681167858946186e-02 	 2.37480238273101079693e-01 	 5.13537721678654079938e-01 
0.74583 	 1.45072617154298286885e-02 	 2.40314992297706864210e-01 	 5.17763338035752140875e-01 
0.75417 	 1.45026627995620653599e-02 	 2.41994922958985059225e-01 	 5.22635627522970103165e-01 
0.76250 	 1.47072738771068713820e-02 	 2.44665078512375427922e-01 	 5.31036009984657497718e-01 
0.77083 	 1.46772353143368328859e-02 	 2.47082389533042984242e-01 	 5.36549770985102814080e-01 
0.77917 	 1.49060324947141564084e-02 	 2.49910225358202731094e-01 	 5.44168731984787212852e-01 
0.78750 	 1.49491212096847566476e-02 	 2.51656673456981561099e-01 	 5.51294260658217405435e-01 
0.79583 	 1.49440147913614818087e-02 	 2.54842046247655718005e-01 	 5.58598210620910751167e-01 
0.80417 	 1.51314226543561233806e-02 	 2.57447885637002327197e-01 	 5.64030488406393470946e-01 
0.81250 	 1.51576630895700458640e-02 	 2.59611466834002879711e-01 	 5.71307395972471931955e-01 
0.82083 	 1.51214400136322046214e-02 	 2.62996625828775532074e-01 	 5.76973472841177836834e-01 
0.82917 	 1.54419838499551698857e-02 	 2.66862217684174340970e-01 	 5.87162506269810369197e-01 
0.83750 	 1.54188486778145290856e-02 	 2.69705063705841796562e-01 	 5.90960966984946600711e-01 
0.84583 	 1.55362714700709690641e-02 	 2.73433519141351388804e-01 	 6.00202483223177929439e-01 
0.85417 	 1.57319588595817190513e-02 	 2.76780668217294523181e-01 	 6.09248530720269743099e-01 
0.86250 	 1.58520366519448417664e-02 	 2.81986119618312769397e-01 	 6.16180032974808056245e-01 
0.87083 	 1.58050581955785744703e-02 	 2.85152534518566036503e-01 	 6.23970391348734332304e-01 
0.87917 	 1.59129330574226124373e-02 	 2.89314000469802046211e-01 	 6.30833411384675635247e-01 
0.88750 	 1.61556973125379331468e-02 	 2.94016849723911732895e-01 	 6.42565977392849263516e-01 
0.89583 	 1.62745682666669937155e-02 	 2.98272848097530574041e-01 	 6.47563344669407459087e-01 
0.90417 	 1.62773249078524175071e-02 	 3.04102258030593486371e-01 	 6.57055562721042929475e-01 
0.91250 	 1.64760618057762479871e-02 	 3.08985581749029458720e-01 	 6.64698350697979334356e-01 
0.92083 	 1.64547971618593212584e-02 	 3.14537470607425262425e-01 	 6.71193912016394778064e-01 
0.92917 	 1.65663815166498633313e-02 	 3.20813278310171590135e-01 	 6.82971593203960058993e-01 
0.93750 	 1.65990808062014029434e-02 	 3.28470092835844329482e-01 	 6.90136368875983730042e-01 
0.94583 	 1.68328685402942268556e-02 	 3.35622700033114951257e-01 	 6.99966919184363489670e-01 
0.95417 	 1.68956722883324347850e-02 	 3.44709391318594238207e-01 	 7.10162576233818287896e-01 
0.96250 	 1.70719941844927718122e-02 	 3.54051662707391578966e-01 	 7.19630887933891960628e-01 
0.97083 	 1.71241710542614361534e-02 	 3.65465596774490919518e-01 	 7.29222714315718056888e-01 
0.97917 	 1.70876921603458631349e-02 	 3.78821852024623817456e-01 	 7.39128299871044558422e-01 
0.98750 	 1.72437976966300782200e-02 	 3.92335685890332797054e-01 	 7.47649810672264658606e-01 
0.99583 	 1.73653451285632684509e-02 	 4.10809488957955715183e-01 	 7.56721408824467811627e-01 
1.00417 	 1.75151333566572094125e-02 	 4.33954325953164299357e-01 	 7.66876069652168812496e-01 
1.01250 	 1.75907114647720075329e-02 	 4.62208404691481389293e-01 	 7.73584213514608043383e-01 
1.02083 	 1.78939507515427850826e-02 	 5.03905345792256098569e-01 	 7.87828589049576866188e-01 
1.02917 	 1.79486386471694563116e-02 	 5.64977078662188270108e-01 	 7.96994489895524904632e-01 
1.03750 	 1.80970710220596624207e-02 	 6.84596707308292473648e-01 	 8.08284896944641340077e-01 
1.04583 	 1.82979792248339906413e-02 	 1.98901162317381197120e+00 	 8.19937398764149949493e-01 
1.05417 	 1.82614939320803019995e-02 	 9.28158164984009714793e-01 	 8.31108663212796971997e-01 
1.06250 	 1.84682536302521425886e-02 	 6.32886886661952474675e-01 	 8.42047090432183065190e-01 
1.07083 	 1.86498978166498713405e-02 	 5.33964399475320150579e-01 	 8.53502264185550307829e-01 
1.07917 	 1.87721703583722671071e-02 	 4.76745633060068230158e-01 	 8.63503685146882360435e-01 
1.08750 	 1.88339196199849602531e-02 	 4.36339462743991546301e-01 	 8.77097207037997095291e-01 
1.09583 	 1.89782135296397286295e-02 	 4.06386136648472284794e-01 	 8.89121503027668125263e-01 
1.10417 	 1.91268045134089618997e-02 	 3.83316677694908736207e-01 	 9.01332508679533184193e-01 
1.11250 	 1.92102458160887529237e-02 	 3.64317680713580061003e-01 	 9.11092744831079048851e-01 
1.12083 	 1.93915813247996608737e-02 	 3.49104642025861611199e-01 	 9.26454911730287600236e-01 
1.12917 	 1.94535470051106600120e-02 	 3.34070770002842409863e-01 	 9.36810715510412839180e-01 
1.13750 	 1.97027730660980122945e-02 	 3.20954575599705305144e-01 	 9.47769696343595868804e-01 
1.14583 	 1.97685192755184639679e-02 	 3.10748891470086163746e-01 	 9.63112063688070452194e-01 
1.15417 	 2.00511796371709780096e-02 	 3.00408877141804087074e-01 	 9.74410824639260875202e-01 
1.16250 	 2.02226056420457336871e-02 	 2.91534739175938306666e-01 	 9.87183551443519546886e-01 
1.17083 	 2.03050508732777745813e-02 	 2.82116493358691211579e-01 	 1.00434262817718811256e+00 
1.17917 	 2.04968735890780212605e-02 	 2.73998602824752690577e-01 	 1.01362906710731337512e+00 
1.18750 	 2.05099016263385613978e-02 	 2.66279242256996062643e-01 	 1.02657060222294216345e+00 
1.19583 	 2.07215628671800246308e-02 	 2.59291409932526417670e-01 	 1.04167365826083102576e+00 
1.20417 	 2.09215566209826342448e-02 	 2.52610551557897022867e-01 	 1.05510325072532040735e+00 
1.21250 	 2.10313883732132535231e-02 	 2.46816896210232616937e-01 	 1.07095392345812068235e+00 
1.22083 	 2.12869764093884042411e-02 	 2.40842491565416982890e-01 	 1.08803376441495647242e+00 
1.22917 	 2.13063389704383557288e-02 	 2.34989308057495904780e-01 	 1.10162844452510721993e+00 
1.23750 	 2.14142742719318698863e-02 	 2.30086830673440850825e-01 	 1.11510511401214218452e+00 
1.24583 	 2.17574081234131362639e-02 	 2.24837044323717150096e-01 	 1.12655725359675118469e+00 
1.25417 	 2.18578947837718383373e-02 	 2.19838965279557430055e-01 	 1.14345833628049198261e+00 
1.26250 	 2.21160602947024845233e-02 	 2.15463368804768656828e-01 	 1.16144390346603065822e+00 
1.27083 	 2.22010828694481632262e-02 	 2.10801379057462878741e-01 	 1.17238293005173765948e+00 
1.27917 	 2.23784100449268170963e-02 	 2.07056204983901620542e-01 	 1.19089552161911171879e+00 
1.28750 	 2.25543408866988280559e-02 	 2.01932035417011379597e-01 	 1.20579880506274128571e+00 
1.29583 	 2.28213100675119760774e-02 	 1.98135969416967760992e-01 	 1.22202909749275057116e+00 
1.30417 	 2.29532059649608169427e-02 	 1.94355391749365613574e-01 	 1.23855795097637177982e+00 
1.31250 	 2.30589923522140499701e-02 	 1.90717674166787087842e-01 	 1.25081881221388324654e+00 
1.32083 	 2.33161285664123807404e-02 	 1.86767450032890802714e-01 	 1.27470155527978579180e+00 
1.32917 	 2.35017843156469195820e-02 	 1.83161997274934984503e-01 	 1.29148663600137036944e+00 
1.33750 	 2.36860478946804980938e-02 	 1.79903100619624528589e-01 	 1.30738945250179416924e+00 
1.34583 	 2.38599213624628124497e-02 	 1.76533865223995944937e-01 	 1.32658814923748136216e+00 
1.35417 	 2.40797989025754825831e-02 	 1.72974704199260753690e-01 	 1.34512316322772895738e+00 
1.36250 	 2.42774741680363732865e-02 	 1.69596769693226984144e-01 	 1.36175886346657026849e+00 
1.37083 	 2.45588235980196238628e-02 	 1.67136701717812502510e-01 	 1.37708733386834936141e+00 
1.37917 	 2.47149959437642785520e-02 	 1.63627653962911845387e-01 	 1.39334916757759796901e+00 
1.38750 	 2.49993983224650398456e-02 	 1.60665135227988947753e-01 	 1.41470950550335206053e+00 
1.39583 	 2.51458561233020364001e-02 	 1.57715596923167444832e-01 	 1.43391904482527765552e+00 
1.40417 	 2.54048229385274541847e-02 	 1.55320253174580813482e-01 	 1.45244338597465727503e+00 
1.41250 	 2.56232985504863293447e-02 	 1.52157343002035289059e-01 	 1.47257520054626223072e+00 
1.42083 	 2.58551882687754266965e-02 	 1.49575415349551738009e-01 	 1.49548312751865308812e+00 
1.42917 	 2.60578682838139528977e-02 	 1.46759992512246306706e-01 	 1.51437693660343652979e+00 
1.43750 	 2.62531002413054249944e-02 	 1.43816467632429029200e-01 	 1.53612403754148107993e+00 
1.44583 	 2.64679429683521878769e-02 	 1.41727507247066897289e-01 	 1.55164749540022950391e+00 
1.45417 	 2.67513478965713813462e-02 	 1.39100787531126146579e-01 	 1.57398214984819384554e+00 
1.46250 	 2.70850134867139033523e-02 	 1.36703340036387094303e-01 	 1.59712491437640635716e+00 
1.47083 	 2.72496493140331995375e-02 	 1.34090214078984332202e-01 	 1.61297661663443525626e+00 
1.47917 	 2.74127734523048928461e-02 	 1.31699309716211493404e-01 	 1.62959738928575958994e+00 
1.48750 	 2.76734044778028619171e-02 	 1.29242640238712236389e-01 	 1.65602761145513022178e+00 
1.49583 	 2.78000758128315247908e-02 	 1.27203299521814500173e-01 	 1.67725077670020938925e+00 
1.50417 	 2.80691970597057062486e-02 	 1.25032515217028766807e-01 	 1.69683563774116774603e+00 
1.51250 	 2.83457012755968483508e-02 	 1.23199154877142169617e-01 	 1.71653518600888266299e+00 
1.52083 	 2.86053881591734650292e-02 	 1.20958621591431128572e-01 	 1.73703654801566154120e+00 
1.52917 	 2.89225082177772402359e-02 	 1.18982390080905289786e-01 	 1.75746851424122585428e+00 
1.53750 	 2.91815363905379675236e-02 	 1.16926024603721659401e-01 	 1.77639395337015826293e+00 
1.54583 	 2.92366800472852114701e-02 	 1.14770602085813244742e-01 	 1.79679942979321372043e+00 
1.55417 	 2.96721135189999159210e-02 	 1.12878220376371060651e-01 	 1.81987464213051608475e+00 
1.56250 	 2.98832769120195573809e-02 	 1.10983375022791902476e-01 	 1.84403149092376694718e+00 
1.57083 	 3.01775202313169094159e-02 	 1.09215838368040843442e-01 	 1.87322722623574655643e+00 
1.57917 	 3.05123025974501881075e-02 	 1.07231328684523494199e-01 	 1.89551154481827865972e+00 
1.58750 	 3.07443367825869298682e-02 	 1.05594004557554466128e-01 	 1.91230081442010502180e+00 
1.59583 	 3.09564158822890379830e-02 	 1.03812865701118334227e-01 	 1.93116970593600312256e+00 
1.60417 	 3.13372672166169277674e-02 	 1.01871309984009908445e-01 	 1.95288773875911791933e+00 
1.61250 	 3.15286179039858463491e-02 	 1.00083302488153239040e-01 	 1.97223103866678473040e+00 
1.62083 	 3.17491820099066041072e-02 	 9.85403991623032549096e-02 	 2.00363448365905050252e+00 
1.62917 	 3.20647645336526801452e-02 	 9.65016520248724168907e-02 	 2.02682513690077037438e+00 
1.63750 	 3.23539563358590243070e-02 	 9.51692602486236410853e-02 	 2.04782688089637421314e+00 
1.64583 	 3.27775044997278136583e-02 	 9.35591392276135386252e-02 	 2.06653629477465861086e+00 
1.65417 	 3.30202567340660141371e-02 	 9.17608109518007059036e-02 	 2.08671046927315773090e+00 
1.66250 	 3.32796396823086815253e-02 	 9.04177323662322396380e-02 	 2.11252612439026554725e+00 
1.67083 	 3.35630101254901988539e-02 	 8.88007181819545493573e-02 	 2.11969664140961544518e+00 
1.67917 	 3.38761767231623919794e-02 	 8.76236658151715031018e-02 	 2.15101917561346267505e+00 
1.68750 	 3.41250386480268022571e-02 	 8.60949129798602857955e-02 	 2.16832320625320162932e+00 
1.69583 	 3.45443455798260246059e-02 	 8.44432124266250583311e-02 	 2.19246633219810505011e+00 
1.70417 	 3.48373641094375241511e-02 	 8.32304524641595266932e-02 	 2.20989352799335314614e+00 
1.71250 	 3.51584339234897388926e-02 	 8.19493056562769356388e-02 	 2.23120253705359639085e+00 
1.72083 	 3.55894909305520257270e-02 	 8.05578783877056447960e-02 	 2.24885756353731158796e+00 
1.72917 	 3.58879752349294672831e-02 	 7.94570540254100343702e-02 	 2.26399252367420444898e+00 
1.73750 	 3.62199589284464135153e-02 	 7.77143701133358733024e-02 	 2.28560168557365317454e+00 
1.74583 	 3.64206350545595650137e-02 	 7.64797812683331856842e-02 	 2.30364148577610405866e+00 
1.75417 	 3.68217062290247115763e-02 	 7.53680330190925062972e-02 	 2.31644887083677586403e+00 
1.76250 	 3.72137641179738562491e-02 	 7.41259384375257956989e-02 	 2.33577420927446954835e+00 
1.77083 	 3.74583539726592029684e-02 	 7.29113110299832722916e-02 	 2.34824742566461308613e+00 
1.77917 	 3.77666687410292412075e-02 	 7.17175822989470079794e-02 	 2.36438599865494136765e+00 
1.78750 	 3.82084432782089228331e-02 	 7.03860265154523517817e-02 	 2.37400568332875216981e+00 
1.79583 	 3.84431146776469598314e-02 	 6.94371343522339895538e-02 	 2.38998044498612438602e+00 
1.80417 	 3.88361442032372841671e-02 	 6.81871941510768242445e-02 	 2.39688596882420901224e+00 
1.81250 	 3.91436492364611310357e-02 	 6.69993135567903547178e-02 	 2.40376021229382663691e+00 
1.82083 	 3.95386868407777564149e-02 	 6.60869987654097573726e-02 	 2.41647984228470180668e+00 
1.82917 	 3.99013974870199641942e-02 	 6.52921422693973491080e-02 	 2.42282717344812326132e+00 
1.83750 	 4.01614692715821994251e-02 	 6.39299559458242072640e-02 	 2.43359837031941150798e+00 
1.84583 	 4.06400918641981051538e-02 	 6.29743278441466380890e-02 	 2.43014970383658690523e+00 
1.85417 	 4.08892454175131189742e-02 	 6.19138911927363325138e-02 	 2.44514728214530130401e+00 
1.86250 	 4.12615324237135608354e-02 	 6.10706577391002120025e-02 	 2.44273349567230901869e+00 
1.87083 	 4.15960320931475363571e-02 	 5.97803604698134635753e-02 	 2.44243577224779873092e+00 
1.87917 	 4.20661267131542809805e-02 	 5.88069102486291211962e-02 	 2.44303418522340543007e+00 
1.88750 	 4.24193363448959054329e-02 	 5.80632981274509449299e-02 	 2.44035843499754934172e+00 
1.89583 	 4.26853515692411089599e-02 	 5.72812207052546609742e-02 	 2.43552571920299820718e+00 
1.90417 	 4.31233728773347535501e-02 	 5.65626844103139375664e-02 	 2.43021482107040931453e+00 
1.91250 	 4.34136606219397355733e-02 	 5.53749520737637779266e-02 	 2.41886979783105182662e+00 
1.92083 	 4.38184777297814034847e-02 	 5.43818046106130728590e-02 	 2.40674602879690269219e+00 
1.92917 	 4.41541746310463098513e-02 	 5.35853202264087516427e-02 	 2.39425698164397804391e+00 
1.93750 	 4.46019952607193473360e-02 	 5.27515705957154329431e-02 	 2.37658697116115869008e+00 
1.94583 	 4.48999587491110824233e-02 	 5.17925385310093189251e-02 	 2.36405338786711638477e+00 
1.95417 	 4.52396065716834869241e-02 	 5.08936568567713437661e-02 	 2.33080409773838725940e+00 
1.96250 	 4.54788623958802887270e-02 	 5.03538624646088020520e-02 	 2.30866074249057406931e+00 
1.97083 	 4.59783204708891918289e-02 	 4.93694944233609711581e-02 	 2.27718791999722558472e+00 
1.97917 	 4.63303363568158821373e-02 	 4.87153778528657613323e-02 	 2.25099541455224816389e+00 
1.98750 	 4.64814366701772202495e-02 	 4.78725306173984135882e-02 	 2.21080496723750608012e+00 
1.99583 	 4.69565222676772836552e-02 	 4.70056942136753974637e-02 	 1.15491306944647020849e+00 
2.00417 	 3.99268372536309579246e+00 	 3.73868057353853178171e+00 	 7.35563166742102652051e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   1.0E-4		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1e6; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);