time elapsed: 151.7471 seconds

=================================

sim results:

number of photons = 1000000.000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 2.225e-02 	 1.655e-01 	 2.692e-01 
0.01250 	 7.333e-03 	 1.660e-01 	 2.685e-01 
0.02083 	 1.186e-02 	 1.649e-01 	 2.678e-01 
0.02917 	 1.049e-02 	 1.623e-01 	 2.698e-01 
0.03750 	 1.075e-02 	 1.610e-01 	 2.700e-01 
0.04583 	 1.116e-02 	 1.597e-01 	 2.690e-01 
0.05417 	 1.121e-02 	 1.609e-01 	 2.700e-01 
0.06250 	 1.064e-02 	 1.600e-01 	 2.706e-01 
0.07083 	 1.087e-02 	 1.611e-01 	 2.711e-01 
0.07917 	 1.056e-02 	 1.609e-01 	 2.719e-01 
0.08750 	 1.110e-02 	 1.623e-01 	 2.726e-01 
0.09583 	 1.103e-02 	 1.606e-01 	 2.720e-01 
0.10417 	 1.074e-02 	 1.623e-01 	 2.725e-01 
0.11250 	 1.128e-02 	 1.624e-01 	 2.742e-01 
0.12083 	 1.123e-02 	 1.626e-01 	 2.737e-01 
0.12917 	 1.132e-02 	 1.622e-01 	 2.753e-01 
0.13750 	 1.161e-02 	 1.629e-01 	 2.754e-01 
0.14583 	 1.151e-02 	 1.636e-01 	 2.757e-01 
0.15417 	 1.168e-02 	 1.642e-01 	 2.782e-01 
0.16250 	 1.089e-02 	 1.639e-01 	 2.783e-01 
0.17083 	 1.074e-02 	 1.641e-01 	 2.802e-01 
0.17917 	 1.100e-02 	 1.643e-01 	 2.811e-01 
0.18750 	 1.119e-02 	 1.645e-01 	 2.829e-01 
0.19583 	 1.127e-02 	 1.641e-01 	 2.845e-01 
0.20417 	 1.161e-02 	 1.664e-01 	 2.849e-01 
0.21250 	 1.121e-02 	 1.660e-01 	 2.867e-01 
0.22083 	 1.145e-02 	 1.666e-01 	 2.873e-01 
0.22917 	 1.154e-02 	 1.663e-01 	 2.906e-01 
0.23750 	 1.120e-02 	 1.669e-01 	 2.913e-01 
0.24583 	 1.158e-02 	 1.677e-01 	 2.925e-01 
0.25417 	 1.149e-02 	 1.675e-01 	 2.944e-01 
0.26250 	 1.153e-02 	 1.691e-01 	 2.978e-01 
0.27083 	 1.161e-02 	 1.693e-01 	 2.980e-01 
0.27917 	 1.173e-02 	 1.704e-01 	 2.999e-01 
0.28750 	 1.174e-02 	 1.698e-01 	 3.017e-01 
0.29583 	 1.166e-02 	 1.709e-01 	 3.041e-01 
0.30417 	 1.190e-02 	 1.717e-01 	 3.058e-01 
0.31250 	 1.179e-02 	 1.723e-01 	 3.067e-01 
0.32083 	 1.181e-02 	 1.732e-01 	 3.096e-01 
0.32917 	 1.193e-02 	 1.734e-01 	 3.122e-01 
0.33750 	 1.193e-02 	 1.748e-01 	 3.146e-01 
0.34583 	 1.194e-02 	 1.750e-01 	 3.174e-01 
0.35417 	 1.188e-02 	 1.762e-01 	 3.196e-01 
0.36250 	 1.200e-02 	 1.767e-01 	 3.218e-01 
0.37083 	 1.199e-02 	 1.776e-01 	 3.240e-01 
0.37917 	 1.211e-02 	 1.784e-01 	 3.269e-01 
0.38750 	 1.210e-02 	 1.779e-01 	 3.295e-01 
0.39583 	 1.205e-02 	 1.798e-01 	 3.335e-01 
0.40417 	 1.220e-02 	 1.813e-01 	 3.366e-01 
0.41250 	 1.214e-02 	 1.818e-01 	 3.394e-01 
0.42083 	 1.214e-02 	 1.827e-01 	 3.416e-01 
0.42917 	 1.216e-02 	 1.829e-01 	 3.446e-01 
0.43750 	 1.237e-02 	 1.846e-01 	 3.489e-01 
0.44583 	 1.233e-02 	 1.859e-01 	 3.525e-01 
0.45417 	 1.233e-02 	 1.860e-01 	 3.555e-01 
0.46250 	 1.243e-02 	 1.874e-01 	 3.578e-01 
0.47083 	 1.259e-02 	 1.889e-01 	 3.615e-01 
0.47917 	 1.245e-02 	 1.900e-01 	 3.650e-01 
0.48750 	 1.260e-02 	 1.907e-01 	 3.710e-01 
0.49583 	 1.264e-02 	 1.919e-01 	 3.722e-01 
0.50417 	 1.270e-02 	 1.921e-01 	 3.764e-01 
0.51250 	 1.281e-02 	 1.942e-01 	 3.803e-01 
0.52083 	 1.267e-02 	 1.951e-01 	 3.831e-01 
0.52917 	 1.275e-02 	 1.964e-01 	 3.865e-01 
0.53750 	 1.293e-02 	 1.971e-01 	 3.903e-01 
0.54583 	 1.288e-02 	 1.983e-01 	 3.946e-01 
0.55417 	 1.307e-02 	 2.010e-01 	 3.976e-01 
0.56250 	 1.290e-02 	 2.010e-01 	 4.022e-01 
0.57083 	 1.302e-02 	 2.028e-01 	 4.065e-01 
0.57917 	 1.306e-02 	 2.046e-01 	 4.110e-01 
0.58750 	 1.308e-02 	 2.055e-01 	 4.154e-01 
0.59583 	 1.310e-02 	 2.076e-01 	 4.203e-01 
0.60417 	 1.335e-02 	 2.089e-01 	 4.252e-01 
0.61250 	 1.333e-02 	 2.103e-01 	 4.302e-01 
0.62083 	 1.346e-02 	 2.114e-01 	 4.348e-01 
0.62917 	 1.339e-02 	 2.133e-01 	 4.402e-01 
0.63750 	 1.356e-02 	 2.152e-01 	 4.448e-01 
0.64583 	 1.382e-02 	 2.165e-01 	 4.511e-01 
0.65417 	 1.377e-02 	 2.178e-01 	 4.563e-01 
0.66250 	 1.390e-02 	 2.203e-01 	 4.618e-01 
0.67083 	 1.380e-02 	 2.226e-01 	 4.680e-01 
0.67917 	 1.396e-02 	 2.230e-01 	 4.724e-01 
0.68750 	 1.391e-02 	 2.251e-01 	 4.767e-01 
0.69583 	 1.403e-02 	 2.267e-01 	 4.824e-01 
0.70417 	 1.419e-02 	 2.292e-01 	 4.879e-01 
0.71250 	 1.428e-02 	 2.314e-01 	 4.946e-01 
0.72083 	 1.427e-02 	 2.333e-01 	 5.041e-01 
0.72917 	 1.444e-02 	 2.356e-01 	 5.067e-01 
0.73750 	 1.442e-02 	 2.375e-01 	 5.135e-01 
0.74583 	 1.451e-02 	 2.403e-01 	 5.178e-01 
0.75417 	 1.450e-02 	 2.420e-01 	 5.226e-01 
0.76250 	 1.471e-02 	 2.447e-01 	 5.310e-01 
0.77083 	 1.468e-02 	 2.471e-01 	 5.365e-01 
0.77917 	 1.491e-02 	 2.499e-01 	 5.442e-01 
0.78750 	 1.495e-02 	 2.517e-01 	 5.513e-01 
0.79583 	 1.494e-02 	 2.548e-01 	 5.586e-01 
0.80417 	 1.513e-02 	 2.574e-01 	 5.640e-01 
0.81250 	 1.516e-02 	 2.596e-01 	 5.713e-01 
0.82083 	 1.512e-02 	 2.630e-01 	 5.770e-01 
0.82917 	 1.544e-02 	 2.669e-01 	 5.872e-01 
0.83750 	 1.542e-02 	 2.697e-01 	 5.910e-01 
0.84583 	 1.554e-02 	 2.734e-01 	 6.002e-01 
0.85417 	 1.573e-02 	 2.768e-01 	 6.092e-01 
0.86250 	 1.585e-02 	 2.820e-01 	 6.162e-01 
0.87083 	 1.581e-02 	 2.852e-01 	 6.240e-01 
0.87917 	 1.591e-02 	 2.893e-01 	 6.308e-01 
0.88750 	 1.616e-02 	 2.940e-01 	 6.426e-01 
0.89583 	 1.627e-02 	 2.983e-01 	 6.476e-01 
0.90417 	 1.628e-02 	 3.041e-01 	 6.571e-01 
0.91250 	 1.648e-02 	 3.090e-01 	 6.647e-01 
0.92083 	 1.645e-02 	 3.145e-01 	 6.712e-01 
0.92917 	 1.657e-02 	 3.208e-01 	 6.830e-01 
0.93750 	 1.660e-02 	 3.285e-01 	 6.901e-01 
0.94583 	 1.683e-02 	 3.356e-01 	 7.000e-01 
0.95417 	 1.690e-02 	 3.447e-01 	 7.102e-01 
0.96250 	 1.707e-02 	 3.541e-01 	 7.196e-01 
0.97083 	 1.712e-02 	 3.655e-01 	 7.292e-01 
0.97917 	 1.709e-02 	 3.788e-01 	 7.391e-01 
0.98750 	 1.724e-02 	 3.923e-01 	 7.476e-01 
0.99583 	 1.737e-02 	 4.108e-01 	 7.567e-01 
1.00417 	 1.752e-02 	 4.340e-01 	 7.669e-01 
1.01250 	 1.759e-02 	 4.622e-01 	 7.736e-01 
1.02083 	 1.789e-02 	 5.039e-01 	 7.878e-01 
1.02917 	 1.795e-02 	 5.650e-01 	 7.970e-01 
1.03750 	 1.810e-02 	 6.846e-01 	 8.083e-01 
1.04583 	 1.830e-02 	 1.989e+00 	 8.199e-01 
1.05417 	 1.826e-02 	 9.282e-01 	 8.311e-01 
1.06250 	 1.847e-02 	 6.329e-01 	 8.420e-01 
1.07083 	 1.865e-02 	 5.340e-01 	 8.535e-01 
1.07917 	 1.877e-02 	 4.767e-01 	 8.635e-01 
1.08750 	 1.883e-02 	 4.363e-01 	 8.771e-01 
1.09583 	 1.898e-02 	 4.064e-01 	 8.891e-01 
1.10417 	 1.913e-02 	 3.833e-01 	 9.013e-01 
1.11250 	 1.921e-02 	 3.643e-01 	 9.111e-01 
1.12083 	 1.939e-02 	 3.491e-01 	 9.265e-01 
1.12917 	 1.945e-02 	 3.341e-01 	 9.368e-01 
1.13750 	 1.970e-02 	 3.210e-01 	 9.478e-01 
1.14583 	 1.977e-02 	 3.107e-01 	 9.631e-01 
1.15417 	 2.005e-02 	 3.004e-01 	 9.744e-01 
1.16250 	 2.022e-02 	 2.915e-01 	 9.872e-01 
1.17083 	 2.031e-02 	 2.821e-01 	 1.004e+00 
1.17917 	 2.050e-02 	 2.740e-01 	 1.014e+00 
1.18750 	 2.051e-02 	 2.663e-01 	 1.027e+00 
1.19583 	 2.072e-02 	 2.593e-01 	 1.042e+00 
1.20417 	 2.092e-02 	 2.526e-01 	 1.055e+00 
1.21250 	 2.103e-02 	 2.468e-01 	 1.071e+00 
1.22083 	 2.129e-02 	 2.408e-01 	 1.088e+00 
1.22917 	 2.131e-02 	 2.350e-01 	 1.102e+00 
1.23750 	 2.141e-02 	 2.301e-01 	 1.115e+00 
1.24583 	 2.176e-02 	 2.248e-01 	 1.127e+00 
1.25417 	 2.186e-02 	 2.198e-01 	 1.143e+00 
1.26250 	 2.212e-02 	 2.155e-01 	 1.161e+00 
1.27083 	 2.220e-02 	 2.108e-01 	 1.172e+00 
1.27917 	 2.238e-02 	 2.071e-01 	 1.191e+00 
1.28750 	 2.255e-02 	 2.019e-01 	 1.206e+00 
1.29583 	 2.282e-02 	 1.981e-01 	 1.222e+00 
1.30417 	 2.295e-02 	 1.944e-01 	 1.239e+00 
1.31250 	 2.306e-02 	 1.907e-01 	 1.251e+00 
1.32083 	 2.332e-02 	 1.868e-01 	 1.275e+00 
1.32917 	 2.350e-02 	 1.832e-01 	 1.291e+00 
1.33750 	 2.369e-02 	 1.799e-01 	 1.307e+00 
1.34583 	 2.386e-02 	 1.765e-01 	 1.327e+00 
1.35417 	 2.408e-02 	 1.730e-01 	 1.345e+00 
1.36250 	 2.428e-02 	 1.696e-01 	 1.362e+00 
1.37083 	 2.456e-02 	 1.671e-01 	 1.377e+00 
1.37917 	 2.471e-02 	 1.636e-01 	 1.393e+00 
1.38750 	 2.500e-02 	 1.607e-01 	 1.415e+00 
1.39583 	 2.515e-02 	 1.577e-01 	 1.434e+00 
1.40417 	 2.540e-02 	 1.553e-01 	 1.452e+00 
1.41250 	 2.562e-02 	 1.522e-01 	 1.473e+00 
1.42083 	 2.586e-02 	 1.496e-01 	 1.495e+00 
1.42917 	 2.606e-02 	 1.468e-01 	 1.514e+00 
1.43750 	 2.625e-02 	 1.438e-01 	 1.536e+00 
1.44583 	 2.647e-02 	 1.417e-01 	 1.552e+00 
1.45417 	 2.675e-02 	 1.391e-01 	 1.574e+00 
1.46250 	 2.709e-02 	 1.367e-01 	 1.597e+00 
1.47083 	 2.725e-02 	 1.341e-01 	 1.613e+00 
1.47917 	 2.741e-02 	 1.317e-01 	 1.630e+00 
1.48750 	 2.767e-02 	 1.292e-01 	 1.656e+00 
1.49583 	 2.780e-02 	 1.272e-01 	 1.677e+00 
1.50417 	 2.807e-02 	 1.250e-01 	 1.697e+00 
1.51250 	 2.835e-02 	 1.232e-01 	 1.717e+00 
1.52083 	 2.861e-02 	 1.210e-01 	 1.737e+00 
1.52917 	 2.892e-02 	 1.190e-01 	 1.757e+00 
1.53750 	 2.918e-02 	 1.169e-01 	 1.776e+00 
1.54583 	 2.924e-02 	 1.148e-01 	 1.797e+00 
1.55417 	 2.967e-02 	 1.129e-01 	 1.820e+00 
1.56250 	 2.988e-02 	 1.110e-01 	 1.844e+00 
1.57083 	 3.018e-02 	 1.092e-01 	 1.873e+00 
1.57917 	 3.051e-02 	 1.072e-01 	 1.896e+00 
1.58750 	 3.074e-02 	 1.056e-01 	 1.912e+00 
1.59583 	 3.096e-02 	 1.038e-01 	 1.931e+00 
1.60417 	 3.134e-02 	 1.019e-01 	 1.953e+00 
1.61250 	 3.153e-02 	 1.001e-01 	 1.972e+00 
1.62083 	 3.175e-02 	 9.854e-02 	 2.004e+00 
1.62917 	 3.206e-02 	 9.650e-02 	 2.027e+00 
1.63750 	 3.235e-02 	 9.517e-02 	 2.048e+00 
1.64583 	 3.278e-02 	 9.356e-02 	 2.067e+00 
1.65417 	 3.302e-02 	 9.176e-02 	 2.087e+00 
1.66250 	 3.328e-02 	 9.042e-02 	 2.113e+00 
1.67083 	 3.356e-02 	 8.880e-02 	 2.120e+00 
1.67917 	 3.388e-02 	 8.762e-02 	 2.151e+00 
1.68750 	 3.413e-02 	 8.609e-02 	 2.168e+00 
1.69583 	 3.454e-02 	 8.444e-02 	 2.192e+00 
1.70417 	 3.484e-02 	 8.323e-02 	 2.210e+00 
1.71250 	 3.516e-02 	 8.195e-02 	 2.231e+00 
1.72083 	 3.559e-02 	 8.056e-02 	 2.249e+00 
1.72917 	 3.589e-02 	 7.946e-02 	 2.264e+00 
1.73750 	 3.622e-02 	 7.771e-02 	 2.286e+00 
1.74583 	 3.642e-02 	 7.648e-02 	 2.304e+00 
1.75417 	 3.682e-02 	 7.537e-02 	 2.316e+00 
1.76250 	 3.721e-02 	 7.413e-02 	 2.336e+00 
1.77083 	 3.746e-02 	 7.291e-02 	 2.348e+00 
1.77917 	 3.777e-02 	 7.172e-02 	 2.364e+00 
1.78750 	 3.821e-02 	 7.039e-02 	 2.374e+00 
1.79583 	 3.844e-02 	 6.944e-02 	 2.390e+00 
1.80417 	 3.884e-02 	 6.819e-02 	 2.397e+00 
1.81250 	 3.914e-02 	 6.700e-02 	 2.404e+00 
1.82083 	 3.954e-02 	 6.609e-02 	 2.416e+00 
1.82917 	 3.990e-02 	 6.529e-02 	 2.423e+00 
1.83750 	 4.016e-02 	 6.393e-02 	 2.434e+00 
1.84583 	 4.064e-02 	 6.297e-02 	 2.430e+00 
1.85417 	 4.089e-02 	 6.191e-02 	 2.445e+00 
1.86250 	 4.126e-02 	 6.107e-02 	 2.443e+00 
1.87083 	 4.160e-02 	 5.978e-02 	 2.442e+00 
1.87917 	 4.207e-02 	 5.881e-02 	 2.443e+00 
1.88750 	 4.242e-02 	 5.806e-02 	 2.440e+00 
1.89583 	 4.269e-02 	 5.728e-02 	 2.436e+00 
1.90417 	 4.312e-02 	 5.656e-02 	 2.430e+00 
1.91250 	 4.341e-02 	 5.537e-02 	 2.419e+00 
1.92083 	 4.382e-02 	 5.438e-02 	 2.407e+00 
1.92917 	 4.415e-02 	 5.359e-02 	 2.394e+00 
1.93750 	 4.460e-02 	 5.275e-02 	 2.377e+00 
1.94583 	 4.490e-02 	 5.179e-02 	 2.364e+00 
1.95417 	 4.524e-02 	 5.089e-02 	 2.331e+00 
1.96250 	 4.548e-02 	 5.035e-02 	 2.309e+00 
1.97083 	 4.598e-02 	 4.937e-02 	 2.277e+00 
1.97917 	 4.633e-02 	 4.872e-02 	 2.251e+00 
1.98750 	 4.648e-02 	 4.787e-02 	 2.211e+00 
1.99583 	 4.696e-02 	 4.701e-02 	 1.155e+00 
2.00417 	 3.993e+00 	 3.739e+00 	 7.356e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   1.0E-4		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, double Nphotons, double cube_overflow);

void displayProgressBar(int progress, int total, int min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
double	W;          /* photon weight */
double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
double (*Cube)[MAX_XY][MAX_Z] = (double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

double cube_overflow;
double	Fsph;       /* fluence in spherical shell */
double	Fcyl;       /* fluence in cylindrical shell */
double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
double	Nphotons;   /* number of photons in simulation */
long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
double  rnd;        /* assigned random value 0-1 */
double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1e6; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (unsigned long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

/* print header */
fprintf(target, "number of photons = %f\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %4.3e \t %4.3e \t %4.3e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);

fclose(target);



save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, double arr[180][180][240], int x, int y, int z, double Nphotons, double cube_overflow) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %f,\n", Nphotons);
    fprintf(file, "\"overflow\": %4.3e,\n", cube_overflow);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%4.3e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(int progress, int total, int min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %d%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);