time elapsed: 15.1207 seconds

=================================

sim results:

number of photons = 1000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.000e+00 	 1.282e-01 	 2.312e-01 
0.01250 	 0.000e+00 	 1.526e-01 	 2.438e-01 
0.02083 	 1.834e-01 	 2.059e-01 	 2.564e-01 
0.02917 	 0.000e+00 	 1.568e-01 	 2.919e-01 
0.03750 	 0.000e+00 	 1.671e-01 	 2.486e-01 
0.04583 	 0.000e+00 	 1.443e-01 	 3.204e-01 
0.05417 	 0.000e+00 	 1.937e-01 	 2.643e-01 
0.06250 	 4.235e-02 	 1.302e-01 	 2.765e-01 
0.07083 	 3.400e-02 	 2.057e-01 	 2.522e-01 
0.07917 	 2.018e-04 	 1.884e-01 	 2.944e-01 
0.08750 	 2.095e-02 	 1.314e-01 	 2.716e-01 
0.09583 	 8.579e-03 	 1.498e-01 	 2.465e-01 
0.10417 	 7.114e-03 	 1.782e-01 	 3.003e-01 
0.11250 	 1.107e-02 	 1.874e-01 	 2.636e-01 
0.12083 	 4.788e-03 	 1.506e-01 	 2.938e-01 
0.12917 	 1.365e-02 	 1.403e-01 	 2.911e-01 
0.13750 	 7.398e-03 	 1.292e-01 	 2.771e-01 
0.14583 	 1.837e-02 	 1.645e-01 	 2.551e-01 
0.15417 	 1.054e-02 	 1.739e-01 	 2.219e-01 
0.16250 	 2.054e-02 	 2.025e-01 	 2.627e-01 
0.17083 	 5.270e-03 	 1.891e-01 	 2.782e-01 
0.17917 	 8.033e-03 	 1.618e-01 	 2.836e-01 
0.18750 	 1.227e-02 	 2.003e-01 	 2.541e-01 
0.19583 	 7.384e-03 	 1.469e-01 	 2.627e-01 
0.20417 	 5.591e-03 	 1.622e-01 	 2.801e-01 
0.21250 	 7.646e-03 	 1.561e-01 	 2.919e-01 
0.22083 	 1.110e-02 	 1.770e-01 	 2.946e-01 
0.22917 	 8.741e-03 	 1.627e-01 	 2.662e-01 
0.23750 	 7.854e-03 	 1.686e-01 	 2.888e-01 
0.24583 	 1.357e-02 	 1.845e-01 	 2.867e-01 
0.25417 	 1.553e-02 	 1.570e-01 	 2.845e-01 
0.26250 	 9.433e-03 	 1.341e-01 	 3.030e-01 
0.27083 	 1.315e-02 	 1.704e-01 	 2.470e-01 
0.27917 	 1.751e-02 	 1.919e-01 	 2.659e-01 
0.28750 	 1.212e-02 	 1.642e-01 	 2.638e-01 
0.29583 	 1.342e-02 	 1.926e-01 	 2.938e-01 
0.30417 	 1.421e-02 	 1.831e-01 	 2.733e-01 
0.31250 	 9.492e-03 	 1.656e-01 	 2.444e-01 
0.32083 	 1.550e-02 	 1.737e-01 	 2.747e-01 
0.32917 	 1.015e-02 	 1.772e-01 	 2.730e-01 
0.33750 	 7.624e-03 	 1.712e-01 	 2.765e-01 
0.34583 	 8.226e-03 	 1.959e-01 	 3.329e-01 
0.35417 	 8.582e-03 	 1.894e-01 	 3.047e-01 
0.36250 	 8.673e-03 	 1.662e-01 	 3.230e-01 
0.37083 	 8.503e-03 	 1.666e-01 	 2.781e-01 
0.37917 	 8.914e-03 	 1.790e-01 	 3.320e-01 
0.38750 	 7.813e-03 	 1.880e-01 	 3.136e-01 
0.39583 	 9.487e-03 	 1.770e-01 	 3.681e-01 
0.40417 	 1.371e-02 	 1.709e-01 	 3.382e-01 
0.41250 	 1.259e-02 	 1.722e-01 	 2.956e-01 
0.42083 	 1.043e-02 	 1.798e-01 	 3.476e-01 
0.42917 	 8.828e-03 	 1.606e-01 	 3.623e-01 
0.43750 	 9.023e-03 	 1.543e-01 	 3.973e-01 
0.44583 	 1.137e-02 	 1.918e-01 	 4.106e-01 
0.45417 	 8.343e-03 	 1.787e-01 	 3.840e-01 
0.46250 	 1.975e-02 	 1.907e-01 	 3.864e-01 
0.47083 	 1.539e-02 	 1.643e-01 	 3.550e-01 
0.47917 	 1.025e-02 	 1.888e-01 	 3.936e-01 
0.48750 	 1.233e-02 	 1.483e-01 	 3.968e-01 
0.49583 	 1.216e-02 	 1.739e-01 	 3.350e-01 
0.50417 	 1.049e-02 	 1.878e-01 	 4.075e-01 
0.51250 	 9.798e-03 	 2.017e-01 	 3.372e-01 
0.52083 	 8.759e-03 	 2.041e-01 	 3.320e-01 
0.52917 	 1.261e-02 	 2.029e-01 	 3.827e-01 
0.53750 	 1.550e-02 	 1.749e-01 	 3.836e-01 
0.54583 	 8.903e-03 	 1.869e-01 	 3.755e-01 
0.55417 	 4.955e-03 	 1.907e-01 	 3.823e-01 
0.56250 	 1.088e-02 	 2.101e-01 	 3.783e-01 
0.57083 	 1.090e-02 	 1.940e-01 	 4.053e-01 
0.57917 	 1.029e-02 	 2.371e-01 	 4.157e-01 
0.58750 	 1.213e-02 	 1.979e-01 	 4.040e-01 
0.59583 	 1.311e-02 	 2.116e-01 	 3.857e-01 
0.60417 	 1.059e-02 	 2.188e-01 	 4.114e-01 
0.61250 	 1.240e-02 	 2.025e-01 	 3.958e-01 
0.62083 	 8.504e-03 	 2.162e-01 	 3.857e-01 
0.62917 	 1.268e-02 	 2.354e-01 	 4.109e-01 
0.63750 	 1.141e-02 	 2.280e-01 	 4.089e-01 
0.64583 	 8.911e-03 	 2.161e-01 	 4.654e-01 
0.65417 	 1.179e-02 	 2.477e-01 	 5.269e-01 
0.66250 	 1.175e-02 	 2.380e-01 	 4.549e-01 
0.67083 	 1.046e-02 	 2.408e-01 	 4.584e-01 
0.67917 	 1.091e-02 	 2.378e-01 	 4.405e-01 
0.68750 	 1.109e-02 	 2.545e-01 	 4.670e-01 
0.69583 	 1.198e-02 	 2.482e-01 	 4.578e-01 
0.70417 	 1.048e-02 	 2.473e-01 	 4.928e-01 
0.71250 	 1.244e-02 	 2.334e-01 	 4.333e-01 
0.72083 	 1.207e-02 	 2.102e-01 	 4.616e-01 
0.72917 	 1.257e-02 	 2.168e-01 	 5.056e-01 
0.73750 	 1.072e-02 	 2.418e-01 	 5.203e-01 
0.74583 	 9.391e-03 	 2.343e-01 	 5.582e-01 
0.75417 	 8.903e-03 	 2.213e-01 	 5.644e-01 
0.76250 	 1.122e-02 	 2.467e-01 	 5.238e-01 
0.77083 	 1.127e-02 	 2.277e-01 	 5.526e-01 
0.77917 	 8.913e-03 	 2.544e-01 	 5.440e-01 
0.78750 	 1.013e-02 	 2.495e-01 	 4.817e-01 
0.79583 	 1.300e-02 	 2.553e-01 	 5.071e-01 
0.80417 	 1.005e-02 	 2.513e-01 	 5.476e-01 
0.81250 	 1.208e-02 	 2.426e-01 	 5.446e-01 
0.82083 	 1.160e-02 	 2.443e-01 	 6.125e-01 
0.82917 	 1.081e-02 	 2.554e-01 	 6.794e-01 
0.83750 	 1.181e-02 	 2.568e-01 	 6.381e-01 
0.84583 	 1.217e-02 	 2.580e-01 	 6.469e-01 
0.85417 	 1.221e-02 	 2.465e-01 	 6.022e-01 
0.86250 	 9.460e-03 	 2.485e-01 	 6.342e-01 
0.87083 	 1.301e-02 	 2.869e-01 	 6.984e-01 
0.87917 	 1.404e-02 	 2.492e-01 	 6.430e-01 
0.88750 	 1.474e-02 	 2.697e-01 	 6.446e-01 
0.89583 	 1.650e-02 	 2.780e-01 	 6.319e-01 
0.90417 	 1.489e-02 	 3.054e-01 	 7.185e-01 
0.91250 	 1.767e-02 	 2.943e-01 	 6.438e-01 
0.92083 	 1.412e-02 	 2.974e-01 	 6.951e-01 
0.92917 	 1.459e-02 	 3.294e-01 	 7.188e-01 
0.93750 	 1.878e-02 	 3.454e-01 	 7.383e-01 
0.94583 	 1.412e-02 	 3.521e-01 	 6.694e-01 
0.95417 	 1.477e-02 	 3.557e-01 	 6.596e-01 
0.96250 	 2.122e-02 	 3.846e-01 	 7.457e-01 
0.97083 	 2.104e-02 	 3.742e-01 	 6.786e-01 
0.97917 	 1.613e-02 	 3.848e-01 	 7.245e-01 
0.98750 	 2.137e-02 	 3.907e-01 	 7.948e-01 
0.99583 	 2.131e-02 	 4.245e-01 	 6.932e-01 
1.00417 	 2.133e-02 	 4.203e-01 	 7.844e-01 
1.01250 	 1.922e-02 	 4.630e-01 	 7.403e-01 
1.02083 	 1.759e-02 	 5.050e-01 	 7.187e-01 
1.02917 	 1.767e-02 	 5.909e-01 	 8.084e-01 
1.03750 	 1.457e-02 	 6.903e-01 	 8.085e-01 
1.04583 	 1.756e-02 	 2.032e+00 	 8.006e-01 
1.05417 	 1.642e-02 	 8.752e-01 	 8.391e-01 
1.06250 	 1.727e-02 	 6.081e-01 	 8.589e-01 
1.07083 	 2.007e-02 	 5.450e-01 	 8.774e-01 
1.07917 	 1.919e-02 	 4.563e-01 	 9.161e-01 
1.08750 	 1.886e-02 	 4.335e-01 	 9.118e-01 
1.09583 	 1.964e-02 	 3.989e-01 	 9.196e-01 
1.10417 	 2.110e-02 	 3.767e-01 	 8.688e-01 
1.11250 	 1.785e-02 	 3.812e-01 	 8.485e-01 
1.12083 	 1.729e-02 	 3.509e-01 	 1.003e+00 
1.12917 	 1.761e-02 	 3.286e-01 	 1.030e+00 
1.13750 	 1.751e-02 	 3.414e-01 	 8.863e-01 
1.14583 	 2.005e-02 	 3.040e-01 	 1.012e+00 
1.15417 	 1.904e-02 	 2.917e-01 	 1.087e+00 
1.16250 	 2.035e-02 	 2.876e-01 	 9.094e-01 
1.17083 	 2.021e-02 	 2.755e-01 	 1.063e+00 
1.17917 	 1.944e-02 	 2.558e-01 	 9.846e-01 
1.18750 	 2.131e-02 	 2.508e-01 	 9.357e-01 
1.19583 	 1.927e-02 	 2.576e-01 	 1.064e+00 
1.20417 	 1.962e-02 	 2.517e-01 	 9.767e-01 
1.21250 	 2.124e-02 	 2.692e-01 	 1.013e+00 
1.22083 	 1.592e-02 	 2.499e-01 	 1.094e+00 
1.22917 	 2.313e-02 	 2.369e-01 	 1.008e+00 
1.23750 	 2.297e-02 	 2.349e-01 	 9.444e-01 
1.24583 	 2.204e-02 	 2.299e-01 	 1.028e+00 
1.25417 	 2.180e-02 	 2.415e-01 	 1.069e+00 
1.26250 	 2.274e-02 	 2.237e-01 	 1.169e+00 
1.27083 	 2.106e-02 	 2.156e-01 	 1.136e+00 
1.27917 	 2.374e-02 	 2.047e-01 	 1.253e+00 
1.28750 	 2.394e-02 	 1.959e-01 	 1.303e+00 
1.29583 	 2.211e-02 	 1.889e-01 	 1.235e+00 
1.30417 	 2.386e-02 	 2.020e-01 	 1.158e+00 
1.31250 	 2.468e-02 	 1.830e-01 	 1.245e+00 
1.32083 	 2.317e-02 	 1.856e-01 	 1.188e+00 
1.32917 	 2.496e-02 	 1.856e-01 	 1.303e+00 
1.33750 	 2.368e-02 	 1.820e-01 	 1.369e+00 
1.34583 	 2.824e-02 	 1.808e-01 	 1.356e+00 
1.35417 	 2.396e-02 	 1.719e-01 	 1.304e+00 
1.36250 	 2.287e-02 	 1.661e-01 	 1.369e+00 
1.37083 	 2.367e-02 	 1.690e-01 	 1.456e+00 
1.37917 	 2.327e-02 	 1.544e-01 	 1.328e+00 
1.38750 	 2.367e-02 	 1.398e-01 	 1.442e+00 
1.39583 	 2.178e-02 	 1.389e-01 	 1.516e+00 
1.40417 	 2.658e-02 	 1.473e-01 	 1.506e+00 
1.41250 	 2.434e-02 	 1.632e-01 	 1.545e+00 
1.42083 	 2.417e-02 	 1.460e-01 	 1.449e+00 
1.42917 	 2.680e-02 	 1.663e-01 	 1.518e+00 
1.43750 	 2.710e-02 	 1.646e-01 	 1.454e+00 
1.44583 	 2.285e-02 	 1.441e-01 	 1.547e+00 
1.45417 	 2.427e-02 	 1.585e-01 	 1.527e+00 
1.46250 	 2.600e-02 	 1.326e-01 	 1.680e+00 
1.47083 	 2.542e-02 	 1.347e-01 	 1.569e+00 
1.47917 	 2.771e-02 	 1.311e-01 	 1.765e+00 
1.48750 	 2.527e-02 	 1.430e-01 	 1.672e+00 
1.49583 	 2.865e-02 	 1.469e-01 	 1.603e+00 
1.50417 	 2.691e-02 	 1.360e-01 	 1.528e+00 
1.51250 	 2.746e-02 	 1.314e-01 	 1.526e+00 
1.52083 	 2.760e-02 	 1.318e-01 	 1.693e+00 
1.52917 	 2.924e-02 	 1.217e-01 	 1.724e+00 
1.53750 	 2.781e-02 	 1.230e-01 	 1.815e+00 
1.54583 	 2.696e-02 	 1.155e-01 	 1.708e+00 
1.55417 	 2.790e-02 	 1.199e-01 	 1.822e+00 
1.56250 	 2.712e-02 	 1.129e-01 	 1.864e+00 
1.57083 	 2.947e-02 	 1.159e-01 	 1.929e+00 
1.57917 	 3.071e-02 	 9.849e-02 	 1.882e+00 
1.58750 	 3.167e-02 	 1.077e-01 	 1.872e+00 
1.59583 	 2.975e-02 	 1.113e-01 	 2.006e+00 
1.60417 	 2.690e-02 	 1.001e-01 	 2.093e+00 
1.61250 	 2.967e-02 	 1.023e-01 	 1.960e+00 
1.62083 	 3.176e-02 	 9.523e-02 	 2.066e+00 
1.62917 	 3.407e-02 	 9.483e-02 	 2.038e+00 
1.63750 	 3.252e-02 	 8.945e-02 	 1.943e+00 
1.64583 	 3.280e-02 	 9.098e-02 	 2.109e+00 
1.65417 	 3.408e-02 	 8.624e-02 	 2.058e+00 
1.66250 	 3.067e-02 	 9.414e-02 	 2.114e+00 
1.67083 	 3.208e-02 	 8.394e-02 	 1.955e+00 
1.67917 	 3.290e-02 	 8.348e-02 	 2.005e+00 
1.68750 	 3.376e-02 	 8.998e-02 	 2.007e+00 
1.69583 	 3.123e-02 	 9.120e-02 	 2.296e+00 
1.70417 	 3.655e-02 	 9.175e-02 	 2.337e+00 
1.71250 	 3.458e-02 	 7.978e-02 	 2.203e+00 
1.72083 	 3.210e-02 	 7.795e-02 	 2.202e+00 
1.72917 	 3.484e-02 	 7.352e-02 	 2.314e+00 
1.73750 	 3.473e-02 	 7.667e-02 	 2.420e+00 
1.74583 	 3.637e-02 	 7.629e-02 	 2.391e+00 
1.75417 	 3.597e-02 	 6.969e-02 	 2.441e+00 
1.76250 	 3.925e-02 	 7.231e-02 	 2.354e+00 
1.77083 	 3.718e-02 	 6.796e-02 	 2.308e+00 
1.77917 	 3.477e-02 	 6.570e-02 	 2.293e+00 
1.78750 	 3.837e-02 	 6.580e-02 	 2.280e+00 
1.79583 	 4.115e-02 	 6.670e-02 	 2.184e+00 
1.80417 	 3.823e-02 	 7.295e-02 	 2.422e+00 
1.81250 	 3.672e-02 	 7.241e-02 	 2.452e+00 
1.82083 	 3.857e-02 	 6.795e-02 	 2.342e+00 
1.82917 	 3.860e-02 	 6.094e-02 	 2.330e+00 
1.83750 	 4.069e-02 	 5.836e-02 	 2.522e+00 
1.84583 	 3.946e-02 	 5.714e-02 	 2.324e+00 
1.85417 	 3.913e-02 	 5.843e-02 	 2.420e+00 
1.86250 	 3.858e-02 	 5.896e-02 	 2.508e+00 
1.87083 	 3.811e-02 	 5.544e-02 	 2.606e+00 
1.87917 	 4.467e-02 	 5.220e-02 	 2.591e+00 
1.88750 	 4.050e-02 	 5.561e-02 	 2.449e+00 
1.89583 	 4.307e-02 	 5.237e-02 	 2.415e+00 
1.90417 	 4.449e-02 	 5.179e-02 	 2.534e+00 
1.91250 	 4.565e-02 	 4.530e-02 	 2.375e+00 
1.92083 	 4.793e-02 	 4.923e-02 	 2.264e+00 
1.92917 	 4.882e-02 	 5.059e-02 	 2.473e+00 
1.93750 	 4.455e-02 	 5.138e-02 	 2.443e+00 
1.94583 	 3.968e-02 	 4.485e-02 	 2.373e+00 
1.95417 	 4.831e-02 	 4.506e-02 	 2.406e+00 
1.96250 	 4.906e-02 	 4.791e-02 	 2.173e+00 
1.97083 	 4.561e-02 	 4.279e-02 	 2.331e+00 
1.97917 	 4.660e-02 	 4.978e-02 	 2.314e+00 
1.98750 	 4.541e-02 	 4.472e-02 	 2.316e+00 
1.99583 	 4.637e-02 	 4.923e-02 	 1.170e+00 
2.00417 	 4.037e+00 	 3.818e+00 	 7.443e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math
import json
from tqdm import tqdm

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 1.0E-4 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = int(1e3) # set number of photons in simulation
    z_size = 2.0 # cm, total range over which bins extend
    xy_size = 1.5 # cm
    NR_z          = 240 # set number of bins.
    NR_xy = 180
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = z_size/NR_z  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    InitRandomGen()
    Csph = [0 for _ in range(0,NR_z+1)]
    Ccyl = [0 for _ in range(0,NR_z+1)]
    Cpla = [0 for _ in range(0,NR_z+1)]

    # [x][y][z]
    # it could be done in numpy array, but list is easier to save
    Cube = [[[0 for _ in range(0,NR_z+1)] for _ in range(0,NR_xy+1)] for _ in range(0,NR_xy+1)]
    cube_overflow = 0

    # start pos
    x_start = 89 * dr
    y_start = 89 * dr
    z_start = 239 * dr

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    print("(1 iter = 1 photon) Simulation progerss:")
    for i_photon in tqdm(range(0,Nphotons)):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements a point source [0,0,-1].
        # *****
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = x_start                     # Set photon position to origin.
        y = y_start
        z = z_start

        # source - vartical down [0,0,-1]
        # psi - berween x-y axis
        # theta between z and R
        ux = 0
        uy = 0
        uz = -1


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Cpla[ir] += absorb # DROP absorbed weight into bin

            # --- cube ---
            ix = int(x/dr)
            iy = int(y/dr)
            iz = int(z/dr)
            ix_is_in = (0 <= ix < NR_xy)
            iy_is_in = (0 <= iy < NR_xy)
            iz_is_in = (0 <= iz < NR_z)
            is_in = ix_is_in and iy_is_in and iz_is_in
            if (not is_in):
                cube_overflow += absorb
            else:
                Cube[ix][iy][iz] += absorb
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz);
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    print("saving data...")
    file = open("mc456_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR_z+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:4.3e} \t {Fcyl:4.3e} \t {Fpla:4.3e} \n")

    file.close()


    with open('mc456_p_cube.json', 'w') as f:
        data = {
            "n_photons": Nphotons,
            "overflow": cube_overflow,
            "cube": Cube
        }
        json.dump(data, f)

    print("done")
    # end of main


main()
