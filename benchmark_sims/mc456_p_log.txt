time elapsed: 15.6716 seconds

=================================

sim results:

number of photons = 1000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 1.28195690243516513540e-01 	 2.31169432423175030822e-01 
0.01250 	 0.00000000000000000000e+00 	 1.52622545654069019516e-01 	 2.43787090854145876984e-01 
0.02083 	 1.83395070735906884352e-01 	 2.05870215191088418161e-01 	 2.56400333960281556767e-01 
0.02917 	 0.00000000000000000000e+00 	 1.56751820248485496112e-01 	 2.91859043686140517959e-01 
0.03750 	 0.00000000000000000000e+00 	 1.67061166778722458570e-01 	 2.48633587470640765593e-01 
0.04583 	 0.00000000000000000000e+00 	 1.44339663874545193201e-01 	 3.20360093128220724257e-01 
0.05417 	 0.00000000000000000000e+00 	 1.93684745352790149697e-01 	 2.64312793874571849706e-01 
0.06250 	 4.23521395565802996619e-02 	 1.30249049360475016579e-01 	 2.76514294902703794410e-01 
0.07083 	 3.40024287676118433521e-02 	 2.05703848232099112403e-01 	 2.52191864324337045034e-01 
0.07917 	 2.01751334406388553068e-04 	 1.88415564653514666649e-01 	 2.94386327455514407170e-01 
0.08750 	 2.09541174849933106716e-02 	 1.31387901592492056801e-01 	 2.71596287400101721321e-01 
0.09583 	 8.57937282237969042753e-03 	 1.49781314082042565916e-01 	 2.46518577623422413536e-01 
0.10417 	 7.11373594936379888276e-03 	 1.78178157652694096891e-01 	 3.00251560610492851389e-01 
0.11250 	 1.10660329784608695708e-02 	 1.87404160489032189929e-01 	 2.63649162264876224526e-01 
0.12083 	 4.78759129493583519832e-03 	 1.50550105505395465100e-01 	 2.93839849514098527816e-01 
0.12917 	 1.36521630293969346848e-02 	 1.40338199966047044720e-01 	 2.91140353463053336291e-01 
0.13750 	 7.39757994376714043960e-03 	 1.29194673891667805021e-01 	 2.77063641699553331321e-01 
0.14583 	 1.83723204689304198123e-02 	 1.64476063175285486251e-01 	 2.55072110574809718386e-01 
0.15417 	 1.05404562473470561623e-02 	 1.73857060830672704999e-01 	 2.21899503723640256769e-01 
0.16250 	 2.05359648292666070735e-02 	 2.02450339582081501044e-01 	 2.62695306901358505147e-01 
0.17083 	 5.27004985469118041735e-03 	 1.89055056230777313031e-01 	 2.78246849833508558270e-01 
0.17917 	 8.03278333684869123854e-03 	 1.61784982869150745222e-01 	 2.83593339736497140890e-01 
0.18750 	 1.22730016635822225535e-02 	 2.00293072272518968280e-01 	 2.54054381669593376536e-01 
0.19583 	 7.38414634730550408642e-03 	 1.46866226530983301490e-01 	 2.62696895001501673494e-01 
0.20417 	 5.59104751141026312666e-03 	 1.62249348314762953382e-01 	 2.80054331118006205603e-01 
0.21250 	 7.64560019167608625329e-03 	 1.56104855224814959014e-01 	 2.91874769417037438490e-01 
0.22083 	 1.10997472879095972903e-02 	 1.77014005098679622074e-01 	 2.94646878138853873796e-01 
0.22917 	 8.74125659788108251569e-03 	 1.62670892944310141459e-01 	 2.66155568337326564610e-01 
0.23750 	 7.85404973456694036060e-03 	 1.68587741529048207312e-01 	 2.88843387327782474827e-01 
0.24583 	 1.35676503199927186299e-02 	 1.84495694978382640539e-01 	 2.86707108157772894153e-01 
0.25417 	 1.55306473456783018100e-02 	 1.56950539488070306415e-01 	 2.84466540761164510265e-01 
0.26250 	 9.43254671236612614316e-03 	 1.34111667080256596885e-01 	 3.02978746319616520921e-01 
0.27083 	 1.31521544551951898028e-02 	 1.70434538064024504456e-01 	 2.46958416644419476160e-01 
0.27917 	 1.75054228492504994341e-02 	 1.91914640531564512083e-01 	 2.65936726509925724926e-01 
0.28750 	 1.21243703765819155899e-02 	 1.64214051153450391052e-01 	 2.63781139951741128158e-01 
0.29583 	 1.34188747417174764065e-02 	 1.92580723828570166134e-01 	 2.93836323938313548343e-01 
0.30417 	 1.42061017281973830939e-02 	 1.83084149765719184089e-01 	 2.73262324700542680311e-01 
0.31250 	 9.49198368330843485208e-03 	 1.65589063101381300802e-01 	 2.44371054962636419239e-01 
0.32083 	 1.55030110315121458925e-02 	 1.73687414356561736772e-01 	 2.74712401139830808550e-01 
0.32917 	 1.01505769254033994392e-02 	 1.77177311276476789903e-01 	 2.73022489239410859341e-01 
0.33750 	 7.62359254824400769945e-03 	 1.71203809277319707327e-01 	 2.76461454244342541564e-01 
0.34583 	 8.22594497003362179477e-03 	 1.95883316439693866418e-01 	 3.32902283402562060299e-01 
0.35417 	 8.58156469891981077414e-03 	 1.89383346814304132089e-01 	 3.04651522826761333995e-01 
0.36250 	 8.67337810391444023750e-03 	 1.66246976518095446185e-01 	 3.22980468715844570848e-01 
0.37083 	 8.50349914735093817542e-03 	 1.66561159704623956701e-01 	 2.78102529548193089237e-01 
0.37917 	 8.91413417750290190678e-03 	 1.78958542572989293129e-01 	 3.31954201658770098327e-01 
0.38750 	 7.81293493235989122692e-03 	 1.87968179089645137658e-01 	 3.13607608679380533978e-01 
0.39583 	 9.48747697620432213494e-03 	 1.76985834723326129758e-01 	 3.68097377569869321778e-01 
0.40417 	 1.37140243984393700449e-02 	 1.70909508770120621701e-01 	 3.38203539639256700600e-01 
0.41250 	 1.25890344268937155042e-02 	 1.72209808093309102439e-01 	 2.95550271284082288759e-01 
0.42083 	 1.04339582128537781275e-02 	 1.79808402347847340330e-01 	 3.47568517180092850793e-01 
0.42917 	 8.82755750883043241450e-03 	 1.60569008170508814581e-01 	 3.62282278534126755964e-01 
0.43750 	 9.02345209053557160972e-03 	 1.54264290135748077804e-01 	 3.97297084193782013006e-01 
0.44583 	 1.13716122619302861807e-02 	 1.91809614122652238866e-01 	 4.10560553818801077242e-01 
0.45417 	 8.34334613246113035445e-03 	 1.78695902831102787500e-01 	 3.83998493367696425160e-01 
0.46250 	 1.97543942131062667811e-02 	 1.90663245992379576377e-01 	 3.86352382156016971315e-01 
0.47083 	 1.53921091639909364546e-02 	 1.64303040552797208207e-01 	 3.55007363578370316315e-01 
0.47917 	 1.02454019044851841330e-02 	 1.88764096399284209138e-01 	 3.93646459852967645077e-01 
0.48750 	 1.23280003293452771612e-02 	 1.48263771427181167972e-01 	 3.96783707263203277993e-01 
0.49583 	 1.21601074540896494230e-02 	 1.73905857333722213554e-01 	 3.34968782675691523210e-01 
0.50417 	 1.04942941557149907461e-02 	 1.87797338903224225737e-01 	 4.07483951815807099450e-01 
0.51250 	 9.79835342589333024854e-03 	 2.01706054289849029404e-01 	 3.37223584687507016433e-01 
0.52083 	 8.75899113539796610184e-03 	 2.04129946556159597160e-01 	 3.32044419208780805519e-01 
0.52917 	 1.26067438453919683505e-02 	 2.02943879883201727665e-01 	 3.82674888153695824666e-01 
0.53750 	 1.54983062831697340767e-02 	 1.74918000222173075642e-01 	 3.83559280429566495929e-01 
0.54583 	 8.90260293227242496816e-03 	 1.86908067443266434626e-01 	 3.75471959199252525163e-01 
0.55417 	 4.95475194902719913437e-03 	 1.90662927708439733365e-01 	 3.82292887504678657873e-01 
0.56250 	 1.08780456873911277743e-02 	 2.10147181470284133420e-01 	 3.78261655796639228999e-01 
0.57083 	 1.09020246220224489159e-02 	 1.93953906867589592755e-01 	 4.05308292052399155025e-01 
0.57917 	 1.02928185486348047067e-02 	 2.37132891283275720751e-01 	 4.15695853239407664415e-01 
0.58750 	 1.21346369238824660503e-02 	 1.97927860103787739421e-01 	 4.04006384431674636648e-01 
0.59583 	 1.31131805652102521875e-02 	 2.11643666828969956306e-01 	 3.85732003492105846032e-01 
0.60417 	 1.05941735045821921329e-02 	 2.18833242028796448597e-01 	 4.11362242335373218260e-01 
0.61250 	 1.24035246170657326853e-02 	 2.02524622919762892215e-01 	 3.95802919931864949366e-01 
0.62083 	 8.50406519314104297758e-03 	 2.16171672680991910909e-01 	 3.85673393452567847550e-01 
0.62917 	 1.26762944298593610570e-02 	 2.35357981748427341762e-01 	 4.10884749661959813860e-01 
0.63750 	 1.14082376565330864682e-02 	 2.28034196926834659136e-01 	 4.08850394300042496720e-01 
0.64583 	 8.91120236634548867904e-03 	 2.16060655225056796880e-01 	 4.65422662089714389566e-01 
0.65417 	 1.17908765764052746866e-02 	 2.47673074921556934935e-01 	 5.26853656442417439543e-01 
0.66250 	 1.17502887705804252155e-02 	 2.37984117186147259293e-01 	 4.54855897284694166149e-01 
0.67083 	 1.04636428535098829906e-02 	 2.40767348415680426665e-01 	 4.58430418803440709041e-01 
0.67917 	 1.09116165040420987076e-02 	 2.37761043043938163910e-01 	 4.40502312288516439942e-01 
0.68750 	 1.10901632986895593014e-02 	 2.54520485782179006762e-01 	 4.67014020049278277824e-01 
0.69583 	 1.19820527532520648695e-02 	 2.48239878518885709324e-01 	 4.57809064951242628005e-01 
0.70417 	 1.04790329100390190720e-02 	 2.47299696301187921232e-01 	 4.92750151186514495638e-01 
0.71250 	 1.24370220855721178022e-02 	 2.33374300138819990025e-01 	 4.33250390105022864518e-01 
0.72083 	 1.20672894385023994623e-02 	 2.10239892769459063571e-01 	 4.61644649202145651579e-01 
0.72917 	 1.25717436353898828760e-02 	 2.16762203491782851073e-01 	 5.05640935927805568184e-01 
0.73750 	 1.07216667660155768466e-02 	 2.41781600097819460160e-01 	 5.20269504558603879119e-01 
0.74583 	 9.39126097072165086366e-03 	 2.34280421639462610450e-01 	 5.58240926431839867838e-01 
0.75417 	 8.90327856906983176877e-03 	 2.21283612223683284759e-01 	 5.64411242229014620264e-01 
0.76250 	 1.12206426767774668229e-02 	 2.46722320761452507121e-01 	 5.23830937702608911977e-01 
0.77083 	 1.12710346487417591849e-02 	 2.27718336792391895518e-01 	 5.52631088086495858569e-01 
0.77917 	 8.91311859399551535688e-03 	 2.54380448627077315749e-01 	 5.44002808182621033772e-01 
0.78750 	 1.01287210883257532135e-02 	 2.49514170879767710476e-01 	 4.81654783185388457589e-01 
0.79583 	 1.30031669017049416465e-02 	 2.55326997465483818139e-01 	 5.07105392410380773072e-01 
0.80417 	 1.00450794337101044496e-02 	 2.51270243883737309787e-01 	 5.47602816693243732438e-01 
0.81250 	 1.20770470523056949741e-02 	 2.42594216957454034134e-01 	 5.44616774462096664422e-01 
0.82083 	 1.15962674592376326771e-02 	 2.44291773290400582308e-01 	 6.12508891095334240262e-01 
0.82917 	 1.08083713138917465735e-02 	 2.55400220210594108838e-01 	 6.79363041742564011116e-01 
0.83750 	 1.18073608104429725318e-02 	 2.56772518051355480573e-01 	 6.38099112330339779398e-01 
0.84583 	 1.21715684499281509567e-02 	 2.57963158071149112338e-01 	 6.46865780996196626518e-01 
0.85417 	 1.22149710739862995407e-02 	 2.46537423164646385398e-01 	 6.02205479426741852045e-01 
0.86250 	 9.45979834147542102130e-03 	 2.48496995743665932688e-01 	 6.34225919633371493234e-01 
0.87083 	 1.30111044050674352218e-02 	 2.86882909436127042646e-01 	 6.98424899305407853589e-01 
0.87917 	 1.40419375711247386429e-02 	 2.49212184553253029984e-01 	 6.43010307562033256445e-01 
0.88750 	 1.47427316805804238531e-02 	 2.69703826903310794894e-01 	 6.44590135080689519143e-01 
0.89583 	 1.64986037590855033619e-02 	 2.78046125884920392046e-01 	 6.31863491457472004065e-01 
0.90417 	 1.48945970150172000285e-02 	 3.05403067006159545382e-01 	 7.18530038874585774700e-01 
0.91250 	 1.76657466055612465128e-02 	 2.94276411280778305013e-01 	 6.43784680332747716314e-01 
0.92083 	 1.41211311777868081530e-02 	 2.97361898662183654629e-01 	 6.95059830950109036607e-01 
0.92917 	 1.45864984993478979253e-02 	 3.29434507819647115490e-01 	 7.18763230317843837547e-01 
0.93750 	 1.87847336183301627521e-02 	 3.45352403932351725846e-01 	 7.38265362706945649229e-01 
0.94583 	 1.41198770060145476629e-02 	 3.52101298006053775591e-01 	 6.69361379217630947380e-01 
0.95417 	 1.47737547005562866453e-02 	 3.55700799791093258406e-01 	 6.59587437311636937132e-01 
0.96250 	 2.12240879453039418823e-02 	 3.84567443392161201210e-01 	 7.45727788360877830165e-01 
0.97083 	 2.10436308018037317169e-02 	 3.74173470392366203097e-01 	 6.78647483354228309160e-01 
0.97917 	 1.61299599816435469679e-02 	 3.84802668451936669136e-01 	 7.24463310938290971919e-01 
0.98750 	 2.13697671852265194681e-02 	 3.90726702965879746365e-01 	 7.94779736955095850170e-01 
0.99583 	 2.13089766200205039948e-02 	 4.24501597368530436682e-01 	 6.93232605369619392377e-01 
1.00417 	 2.13267817163437616024e-02 	 4.20324711732565969857e-01 	 7.84428265739660401934e-01 
1.01250 	 1.92239974954603425050e-02 	 4.62991379054283613836e-01 	 7.40342954805177422273e-01 
1.02083 	 1.75929676961121446432e-02 	 5.05020506979993455410e-01 	 7.18683133832536902297e-01 
1.02917 	 1.76713108233249038825e-02 	 5.90901021741404575138e-01 	 8.08438328006806483650e-01 
1.03750 	 1.45670091291636039782e-02 	 6.90263103641693742674e-01 	 8.08461524996857860970e-01 
1.04583 	 1.75616477305552652621e-02 	 2.03182227553455074798e+00 	 8.00594961465117993527e-01 
1.05417 	 1.64204061859024169623e-02 	 8.75222224430451389843e-01 	 8.39095619848541307562e-01 
1.06250 	 1.72651023783757483210e-02 	 6.08106073396157298383e-01 	 8.58872936053066915463e-01 
1.07083 	 2.00728370393018461237e-02 	 5.45033038576703821043e-01 	 8.77405239354640098526e-01 
1.07917 	 1.91919274985215583540e-02 	 4.56348737498185830219e-01 	 9.16075255830730905693e-01 
1.08750 	 1.88558707787751661522e-02 	 4.33469112745591300673e-01 	 9.11817355105679738791e-01 
1.09583 	 1.96387637785803807755e-02 	 3.98940888475701582738e-01 	 9.19560695920752291244e-01 
1.10417 	 2.10985023613622611760e-02 	 3.76681848198397617455e-01 	 8.68823172797723031202e-01 
1.11250 	 1.78459290679660667611e-02 	 3.81202084446164157772e-01 	 8.48488055247822670069e-01 
1.12083 	 1.72856887488324097168e-02 	 3.50864471212914141862e-01 	 1.00315196569716813535e+00 
1.12917 	 1.76096584058188579403e-02 	 3.28598925333651592506e-01 	 1.03005545915378937671e+00 
1.13750 	 1.75056986483201337812e-02 	 3.41425997620891319428e-01 	 8.86323297775084117944e-01 
1.14583 	 2.00452581242253277671e-02 	 3.03971364907202168393e-01 	 1.01239282266013197464e+00 
1.15417 	 1.90431557862023141670e-02 	 2.91707334872130130687e-01 	 1.08713326895271111816e+00 
1.16250 	 2.03502325802776204422e-02 	 2.87598736623450756955e-01 	 9.09367084097527866859e-01 
1.17083 	 2.02131697638681454010e-02 	 2.75461532480175574911e-01 	 1.06304218522686189097e+00 
1.17917 	 1.94435963547617933489e-02 	 2.55767516695948715633e-01 	 9.84614798287029469037e-01 
1.18750 	 2.13119328027370213974e-02 	 2.50792460446435550026e-01 	 9.35703419463382424226e-01 
1.19583 	 1.92701727257558255713e-02 	 2.57561709260078985917e-01 	 1.06442036042469934110e+00 
1.20417 	 1.96183711793236972842e-02 	 2.51746777527080523029e-01 	 9.76686243089647354587e-01 
1.21250 	 2.12376897206863618495e-02 	 2.69206844607141670966e-01 	 1.01281693350356749583e+00 
1.22083 	 1.59181509873553943268e-02 	 2.49865891662691380626e-01 	 1.09409776875636399751e+00 
1.22917 	 2.31281474127804538565e-02 	 2.36899018980194886463e-01 	 1.00806250537473851558e+00 
1.23750 	 2.29731039784522757252e-02 	 2.34903234413126715818e-01 	 9.44384252300159210414e-01 
1.24583 	 2.20444622570597735522e-02 	 2.29930593605747468633e-01 	 1.02795361367586268742e+00 
1.25417 	 2.18028763740691286510e-02 	 2.41465642254610923789e-01 	 1.06937844430766171300e+00 
1.26250 	 2.27419756337433089100e-02 	 2.23696581388088455711e-01 	 1.16909352475043237796e+00 
1.27083 	 2.10606845572982870340e-02 	 2.15553826415809196559e-01 	 1.13595652705916561054e+00 
1.27917 	 2.37359706471224375657e-02 	 2.04738770086825783157e-01 	 1.25309041686489308631e+00 
1.28750 	 2.39413179034880518881e-02 	 1.95924005709808446429e-01 	 1.30341706691443359745e+00 
1.29583 	 2.21139122705837458394e-02 	 1.88910539102938201950e-01 	 1.23451571859034281431e+00 
1.30417 	 2.38649744774107469558e-02 	 2.01988151162528356553e-01 	 1.15812595487141156703e+00 
1.31250 	 2.46783463728210174237e-02 	 1.83018091014713890630e-01 	 1.24538808849317406136e+00 
1.32083 	 2.31661514750365997439e-02 	 1.85640562148406518261e-01 	 1.18847006191330528679e+00 
1.32917 	 2.49623383623878529469e-02 	 1.85569836191543824366e-01 	 1.30250183283039655535e+00 
1.33750 	 2.36763422021075836676e-02 	 1.82001751117005811098e-01 	 1.36923781456045690064e+00 
1.34583 	 2.82410764931999673510e-02 	 1.80805931075364106908e-01 	 1.35643209399569619755e+00 
1.35417 	 2.39607215469099833760e-02 	 1.71912773663283585668e-01 	 1.30350684702781727253e+00 
1.36250 	 2.28719671714850865396e-02 	 1.66108500553532351107e-01 	 1.36899373341673968874e+00 
1.37083 	 2.36737680935064920273e-02 	 1.68978248519013662943e-01 	 1.45579254014319370292e+00 
1.37917 	 2.32728995191069792936e-02 	 1.54401819870973372462e-01 	 1.32801357504532036025e+00 
1.38750 	 2.36714881031190871319e-02 	 1.39796043499421068779e-01 	 1.44173724292851179740e+00 
1.39583 	 2.17843055573149445292e-02 	 1.38855251474144653079e-01 	 1.51562785629923912900e+00 
1.40417 	 2.65782567123152221877e-02 	 1.47314436983834534667e-01 	 1.50550174707624417891e+00 
1.41250 	 2.43442515977310876274e-02 	 1.63179879866636401431e-01 	 1.54503698796221744516e+00 
1.42083 	 2.41719410264425275947e-02 	 1.45959290874594055376e-01 	 1.44917599619867654148e+00 
1.42917 	 2.68035311009248433667e-02 	 1.66318349066668480507e-01 	 1.51771250675553504017e+00 
1.43750 	 2.71022510183061698941e-02 	 1.64569970433835283119e-01 	 1.45447115613797439693e+00 
1.44583 	 2.28537673328051381405e-02 	 1.44087069490567737384e-01 	 1.54724406181237905678e+00 
1.45417 	 2.42724129187401847785e-02 	 1.58490664211758669477e-01 	 1.52663950170010020990e+00 
1.46250 	 2.60024941152866249927e-02 	 1.32649891236709949194e-01 	 1.68035220162465037674e+00 
1.47083 	 2.54247939847657283829e-02 	 1.34687858619114531056e-01 	 1.56937953171195632152e+00 
1.47917 	 2.77116109313743502751e-02 	 1.31133271271157009208e-01 	 1.76505468232397100259e+00 
1.48750 	 2.52680859542735933299e-02 	 1.42974327655124411329e-01 	 1.67175867658568666485e+00 
1.49583 	 2.86534493794608664807e-02 	 1.46912489353054537267e-01 	 1.60341233029285601397e+00 
1.50417 	 2.69078988111577134534e-02 	 1.36021750333637447827e-01 	 1.52756360403511037838e+00 
1.51250 	 2.74614682633582511684e-02 	 1.31389804768214102371e-01 	 1.52637028385675344033e+00 
1.52083 	 2.75981082827009421843e-02 	 1.31761174652099161131e-01 	 1.69343092959327079505e+00 
1.52917 	 2.92405632233328077740e-02 	 1.21733675775378524797e-01 	 1.72352466935606463139e+00 
1.53750 	 2.78130229678712724561e-02 	 1.22982266184906707807e-01 	 1.81541702703902241289e+00 
1.54583 	 2.69643420423447063849e-02 	 1.15470259032937283550e-01 	 1.70813532082453245486e+00 
1.55417 	 2.78950853271116329390e-02 	 1.19892826857233195104e-01 	 1.82191812105197037397e+00 
1.56250 	 2.71152200886381478107e-02 	 1.12897813261091536918e-01 	 1.86395568476399109414e+00 
1.57083 	 2.94702110203003929401e-02 	 1.15868453066514082161e-01 	 1.92926876816299008865e+00 
1.57917 	 3.07108218428542717460e-02 	 9.84870654747203866375e-02 	 1.88159708191023633539e+00 
1.58750 	 3.16720723108960058867e-02 	 1.07685728827249221906e-01 	 1.87238874363883511798e+00 
1.59583 	 2.97531196757611741954e-02 	 1.11299129576983610312e-01 	 2.00551811117309242150e+00 
1.60417 	 2.69012139380739902228e-02 	 1.00113263865817744835e-01 	 2.09259758431985565252e+00 
1.61250 	 2.96712949586475302488e-02 	 1.02280753246365666009e-01 	 1.95984687714564742578e+00 
1.62083 	 3.17639413055138819519e-02 	 9.52263971601491204799e-02 	 2.06579910066058891616e+00 
1.62917 	 3.40679772711909994998e-02 	 9.48319726404021207111e-02 	 2.03832517956031855633e+00 
1.63750 	 3.25207615679083128502e-02 	 8.94456895714746819115e-02 	 1.94340649056663705707e+00 
1.64583 	 3.27978495348660928355e-02 	 9.09826136145541614075e-02 	 2.10877111239977521606e+00 
1.65417 	 3.40802386653694111551e-02 	 8.62445292961321469116e-02 	 2.05813246350528711304e+00 
1.66250 	 3.06717317267946841530e-02 	 9.41417666676742509457e-02 	 2.11353962739036660423e+00 
1.67083 	 3.20758746598774208136e-02 	 8.39364356102769160195e-02 	 1.95484319733007194664e+00 
1.67917 	 3.28975065622298806778e-02 	 8.34796045135528796965e-02 	 2.00474240545634119215e+00 
1.68750 	 3.37576574380309205048e-02 	 8.99848841626874201838e-02 	 2.00653853427892636674e+00 
1.69583 	 3.12297783544163813640e-02 	 9.12017572620695965435e-02 	 2.29587117907611704126e+00 
1.70417 	 3.65538654027813131320e-02 	 9.17471515042269786244e-02 	 2.33730360302178219456e+00 
1.71250 	 3.45788021793631342171e-02 	 7.97834043054924391125e-02 	 2.20339409164290778165e+00 
1.72083 	 3.21022335805849975965e-02 	 7.79524221332961175790e-02 	 2.20200663141166019798e+00 
1.72917 	 3.48361818826736988064e-02 	 7.35228418861226529213e-02 	 2.31372743685301340832e+00 
1.73750 	 3.47304145678968695377e-02 	 7.66661092093281343329e-02 	 2.41973357660453380902e+00 
1.74583 	 3.63656471757666313604e-02 	 7.62892154529926092010e-02 	 2.39148999920484950366e+00 
1.75417 	 3.59713637829178964345e-02 	 6.96949125060894320027e-02 	 2.44112114940289881559e+00 
1.76250 	 3.92484157578962891688e-02 	 7.23108819112974199328e-02 	 2.35382454822180520182e+00 
1.77083 	 3.71777798479183893554e-02 	 6.79553418492168659348e-02 	 2.30806492890256143014e+00 
1.77917 	 3.47685132728992180029e-02 	 6.57006849924564456655e-02 	 2.29340432540437877407e+00 
1.78750 	 3.83708517172456561872e-02 	 6.58030375657825128410e-02 	 2.28010398354554633116e+00 
1.79583 	 4.11454662407500920684e-02 	 6.67040383227588684623e-02 	 2.18406894982948207584e+00 
1.80417 	 3.82265041199517097148e-02 	 7.29533114772109581025e-02 	 2.42183133252695315107e+00 
1.81250 	 3.67232204643959045387e-02 	 7.24135744499286582165e-02 	 2.45242551720702728346e+00 
1.82083 	 3.85689138108913712188e-02 	 6.79511622687728050751e-02 	 2.34188907907341503645e+00 
1.82917 	 3.86025262512253511393e-02 	 6.09406621971620848788e-02 	 2.33035023483692471657e+00 
1.83750 	 4.06874498736243817021e-02 	 5.83568429893277645926e-02 	 2.52210209891791103942e+00 
1.84583 	 3.94612185150356661878e-02 	 5.71366924886897512015e-02 	 2.32354594979650830311e+00 
1.85417 	 3.91272090924123863709e-02 	 5.84290611557121836173e-02 	 2.42024010416557411318e+00 
1.86250 	 3.85837267491296737054e-02 	 5.89592609418526439335e-02 	 2.50792685918101110332e+00 
1.87083 	 3.81110697732191458509e-02 	 5.54429354418930833703e-02 	 2.60572454953036425351e+00 
1.87917 	 4.46729252949835953235e-02 	 5.21955586214593869610e-02 	 2.59096942612469405276e+00 
1.88750 	 4.04988906890380931380e-02 	 5.56106356550252825532e-02 	 2.44948351380695505952e+00 
1.89583 	 4.30723353382089085839e-02 	 5.23669523764071567773e-02 	 2.41538743681220857695e+00 
1.90417 	 4.44913899470593884877e-02 	 5.17899694981302297081e-02 	 2.53393844005873258851e+00 
1.91250 	 4.56452360682123928215e-02 	 4.52996425513214548420e-02 	 2.37516637342397629595e+00 
1.92083 	 4.79315508476093332657e-02 	 4.92291142546987317563e-02 	 2.26441585831135983042e+00 
1.92917 	 4.88234728601130776870e-02 	 5.05880238360465403491e-02 	 2.47286843492883479101e+00 
1.93750 	 4.45467024034627151474e-02 	 5.13764928786941202365e-02 	 2.44315240009831091683e+00 
1.94583 	 3.96781071292514816995e-02 	 4.48461866562153976812e-02 	 2.37310196370272885602e+00 
1.95417 	 4.83080023852491408087e-02 	 4.50646921100488623280e-02 	 2.40610199896574972200e+00 
1.96250 	 4.90555249346667845978e-02 	 4.79053976111824125761e-02 	 2.17328701921320766033e+00 
1.97083 	 4.56078229205134286217e-02 	 4.27864517139477859575e-02 	 2.33101708835864407376e+00 
1.97917 	 4.65978689138743379372e-02 	 4.97759769045598085557e-02 	 2.31405030306301995324e+00 
1.98750 	 4.54068780411375425010e-02 	 4.47184879953383060402e-02 	 2.31555873461444194916e+00 
1.99583 	 4.63651756937102713096e-02 	 4.92323419300363870899e-02 	 1.17047875985016092137e+00 
2.00417 	 4.03692163141638360457e+00 	 3.81814308728170681562e+00 	 7.44273454598063466392e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math
import json
from tqdm import tqdm

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 1.0E-4 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = int(1e3) # set number of photons in simulation
    z_size = 2.0 # cm, total range over which bins extend
    xy_size = 1.5 # cm
    NR_z          = 240 # set number of bins.
    NR_xy = 180
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = z_size/NR_z  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    InitRandomGen()
    Csph = [0 for _ in range(0,NR_z+1)]
    Ccyl = [0 for _ in range(0,NR_z+1)]
    Cpla = [0 for _ in range(0,NR_z+1)]

    # [x][y][z]
    # it could be done in numpy array, but list is easier to save
    Cube = [[[0 for _ in range(0,NR_z+1)] for _ in range(0,NR_xy+1)] for _ in range(0,NR_xy+1)]
    cube_overflow = 0

    # start pos
    x_start = 89 * dr
    y_start = 89 * dr
    z_start = 239 * dr

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    print("(1 iter = 1 photon) Simulation progerss:")
    for i_photon in tqdm(range(0,Nphotons)):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements a point source [0,0,-1].
        # *****
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = x_start                     # Set photon position to origin.
        y = y_start
        z = z_start

        # source - vartical down [0,0,-1]
        # psi - berween x-y axis
        # theta between z and R
        ux = 0
        uy = 0
        uz = -1


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Cpla[ir] += absorb # DROP absorbed weight into bin

            # --- cube ---
            ix = int(x/dr)
            iy = int(y/dr)
            iz = int(z/dr)
            ix_is_in = (0 <= ix < NR_xy)
            iy_is_in = (0 <= iy < NR_xy)
            iz_is_in = (0 <= iz < NR_z)
            is_in = ix_is_in and iy_is_in and iz_is_in
            if (not is_in):
                cube_overflow += absorb
            else:
                Cube[ix][iy][iz] += absorb
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz);
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    print("saving data...")
    file = open("mc456_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR_z+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:.20e} \t {Fcyl:.20e} \t {Fpla:.20e} \n")

    file.close()


    with open('mc456_p_cube.json', 'w') as f:
        data = {
            "n_photons": Nphotons,
            "overflow": cube_overflow,
            "bins_per_1_cm": NR_z/z_size,
            "cube": Cube
        }
        json.dump(data, f)

    print("done")
    # end of main


main()
