time elapsed: 649.3435 seconds

=================================

sim results:

[                                                  ] 1%
[#                                                 ] 2%
[#                                                 ] 3%
[##                                                ] 4%
[##                                                ] 5%
[###                                               ] 6%
[###                                               ] 7%
[####                                              ] 8%
[####                                              ] 9%
[#####                                             ] 10%
[#####                                             ] 11%
[######                                            ] 12%
[######                                            ] 13%
[#######                                           ] 14%
[#######                                           ] 15%
[########                                          ] 16%
[########                                          ] 17%
[#########                                         ] 18%
[#########                                         ] 19%
[##########                                        ] 20%
[##########                                        ] 21%
[###########                                       ] 22%
[###########                                       ] 23%
[############                                      ] 24%
[############                                      ] 25%
[#############                                     ] 26%
[#############                                     ] 27%
[##############                                    ] 28%
[##############                                    ] 29%
[###############                                   ] 30%
[###############                                   ] 31%
[################                                  ] 32%
[################                                  ] 33%
[#################                                 ] 34%
[#################                                 ] 35%
[##################                                ] 36%
[##################                                ] 37%
[###################                               ] 38%
[###################                               ] 39%
[####################                              ] 40%
[####################                              ] 41%
[#####################                             ] 42%
[#####################                             ] 43%
[######################                            ] 44%
[######################                            ] 45%
[#######################                           ] 46%
[#######################                           ] 47%
[########################                          ] 48%
[########################                          ] 49%
[#########################                         ] 50%
[#########################                         ] 51%
[##########################                        ] 52%
[##########################                        ] 53%
[###########################                       ] 54%
[###########################                       ] 55%
[############################                      ] 56%
[############################                      ] 57%
[#############################                     ] 58%
[#############################                     ] 59%
[##############################                    ] 60%
[##############################                    ] 61%
[###############################                   ] 62%
[###############################                   ] 63%
[################################                  ] 64%
[################################                  ] 65%
[#################################                 ] 66%
[#################################                 ] 67%
[##################################                ] 68%
[##################################                ] 69%
[###################################               ] 70%
[###################################               ] 71%
[####################################              ] 72%
[####################################              ] 73%
[#####################################             ] 74%
[#####################################             ] 75%
[######################################            ] 76%
[######################################            ] 77%
[#######################################           ] 78%
[#######################################           ] 79%
[########################################          ] 80%
[########################################          ] 81%
[#########################################         ] 82%
[#########################################         ] 83%
[##########################################        ] 84%
[##########################################        ] 85%
[###########################################       ] 86%
[###########################################       ] 87%
[############################################      ] 88%
[############################################      ] 89%
[#############################################     ] 90%
[#############################################     ] 91%
[##############################################    ] 92%
[##############################################    ] 93%
[###############################################   ] 94%
[###############################################   ] 95%
[################################################  ] 96%
[################################################  ] 97%
[################################################# ] 98%
[################################################# ] 99%
[##################################################] 100%
Small Monte Carlo by Scott Prahl (https://omlc.org)
1 W/cm^2 Uniform Illumination of Semi-Infinite Medium

Scattering =   23.889/cm
Absorption =    0.370/cm
Anisotropy =    0.900
Refr Index =    1.360
Photons    = 10000000

Specular Refl      =    0.02327
Backscattered Refl =    0.20286

 Depth         Heat
[microns]     [W/cm^3]
     0     9.25289e-01 
    83     9.26326e-01 
   167     9.28713e-01 
   250     9.30269e-01 
   333     9.31033e-01 
   417     9.31673e-01 
   500     9.33460e-01 
   583     9.33320e-01 
   667     9.35113e-01 
   750     9.33378e-01 
   833     9.33642e-01 
   917     9.32036e-01 
  1000     9.28720e-01 
  1083     9.27472e-01 
  1167     9.26297e-01 
  1250     9.23282e-01 
  1333     9.18960e-01 
  1417     9.16193e-01 
  1500     9.12274e-01 
  1583     9.08782e-01 
  1667     9.03831e-01 
  1750     9.01884e-01 
  1833     8.94736e-01 
  1917     8.88611e-01 
  2000     8.84900e-01 
  2083     8.80857e-01 
  2167     8.72024e-01 
  2250     8.66086e-01 
  2333     8.59289e-01 
  2417     8.54021e-01 
  2500     8.44500e-01 
  2583     8.37599e-01 
  2667     8.29787e-01 
  2750     8.22835e-01 
  2833     8.14317e-01 
  2917     8.07572e-01 
  3000     7.99770e-01 
  3083     7.91167e-01 
  3167     7.84725e-01 
  3250     7.76530e-01 
  3333     7.67314e-01 
  3417     7.59597e-01 
  3500     7.50420e-01 
  3583     7.42014e-01 
  3667     7.34985e-01 
  3750     7.25872e-01 
  3833     7.18614e-01 
  3917     7.10779e-01 
  4000     6.99958e-01 
  4083     6.93361e-01 
  4167     6.86911e-01 
  4250     6.77212e-01 
  4333     6.67960e-01 
  4417     6.60482e-01 
  4500     6.51679e-01 
  4583     6.44378e-01 
  4667     6.36322e-01 
  4750     6.27249e-01 
  4833     6.19953e-01 
  4917     6.12146e-01 
  5000     6.04003e-01 
  5083     5.97627e-01 
  5167     5.88503e-01 
  5250     5.80117e-01 
  5333     5.72801e-01 
  5417     5.66363e-01 
  5500     5.58330e-01 
  5583     5.51711e-01 
  5667     5.43339e-01 
  5750     5.35664e-01 
  5833     5.28157e-01 
  5917     5.21035e-01 
  6000     5.15139e-01 
  6083     5.08178e-01 
  6167     5.00410e-01 
  6250     4.93350e-01 
  6333     4.86679e-01 
  6417     4.80582e-01 
  6500     4.74081e-01 
  6583     4.67077e-01 
  6667     4.62165e-01 
  6750     4.54854e-01 
  6833     4.48291e-01 
  6917     4.42379e-01 
  7000     4.37885e-01 
  7083     4.30765e-01 
  7167     4.25080e-01 
  7250     4.17829e-01 
  7333     4.12183e-01 
  7417     4.06367e-01 
  7500     4.01951e-01 
  7583     3.95721e-01 
  7667     3.90899e-01 
  7750     3.85786e-01 
  7833     3.79959e-01 
  7917     3.74685e-01 
  8000     3.68882e-01 
  8083     3.63800e-01 
  8167     3.57853e-01 
  8250     3.52289e-01 
  8333     3.48365e-01 
  8417     3.44219e-01 
  8500     3.38854e-01 
  8583     3.34153e-01 
  8667     3.30502e-01 
  8750     3.25344e-01 
  8833     3.20742e-01 
  8917     3.16270e-01 
  9000     3.12255e-01 
  9083     3.07358e-01 
  9167     3.03252e-01 
  9250     2.99127e-01 
  9333     2.94903e-01 
  9417     2.90245e-01 
  9500     2.86521e-01 
  9583     2.82305e-01 
  9667     2.79097e-01 
  9750     2.75073e-01 
  9833     2.71030e-01 
  9917     2.67037e-01 
 10000     2.63269e-01 
 10083     2.58330e-01 
 10167     2.55700e-01 
 10250     2.51495e-01 
 10333     2.48128e-01 
 10417     2.44769e-01 
 10500     2.41179e-01 
 10583     2.37819e-01 
 10667     2.34908e-01 
 10750     2.31220e-01 
 10833     2.28276e-01 
 10917     2.24441e-01 
 11000     2.21566e-01 
 11083     2.18599e-01 
 11167     2.15624e-01 
 11250     2.11714e-01 
 11333     2.09867e-01 
 11417     2.06973e-01 
 11500     2.04504e-01 
 11583     2.00974e-01 
 11667     1.98302e-01 
 11750     1.95648e-01 
 11833     1.93350e-01 
 11917     1.89751e-01 
 12000     1.87578e-01 
 12083     1.84766e-01 
 12167     1.82188e-01 
 12250     1.79847e-01 
 12333     1.77508e-01 
 12417     1.74530e-01 
 12500     1.71989e-01 
 12583     1.69286e-01 
 12667     1.67310e-01 
 12750     1.64825e-01 
 12833     1.62596e-01 
 12917     1.60044e-01 
 13000     1.58113e-01 
 13083     1.56045e-01 
 13167     1.54249e-01 
 13250     1.51872e-01 
 13333     1.49386e-01 
 13417     1.47572e-01 
 13500     1.45415e-01 
 13583     1.43088e-01 
 13667     1.41418e-01 
 13750     1.39903e-01 
 13833     1.37863e-01 
 13917     1.36022e-01 
 14000     1.34109e-01 
 14083     1.31618e-01 
 14167     1.30158e-01 
 14250     1.28072e-01 
 14333     1.26343e-01 
 14417     1.23865e-01 
 14500     1.22525e-01 
 14583     1.20637e-01 
 14667     1.19073e-01 
 14750     1.17794e-01 
 14833     1.16205e-01 
 14917     1.14480e-01 
 15000     1.12649e-01 
 15083     1.11098e-01 
 15167     1.09581e-01 
 15250     1.07631e-01 
 15333     1.06036e-01 
 15417     1.05050e-01 
 15500     1.03463e-01 
 15583     1.02443e-01 
 15667     1.00196e-01 
 15750     9.91982e-02 
 15833     9.78070e-02 
 15917     9.64691e-02 
 16000     9.51898e-02 
 16083     9.33722e-02 
 16167     9.22441e-02 
 16250     9.10773e-02 
 16333     8.97978e-02 
 16417     8.84000e-02 
 16500     8.70870e-02 
 16583     8.59616e-02 
 16667     8.47973e-02 
 16750     8.34069e-02 
 16833     8.22381e-02 
 16917     8.08708e-02 
 17000     7.99411e-02 
 17083     7.90071e-02 
 17167     7.76766e-02 
 17250     7.67080e-02 
 17333     7.53673e-02 
 17417     7.42558e-02 
 17500     7.32983e-02 
 17583     7.23240e-02 
 17667     7.16901e-02 
 17750     7.05143e-02 
 17833     6.95995e-02 
 17917     6.83915e-02 
 18000     6.72748e-02 
 18083     6.64076e-02 
 18167     6.55590e-02 
 18250     6.47159e-02 
 18333     6.38114e-02 
 18417     6.30204e-02 
 18500     6.20309e-02 
 18583     6.12653e-02 
 18667     6.04980e-02 
 18750     5.93800e-02 
 18833     5.89076e-02 
 18917     5.78679e-02 
 19000     5.72682e-02 
 19083     5.63851e-02 
 19167     5.52292e-02 
 19250     5.46022e-02 
 19333     5.38684e-02 
 19417     5.31421e-02 
 19500     5.21976e-02 
 19583     5.15730e-02 
 19667     5.09676e-02 
 19750     5.01851e-02 
 19833     4.91960e-02 
 19917     4.85047e-02 
 extra         0.02852


=================================

code that generated this simulation:

char   t1[80] = "Small Monte Carlo by Scott Prahl (https://omlc.org)";
char   t2[80] = "1 W/cm^2 Uniform Illumination of Semi-Infinite Medium";

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define BINS 241

double mu_a = 0.37;			/* Absorption Coefficient in 1/cm */
double mu_s = 23.88889;			/* Scattering Coefficient in 1/cm */
double g = 0.9;				/* Scattering Anisotropy -1<=g<=1 */
double n = 1.36;				/* Index of refraction of medium */
double microns_per_bin = 83.3333333;/* Thickness of one bin layer */
long   i, photons = 10000000; /*ID_EDIT_1_2*/
double x,y,z,u,v,w,weight;
double rs, rd, bit, albedo, crit_angle, bins_per_mfp, heat[BINS];


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


void launch() /* Start the photon */
{
	x = 0.0; y = 0.0; z = 0.0;		  
	u = 0.0; v = 0.0; w = 1.0;		
	weight = 1.0 - rs;
}

void bounce () /* Interact with top surface */
{
double t, temp, temp1,rf;
	w = -w;
	z = -z;
	if (w <= crit_angle) return;  			/* total internal reflection */	

	t       = sqrt(1.0-n*n*(1.0-w*w));    	/* cos of exit angle */
	temp1   = (w - n*t)/(w + n*t);
	temp    = (t - n*w)/(t + n*w);
	rf      = (temp1*temp1+temp*temp)/2.0;	/* Fresnel reflection */
	rd     += (1.0-rf) * weight;
	weight -= (1.0-rf) * weight;
}

void move() /* move to next scattering or absorption event */
{
double d = -log((rand()+1.0)/(RAND_MAX+1.0));
	x += d * u;
	y += d * v;
	z += d * w;  
	if ( z<=0 ) bounce();
}

void absorb () /* Absorb light in the medium */
{
int bin=z*bins_per_mfp;

	if (bin >= BINS) bin = BINS-1;	
	heat[bin] += (1.0-albedo)*weight;
	weight *= albedo;
	if (weight < 0.001){ /* Roulette */
		bit -= weight;
		if (rand() > 0.1*RAND_MAX) weight = 0; else weight /= 0.1;
		bit += weight;
	}
}

void scatter() /* Scatter photon and establish new direction */
{
double x1, x2, x3, t, mu;

	for(;;) {								/*new direction*/
		x1=2.0*rand()/RAND_MAX - 1.0; 
		x2=2.0*rand()/RAND_MAX - 1.0; 
		if ((x3=x1*x1+x2*x2)<=1) break;
	}	
	if (g==0) {  /* isotropic */
		u = 2.0 * x3 -1.0;
		v = x1 * sqrt((1-u*u)/x3);
		w = x2 * sqrt((1-u*u)/x3);
		return;
	} 

	mu = (1-g*g)/(1-g+2.0*g*rand()/RAND_MAX);
	mu = (1 + g*g-mu*mu)/2.0/g;
	if ( fabs(w) < 0.9 ) {	
		t = mu * u + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*u*w-x2*v);
		v = mu * v + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*v*w+x2*u);
		w = mu * w - sqrt((1-mu*mu)*(1-w*w)/x3) * x1;
	} else {
		t = mu * u + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*u*v + x2*w);
		w = mu * w + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*v*w - x2*u);
		v = mu * v - sqrt((1-mu*mu)*(1-v*v)/x3) * x1;
	}
	u = t;
}

void print_results() /* Print the results */
{
int i;
	printf("%s\n%s\n\nScattering = %8.3f/cm\nAbsorption = %8.3f/cm\n",t1,t2,mu_s,mu_a);
	printf("Anisotropy = %8.3f\nRefr Index = %8.3f\nPhotons    = %8ld",g,n,photons);
	printf("\n\nSpecular Refl      = %10.5f\nBackscattered Refl = %10.5f",rs,rd/(bit+photons));
	printf("\n\n Depth         Heat\n[microns]     [W/cm^3]\n");

	for (i=0;i<BINS-1;i++){
		printf("%6.0f    %12.5e \n",i*microns_per_bin, heat[i]/microns_per_bin*1e4/(bit+photons));
	}
	printf(" extra    %12.5f\n",heat[BINS-1]/(bit+photons));
}

int main ()
{
	long progressBarStep = photons / 100;
	albedo = mu_s / (mu_s + mu_a);
	rs = (n-1.0)*(n-1.0)/(n+1.0)/(n+1.0);	/* specular reflection */
	crit_angle = sqrt(1.0-1.0/n/n);			/* cos of critical angle */
	bins_per_mfp = 1e4/microns_per_bin/(mu_a+mu_s);
	
	for (i = 1; i <= photons; i++){
		displayProgressBar(i, photons, progressBarStep);
		launch ();
		while (weight > 0) {
			move ();
			absorb ();
			scatter ();
		}
	}	
	print_results();
	return 0;
}
