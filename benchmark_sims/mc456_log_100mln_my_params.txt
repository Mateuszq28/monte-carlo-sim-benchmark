time elapsed: 3864.1540 seconds

=================================

sim results:

number of photons = 100000000
overflow: 4.90655821965778768063e+07
sum: 5.09341737459706589580e+07
sum: 5.09344178034221231937e+07
avg: 5.09341737459706567215e-01
perc_in: 50.93

number of photons = 100000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 1.45338759546853046878e-02 	 1.60469728915341725006e-01 	 2.69790855013156305464e-01 
0.01250 	 1.18103493231878804715e-02 	 1.61017286506630136200e-01 	 2.69876273082881090737e-01 
0.02083 	 1.13098327900075200370e-02 	 1.60960783617992431171e-01 	 2.69981343473495449814e-01 
0.02917 	 1.16272878359649691621e-02 	 1.61360157445802426812e-01 	 2.70279971226221105152e-01 
0.03750 	 1.15066196405121286273e-02 	 1.61337944230038804472e-01 	 2.70386984851525735696e-01 
0.04583 	 1.13703325247913739071e-02 	 1.61350065441953544054e-01 	 2.70585325625815331652e-01 
0.05417 	 1.13315326636287839329e-02 	 1.61247690462938825240e-01 	 2.70919350619699572658e-01 
0.06250 	 1.13189780117628514822e-02 	 1.61344561308079559314e-01 	 2.71283558216632525451e-01 
0.07083 	 1.13430334269725464902e-02 	 1.61622026968078674747e-01 	 2.71665810380814221059e-01 
0.07917 	 1.12660279608848955951e-02 	 1.61684074455961807049e-01 	 2.72187405714766184062e-01 
0.08750 	 1.12340291883209607987e-02 	 1.61907375246442525318e-01 	 2.72835026690778026381e-01 
0.09583 	 1.13170157750251722251e-02 	 1.62006419271231910662e-01 	 2.73350958372562791165e-01 
0.10417 	 1.12620828120776339532e-02 	 1.62227080552940022828e-01 	 2.73931921746248641103e-01 
0.11250 	 1.12565226428177258405e-02 	 1.62336420902864458915e-01 	 2.74658984807548245399e-01 
0.12083 	 1.13383898171369144892e-02 	 1.62729758956095205136e-01 	 2.75368509307800657382e-01 
0.12917 	 1.12916383354634327491e-02 	 1.62959441196275756081e-01 	 2.76313702994141818792e-01 
0.13750 	 1.13457088680318143176e-02 	 1.63152233531691170931e-01 	 2.77092876239039331843e-01 
0.14583 	 1.13516623541009276099e-02 	 1.63396087469423079153e-01 	 2.78110418373598122788e-01 
0.15417 	 1.13553141736835137843e-02 	 1.63719630526571430229e-01 	 2.79063788294013903624e-01 
0.16250 	 1.13525948199507641101e-02 	 1.64041591349995435900e-01 	 2.80097174726178899107e-01 
0.17083 	 1.13856903637865949919e-02 	 1.64484764014239975838e-01 	 2.81141113763588912366e-01 
0.17917 	 1.13905914175885525363e-02 	 1.64816382513068931948e-01 	 2.82312750403679757483e-01 
0.18750 	 1.14301813988243287923e-02 	 1.65095789400831832738e-01 	 2.83573907017497350846e-01 
0.19583 	 1.14815061716885616350e-02 	 1.65436712062834057058e-01 	 2.84762193213840442141e-01 
0.20417 	 1.14592399804529648799e-02 	 1.65876165070724224115e-01 	 2.86089655245679586049e-01 
0.21250 	 1.14997118926518978460e-02 	 1.66384770951931743044e-01 	 2.87514367233558720827e-01 
0.22083 	 1.15100506013241562359e-02 	 1.66728314603332372634e-01 	 2.89034344877076798674e-01 
0.22917 	 1.15322461229521756876e-02 	 1.67200592196955849511e-01 	 2.90478160040271937703e-01 
0.23750 	 1.15049268862012169651e-02 	 1.67671472816520089610e-01 	 2.91944449560248009412e-01 
0.24583 	 1.15596306599715439867e-02 	 1.68206531740073245151e-01 	 2.93552128171583881500e-01 
0.25417 	 1.15897789583143222270e-02 	 1.68745110729459996124e-01 	 2.95102184534767664204e-01 
0.26250 	 1.16151914566640940968e-02 	 1.69298391586781116214e-01 	 2.96988597340027249416e-01 
0.27083 	 1.16532322937860591955e-02 	 1.69766489173164086823e-01 	 2.98679954002491754306e-01 
0.27917 	 1.16884395129667837537e-02 	 1.70320847884750325996e-01 	 3.00597145896974449197e-01 
0.28750 	 1.16832321530380370961e-02 	 1.70838879094044243656e-01 	 3.02431517491471513193e-01 
0.29583 	 1.17296846267849232126e-02 	 1.71557995555247061459e-01 	 3.04521946993645764579e-01 
0.30417 	 1.17288595492260044190e-02 	 1.72093083833909310520e-01 	 3.06547945795894449805e-01 
0.31250 	 1.17748500617848167460e-02 	 1.72693143007394744881e-01 	 3.08666243701144871192e-01 
0.32083 	 1.18182037568420120199e-02 	 1.73422645015096382748e-01 	 3.10784597432080311741e-01 
0.32917 	 1.18363736253720586850e-02 	 1.74099999567405322454e-01 	 3.12826172535666469088e-01 
0.33750 	 1.18449295261450794625e-02 	 1.74773181813308309263e-01 	 3.15226233506746833513e-01 
0.34583 	 1.18938245361944940764e-02 	 1.75497052947839765613e-01 	 3.17557422316434412313e-01 
0.35417 	 1.19216567402952878379e-02 	 1.76158875670743814146e-01 	 3.19909708124627323311e-01 
0.36250 	 1.19443927555114032951e-02 	 1.77095521824779056352e-01 	 3.22434353896023373487e-01 
0.37083 	 1.19977452901073033953e-02 	 1.77853475201082966706e-01 	 3.24976664842379248110e-01 
0.37917 	 1.20324964463835674261e-02 	 1.78506908812284120769e-01 	 3.27538937940829166795e-01 
0.38750 	 1.20398165640072298682e-02 	 1.79375802298350817132e-01 	 3.30226652378892537865e-01 
0.39583 	 1.21043060626770046517e-02 	 1.80246216178713392075e-01 	 3.32879103321773839319e-01 
0.40417 	 1.21415063944319123052e-02 	 1.81086802604084412538e-01 	 3.35870711528581222804e-01 
0.41250 	 1.21796826793168447983e-02 	 1.81967292541821729079e-01 	 3.38425647084275416088e-01 
0.42083 	 1.22121518586355282121e-02 	 1.82922570301722708930e-01 	 3.41436587236510491472e-01 
0.42917 	 1.22485444537649493246e-02 	 1.83795088316336230339e-01 	 3.44500807741289549746e-01 
0.43750 	 1.22949885279367513574e-02 	 1.84697958643924631250e-01 	 3.47547172688756067505e-01 
0.44583 	 1.23378260184032525343e-02 	 1.85577144071036620465e-01 	 3.50745967850350948147e-01 
0.45417 	 1.23759446956319026090e-02 	 1.86624501714228591132e-01 	 3.53861494343482962943e-01 
0.46250 	 1.24257533979942394464e-02 	 1.87620156189300363314e-01 	 3.57334608134911635435e-01 
0.47083 	 1.24706391645470777291e-02 	 1.88680395411570112074e-01 	 3.60579732188807344784e-01 
0.47917 	 1.25127370846601342763e-02 	 1.89617448390078435771e-01 	 3.63952492913489078497e-01 
0.48750 	 1.25574954919282447824e-02 	 1.90727950819045977138e-01 	 3.67634711426828297842e-01 
0.49583 	 1.25853241423255751003e-02 	 1.91872570767066707997e-01 	 3.71135229748148776086e-01 
0.50417 	 1.26546091273361457907e-02 	 1.92996323349144405235e-01 	 3.74747613285317471288e-01 
0.51250 	 1.27078850476179897738e-02 	 1.94152957541181614420e-01 	 3.78485540391460373311e-01 
0.52083 	 1.27611134783316964442e-02 	 1.95323458309116432252e-01 	 3.82162647195741445039e-01 
0.52917 	 1.28004418726474951395e-02 	 1.96555845722939215303e-01 	 3.86120192729000055731e-01 
0.53750 	 1.28607320565355953690e-02 	 1.97812937416139589253e-01 	 3.90054636565051293662e-01 
0.54583 	 1.29328790509113424056e-02 	 1.98994093562476048742e-01 	 3.94019697827097781229e-01 
0.55417 	 1.29787057757954869819e-02 	 2.00264195282127938080e-01 	 3.98152696528396188302e-01 
0.56250 	 1.30364141846225408544e-02 	 2.01583379803209533643e-01 	 4.02256151418528995478e-01 
0.57083 	 1.30937001144306296857e-02 	 2.02928858301768905159e-01 	 4.06528368842943965689e-01 
0.57917 	 1.31449472575465627772e-02 	 2.04358838018969951600e-01 	 4.10997016279049776077e-01 
0.58750 	 1.31952886757971035031e-02 	 2.05663730594796423379e-01 	 4.15497724331447548796e-01 
0.59583 	 1.32595961625151196467e-02 	 2.07157434437019505324e-01 	 4.20040192178785465327e-01 
0.60417 	 1.33107004736033041059e-02 	 2.08641241054331877391e-01 	 4.24462664205396245087e-01 
0.61250 	 1.33778592014756718409e-02 	 2.10146058832893722901e-01 	 4.29421758815266230158e-01 
0.62083 	 1.34413607510892665897e-02 	 2.11650128327649955651e-01 	 4.33959665625704760217e-01 
0.62917 	 1.35079821738833000949e-02 	 2.13208924929092075162e-01 	 4.38893858116752855203e-01 
0.63750 	 1.35650324026275886924e-02 	 2.14875105659514509249e-01 	 4.43783021093247020961e-01 
0.64583 	 1.36287944522705314204e-02 	 2.16390302907208648131e-01 	 4.49009576598139448222e-01 
0.65417 	 1.36883911200538135183e-02 	 2.18083776177500021642e-01 	 4.53881146105716337669e-01 
0.66250 	 1.37730357515315118139e-02 	 2.19830889965342696213e-01 	 4.59135879371519228798e-01 
0.67083 	 1.38333369221884539685e-02 	 2.21557238251549465380e-01 	 4.64471116330033906294e-01 
0.67917 	 1.39034457456832707262e-02 	 2.23389466606108588742e-01 	 4.69642508533814173610e-01 
0.68750 	 1.39596473537685374089e-02 	 2.25173987109040324439e-01 	 4.75365864084791700517e-01 
0.69583 	 1.40408033491715641961e-02 	 2.27123505329855229773e-01 	 4.80830920569731590231e-01 
0.70417 	 1.41097398998062967951e-02 	 2.29011288333744567058e-01 	 4.86758233891728619991e-01 
0.71250 	 1.41765019492721289912e-02 	 2.31045649910191164267e-01 	 4.92422841946151046422e-01 
0.72083 	 1.42453239161118121181e-02 	 2.33102407645212506004e-01 	 4.98295472087745883183e-01 
0.72917 	 1.43257913102013811207e-02 	 2.35211201138533193555e-01 	 5.04094143197940769419e-01 
0.73750 	 1.44091047671587608320e-02 	 2.37289713902384430400e-01 	 5.10303422422880736953e-01 
0.74583 	 1.44835794656634191807e-02 	 2.39560589644255195196e-01 	 5.16464509760879098010e-01 
0.75417 	 1.45640374993507952517e-02 	 2.41881127632611409028e-01 	 5.22851001788295466355e-01 
0.76250 	 1.46483833291754690642e-02 	 2.44147762218077879481e-01 	 5.29127127541811570488e-01 
0.77083 	 1.47358961537509530054e-02 	 2.46696091986660259732e-01 	 5.35953648276921490456e-01 
0.77917 	 1.48076742318035692314e-02 	 2.49156693817277008485e-01 	 5.42210399980516233320e-01 
0.78750 	 1.49024531942659934497e-02 	 2.51779839661046778154e-01 	 5.48896219451491917951e-01 
0.79583 	 1.49926834815732115680e-02 	 2.54511551739432795305e-01 	 5.55854517251095137098e-01 
0.80417 	 1.50828826657520183308e-02 	 2.57416618164992894169e-01 	 5.62734269766997918794e-01 
0.81250 	 1.51520275523555434521e-02 	 2.60245569987523461819e-01 	 5.69974009712258866678e-01 
0.82083 	 1.52378524346561058933e-02 	 2.63279299690144130697e-01 	 5.77082817826351179846e-01 
0.82917 	 1.53332657673434756551e-02 	 2.66460950408385577326e-01 	 5.84182915769714927734e-01 
0.83750 	 1.54202896677072317372e-02 	 2.69731938240305224586e-01 	 5.91658651202036200978e-01 
0.84583 	 1.55056357765145889915e-02 	 2.73196562559929745362e-01 	 5.99170187129842712892e-01 
0.85417 	 1.56054690898144825251e-02 	 2.76803215533518998104e-01 	 6.06878738166341635818e-01 
0.86250 	 1.57009548930761196062e-02 	 2.80558856767270825561e-01 	 6.14507987965755564375e-01 
0.87083 	 1.58071547036226917049e-02 	 2.84627328810944102422e-01 	 6.22469451301524645537e-01 
0.87917 	 1.58908264203721713570e-02 	 2.88844208565575022440e-01 	 6.30396510224005890421e-01 
0.88750 	 1.60043047689312177562e-02 	 2.93284783848076158197e-01 	 6.38386267303468479817e-01 
0.89583 	 1.60852703728636622915e-02 	 2.98122235353477260666e-01 	 6.46605111911917385115e-01 
0.90417 	 1.61988279440209818894e-02 	 3.03284355292974816543e-01 	 6.54783636039206973223e-01 
0.91250 	 1.63002857762143300857e-02 	 3.08695707732134450030e-01 	 6.63479033572574206090e-01 
0.92083 	 1.63917010403541903163e-02 	 3.14810976706985212736e-01 	 6.72284958950176481096e-01 
0.92917 	 1.64981877147189238964e-02 	 3.21139539483169367262e-01 	 6.80953746584013197563e-01 
0.93750 	 1.66119888447933336528e-02 	 3.28275141025994143806e-01 	 6.89888368138865115675e-01 
0.94583 	 1.67280073584338238868e-02 	 3.36090497861075476749e-01 	 6.98883565631510106364e-01 
0.95417 	 1.68446886317737826166e-02 	 3.44710104580255360940e-01 	 7.08147016118080618874e-01 
0.96250 	 1.69431923806697241897e-02 	 3.54359423881702662040e-01 	 7.17516514292511287110e-01 
0.97083 	 1.70550479392093355668e-02 	 3.65361963214048401927e-01 	 7.26905509364277002682e-01 
0.97917 	 1.71638599218975479443e-02 	 3.78024652286540419066e-01 	 7.36374602971673675178e-01 
0.98750 	 1.72904426178398830383e-02 	 3.92917250122384820177e-01 	 7.46220053160631446865e-01 
0.99583 	 1.73978844377481803307e-02 	 4.11146432081443913287e-01 	 7.56056157811833329241e-01 
1.00417 	 1.75144362767041296414e-02 	 4.33416760781212551112e-01 	 7.65897324442121774091e-01 
1.01250 	 1.76388205273820750096e-02 	 4.62441291724293657150e-01 	 7.76257880062290350764e-01 
1.02083 	 1.77660124782454617587e-02 	 5.02864332433170635461e-01 	 7.86904493851443231911e-01 
1.02917 	 1.78850969475216961535e-02 	 5.64918299767434572978e-01 	 7.97232015219394352101e-01 
1.03750 	 1.80110499115698000083e-02 	 6.84073040965634149302e-01 	 8.08062756521542469024e-01 
1.04583 	 1.81379244755422511237e-02 	 1.98712547934636574176e+00 	 8.18748454654301238698e-01 
1.05417 	 1.82620766808325903086e-02 	 9.25933077115390301692e-01 	 8.29533051024778145255e-01 
1.06250 	 1.84067374898364694014e-02 	 6.32787489247922163571e-01 	 8.40757770249620950409e-01 
1.07083 	 1.85363697215452094547e-02 	 5.33249273375003163267e-01 	 8.51973054994063505596e-01 
1.07917 	 1.86686111742004334779e-02 	 4.75876013977111878006e-01 	 8.63282500186426715594e-01 
1.08750 	 1.87871825260176247840e-02 	 4.36645985357637544944e-01 	 8.74841298547770929162e-01 
1.09583 	 1.89199721446212491827e-02 	 4.07224070769321822016e-01 	 8.86520524949422350502e-01 
1.10417 	 1.90652744279874962474e-02 	 3.83880566352424679177e-01 	 8.98639406692440134705e-01 
1.11250 	 1.92157678499456502363e-02 	 3.64597893403166617432e-01 	 9.10942415511950209783e-01 
1.12083 	 1.93473979306216237184e-02 	 3.48259673071984576787e-01 	 9.23035847165780021228e-01 
1.12917 	 1.94967049015684727731e-02 	 3.34076015553690208737e-01 	 9.35531279582084818180e-01 
1.13750 	 1.96483478907304096039e-02 	 3.21489063403614661052e-01 	 9.48089482878346156980e-01 
1.14583 	 1.97877550161634913062e-02 	 3.10197855574833591952e-01 	 9.61055626087399028634e-01 
1.15417 	 1.99393391177945279724e-02 	 3.00068298215857010014e-01 	 9.74242546952689969508e-01 
1.16250 	 2.00891645275523764158e-02 	 2.90694454186623485459e-01 	 9.87322774069048891832e-01 
1.17083 	 2.02490330784627185767e-02 	 2.82089929710490849857e-01 	 1.00068816193610121701e+00 
1.17917 	 2.03948508261025847343e-02 	 2.74104062466164255518e-01 	 1.01411581305600018155e+00 
1.18750 	 2.05572077781301723598e-02 	 2.66673180537087328723e-01 	 1.02787981187868138200e+00 
1.19583 	 2.07162619876480637304e-02 	 2.59759621616906744013e-01 	 1.04172647513315452805e+00 
1.20417 	 2.08757552484835698370e-02 	 2.53152457810053077569e-01 	 1.05602408392122981695e+00 
1.21250 	 2.10432045626278395323e-02 	 2.46942039752773900840e-01 	 1.07010300886040199408e+00 
1.22083 	 2.11982334502688746225e-02 	 2.41083807546010053802e-01 	 1.08412245251788807998e+00 
1.22917 	 2.13646742512857458485e-02 	 2.35474284936331074158e-01 	 1.09882862751269860802e+00 
1.23750 	 2.15242558564284897082e-02 	 2.30103995438247332928e-01 	 1.11395431105435127606e+00 
1.24583 	 2.16917841775195706366e-02 	 2.24950992524443726950e-01 	 1.12885692186004615856e+00 
1.25417 	 2.18577374308330414643e-02 	 2.20038327355299961896e-01 	 1.14441886923712821122e+00 
1.26250 	 2.20389336882418143682e-02 	 2.15366607599918741256e-01 	 1.15974529890159505641e+00 
1.27083 	 2.21980466251536119604e-02 	 2.10788822479821974509e-01 	 1.17575985063067611769e+00 
1.27917 	 2.23936124175333588215e-02 	 2.06416004460388408104e-01 	 1.19124549072872842892e+00 
1.28750 	 2.25703832249623120854e-02 	 2.02247341410097786207e-01 	 1.20671324800643975372e+00 
1.29583 	 2.27467076946609447763e-02 	 1.98153667331673194463e-01 	 1.22362838720723821062e+00 
1.30417 	 2.29297464667627265422e-02 	 1.94203496472642123116e-01 	 1.23994261879728417952e+00 
1.31250 	 2.31257399034920409220e-02 	 1.90358674279449746614e-01 	 1.25670705013403427586e+00 
1.32083 	 2.33208876416474836235e-02 	 1.86708617837882423496e-01 	 1.27347564469045670954e+00 
1.32917 	 2.35134697977217414777e-02 	 1.83064704383364779128e-01 	 1.29074299399784298004e+00 
1.33750 	 2.37075666882847028993e-02 	 1.79565764095456797955e-01 	 1.30822294431764540867e+00 
1.34583 	 2.39070780391155979228e-02 	 1.76157424961572717237e-01 	 1.32529703503029838707e+00 
1.35417 	 2.40987979059787069125e-02 	 1.72885997286376658089e-01 	 1.34351055412852216087e+00 
1.36250 	 2.42945216868128144316e-02 	 1.69679340293411862195e-01 	 1.36107747939784062829e+00 
1.37083 	 2.45006267112320742785e-02 	 1.66547219345960395565e-01 	 1.37948227573903547949e+00 
1.37917 	 2.46967458426987813980e-02 	 1.63470488800992796996e-01 	 1.39789741531388300722e+00 
1.38750 	 2.49097956353770549898e-02 	 1.60501464558256479176e-01 	 1.41605975601648714779e+00 
1.39583 	 2.51099196547757003151e-02 	 1.57540219188276542361e-01 	 1.43526125964602413454e+00 
1.40417 	 2.53336643583353463005e-02 	 1.54729539785779968142e-01 	 1.45414565965165798467e+00 
1.41250 	 2.55361062806827958382e-02 	 1.51994140102267166759e-01 	 1.47294573339898038355e+00 
1.42083 	 2.57522944329099078009e-02 	 1.49257448352577787309e-01 	 1.49261684535901162363e+00 
1.42917 	 2.59781263113004860787e-02 	 1.46628722672695721574e-01 	 1.51206623284031760335e+00 
1.43750 	 2.61905977934057988821e-02 	 1.44018174731392833987e-01 	 1.53185413655290325607e+00 
1.44583 	 2.64282520376072950496e-02 	 1.41533032316469964407e-01 	 1.55178115798419669069e+00 
1.45417 	 2.66471221569397238860e-02 	 1.38946806089322888456e-01 	 1.57195442051336464750e+00 
1.46250 	 2.68838969103366610958e-02 	 1.36544906541778782172e-01 	 1.59214170429270529539e+00 
1.47083 	 2.71186517980909237713e-02 	 1.34217382269928964256e-01 	 1.61254900079412966107e+00 
1.47917 	 2.73547976906378040307e-02 	 1.31875285492199290083e-01 	 1.63321987714641569944e+00 
1.48750 	 2.75852279748982111285e-02 	 1.29601945488342640278e-01 	 1.65385264723046399027e+00 
1.49583 	 2.78204745101895065118e-02 	 1.27319378109726294435e-01 	 1.67466825888312231818e+00 
1.50417 	 2.80720899001819755580e-02 	 1.25157440997107516356e-01 	 1.69610420548843876531e+00 
1.51250 	 2.83157015072401894995e-02 	 1.22991407684137521450e-01 	 1.71734789134848542247e+00 
1.52083 	 2.85675789152363655832e-02 	 1.20919704580972606212e-01 	 1.73921616330142581042e+00 
1.52917 	 2.88215576055931323174e-02 	 1.18882044506528797290e-01 	 1.76054742845189071687e+00 
1.53750 	 2.90647230490922552082e-02 	 1.16823814534032344170e-01 	 1.78178587644948982494e+00 
1.54583 	 2.93332026232835420265e-02 	 1.14814187399212272456e-01 	 1.80374795648351105015e+00 
1.55417 	 2.95812392280217807683e-02 	 1.12871789417899243135e-01 	 1.82527062907057513463e+00 
1.56250 	 2.98564253072684908374e-02 	 1.10973690733360622063e-01 	 1.84736689460975633814e+00 
1.57083 	 3.01223104345824839456e-02 	 1.09081588551617314486e-01 	 1.86847898256417699336e+00 
1.57917 	 3.03823571971755697352e-02 	 1.07244850363457766562e-01 	 1.89058530012195280534e+00 
1.58750 	 3.06635775625679375678e-02 	 1.05443215295663930697e-01 	 1.91334996072189533756e+00 
1.59583 	 3.09310116951131697238e-02 	 1.03645681599557851205e-01 	 1.93509638002841333204e+00 
1.60417 	 3.12072441504534850432e-02 	 1.01887082950915669466e-01 	 1.95711341243578829108e+00 
1.61250 	 3.14867615792311095202e-02 	 1.00200825816900623844e-01 	 1.97880087001204807429e+00 
1.62083 	 3.17737957337797735646e-02 	 9.85260347767192845581e-02 	 2.00148185750993601317e+00 
1.62917 	 3.20623143896141410414e-02 	 9.69148719416097897961e-02 	 2.02268272251842962106e+00 
1.63750 	 3.23600789588828485766e-02 	 9.52824152896283166347e-02 	 2.04364501123107977776e+00 
1.64583 	 3.26504275502414106902e-02 	 9.36976319230134052640e-02 	 2.06569036158649543822e+00 
1.65417 	 3.29422626023399972572e-02 	 9.21330309228819976930e-02 	 2.08698056054893577027e+00 
1.66250 	 3.32381712415684704709e-02 	 9.05969563619323375869e-02 	 2.10844271844753539114e+00 
1.67083 	 3.35463635326715345353e-02 	 8.91251181268751663245e-02 	 2.12887327852874008727e+00 
1.67917 	 3.38458194868578657322e-02 	 8.76214673938103538742e-02 	 2.14962203107000915381e+00 
1.68750 	 3.41555934955452000779e-02 	 8.61912655838698860133e-02 	 2.17040428739246848977e+00 
1.69583 	 3.44683297299737956276e-02 	 8.47623152951450936632e-02 	 2.19098240059313376094e+00 
1.70417 	 3.47767827088421785375e-02 	 8.33713962386943008287e-02 	 2.21017421471225228302e+00 
1.71250 	 3.51054076325116037882e-02 	 8.20019571623448462194e-02 	 2.22898442722365963675e+00 
1.72083 	 3.54299790503877151671e-02 	 8.06469100298394803161e-02 	 2.24831589564706435524e+00 
1.72917 	 3.57499032222149334959e-02 	 7.93129758884087432413e-02 	 2.26714719678198761699e+00 
1.73750 	 3.60813316776509504513e-02 	 7.80315947332420184468e-02 	 2.28418845580449714205e+00 
1.74583 	 3.64129913020199355578e-02 	 7.67252234917978614970e-02 	 2.30176269463802007920e+00 
1.75417 	 3.67437634907793325700e-02 	 7.54912790981609876928e-02 	 2.31855128858372161460e+00 
1.76250 	 3.70702757483661049509e-02 	 7.42423477261665160087e-02 	 2.33399512445084056367e+00 
1.77083 	 3.74115725345013777625e-02 	 7.30003974627605606296e-02 	 2.34978595917256471992e+00 
1.77917 	 3.77558328272061607955e-02 	 7.18307141780343549886e-02 	 2.36353533679527805234e+00 
1.78750 	 3.80961149317512112744e-02 	 7.06646382519434679281e-02 	 2.37610303374617171102e+00 
1.79583 	 3.84342038889334061680e-02 	 6.94952645540673347169e-02 	 2.38866846142697486499e+00 
1.80417 	 3.87904519128862146360e-02 	 6.83794713521567315562e-02 	 2.40087477926728709576e+00 
1.81250 	 3.91448353435239204678e-02 	 6.72603585245373364332e-02 	 2.41044547174750523055e+00 
1.82083 	 3.95050393896201126887e-02 	 6.61824691962288602642e-02 	 2.41973976012352087750e+00 
1.82917 	 3.98511013507827568936e-02 	 6.51149129922589803288e-02 	 2.42802753114790625943e+00 
1.83750 	 4.02156407489485390183e-02 	 6.40555707231509757760e-02 	 2.43435808401091913211e+00 
1.84583 	 4.05706126053479998461e-02 	 6.30070538715492289850e-02 	 2.43953990172933288250e+00 
1.85417 	 4.09305639521443109796e-02 	 6.19591533015192291733e-02 	 2.44303635201200508575e+00 
1.86250 	 4.13102152319634111088e-02 	 6.09920190245754195724e-02 	 2.44561737511367960352e+00 
1.87083 	 4.16604144920091346016e-02 	 6.00021305089229461949e-02 	 2.44560284541691164151e+00 
1.87917 	 4.20219515735426873970e-02 	 5.90187196149771081677e-02 	 2.44391963807564449596e+00 
1.88750 	 4.23894121204580476281e-02 	 5.80573594117408664506e-02 	 2.44063111312944647224e+00 
1.89583 	 4.27503380643519947935e-02 	 5.71345775323919627398e-02 	 2.43561803521210684664e+00 
1.90417 	 4.31053191099884727699e-02 	 5.62127997721777739049e-02 	 2.42786082941895919873e+00 
1.91250 	 4.34725929173195024813e-02 	 5.52998309756809677817e-02 	 2.41874178455460553394e+00 
1.92083 	 4.38453268809722018773e-02 	 5.44060276429199837778e-02 	 2.40730587251283312256e+00 
1.92917 	 4.41891050093763670947e-02 	 5.35232841515207516392e-02 	 2.39344941308853265127e+00 
1.93750 	 4.45430922911033144729e-02 	 5.26779144860218817570e-02 	 2.37716788390412858689e+00 
1.94583 	 4.49066258254397568384e-02 	 5.18455955194258993890e-02 	 2.35767384456081252608e+00 
1.95417 	 4.52451520655869632304e-02 	 5.09959352847768818129e-02 	 2.33619415305592914578e+00 
1.96250 	 4.55859873074652907632e-02 	 5.01940000608228908963e-02 	 2.30999858098393984207e+00 
1.97083 	 4.59302537357382176242e-02 	 4.93915010340673504841e-02 	 2.28146639588126465270e+00 
1.97917 	 4.62711374839492456390e-02 	 4.85841812803526687525e-02 	 2.24774835098509662146e+00 
1.98750 	 4.65943098556528267906e-02 	 4.78066703406791054798e-02 	 2.20584337317890799568e+00 
1.99583 	 4.69030604306724663299e-02 	 4.70478124109387219054e-02 	 1.15719473216418267114e+00 
2.00417 	 3.99521570414604232369e+00 	 3.74127579755928341143e+00 	 7.35826973927401866149e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 100000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);