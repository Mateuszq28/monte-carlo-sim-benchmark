time elapsed: 13275.9499 seconds

=================================

sim results:

number of photons = 100000000
overflow: 4.90661286879296526313e+07
sum: 5.09338745352707207203e+07
sum: 5.09338713120703473687e+07
avg: 5.09338745352707178426e-01
perc_in: 50.93

number of photons = 100000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 1.56478142500111744306e-02 	 1.61988859246418037685e-01 	 2.69637444999712538873e-01 
0.01250 	 1.14952471002002700601e-02 	 1.61077059684596596290e-01 	 2.69576121647741917542e-01 
0.02083 	 1.12815293170067422468e-02 	 1.60937683504713047178e-01 	 2.69725163482139984605e-01 
0.02917 	 1.15895314345379005921e-02 	 1.61456788151101454654e-01 	 2.69943118500291845407e-01 
0.03750 	 1.13451601351993551503e-02 	 1.61143651500335105542e-01 	 2.70099278288760236144e-01 
0.04583 	 1.13818317794943512505e-02 	 1.61253830479616583338e-01 	 2.70412139868481560256e-01 
0.05417 	 1.13544047454964859567e-02 	 1.61578115371864894367e-01 	 2.70768410589987185144e-01 
0.06250 	 1.12292362270242935401e-02 	 1.61677800686284983689e-01 	 2.71083899018523533098e-01 
0.07083 	 1.13704302570740347494e-02 	 1.61668740411288508474e-01 	 2.71425468478782128123e-01 
0.07917 	 1.13292497187339243764e-02 	 1.61784976995154844426e-01 	 2.72026215646883395838e-01 
0.08750 	 1.12838288481748628966e-02 	 1.61833822091174556190e-01 	 2.72617461016310291821e-01 
0.09583 	 1.12674801143027338013e-02 	 1.62191757612369924502e-01 	 2.73083810703239560080e-01 
0.10417 	 1.13024727561521938501e-02 	 1.62216221273697114302e-01 	 2.73762672131984019508e-01 
0.11250 	 1.13863055144073771485e-02 	 1.62522506541984745887e-01 	 2.74481647419072827265e-01 
0.12083 	 1.13474700913229250426e-02 	 1.62781976796854938039e-01 	 2.75283809484577812743e-01 
0.12917 	 1.13364670593939908388e-02 	 1.63023092128607327567e-01 	 2.76070782465823227891e-01 
0.13750 	 1.14266272294664579523e-02 	 1.63088515649180004763e-01 	 2.76967215100206332057e-01 
0.14583 	 1.13996173365598935795e-02 	 1.63574846003911367198e-01 	 2.77860314488716175774e-01 
0.15417 	 1.14161820506477988679e-02 	 1.63838299488980293495e-01 	 2.78797767213944669429e-01 
0.16250 	 1.13707184216216752176e-02 	 1.64084531525027221832e-01 	 2.79952977579057737945e-01 
0.17083 	 1.13998391023815703882e-02 	 1.64500873125562468990e-01 	 2.81008492085063288357e-01 
0.17917 	 1.14770572319101774039e-02 	 1.64841018459298715992e-01 	 2.82181308256900020837e-01 
0.18750 	 1.14897223415089313331e-02 	 1.65110905287678383369e-01 	 2.83331008320831523317e-01 
0.19583 	 1.14520899065712576659e-02 	 1.65493481204033537901e-01 	 2.84678086486644332798e-01 
0.20417 	 1.14710888856551385812e-02 	 1.65929788427408048124e-01 	 2.85891399125571321616e-01 
0.21250 	 1.14926316684383425515e-02 	 1.66274155288492375693e-01 	 2.87314394126860661594e-01 
0.22083 	 1.15469861271528390079e-02 	 1.66806622126108361481e-01 	 2.88708160210625452979e-01 
0.22917 	 1.15481475898081987347e-02 	 1.67169411271300721866e-01 	 2.90272052914673062141e-01 
0.23750 	 1.15863806304622452004e-02 	 1.67710320776581517377e-01 	 2.91646991727679827378e-01 
0.24583 	 1.15922654445674670753e-02 	 1.68119499525749588331e-01 	 2.93343508560382493222e-01 
0.25417 	 1.15991550191695391020e-02 	 1.68714186333637161663e-01 	 2.95206240749476489516e-01 
0.26250 	 1.16254727050497472934e-02 	 1.69208170960381487635e-01 	 2.96731173539421966279e-01 
0.27083 	 1.16688898482521074412e-02 	 1.69818739253920575338e-01 	 2.98469473655915917831e-01 
0.27917 	 1.16853663698150925937e-02 	 1.70402039462988152962e-01 	 3.00369209075748488935e-01 
0.28750 	 1.17269219289365192460e-02 	 1.71028026879974204277e-01 	 3.02383684552928855283e-01 
0.29583 	 1.17438352754740023276e-02 	 1.71576803781257558601e-01 	 3.04321208667234388567e-01 
0.30417 	 1.17849289991530711136e-02 	 1.72140917710571883514e-01 	 3.06331538441220352365e-01 
0.31250 	 1.17881027074686010186e-02 	 1.72779594263497066065e-01 	 3.08304829735187690964e-01 
0.32083 	 1.18578067396360124081e-02 	 1.73529971955312500853e-01 	 3.10433003826501796585e-01 
0.32917 	 1.18582424946382589126e-02 	 1.74090655969835778061e-01 	 3.12808307869217205877e-01 
0.33750 	 1.18795037371984130159e-02 	 1.74809880498896813572e-01 	 3.14868444210383513493e-01 
0.34583 	 1.19013407244473578411e-02 	 1.75510322735047741283e-01 	 3.17406203639887030121e-01 
0.35417 	 1.19492743755543907175e-02 	 1.76255129171661140131e-01 	 3.19714740548857179192e-01 
0.36250 	 1.19658697463131229177e-02 	 1.77030638427008418789e-01 	 3.22278806516553162353e-01 
0.37083 	 1.20141559614742720469e-02 	 1.77862889647728034115e-01 	 3.24709073166695560975e-01 
0.37917 	 1.20334245610672421756e-02 	 1.78655292952601713052e-01 	 3.27380763661167473177e-01 
0.38750 	 1.20851068155729737125e-02 	 1.79425111796348513149e-01 	 3.30024839809178127670e-01 
0.39583 	 1.21133717741561033193e-02 	 1.80227316040967422417e-01 	 3.32719223301655542269e-01 
0.40417 	 1.21315481666371630803e-02 	 1.81163202178389826091e-01 	 3.35556325137584710028e-01 
0.41250 	 1.21898054178370945227e-02 	 1.81982484414047379628e-01 	 3.38486244196107177729e-01 
0.42083 	 1.21986927076875740356e-02 	 1.82826283386625015881e-01 	 3.41332561285518865102e-01 
0.42917 	 1.22635901425063188058e-02 	 1.83765087020097972470e-01 	 3.44352713519110842366e-01 
0.43750 	 1.22934263791200995564e-02 	 1.84683495714864115422e-01 	 3.47475923900818550738e-01 
0.44583 	 1.23508767785903989661e-02 	 1.85714277595879717619e-01 	 3.50648856749601611771e-01 
0.45417 	 1.23821498237242973856e-02 	 1.86665353277828072187e-01 	 3.53925006840917766304e-01 
0.46250 	 1.24188119241127273990e-02 	 1.87672239425739989516e-01 	 3.56938868453269941838e-01 
0.47083 	 1.24692436153926462100e-02 	 1.88639646166811530970e-01 	 3.60531722698936907268e-01 
0.47917 	 1.25250891729705125799e-02 	 1.89799289340205179499e-01 	 3.63849552198911074807e-01 
0.48750 	 1.25631226653218353029e-02 	 1.90762351056113887982e-01 	 3.67459296597945295204e-01 
0.49583 	 1.26089297809584312271e-02 	 1.91869508946494321533e-01 	 3.70955276606704187348e-01 
0.50417 	 1.26698281618598234538e-02 	 1.93012886950802320385e-01 	 3.74622444210982674662e-01 
0.51250 	 1.27075961073340477220e-02 	 1.94170443267884490490e-01 	 3.78222204172924625354e-01 
0.52083 	 1.27792076958053602703e-02 	 1.95354938629331481570e-01 	 3.81895126007569196691e-01 
0.52917 	 1.28109711235036317911e-02 	 1.96563315108692709954e-01 	 3.85887215970577235336e-01 
0.53750 	 1.28752122077827411278e-02 	 1.97777657248471044893e-01 	 3.89879388739892140947e-01 
0.54583 	 1.29063925384145031239e-02 	 1.99057851117042883260e-01 	 3.93886642407373921415e-01 
0.55417 	 1.29518987422425901901e-02 	 2.00194303765823172769e-01 	 3.97912495162277390914e-01 
0.56250 	 1.30344584270369896056e-02 	 2.01622421633356641024e-01 	 4.02330107228527189545e-01 
0.57083 	 1.30680198276165778631e-02 	 2.03041024633010963596e-01 	 4.06624241370713013222e-01 
0.57917 	 1.31227138219460418705e-02 	 2.04367059128721079153e-01 	 4.10708281349840276242e-01 
0.58750 	 1.31967495512792399454e-02 	 2.05711186090649256197e-01 	 4.15135083010065075726e-01 
0.59583 	 1.32520874987696740677e-02 	 2.07214062186481390304e-01 	 4.19661585086336441641e-01 
0.60417 	 1.33197478745505689529e-02 	 2.08643319196583576502e-01 	 4.24379337818390933723e-01 
0.61250 	 1.33721649646284940216e-02 	 2.10151298211957854312e-01 	 4.29028503408555972332e-01 
0.62083 	 1.34355499365208224533e-02 	 2.11646017939106589889e-01 	 4.33848440317552042078e-01 
0.62917 	 1.35085017897945153936e-02 	 2.13221347958470225370e-01 	 4.38492625110397382659e-01 
0.63750 	 1.35636843787265287675e-02 	 2.14802098156350623759e-01 	 4.43578693074295149490e-01 
0.64583 	 1.36337474842805686515e-02 	 2.16472636242192151279e-01 	 4.48675256110609210758e-01 
0.65417 	 1.37100511763890431371e-02 	 2.18100220291650437332e-01 	 4.53886410277621332732e-01 
0.66250 	 1.37557234169928526563e-02 	 2.19848421922428594044e-01 	 4.59106440921296266033e-01 
0.67083 	 1.38267261482464213357e-02 	 2.21573430947894778331e-01 	 4.64363293462079496088e-01 
0.67917 	 1.39028434318127433467e-02 	 2.23390202367236306857e-01 	 4.69864536879879390874e-01 
0.68750 	 1.39653165810557401694e-02 	 2.25198104456567904652e-01 	 4.75162965559065342269e-01 
0.69583 	 1.40491379977209628754e-02 	 2.27130972617683973835e-01 	 4.80859485956594057132e-01 
0.70417 	 1.41184580215607431708e-02 	 2.29023031070588828362e-01 	 4.86525438997275461173e-01 
0.71250 	 1.41895515936915836419e-02 	 2.31001463662077993755e-01 	 4.92149754060960564761e-01 
0.72083 	 1.42561412853678039919e-02 	 2.33035447672686885090e-01 	 4.97967247514329303115e-01 
0.72917 	 1.43355270371369018789e-02 	 2.35152253686417622713e-01 	 5.04166502722879550369e-01 
0.73750 	 1.44100708684355028472e-02 	 2.37354639667313849216e-01 	 5.10208393369704471532e-01 
0.74583 	 1.44902411917344573627e-02 	 2.39538686519686988552e-01 	 5.16440039230128600245e-01 
0.75417 	 1.45649336446864782063e-02 	 2.41818826863518271386e-01 	 5.22864710698316303983e-01 
0.76250 	 1.46501982445125626675e-02 	 2.44284464425098463147e-01 	 5.29064438222137334300e-01 
0.77083 	 1.47268176361554752052e-02 	 2.46657605102460125712e-01 	 5.35713733670205916049e-01 
0.77917 	 1.48307166155577895006e-02 	 2.49064057396369220587e-01 	 5.42148617349658246134e-01 
0.78750 	 1.49006913416568874398e-02 	 2.51769105891022360044e-01 	 5.49012586431860794001e-01 
0.79583 	 1.49840433715167035272e-02 	 2.54425276675308675856e-01 	 5.55708372433791675249e-01 
0.80417 	 1.50750987622549625922e-02 	 2.57285779022568550367e-01 	 5.62880375806454003040e-01 
0.81250 	 1.51593888476410504351e-02 	 2.60191738327520460938e-01 	 5.69812199200461111381e-01 
0.82083 	 1.52516233147589278657e-02 	 2.63254169186974473771e-01 	 5.76882975924025154235e-01 
0.82917 	 1.53351618100222592683e-02 	 2.66413594110608165089e-01 	 5.84155572886043694680e-01 
0.83750 	 1.54376103280463184558e-02 	 2.69741408649428526800e-01 	 5.91452270672130353546e-01 
0.84583 	 1.55224023832657674615e-02 	 2.73087812041696464949e-01 	 5.98724612827724045339e-01 
0.85417 	 1.56114559434042763503e-02 	 2.76798643433975921635e-01 	 6.06332897498400913427e-01 
0.86250 	 1.57012059304375631297e-02 	 2.80653078760486840437e-01 	 6.14345119844023623834e-01 
0.87083 	 1.57967765292822241718e-02 	 2.84678010657337443590e-01 	 6.22148301653153490420e-01 
0.87917 	 1.58977755844405370389e-02 	 2.88940273160206539949e-01 	 6.30166703608726064267e-01 
0.88750 	 1.59883135277069238223e-02 	 2.93378782395725234977e-01 	 6.38493658042318168455e-01 
0.89583 	 1.60846445228501055968e-02 	 2.98122744250515991915e-01 	 6.46416628252128422361e-01 
0.90417 	 1.61920276796806567043e-02 	 3.03299255780539733784e-01 	 6.54788841855823311455e-01 
0.91250 	 1.62941968438792758600e-02 	 3.08804110354486405221e-01 	 6.63211769467617506812e-01 
0.92083 	 1.64000939541330617577e-02 	 3.14742841947497797861e-01 	 6.71728264499836580370e-01 
0.92917 	 1.65001000618148450927e-02 	 3.21157689354527708936e-01 	 6.80766726796150245526e-01 
0.93750 	 1.66078956439164211745e-02 	 3.28144027393393045156e-01 	 6.89355419879483344303e-01 
0.94583 	 1.67199893531320628592e-02 	 3.35963580496207669945e-01 	 6.98663430506957783273e-01 
0.95417 	 1.68245796394009307362e-02 	 3.44640693587566937506e-01 	 7.07668040639058193442e-01 
0.96250 	 1.69404200245745172049e-02 	 3.54294315424169559137e-01 	 7.16910224079201907621e-01 
0.97083 	 1.70486162395522070079e-02 	 3.65362244650258016776e-01 	 7.26729828136772559866e-01 
0.97917 	 1.71631391910401949474e-02 	 3.78000653473967718199e-01 	 7.36152537086652292153e-01 
0.98750 	 1.72758189633245816397e-02 	 3.92994394372212008104e-01 	 7.46243005313403706680e-01 
0.99583 	 1.73985381311437814489e-02 	 4.11033096344122328425e-01 	 7.55995710552303967766e-01 
1.00417 	 1.75154784607425666187e-02 	 4.33447681150551877849e-01 	 7.65982634323311595281e-01 
1.01250 	 1.76366539222626642069e-02 	 4.62451066294274626411e-01 	 7.76074789278332954900e-01 
1.02083 	 1.77529824677809429379e-02 	 5.02804863766972864880e-01 	 7.86155898656242912992e-01 
1.02917 	 1.78725821866388585868e-02 	 5.64768216625756713789e-01 	 7.96601166154024542543e-01 
1.03750 	 1.80143367730999925946e-02 	 6.84049918201156459396e-01 	 8.07560678801209408384e-01 
1.04583 	 1.81229217858867239221e-02 	 1.98718252022014052471e+00 	 8.18255042097227214271e-01 
1.05417 	 1.82536270029554498207e-02 	 9.25662752363509255815e-01 	 8.29067064036890566392e-01 
1.06250 	 1.83845722285285555209e-02 	 6.32704722424587528984e-01 	 8.40216068343614175262e-01 
1.07083 	 1.85230155588451579629e-02 	 5.33038056282474026482e-01 	 8.51763245653079592579e-01 
1.07917 	 1.86541378821430507695e-02 	 4.75773877077575513272e-01 	 8.63139651590641321377e-01 
1.08750 	 1.87927339796270000127e-02 	 4.36631351210859941503e-01 	 8.74942111412479461841e-01 
1.09583 	 1.89327965011597230960e-02 	 4.07145657268755012392e-01 	 8.86297929448546573106e-01 
1.10417 	 1.90747238002212139707e-02 	 3.83870736886088470552e-01 	 8.98422124330476634668e-01 
1.11250 	 1.92044344443022055313e-02 	 3.64635312300985781064e-01 	 9.10730236381094404585e-01 
1.12083 	 1.93475556105785657934e-02 	 3.48307474475743061859e-01 	 9.23015295780409084081e-01 
1.12917 	 1.94850536172262757406e-02 	 3.34138836163661079315e-01 	 9.35450360069489339487e-01 
1.13750 	 1.96417818772227394108e-02 	 3.21543086868419425439e-01 	 9.48062045915940232454e-01 
1.14583 	 1.97807828953891415291e-02 	 3.10232255591674777051e-01 	 9.60843376274661986614e-01 
1.15417 	 1.99310879114219866026e-02 	 2.99993105982582053404e-01 	 9.73678413020542588008e-01 
1.16250 	 2.00857737264459879079e-02 	 2.90698827859709463262e-01 	 9.87113258260495451957e-01 
1.17083 	 2.02316349334385713055e-02 	 2.82159228547337548321e-01 	 1.00056483907541537981e+00 
1.17917 	 2.03793324057281212414e-02 	 2.74221496175169054954e-01 	 1.01370281879580015350e+00 
1.18750 	 2.05435083152707489984e-02 	 2.66698037679001853650e-01 	 1.02785949700955692165e+00 
1.19583 	 2.06978191770310765429e-02 	 2.59748220874586988050e-01 	 1.04173230910118630455e+00 
1.20417 	 2.08503054826574447944e-02 	 2.53172470161332763272e-01 	 1.05577378614422645597e+00 
1.21250 	 2.10255273191527966570e-02 	 2.46933300141919664927e-01 	 1.07011533375004330715e+00 
1.22083 	 2.11798690711453921343e-02 	 2.40983369932742580444e-01 	 1.08435248853720489493e+00 
1.22917 	 2.13374142483641754398e-02 	 2.35470732680836236650e-01 	 1.09921076214221180578e+00 
1.23750 	 2.15180289053839880753e-02 	 2.30068691990571061456e-01 	 1.11375717599091750287e+00 
1.24583 	 2.16840911613880582554e-02 	 2.24966663772637631702e-01 	 1.12904012645155127359e+00 
1.25417 	 2.18559161471875325333e-02 	 2.20059229296672265175e-01 	 1.14384766486691002996e+00 
1.26250 	 2.20272847105053293237e-02 	 2.15361734775752128312e-01 	 1.16000579133990422420e+00 
1.27083 	 2.22036356067198646647e-02 	 2.10813988486543757439e-01 	 1.17538113853001813247e+00 
1.27917 	 2.23828176623810382040e-02 	 2.06473915547159297956e-01 	 1.19157454066049139918e+00 
1.28750 	 2.25668614890686125563e-02 	 2.02286748990963910488e-01 	 1.20732450524978807138e+00 
1.29583 	 2.27378036001076207218e-02 	 1.98124949237300340688e-01 	 1.22404126440218141703e+00 
1.30417 	 2.29214566085051349442e-02 	 1.94164801863765862366e-01 	 1.24044615083421394530e+00 
1.31250 	 2.31141141132081180676e-02 	 1.90385516155149120410e-01 	 1.25707352143892436835e+00 
1.32083 	 2.32980961320969001682e-02 	 1.86700040807475847737e-01 	 1.27375935949862717500e+00 
1.32917 	 2.35014012346661596564e-02 	 1.83144287806699307408e-01 	 1.29095711019019265819e+00 
1.33750 	 2.36825745308378333986e-02 	 1.79574423674725258682e-01 	 1.30859221216236853991e+00 
1.34583 	 2.38856370308433534067e-02 	 1.76193009034005421132e-01 	 1.32561692184226487257e+00 
1.35417 	 2.40816645591430227025e-02 	 1.72903488440120961522e-01 	 1.34328104570022288655e+00 
1.36250 	 2.42956498356749345247e-02 	 1.69685200048622530922e-01 	 1.36111170320256835709e+00 
1.37083 	 2.44868146774406200694e-02 	 1.66565918300986492984e-01 	 1.37940846216219958897e+00 
1.37917 	 2.46945736554809516794e-02 	 1.63510367219509122894e-01 	 1.39811373737549060614e+00 
1.38750 	 2.48994112357546447389e-02 	 1.60484758052550885443e-01 	 1.41624036885416204612e+00 
1.39583 	 2.51086759812152414406e-02 	 1.57548716137667660364e-01 	 1.43547191569071452832e+00 
1.40417 	 2.53194249150016266470e-02 	 1.54750868498166466170e-01 	 1.45432728067260952365e+00 
1.41250 	 2.55392269670112921631e-02 	 1.51982747843345089578e-01 	 1.47383218640699831248e+00 
1.42083 	 2.57524185898845188458e-02 	 1.49280988489821186960e-01 	 1.49311134750026264228e+00 
1.42917 	 2.59742011127070161758e-02 	 1.46672966767152163081e-01 	 1.51202898645656813592e+00 
1.43750 	 2.61921500932645046067e-02 	 1.44043073976633989597e-01 	 1.53223245735147028945e+00 
1.44583 	 2.64160350493859580334e-02 	 1.41516732119725208161e-01 	 1.55225053219348363420e+00 
1.45417 	 2.66431547798932910620e-02 	 1.39044727488344704858e-01 	 1.57207239554699373940e+00 
1.46250 	 2.68806674615615567858e-02 	 1.36582012175324646330e-01 	 1.59272830134463916352e+00 
1.47083 	 2.71149633831218872526e-02 	 1.34189209169568973712e-01 	 1.61282751213325248330e+00 
1.47917 	 2.73473997004322205706e-02 	 1.31875141056707029241e-01 	 1.63375372758647596783e+00 
1.48750 	 2.75839218117867844560e-02 	 1.29559616048480263917e-01 	 1.65488860816996541381e+00 
1.49583 	 2.78296267877608700936e-02 	 1.27362155313671537860e-01 	 1.67569745297408534412e+00 
1.50417 	 2.80722512831310978820e-02 	 1.25190647875357580210e-01 	 1.69670381670347847347e+00 
1.51250 	 2.83056815369993122755e-02 	 1.22971072990372104483e-01 	 1.71768367707705027492e+00 
1.52083 	 2.85574594690039540446e-02 	 1.20898490611686518226e-01 	 1.73891934500182077095e+00 
1.52917 	 2.88098087111797011850e-02 	 1.18832736089505619503e-01 	 1.76101816001928712652e+00 
1.53750 	 2.90552759968123845702e-02 	 1.16777545526559986544e-01 	 1.78248984932078791132e+00 
1.54583 	 2.93081204384749265113e-02 	 1.14827649956063593262e-01 	 1.80451519118000369701e+00 
1.55417 	 2.95805051283873840506e-02 	 1.12878831547083877118e-01 	 1.82641205920766536153e+00 
1.56250 	 2.98423179200722199500e-02 	 1.10970390439289204321e-01 	 1.84788740173671062195e+00 
1.57083 	 3.01073538593481723757e-02 	 1.09076135276587993239e-01 	 1.86959435723903988347e+00 
1.57917 	 3.03754137775521862452e-02 	 1.07246619310755575416e-01 	 1.89174479673426332305e+00 
1.58750 	 3.06526644606679270211e-02 	 1.05460627100998544092e-01 	 1.91363672389535954821e+00 
1.59583 	 3.09233552214300301542e-02 	 1.03667629251082568653e-01 	 1.93520101369387775847e+00 
1.60417 	 3.11954626362431867992e-02 	 1.01924232215601068274e-01 	 1.95708982110546103605e+00 
1.61250 	 3.14838628904113154716e-02 	 1.00235157586035239508e-01 	 1.97920845505771070272e+00 
1.62083 	 3.17566070145227571930e-02 	 9.85616062112823071439e-02 	 2.00116492081561681005e+00 
1.62917 	 3.20506521743972941363e-02 	 9.69216010052831034027e-02 	 2.02322910300752134560e+00 
1.63750 	 3.23457001075368039134e-02 	 9.53080257766911603801e-02 	 2.04479026154468002119e+00 
1.64583 	 3.26388315377438426035e-02 	 9.37143025068145618661e-02 	 2.06581863682204636135e+00 
1.65417 	 3.29411895192326664716e-02 	 9.21219151695196747376e-02 	 2.08742135429533126612e+00 
1.66250 	 3.32370012792091509835e-02 	 9.05928881199248858813e-02 	 2.10857964874537229250e+00 
1.67083 	 3.35395455877211465245e-02 	 8.90957036422437426149e-02 	 2.12985991706371757815e+00 
1.67917 	 3.38506084042620863928e-02 	 8.76248701357700415793e-02 	 2.15065824105474279193e+00 
1.68750 	 3.41580947734418521877e-02 	 8.61917285481975520289e-02 	 2.17146761238229490942e+00 
1.69583 	 3.44671631152373217355e-02 	 8.48019374911355705571e-02 	 2.19137245490101451040e+00 
1.70417 	 3.47915783729811772806e-02 	 8.33666940818761359466e-02 	 2.21111608126641634442e+00 
1.71250 	 3.51071866139454208389e-02 	 8.19933705384058020282e-02 	 2.22997941882109840250e+00 
1.72083 	 3.54346220458344601800e-02 	 8.06745307426890989611e-02 	 2.24860785075826585810e+00 
1.72917 	 3.57548457125575480653e-02 	 7.93162053941284111991e-02 	 2.26704590908752878775e+00 
1.73750 	 3.60792310427929252548e-02 	 7.80423303697807962953e-02 	 2.28536536937215295495e+00 
1.74583 	 3.64195683412908283172e-02 	 7.67693983718095718238e-02 	 2.30245521357299187670e+00 
1.75417 	 3.67520918027890650115e-02 	 7.54753111032678974945e-02 	 2.31878779763783704482e+00 
1.76250 	 3.70806894750988769172e-02 	 7.42372118157871990762e-02 	 2.33499867113488512871e+00 
1.77083 	 3.74190406836893141307e-02 	 7.30251677139787808146e-02 	 2.34979138227838424413e+00 
1.77917 	 3.77631378960321534288e-02 	 7.18404226730495337749e-02 	 2.36361467356522636507e+00 
1.78750 	 3.81121214719049236641e-02 	 7.06779431424843784804e-02 	 2.37701357457072237622e+00 
1.79583 	 3.84659412674585934888e-02 	 6.95181797926790884246e-02 	 2.38880098980301491807e+00 
1.80417 	 3.88111596005494899342e-02 	 6.83835244697245242529e-02 	 2.40084854212478537860e+00 
1.81250 	 3.91550797353271556878e-02 	 6.72384079625145542058e-02 	 2.41010752117478466161e+00 
1.82083 	 3.94942639925612778984e-02 	 6.61693184485896285230e-02 	 2.42002470336666908324e+00 
1.82917 	 3.98626006434489796315e-02 	 6.51144285116614512932e-02 	 2.42735718771309105790e+00 
1.83750 	 4.02174312472002096208e-02 	 6.40341169672788423917e-02 	 2.43318053227068009647e+00 
1.84583 	 4.05756161580431221059e-02 	 6.30024654175606879658e-02 	 2.43890060061978175554e+00 
1.85417 	 4.09353282516327840468e-02 	 6.19934940414704621636e-02 	 2.44209082543599720339e+00 
1.86250 	 4.12958741842925289300e-02 	 6.09818613595702746499e-02 	 2.44447568499757217353e+00 
1.87083 	 4.16703609203751129675e-02 	 5.99946925113961082587e-02 	 2.44542916600463611232e+00 
1.87917 	 4.20261766717220722200e-02 	 5.90339969078882628728e-02 	 2.44398654756921596132e+00 
1.88750 	 4.23938200334523229706e-02 	 5.80882422808530751723e-02 	 2.44073401819212998376e+00 
1.89583 	 4.27722767349577870366e-02 	 5.71286706518533693444e-02 	 2.43518951872686351123e+00 
1.90417 	 4.31277439784248650678e-02 	 5.62052294273466812591e-02 	 2.42754048442887171433e+00 
1.91250 	 4.34762839800374445431e-02 	 5.53089174677741449160e-02 	 2.41838393333284917830e+00 
1.92083 	 4.38375147831419273436e-02 	 5.44065225092184023836e-02 	 2.40739247341138629110e+00 
1.92917 	 4.42036518642759668207e-02 	 5.35311653485553359810e-02 	 2.39317516041349165334e+00 
1.93750 	 4.45545903083842953496e-02 	 5.26684183560224006282e-02 	 2.37707024999760907491e+00 
1.94583 	 4.48952670590110208826e-02 	 5.18165727247375390574e-02 	 2.35803677018899593421e+00 
1.95417 	 4.52545134923129574456e-02 	 5.09824291249762959199e-02 	 2.33536176601946365849e+00 
1.96250 	 4.55933986981797850779e-02 	 5.01658596396983014198e-02 	 2.31007458912470076129e+00 
1.97083 	 4.59277536346936118838e-02 	 4.93733930276921209601e-02 	 2.28118979689435752434e+00 
1.97917 	 4.62558664369719929610e-02 	 4.85822835743290118438e-02 	 2.24790108112624498204e+00 
1.98750 	 4.65925851211893699011e-02 	 4.77872611054316817625e-02 	 2.20661435293783547706e+00 
1.99583 	 4.68976324665810115344e-02 	 4.70350987364667114110e-02 	 1.15698682045734080326e+00 
2.00417 	 3.99536016339821653531e+00 	 3.74116823410791043969e+00 	 7.35888277464253661719e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   1.0E-4		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1e8; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);