time elapsed: 3946.3529 seconds

=================================

sim results:

number of photons = 100000000
overflow: 4.90655814411499053240e+07
sum: 5.09341744196385964751e+07
sum: 5.09344185588500946760e+07
avg: 5.09341744196386003729e-01
perc_in: 50.93

number of photons = 100000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 1.45338778790825157161e-02 	 1.60468476495689377215e-01 	 2.69790959622728865330e-01 
0.01250 	 1.18103509910036097441e-02 	 1.61017827643177624530e-01 	 2.69875829603438810445e-01 
0.02083 	 1.13095014038039863580e-02 	 1.60959751922024357773e-01 	 2.69981393067603492320e-01 
0.02917 	 1.16262628487379254816e-02 	 1.61360854443621803966e-01 	 2.70280103080266231874e-01 
0.03750 	 1.15074781927980707152e-02 	 1.61338213736714225499e-01 	 2.70387071417353630487e-01 
0.04583 	 1.13706670251593772863e-02 	 1.61349479940478185425e-01 	 2.70585169772800004928e-01 
0.05417 	 1.13307790390350555942e-02 	 1.61247868204354438681e-01 	 2.70918779398971465433e-01 
0.06250 	 1.13192788356019334584e-02 	 1.61345433869057919285e-01 	 2.71284157493232258584e-01 
0.07083 	 1.13429751670443348943e-02 	 1.61621107380946982257e-01 	 2.71665765765777000862e-01 
0.07917 	 1.12658658334824860608e-02 	 1.61684684080694723862e-01 	 2.72186517966193086693e-01 
0.08750 	 1.12344555422966806135e-02 	 1.61906862894979491907e-01 	 2.72835899581524932156e-01 
0.09583 	 1.13167445677932205356e-02 	 1.62006372514267582563e-01 	 2.73350245043467832140e-01 
0.10417 	 1.12622931514123510166e-02 	 1.62227320357173854237e-01 	 2.73931786939217714050e-01 
0.11250 	 1.12564472404639796116e-02 	 1.62336483876895532052e-01 	 2.74659231994052455139e-01 
0.12083 	 1.13382738738928030148e-02 	 1.62729439106720524810e-01 	 2.75368933548644667653e-01 
0.12917 	 1.12916635950591690007e-02 	 1.62959725499085494871e-01 	 2.76313151320431216185e-01 
0.13750 	 1.13456049290846724964e-02 	 1.63152406576948322270e-01 	 2.77093037260582708559e-01 
0.14583 	 1.13519068611170562827e-02 	 1.63395735744423342695e-01 	 2.78109952008362026898e-01 
0.15417 	 1.13552019144727827510e-02 	 1.63719949808819681403e-01 	 2.79064331649236052613e-01 
0.16250 	 1.13524874300453271214e-02 	 1.64041139490264442635e-01 	 2.80096513340163721928e-01 
0.17083 	 1.13858298724965178311e-02 	 1.64485162689863267937e-01 	 2.81140814770579450244e-01 
0.17917 	 1.13905936241616278365e-02 	 1.64816103023544852091e-01 	 2.82313406964758206730e-01 
0.18750 	 1.14300923778230673067e-02 	 1.65095823449406681194e-01 	 2.83573747290550848277e-01 
0.19583 	 1.14816580727267331108e-02 	 1.65437085247478826711e-01 	 2.84761738637010708430e-01 
0.20417 	 1.14591860914742445232e-02 	 1.65875984516845320638e-01 	 2.86089848317483186335e-01 
0.21250 	 1.14995924986379081945e-02 	 1.66384806435138921099e-01 	 2.87515217230353448130e-01 
0.22083 	 1.15101902360888064952e-02 	 1.66728377398163929435e-01 	 2.89032956812857066975e-01 
0.22917 	 1.15322355775461290323e-02 	 1.67200170026312044946e-01 	 2.90478744195752813795e-01 
0.23750 	 1.15048474704406052116e-02 	 1.67671938476956994268e-01 	 2.91944137781323387326e-01 
0.24583 	 1.15596936635580255920e-02 	 1.68206512735277091686e-01 	 2.93552465181324107046e-01 
0.25417 	 1.15897398161354005242e-02 	 1.68745091905728672455e-01 	 2.95101382223091734947e-01 
0.26250 	 1.16150691922567942532e-02 	 1.69298103654330706069e-01 	 2.96989218945330202271e-01 
0.27083 	 1.16532089904272904979e-02 	 1.69766541379569813053e-01 	 2.98679555848624600500e-01 
0.27917 	 1.16885378725590030613e-02 	 1.70320665528837428271e-01 	 3.00596626543060574388e-01 
0.28750 	 1.16832452050174319391e-02 	 1.70839119698302205341e-01 	 3.02431392668077336783e-01 
0.29583 	 1.17295523685536536018e-02 	 1.71558226704569827259e-01 	 3.04522716099777268628e-01 
0.30417 	 1.17289822439433626816e-02 	 1.72093045491888335663e-01 	 3.06547284474091463746e-01 
0.31250 	 1.17748359403986521676e-02 	 1.72692896450040822565e-01 	 3.08665645808530286764e-01 
0.32083 	 1.18181532419707642501e-02 	 1.73422733076579599354e-01 	 3.10785477860606618172e-01 
0.32917 	 1.18364039676220229869e-02 	 1.74100047546387887154e-01 	 3.12826383480812098004e-01 
0.33750 	 1.18449143758667281567e-02 	 1.74772988865468409392e-01 	 3.15226044252761183895e-01 
0.34583 	 1.18938538739851770026e-02 	 1.75496924024450301483e-01 	 3.17557199681707036376e-01 
0.35417 	 1.19216777874529833436e-02 	 1.76159147838497759375e-01 	 3.19909286778786272620e-01 
0.36250 	 1.19443779668897097357e-02 	 1.77095641949187476705e-01 	 3.22434193132601465415e-01 
0.37083 	 1.19977191504699771951e-02 	 1.77853397371164734242e-01 	 3.24977043042156632513e-01 
0.37917 	 1.20325244107751735956e-02 	 1.78506786114189186510e-01 	 3.27538784417484518663e-01 
0.38750 	 1.20398143686864279867e-02 	 1.79375785331439219217e-01 	 3.30225859101940522056e-01 
0.39583 	 1.21043105822392100396e-02 	 1.80246347606568546595e-01 	 3.32879315223848004646e-01 
0.40417 	 1.21415092558733294509e-02 	 1.81086912242712283483e-01 	 3.35870556528856112344e-01 
0.41250 	 1.21796708142221273008e-02 	 1.81967263003761564599e-01 	 3.38426054756974570292e-01 
0.42083 	 1.22121901380949204191e-02 	 1.82922422065739942454e-01 	 3.41436466447039121963e-01 
0.42917 	 1.22485169169779563314e-02 	 1.83795102825528161583e-01 	 3.44500862380569705667e-01 
0.43750 	 1.22949632186729225503e-02 	 1.84698004090107087416e-01 	 3.47547295118640520162e-01 
0.44583 	 1.23378341815215814004e-02 	 1.85576980388044071590e-01 	 3.50745581135772754866e-01 
0.45417 	 1.23759383168968450928e-02 	 1.86624749191473704446e-01 	 3.53861855448777407052e-01 
0.46250 	 1.24257332022282927092e-02 	 1.87620077479077496108e-01 	 3.57334118265263289693e-01 
0.47083 	 1.24705882616992086431e-02 	 1.88680319923438449825e-01 	 3.60580205338912052060e-01 
0.47917 	 1.25127970285355029356e-02 	 1.89617481366066570336e-01 	 3.63951904377899093657e-01 
0.48750 	 1.25575234868337860805e-02 	 1.90728045756636127583e-01 	 3.67634399195752969991e-01 
0.49583 	 1.25852896175032563653e-02 	 1.91872669461994049822e-01 	 3.71134660864901100297e-01 
0.50417 	 1.26545984108187726386e-02 	 1.92996206579058610098e-01 	 3.74748763420882036179e-01 
0.51250 	 1.27078414752829910173e-02 	 1.94153115861674940845e-01 	 3.78484530519223483225e-01 
0.52083 	 1.27611486253786810680e-02 	 1.95323372118348964621e-01 	 3.82163261112571428502e-01 
0.52917 	 1.28005504238445522863e-02 	 1.96555742049304538188e-01 	 3.86119928922233124347e-01 
0.53750 	 1.28606365411909340235e-02 	 1.97813015579434925417e-01 	 3.90054248104031275890e-01 
0.54583 	 1.29328834805031121780e-02 	 1.98994110824844971930e-01 	 3.94019444575684274490e-01 
0.55417 	 1.29786975800169034068e-02 	 2.00264109159376174629e-01 	 3.98152985759427147094e-01 
0.56250 	 1.30364223404844034593e-02 	 2.01583527051980765377e-01 	 4.02255663740037738840e-01 
0.57083 	 1.30936677553033925525e-02 	 2.02928793447324590238e-01 	 4.06528726685696617515e-01 
0.57917 	 1.31449563599341789910e-02 	 2.04358879457738895624e-01 	 4.10997460444542217495e-01 
0.58750 	 1.31952781985248124297e-02 	 2.05663583583692077816e-01 	 4.15497113058836964328e-01 
0.59583 	 1.32595626636984511432e-02 	 2.07157580193584850425e-01 	 4.20040524362063905084e-01 
0.60417 	 1.33107602699825151166e-02 	 2.08641149768972133938e-01 	 4.24462107373468677807e-01 
0.61250 	 1.33778178828468669731e-02 	 2.10146103961759783685e-01 	 4.29421461512598356958e-01 
0.62083 	 1.34413703447657899293e-02 	 2.11650242685075540283e-01 	 4.33959675418340462549e-01 
0.62917 	 1.35079978221202771232e-02 	 2.13208849134603861675e-01 	 4.38893372476842735797e-01 
0.63750 	 1.35650614498844055561e-02 	 2.14875123208458224111e-01 	 4.43782940020566896155e-01 
0.64583 	 1.36287619002902916227e-02 	 2.16390305186937942361e-01 	 4.49009234839905679859e-01 
0.65417 	 1.36883733082250498569e-02 	 2.18083700295319482532e-01 	 4.53881469178683438770e-01 
0.66250 	 1.37730045880620662058e-02 	 2.19831263857179520782e-01 	 4.59136133709618698973e-01 
0.67083 	 1.38333541499864615815e-02 	 2.21556878395212819566e-01 	 4.64470898517379271464e-01 
0.67917 	 1.39034698179397037121e-02 	 2.23389784722653195193e-01 	 4.69642585454021599389e-01 
0.68750 	 1.39596417197112698111e-02 	 2.25173792432736497027e-01 	 4.75365299939682517394e-01 
0.69583 	 1.40408091949187213698e-02 	 2.27123462292115080308e-01 	 4.80831391041997791014e-01 
0.70417 	 1.41096959138277237844e-02 	 2.29011314163741958039e-01 	 4.86758748026723253588e-01 
0.71250 	 1.41765388507074426711e-02 	 2.31045653463112371506e-01 	 4.92421276007263541974e-01 
0.72083 	 1.42453293154434675050e-02 	 2.33102440803576838046e-01 	 4.98295284369709323702e-01 
0.72917 	 1.43257366258965745248e-02 	 2.35211244394746943343e-01 	 5.04095909211057513488e-01 
0.73750 	 1.44091214489701809065e-02 	 2.37289609433442488795e-01 	 5.10302451797437495173e-01 
0.74583 	 1.44836256994494757405e-02 	 2.39560854342097034886e-01 	 5.16464010048537147668e-01 
0.75417 	 1.45639824300236916249e-02 	 2.41880853029909997920e-01 	 5.22852419631144371692e-01 
0.76250 	 1.46483918534950439266e-02 	 2.44147995652233273933e-01 	 5.29126350471899709049e-01 
0.77083 	 1.47358915538898030406e-02 	 2.46695953854229127478e-01 	 5.35954456826982283957e-01 
0.77917 	 1.48076910675470994200e-02 	 2.49156736519183547029e-01 	 5.42209684182716755707e-01 
0.78750 	 1.49024295350070300203e-02 	 2.51779925445726193711e-01 	 5.48895773750910698219e-01 
0.79583 	 1.49927066162300337560e-02 	 2.54511638809001350392e-01 	 5.55854281728910271099e-01 
0.80417 	 1.50828012379985200442e-02 	 2.57416651531598095204e-01 	 5.62734442283439051380e-01 
0.81250 	 1.51521101270857012216e-02 	 2.60245356421900275734e-01 	 5.69974200601135128075e-01 
0.82083 	 1.52378111323102412994e-02 	 2.63279456080115603633e-01 	 5.77082050566139481695e-01 
0.82917 	 1.53332863809790085480e-02 	 2.66460927854948792515e-01 	 5.84183041716727857739e-01 
0.83750 	 1.54203117110947775931e-02 	 2.69731891862620198896e-01 	 5.91659019505865302335e-01 
0.84583 	 1.55055818296930929268e-02 	 2.73196551222958883276e-01 	 5.99169837211311118175e-01 
0.85417 	 1.56054768110145698073e-02 	 2.76803309931026531032e-01 	 6.06878898173479952582e-01 
0.86250 	 1.57009355003354077185e-02 	 2.80558875474095192892e-01 	 6.14507957219182388009e-01 
0.87083 	 1.58071900883862137555e-02 	 2.84627414173484361015e-01 	 6.22468746053397969931e-01 
0.87917 	 1.58908361142704561420e-02 	 2.88844138161403085618e-01 	 6.30396112386816809270e-01 
0.88750 	 1.60042599013129928365e-02 	 2.93284776679518133236e-01 	 6.38387215763730142548e-01 
0.89583 	 1.60852565486177753740e-02 	 2.98122286469681141430e-01 	 6.46604710538598581593e-01 
0.90417 	 1.61988542506757218775e-02 	 3.03284450902958635510e-01 	 6.54782791837432154303e-01 
0.91250 	 1.63002794536397689618e-02 	 3.08695790548796644703e-01 	 6.63479943302080155121e-01 
0.92083 	 1.63916796890002693099e-02 	 3.14810823181569721108e-01 	 6.72285450720168320515e-01 
0.92917 	 1.64982434515113032814e-02 	 3.21139669283266537825e-01 	 6.80953283816022381103e-01 
0.93750 	 1.66119370513611690210e-02 	 3.28274979447775894226e-01 	 6.89888398036546113268e-01 
0.94583 	 1.67280305157810720018e-02 	 3.36090557478700258098e-01 	 6.98883463083530998006e-01 
0.95417 	 1.68446851537660813314e-02 	 3.44710123362702236527e-01 	 7.08147773886377951413e-01 
0.96250 	 1.69431626024373685468e-02 	 3.54359412072187018872e-01 	 7.17515202081054681571e-01 
0.97083 	 1.70550596756313191382e-02 	 3.65361925505277518322e-01 	 7.26905018265023517010e-01 
0.97917 	 1.71638555830767834676e-02 	 3.78024762195006081011e-01 	 7.36374408241632694150e-01 
0.98750 	 1.72904537672335968657e-02 	 3.92917260766195264310e-01 	 7.46220396003286490227e-01 
0.99583 	 1.73978847713619731719e-02 	 4.11146292050070027990e-01 	 7.56057245950580103511e-01 
1.00417 	 1.75144644721784321917e-02 	 4.33416994998256643878e-01 	 7.65895427420719365763e-01 
1.01250 	 1.76387781853261545184e-02 	 4.62441073098021127041e-01 	 7.76258945684426104883e-01 
1.02083 	 1.77659923323659763028e-02 	 5.02864501985324507949e-01 	 7.86904100180175980483e-01 
1.02917 	 1.78851007463638397854e-02 	 5.64918240897752554908e-01 	 7.97231621174521953854e-01 
1.03750 	 1.80110206670519856775e-02 	 6.84073168221755678609e-01 	 8.08062990307747641694e-01 
1.04583 	 1.81379676548806198499e-02 	 1.98712516801477989681e+00 	 8.18747792140101737779e-01 
1.05417 	 1.82620587000842660164e-02 	 9.25933012150004564056e-01 	 8.29533322991418131664e-01 
1.06250 	 1.84067267729468471427e-02 	 6.32787641028155545264e-01 	 8.40757277891203802511e-01 
1.07083 	 1.85363779522132766930e-02 	 5.33249214762434142756e-01 	 8.51973318274760749169e-01 
1.07917 	 1.86686241998630236827e-02 	 4.75875943408823831593e-01 	 8.63281602596909447556e-01 
1.08750 	 1.87871912769919310882e-02 	 4.36646211530194561234e-01 	 8.74842767300612944581e-01 
1.09583 	 1.89199398548044912804e-02 	 4.07223959970346660597e-01 	 8.86519426005406674385e-01 
1.10417 	 1.90652788575807405347e-02 	 3.83880620526852289753e-01 	 8.98639520685979187320e-01 
1.11250 	 1.92157779714225082635e-02 	 3.64597917466168319756e-01 	 9.10942800209439629278e-01 
1.12083 	 1.93473763996196701509e-02 	 3.48259601863484424822e-01 	 9.23035759470076322408e-01 
1.12917 	 1.94967195482584204624e-02 	 3.34075990039611026017e-01 	 9.35531705166997906709e-01 
1.13750 	 1.96483603609364614051e-02 	 3.21489083500965111551e-01 	 9.48088235132175438657e-01 
1.14583 	 1.97877320310627206890e-02 	 3.10198036139770705333e-01 	 9.61057438731231394868e-01 
1.15417 	 1.99393497785072849882e-02 	 3.00068270238377232673e-01 	 9.74240841156376213839e-01 
1.16250 	 2.00891491911128691750e-02 	 2.90694352371768549581e-01 	 9.87322318320059566510e-01 
1.17083 	 2.02490135688452692342e-02 	 2.82090012929892053339e-01 	 1.00068887629941460915e+00 
1.17917 	 2.03948376740468867441e-02 	 2.74104025075865898042e-01 	 1.01411613342355155787e+00 
1.18750 	 2.05572557968234093106e-02 	 2.66673190341286003857e-01 	 1.02787864029251840847e+00 
1.19583 	 2.07162210812416869299e-02 	 2.59759407933383812406e-01 	 1.04172758143417265586e+00 
1.20417 	 2.08757390928782544937e-02 	 2.53152684148083617632e-01 	 1.05602270431752676139e+00 
1.21250 	 2.10432333501812500465e-02 	 2.46942075526177834410e-01 	 1.07010338024048845540e+00 
1.22083 	 2.11982033083169575660e-02 	 2.41083857222544467591e-01 	 1.08412286942095414943e+00 
1.22917 	 2.13647082626869447286e-02 	 2.35474331043725476631e-01 	 1.09882849486136024986e+00 
1.23750 	 2.15242317522319655254e-02 	 2.30104005831452407271e-01 	 1.11395324254633787397e+00 
1.24583 	 2.16917958351180405197e-02 	 2.24950919906496293876e-01 	 1.12885740683583191135e+00 
1.25417 	 2.18577385447973754351e-02 	 2.20038382914756774911e-01 	 1.14441894341816485792e+00 
1.26250 	 2.20389233202329115624e-02 	 2.15366565143463722931e-01 	 1.15974543278169273108e+00 
1.27083 	 2.21980292670598822191e-02 	 2.10788807661349442135e-01 	 1.17575965666441306645e+00 
1.27917 	 2.23936197416383445113e-02 	 2.06416050446808663210e-01 	 1.19124547946529935061e+00 
1.28750 	 2.25704025154940396414e-02 	 2.02247442155439632883e-01 	 1.20671219623231951168e+00 
1.29583 	 2.27466717672796317484e-02 	 1.98153611508636057215e-01 	 1.22362976735337802836e+00 
1.30417 	 2.29297671246247274091e-02 	 1.94203458388442135041e-01 	 1.23994122127489725393e+00 
1.31250 	 2.31257454272867819800e-02 	 1.90358700858469870321e-01 	 1.25670737068865934205e+00 
1.32083 	 2.33208582606428786732e-02 	 1.86708714796430558236e-01 	 1.27347549405136750700e+00 
1.32917 	 2.35134748584379105196e-02 	 1.83064579682059302979e-01 	 1.29074338335769200903e+00 
1.33750 	 2.37075335215349361495e-02 	 1.79565793663141737291e-01 	 1.30822304982928794281e+00 
1.34583 	 2.39071011373232916730e-02 	 1.76157425503089465346e-01 	 1.32529748451640916329e+00 
1.35417 	 2.40988055731807433724e-02 	 1.72886095430482084057e-01 	 1.34350863367388795311e+00 
1.36250 	 2.42945253743051120532e-02 	 1.69679311851024638980e-01 	 1.36107935545874481065e+00 
1.37083 	 2.45006088358509267755e-02 	 1.66547146875526769216e-01 	 1.37948087925395523889e+00 
1.37917 	 2.46967195834679985322e-02 	 1.63470599629587820534e-01 	 1.39789739849263949800e+00 
1.38750 	 2.49098038080019686114e-02 	 1.60501508667331510560e-01 	 1.41606196697494390868e+00 
1.39583 	 2.51099302495125589751e-02 	 1.57540210948030945382e-01 	 1.43525941173259674599e+00 
1.40417 	 2.53336734246258528380e-02 	 1.54729579486823975998e-01 	 1.45414571051736496443e+00 
1.41250 	 2.55361187547766300965e-02 	 1.51994044679617273941e-01 	 1.47294525489263672391e+00 
1.42083 	 2.57522898534681340954e-02 	 1.49257472439601052150e-01 	 1.49261853134067323801e+00 
1.42917 	 2.59781310063895154450e-02 	 1.46628668945642942623e-01 	 1.51206433893048775019e+00 
1.43750 	 2.61905368496018094160e-02 	 1.44018078327552284668e-01 	 1.53185384116137157662e+00 
1.44583 	 2.64282453062471625604e-02 	 1.41533086986983330791e-01 	 1.55178310567438182410e+00 
1.45417 	 2.66471610775184490627e-02 	 1.38946907352787529799e-01 	 1.57195347168168475527e+00 
1.46250 	 2.68838991699053182771e-02 	 1.36544878727499013893e-01 	 1.59214186368232213376e+00 
1.47083 	 2.71186677412560868394e-02 	 1.34217489958929181437e-01 	 1.61254773606184587109e+00 
1.47917 	 2.73547292541019629319e-02 	 1.31875282002561738937e-01 	 1.63322116364510350195e+00 
1.48750 	 2.75852620767439611627e-02 	 1.29601987105338739559e-01 	 1.65385176923370180724e+00 
1.49583 	 2.78204644948285007011e-02 	 1.27319309145010717277e-01 	 1.67466898778354833510e+00 
1.50417 	 2.80720677691944191234e-02 	 1.25157417110274588046e-01 	 1.69610342778372280570e+00 
1.51250 	 2.83157345129387387483e-02 	 1.22991374869497266387e-01 	 1.71734967935573989983e+00 
1.52083 	 2.85675695616017834289e-02 	 1.20919720558498158813e-01 	 1.73921480823685348227e+00 
1.52917 	 2.88215655590588933077e-02 	 1.18882089577196356500e-01 	 1.76054748370288227655e+00 
1.53750 	 2.90647219301854095597e-02 	 1.16823873899563890344e-01 	 1.78178649279982481701e+00 
1.54583 	 2.93331781767591434629e-02 	 1.14814061528126273859e-01 	 1.80374750393550775662e+00 
1.55417 	 2.95812415087474411823e-02 	 1.12871816734970889518e-01 	 1.82526981227714690803e+00 
1.56250 	 2.98564225711193780011e-02 	 1.10973834195090145793e-01 	 1.84736726909147241926e+00 
1.57083 	 3.01222972924596529842e-02 	 1.09081470830960577945e-01 	 1.86847941802468819894e+00 
1.57917 	 3.03823719756611647369e-02 	 1.07244748868791678342e-01 	 1.89058606659130590266e+00 
1.58750 	 3.06635888320881226654e-02 	 1.05443323115399389955e-01 	 1.91334982392042407540e+00 
1.59583 	 3.09310163144411801039e-02 	 1.03645654966015215992e-01 	 1.93509731752385949477e+00 
1.60417 	 3.12072216287659319478e-02 	 1.01887157421543542157e-01 	 1.95711270631462297409e+00 
1.61250 	 3.14867695261618549263e-02 	 1.00200837170380196994e-01 	 1.97879973032238987152e+00 
1.62083 	 3.17737980148518478485e-02 	 9.85260446994307981239e-02 	 2.00148242488723049348e+00 
1.62917 	 3.20623366339595483598e-02 	 9.69148888403194991303e-02 	 2.02268361328895096563e+00 
1.63750 	 3.23600747778807415478e-02 	 9.52823806347721652399e-02 	 2.04364385795936787105e+00 
1.64583 	 3.26504015781648171401e-02 	 9.36976097026876453278e-02 	 2.06569054451547007289e+00 
1.65417 	 3.29422614407611086262e-02 	 9.21330051002522687487e-02 	 2.08698023518946929045e+00 
1.66250 	 3.32381600392828643886e-02 	 9.05969087969750036526e-02 	 2.10844267188704925786e+00 
1.67083 	 3.35463508858370867971e-02 	 8.91251100295298859244e-02 	 2.12887421068849169714e+00 
1.67917 	 3.38457939612887004355e-02 	 8.76215290355479708984e-02 	 2.14962274360275173990e+00 
1.68750 	 3.41556086311621820428e-02 	 8.61913608416942783608e-02 	 2.17040288673988390755e+00 
1.69583 	 3.44683350238260063914e-02 	 8.47621670003658178594e-02 	 2.19098230058063858650e+00 
1.70417 	 3.47767850731953154231e-02 	 8.33714514817609081421e-02 	 2.21017539674687535367e+00 
1.71250 	 3.51054220251000650976e-02 	 8.20018950567028559462e-02 	 2.22898377249439283432e+00 
1.72083 	 3.54299815505241880165e-02 	 8.06469428069100935375e-02 	 2.24831445931306417307e+00 
1.72917 	 3.57499158857139329171e-02 	 7.93130203840103631396e-02 	 2.26714936128860955478e+00 
1.73750 	 3.60813201137847872069e-02 	 7.80315978890298717063e-02 	 2.28418952239448769248e+00 
1.74583 	 3.64129593437473655926e-02 	 7.67251753477798392744e-02 	 2.30176149527667783801e+00 
1.75417 	 3.67437754279443945515e-02 	 7.54913040638938021010e-02 	 2.31855113923677480514e+00 
1.76250 	 3.70702583422135717450e-02 	 7.42423697053342379615e-02 	 2.33399537827970604553e+00 
1.77083 	 3.74116037383356650481e-02 	 7.30003874045756506739e-02 	 2.34978656743513614202e+00 
1.77917 	 3.77557984832691193033e-02 	 7.18307026824998168246e-02 	 2.36353505153290432972e+00 
1.78750 	 3.80961374315299181048e-02 	 7.06646669044321551478e-02 	 2.37610476424214844826e+00 
1.79583 	 3.84341829286387465237e-02 	 6.94952740187218392931e-02 	 2.38866747131706214091e+00 
1.80417 	 3.87904858657818346623e-02 	 6.83794368284503795152e-02 	 2.40087472539609025901e+00 
1.81250 	 3.91448181790980051509e-02 	 6.72603077090404705141e-02 	 2.41044624166369736429e+00 
1.82083 	 3.95050140525964599281e-02 	 6.61825560734716211719e-02 	 2.41973954275336256003e+00 
1.82917 	 3.98511191376065623815e-02 	 6.51148615712955625145e-02 	 2.42802760577997789326e+00 
1.83750 	 4.02156596767689888949e-02 	 6.40556319595351753016e-02 	 2.43435762304289271540e+00 
1.84583 	 4.05705969535536808968e-02 	 6.30069759691338077134e-02 	 2.43953974607612344982e+00 
1.85417 	 4.09305552757366353234e-02 	 6.19591341481421920001e-02 	 2.44303688079453706905e+00 
1.86250 	 4.13102382304158452508e-02 	 6.09920434484269857744e-02 	 2.44561858910805929312e+00 
1.87083 	 4.16603858693092715670e-02 	 6.00021156574753050661e-02 	 2.44560244520802871904e+00 
1.87917 	 4.20219616662313374955e-02 	 5.90187457819404473480e-02 	 2.44391944642516856234e+00 
1.88750 	 4.23894180617788510212e-02 	 5.80573375838521893444e-02 	 2.44063162140826550583e+00 
1.89583 	 4.27503384084597787274e-02 	 5.71345869808555367753e-02 	 2.43561857962783623321e+00 
1.90417 	 4.31053104877991768995e-02 	 5.62127664984658631520e-02 	 2.42786078942335104003e+00 
1.91250 	 4.34725617190743346407e-02 	 5.52999132971212434273e-02 	 2.41874220756379409991e+00 
1.92083 	 4.38453554771491560427e-02 	 5.44060755180461735891e-02 	 2.40730601250183084971e+00 
1.92917 	 4.41891041854137675560e-02 	 5.35231921831592627470e-02 	 2.39344879160608181579e+00 
1.93750 	 4.45430666962930224551e-02 	 5.26779854565800481625e-02 	 2.37716868939042491604e+00 
1.94583 	 4.49066542894337797365e-02 	 5.18455868607237066459e-02 	 2.35767455711244267036e+00 
1.95417 	 4.52451561818423830807e-02 	 5.09958232654200843692e-02 	 2.33619406059673906384e+00 
1.96250 	 4.55859981913943196341e-02 	 5.01941376574094946794e-02 	 2.30999854292826078961e+00 
1.97083 	 4.59302194954540124461e-02 	 4.93914575838260913598e-02 	 2.28146686602226811402e+00 
1.97917 	 4.62711543682305451175e-02 	 4.85842205703960125507e-02 	 2.24774836206797878901e+00 
1.98750 	 4.65943111043694221940e-02 	 4.78066781380842714677e-02 	 2.20584360292271641768e+00 
1.99583 	 4.69030471419583164239e-02 	 4.70477109983705801821e-02 	 1.15719498326608305483e+00 
2.00417 	 3.99521585868969353328e+00 	 3.74127529121851498672e+00 	 7.35827025896294060203e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */
double z_focus, x_focus, b_rad, w_rad;


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */ /*ID_EDIT_4_1*/
mus         = 23.8888943003376;  /* cm^-1 */ /*ID_EDIT_4_2*/
g           = 0.9;  /*ID_EDIT_5*/
nt          = 1.36;  /*ID_EDIT_4_3*/
Nphotons    = 100000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */ /*ID_EDIT_6_FIXED*/
y = y_start; /*ID_EDIT_6_DEL*/
z = z_start; /*ID_EDIT_6_DEL*/
/*ID_EDIT_6_DEL*/
/* source - vartical down [0,0,-1] */ /*ID_EDIT_6_DEL*/
ux = 0; /*ID_EDIT_6_DEL*/
uy = 0; /*ID_EDIT_6_DEL*/
uz = -1; /*ID_EDIT_6_DEL*/


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

printf("saving cube into file...\n");
double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);
printf("saving cube completed\n");

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);