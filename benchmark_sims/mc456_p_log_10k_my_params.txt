time elapsed: 55.4248 seconds

=================================

sim results:

number of photons = 10000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 7.684e-01 	 1.529e-01 	 2.779e-01 
0.01250 	 8.280e-02 	 1.513e-01 	 2.755e-01 
0.02083 	 1.834e-02 	 1.601e-01 	 2.763e-01 
0.02917 	 1.617e-02 	 1.589e-01 	 2.784e-01 
0.03750 	 2.042e-02 	 1.550e-01 	 2.655e-01 
0.04583 	 8.880e-04 	 1.520e-01 	 2.789e-01 
0.05417 	 2.835e-03 	 1.661e-01 	 2.646e-01 
0.06250 	 9.051e-03 	 1.484e-01 	 2.716e-01 
0.07083 	 5.577e-03 	 1.521e-01 	 2.757e-01 
0.07917 	 3.079e-03 	 1.600e-01 	 2.808e-01 
0.08750 	 1.241e-02 	 1.588e-01 	 2.844e-01 
0.09583 	 6.114e-03 	 1.654e-01 	 2.694e-01 
0.10417 	 5.116e-03 	 1.676e-01 	 2.840e-01 
0.11250 	 6.932e-03 	 1.505e-01 	 2.724e-01 
0.12083 	 6.896e-03 	 1.447e-01 	 2.713e-01 
0.12917 	 8.366e-03 	 1.551e-01 	 2.762e-01 
0.13750 	 7.112e-03 	 1.694e-01 	 2.665e-01 
0.14583 	 1.246e-02 	 1.649e-01 	 2.669e-01 
0.15417 	 7.946e-03 	 1.587e-01 	 2.539e-01 
0.16250 	 9.871e-03 	 1.676e-01 	 2.705e-01 
0.17083 	 7.326e-03 	 1.694e-01 	 2.720e-01 
0.17917 	 8.330e-03 	 1.621e-01 	 2.780e-01 
0.18750 	 8.284e-03 	 1.628e-01 	 2.729e-01 
0.19583 	 9.112e-03 	 1.638e-01 	 2.691e-01 
0.20417 	 9.360e-03 	 1.699e-01 	 2.809e-01 
0.21250 	 1.069e-02 	 1.617e-01 	 2.835e-01 
0.22083 	 1.012e-02 	 1.665e-01 	 3.048e-01 
0.22917 	 1.218e-02 	 1.686e-01 	 2.797e-01 
0.23750 	 7.669e-03 	 1.650e-01 	 2.777e-01 
0.24583 	 1.039e-02 	 1.683e-01 	 2.809e-01 
0.25417 	 1.052e-02 	 1.724e-01 	 2.764e-01 
0.26250 	 1.060e-02 	 1.618e-01 	 2.863e-01 
0.27083 	 1.122e-02 	 1.785e-01 	 2.839e-01 
0.27917 	 9.553e-03 	 1.792e-01 	 2.736e-01 
0.28750 	 1.010e-02 	 1.738e-01 	 2.819e-01 
0.29583 	 1.108e-02 	 1.812e-01 	 2.971e-01 
0.30417 	 1.391e-02 	 1.868e-01 	 2.958e-01 
0.31250 	 1.327e-02 	 1.783e-01 	 3.041e-01 
0.32083 	 9.355e-03 	 1.842e-01 	 3.117e-01 
0.32917 	 1.035e-02 	 1.817e-01 	 3.054e-01 
0.33750 	 1.337e-02 	 1.820e-01 	 3.018e-01 
0.34583 	 1.064e-02 	 1.932e-01 	 3.135e-01 
0.35417 	 1.437e-02 	 1.862e-01 	 2.998e-01 
0.36250 	 1.308e-02 	 1.768e-01 	 3.142e-01 
0.37083 	 1.197e-02 	 1.784e-01 	 3.185e-01 
0.37917 	 1.116e-02 	 1.837e-01 	 3.233e-01 
0.38750 	 1.115e-02 	 1.938e-01 	 3.315e-01 
0.39583 	 1.395e-02 	 1.900e-01 	 3.368e-01 
0.40417 	 1.418e-02 	 1.792e-01 	 3.330e-01 
0.41250 	 1.237e-02 	 1.856e-01 	 3.322e-01 
0.42083 	 1.038e-02 	 1.978e-01 	 3.413e-01 
0.42917 	 1.208e-02 	 1.937e-01 	 3.492e-01 
0.43750 	 1.154e-02 	 1.880e-01 	 3.563e-01 
0.44583 	 1.142e-02 	 1.899e-01 	 3.520e-01 
0.45417 	 1.178e-02 	 1.943e-01 	 3.589e-01 
0.46250 	 1.473e-02 	 1.983e-01 	 3.595e-01 
0.47083 	 1.374e-02 	 1.973e-01 	 3.605e-01 
0.47917 	 1.219e-02 	 1.948e-01 	 3.684e-01 
0.48750 	 1.183e-02 	 1.911e-01 	 3.533e-01 
0.49583 	 1.238e-02 	 1.944e-01 	 3.743e-01 
0.50417 	 1.327e-02 	 1.965e-01 	 3.757e-01 
0.51250 	 1.333e-02 	 1.989e-01 	 3.815e-01 
0.52083 	 1.338e-02 	 1.978e-01 	 3.723e-01 
0.52917 	 1.167e-02 	 2.013e-01 	 3.605e-01 
0.53750 	 1.326e-02 	 2.017e-01 	 3.842e-01 
0.54583 	 1.452e-02 	 1.967e-01 	 3.863e-01 
0.55417 	 1.401e-02 	 2.040e-01 	 3.847e-01 
0.56250 	 1.333e-02 	 2.029e-01 	 3.878e-01 
0.57083 	 1.307e-02 	 2.053e-01 	 3.932e-01 
0.57917 	 1.343e-02 	 2.078e-01 	 3.908e-01 
0.58750 	 1.331e-02 	 2.043e-01 	 4.075e-01 
0.59583 	 1.361e-02 	 2.156e-01 	 4.080e-01 
0.60417 	 1.416e-02 	 2.106e-01 	 4.244e-01 
0.61250 	 1.343e-02 	 2.075e-01 	 4.455e-01 
0.62083 	 1.471e-02 	 2.128e-01 	 4.322e-01 
0.62917 	 1.391e-02 	 2.186e-01 	 4.363e-01 
0.63750 	 1.351e-02 	 2.169e-01 	 4.401e-01 
0.64583 	 1.397e-02 	 2.176e-01 	 4.564e-01 
0.65417 	 1.523e-02 	 2.205e-01 	 4.656e-01 
0.66250 	 1.458e-02 	 2.204e-01 	 4.574e-01 
0.67083 	 1.472e-02 	 2.243e-01 	 4.743e-01 
0.67917 	 1.420e-02 	 2.305e-01 	 4.734e-01 
0.68750 	 1.552e-02 	 2.237e-01 	 4.871e-01 
0.69583 	 1.500e-02 	 2.235e-01 	 4.752e-01 
0.70417 	 1.632e-02 	 2.273e-01 	 4.880e-01 
0.71250 	 1.456e-02 	 2.311e-01 	 4.873e-01 
0.72083 	 1.293e-02 	 2.318e-01 	 5.037e-01 
0.72917 	 1.500e-02 	 2.362e-01 	 5.026e-01 
0.73750 	 1.471e-02 	 2.431e-01 	 5.082e-01 
0.74583 	 1.547e-02 	 2.363e-01 	 5.226e-01 
0.75417 	 1.457e-02 	 2.409e-01 	 5.193e-01 
0.76250 	 1.401e-02 	 2.494e-01 	 5.287e-01 
0.77083 	 1.352e-02 	 2.443e-01 	 5.516e-01 
0.77917 	 1.460e-02 	 2.595e-01 	 5.487e-01 
0.78750 	 1.503e-02 	 2.544e-01 	 5.591e-01 
0.79583 	 1.599e-02 	 2.624e-01 	 5.526e-01 
0.80417 	 1.559e-02 	 2.612e-01 	 6.011e-01 
0.81250 	 1.428e-02 	 2.591e-01 	 5.698e-01 
0.82083 	 1.482e-02 	 2.632e-01 	 5.895e-01 
0.82917 	 1.453e-02 	 2.749e-01 	 6.025e-01 
0.83750 	 1.512e-02 	 2.638e-01 	 5.959e-01 
0.84583 	 1.568e-02 	 2.775e-01 	 5.917e-01 
0.85417 	 1.603e-02 	 2.678e-01 	 6.159e-01 
0.86250 	 1.644e-02 	 2.760e-01 	 5.953e-01 
0.87083 	 1.726e-02 	 2.833e-01 	 6.274e-01 
0.87917 	 1.564e-02 	 2.781e-01 	 6.240e-01 
0.88750 	 1.668e-02 	 2.884e-01 	 6.357e-01 
0.89583 	 1.622e-02 	 3.024e-01 	 6.449e-01 
0.90417 	 1.711e-02 	 3.041e-01 	 6.535e-01 
0.91250 	 1.819e-02 	 3.083e-01 	 6.563e-01 
0.92083 	 1.755e-02 	 3.226e-01 	 6.877e-01 
0.92917 	 1.678e-02 	 3.243e-01 	 6.893e-01 
0.93750 	 1.727e-02 	 3.413e-01 	 6.971e-01 
0.94583 	 1.689e-02 	 3.492e-01 	 7.145e-01 
0.95417 	 1.593e-02 	 3.492e-01 	 6.949e-01 
0.96250 	 1.811e-02 	 3.507e-01 	 7.344e-01 
0.97083 	 1.793e-02 	 3.643e-01 	 7.088e-01 
0.97917 	 1.693e-02 	 3.732e-01 	 7.678e-01 
0.98750 	 1.839e-02 	 3.937e-01 	 7.421e-01 
0.99583 	 1.905e-02 	 4.102e-01 	 7.460e-01 
1.00417 	 1.820e-02 	 4.303e-01 	 7.522e-01 
1.01250 	 1.860e-02 	 4.630e-01 	 7.487e-01 
1.02083 	 1.889e-02 	 5.089e-01 	 7.673e-01 
1.02917 	 1.806e-02 	 5.767e-01 	 7.949e-01 
1.03750 	 1.871e-02 	 6.840e-01 	 7.905e-01 
1.04583 	 1.861e-02 	 1.993e+00 	 8.116e-01 
1.05417 	 1.823e-02 	 9.412e-01 	 8.467e-01 
1.06250 	 1.857e-02 	 6.412e-01 	 8.482e-01 
1.07083 	 1.899e-02 	 5.284e-01 	 8.837e-01 
1.07917 	 1.839e-02 	 4.775e-01 	 8.805e-01 
1.08750 	 1.849e-02 	 4.425e-01 	 8.809e-01 
1.09583 	 1.882e-02 	 4.054e-01 	 8.864e-01 
1.10417 	 1.974e-02 	 3.877e-01 	 8.957e-01 
1.11250 	 1.895e-02 	 3.618e-01 	 8.897e-01 
1.12083 	 1.912e-02 	 3.427e-01 	 9.310e-01 
1.12917 	 1.932e-02 	 3.303e-01 	 9.201e-01 
1.13750 	 1.911e-02 	 3.305e-01 	 9.071e-01 
1.14583 	 1.982e-02 	 3.091e-01 	 9.281e-01 
1.15417 	 1.973e-02 	 3.003e-01 	 9.743e-01 
1.16250 	 1.985e-02 	 2.989e-01 	 9.520e-01 
1.17083 	 2.033e-02 	 2.840e-01 	 9.907e-01 
1.17917 	 2.035e-02 	 2.675e-01 	 1.006e+00 
1.18750 	 1.982e-02 	 2.659e-01 	 1.011e+00 
1.19583 	 2.061e-02 	 2.553e-01 	 1.074e+00 
1.20417 	 2.065e-02 	 2.567e-01 	 1.076e+00 
1.21250 	 2.193e-02 	 2.526e-01 	 1.055e+00 
1.22083 	 2.084e-02 	 2.382e-01 	 1.087e+00 
1.22917 	 2.134e-02 	 2.369e-01 	 1.080e+00 
1.23750 	 2.140e-02 	 2.288e-01 	 1.091e+00 
1.24583 	 2.201e-02 	 2.231e-01 	 1.113e+00 
1.25417 	 2.158e-02 	 2.218e-01 	 1.127e+00 
1.26250 	 2.168e-02 	 2.135e-01 	 1.198e+00 
1.27083 	 2.245e-02 	 2.141e-01 	 1.169e+00 
1.27917 	 2.239e-02 	 2.081e-01 	 1.220e+00 
1.28750 	 2.234e-02 	 2.023e-01 	 1.240e+00 
1.29583 	 2.163e-02 	 1.955e-01 	 1.233e+00 
1.30417 	 2.256e-02 	 1.895e-01 	 1.271e+00 
1.31250 	 2.243e-02 	 1.857e-01 	 1.252e+00 
1.32083 	 2.291e-02 	 1.814e-01 	 1.258e+00 
1.32917 	 2.457e-02 	 1.789e-01 	 1.328e+00 
1.33750 	 2.389e-02 	 1.744e-01 	 1.310e+00 
1.34583 	 2.583e-02 	 1.740e-01 	 1.344e+00 
1.35417 	 2.407e-02 	 1.731e-01 	 1.359e+00 
1.36250 	 2.554e-02 	 1.664e-01 	 1.416e+00 
1.37083 	 2.521e-02 	 1.667e-01 	 1.373e+00 
1.37917 	 2.559e-02 	 1.589e-01 	 1.407e+00 
1.38750 	 2.604e-02 	 1.501e-01 	 1.486e+00 
1.39583 	 2.615e-02 	 1.511e-01 	 1.496e+00 
1.40417 	 2.557e-02 	 1.493e-01 	 1.506e+00 
1.41250 	 2.555e-02 	 1.490e-01 	 1.487e+00 
1.42083 	 2.606e-02 	 1.485e-01 	 1.514e+00 
1.42917 	 2.693e-02 	 1.477e-01 	 1.561e+00 
1.43750 	 2.670e-02 	 1.432e-01 	 1.524e+00 
1.44583 	 2.658e-02 	 1.366e-01 	 1.588e+00 
1.45417 	 2.676e-02 	 1.356e-01 	 1.612e+00 
1.46250 	 2.739e-02 	 1.313e-01 	 1.623e+00 
1.47083 	 2.747e-02 	 1.322e-01 	 1.635e+00 
1.47917 	 2.740e-02 	 1.283e-01 	 1.665e+00 
1.48750 	 2.793e-02 	 1.289e-01 	 1.678e+00 
1.49583 	 2.905e-02 	 1.258e-01 	 1.699e+00 
1.50417 	 2.875e-02 	 1.273e-01 	 1.686e+00 
1.51250 	 2.853e-02 	 1.226e-01 	 1.752e+00 
1.52083 	 2.917e-02 	 1.223e-01 	 1.761e+00 
1.52917 	 2.855e-02 	 1.171e-01 	 1.789e+00 
1.53750 	 2.867e-02 	 1.132e-01 	 1.764e+00 
1.54583 	 2.878e-02 	 1.151e-01 	 1.773e+00 
1.55417 	 3.026e-02 	 1.120e-01 	 1.804e+00 
1.56250 	 3.017e-02 	 1.123e-01 	 1.847e+00 
1.57083 	 3.027e-02 	 1.130e-01 	 1.840e+00 
1.57917 	 3.075e-02 	 1.092e-01 	 1.900e+00 
1.58750 	 3.131e-02 	 1.099e-01 	 1.910e+00 
1.59583 	 3.015e-02 	 1.065e-01 	 1.941e+00 
1.60417 	 3.026e-02 	 1.038e-01 	 1.967e+00 
1.61250 	 3.131e-02 	 1.021e-01 	 1.948e+00 
1.62083 	 3.150e-02 	 1.009e-01 	 1.928e+00 
1.62917 	 3.152e-02 	 9.666e-02 	 2.042e+00 
1.63750 	 3.221e-02 	 9.586e-02 	 2.062e+00 
1.64583 	 3.247e-02 	 9.385e-02 	 2.076e+00 
1.65417 	 3.348e-02 	 9.075e-02 	 2.103e+00 
1.66250 	 3.260e-02 	 9.186e-02 	 2.161e+00 
1.67083 	 3.328e-02 	 8.892e-02 	 2.139e+00 
1.67917 	 3.333e-02 	 8.632e-02 	 2.188e+00 
1.68750 	 3.431e-02 	 8.523e-02 	 2.261e+00 
1.69583 	 3.378e-02 	 8.576e-02 	 2.267e+00 
1.70417 	 3.552e-02 	 8.367e-02 	 2.247e+00 
1.71250 	 3.521e-02 	 8.039e-02 	 2.232e+00 
1.72083 	 3.539e-02 	 8.174e-02 	 2.187e+00 
1.72917 	 3.593e-02 	 7.728e-02 	 2.250e+00 
1.73750 	 3.532e-02 	 7.455e-02 	 2.254e+00 
1.74583 	 3.522e-02 	 7.767e-02 	 2.245e+00 
1.75417 	 3.631e-02 	 7.232e-02 	 2.303e+00 
1.76250 	 3.685e-02 	 7.197e-02 	 2.300e+00 
1.77083 	 3.719e-02 	 7.044e-02 	 2.336e+00 
1.77917 	 3.654e-02 	 6.908e-02 	 2.330e+00 
1.78750 	 3.818e-02 	 7.019e-02 	 2.329e+00 
1.79583 	 3.868e-02 	 6.809e-02 	 2.314e+00 
1.80417 	 3.901e-02 	 6.760e-02 	 2.425e+00 
1.81250 	 3.961e-02 	 6.479e-02 	 2.437e+00 
1.82083 	 4.022e-02 	 6.434e-02 	 2.399e+00 
1.82917 	 4.031e-02 	 6.454e-02 	 2.385e+00 
1.83750 	 4.068e-02 	 6.290e-02 	 2.394e+00 
1.84583 	 4.136e-02 	 6.169e-02 	 2.456e+00 
1.85417 	 4.035e-02 	 6.036e-02 	 2.479e+00 
1.86250 	 4.088e-02 	 6.151e-02 	 2.411e+00 
1.87083 	 4.207e-02 	 5.828e-02 	 2.441e+00 
1.87917 	 4.253e-02 	 5.664e-02 	 2.442e+00 
1.88750 	 4.188e-02 	 5.924e-02 	 2.484e+00 
1.89583 	 4.208e-02 	 5.670e-02 	 2.444e+00 
1.90417 	 4.283e-02 	 5.720e-02 	 2.455e+00 
1.91250 	 4.284e-02 	 5.589e-02 	 2.414e+00 
1.92083 	 4.372e-02 	 5.383e-02 	 2.436e+00 
1.92917 	 4.481e-02 	 5.287e-02 	 2.418e+00 
1.93750 	 4.461e-02 	 5.143e-02 	 2.373e+00 
1.94583 	 4.334e-02 	 5.038e-02 	 2.424e+00 
1.95417 	 4.619e-02 	 4.855e-02 	 2.390e+00 
1.96250 	 4.727e-02 	 5.077e-02 	 2.339e+00 
1.97083 	 4.594e-02 	 4.738e-02 	 2.332e+00 
1.97917 	 4.612e-02 	 4.850e-02 	 2.282e+00 
1.98750 	 4.595e-02 	 4.812e-02 	 2.244e+00 
1.99583 	 4.750e-02 	 4.758e-02 	 1.174e+00 
2.00417 	 3.988e+00 	 3.724e+00 	 7.304e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math
import json
from tqdm import tqdm

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 1.0E-4 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = int(1e4) # set number of photons in simulation
    z_size = 2.0 # cm, total range over which bins extend
    xy_size = 1.5 # cm
    NR_z          = 240 # set number of bins.
    NR_xy = 180
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = z_size/NR_z  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    InitRandomGen()
    Csph = [0 for _ in range(0,NR_z+1)]
    Ccyl = [0 for _ in range(0,NR_z+1)]
    Cpla = [0 for _ in range(0,NR_z+1)]

    # [x][y][z]
    # it could be done in numpy array, but list is easier to save
    Cube = [[[0 for _ in range(0,NR_z+1)] for _ in range(0,NR_xy+1)] for _ in range(0,NR_xy+1)]
    cube_overflow = 0

    # start pos
    x_start = 89 * dr
    y_start = 89 * dr
    z_start = 239 * dr

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    print("(1 iter = 1 photon) Simulation progerss:")
    for i_photon in tqdm(range(0,Nphotons)):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements a point source [0,0,-1].
        # *****
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = x_start                     # Set photon position to origin.
        y = y_start
        z = z_start

        # source - vartical down [0,0,-1]
        # psi - berween x-y axis
        # theta between z and R
        ux = 0
        uy = 0
        uz = -1


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Cpla[ir] += absorb # DROP absorbed weight into bin

            # --- cube ---
            ix = int(x/dr)
            iy = int(y/dr)
            iz = int(z/dr)
            ix_is_in = (0 <= ix < NR_xy)
            iy_is_in = (0 <= iy < NR_xy)
            iz_is_in = (0 <= iz < NR_z)
            is_in = ix_is_in and iy_is_in and iz_is_in
            if (not is_in):
                cube_overflow += absorb
            else:
                Cube[ix][iy][iz] += absorb
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz);
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    print("saving data...")
    file = open("mc456_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR_z+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:4.3e} \t {Fcyl:4.3e} \t {Fpla:4.3e} \n")

    file.close()


    with open('mc456_p_cube.json', 'w') as f:
        data = {
            "n_photons": Nphotons,
            "overflow": cube_overflow,
            "cube": Cube
        }
        json.dump(data, f)

    print("done")
    # end of main


main()
