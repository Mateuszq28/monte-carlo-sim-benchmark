time elapsed: 35.7755 seconds

=================================

sim results:

number of photons = 10000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.852e+03 	 6.440e+01 	 7.626e+00 
0.01250 	 5.315e+02 	 2.117e+01 	 6.347e+00 
0.02083 	 1.843e+02 	 1.287e+01 	 5.756e+00 
0.02917 	 9.632e+01 	 9.360e+00 	 5.511e+00 
0.03750 	 5.802e+01 	 7.334e+00 	 5.304e+00 
0.04583 	 4.100e+01 	 6.188e+00 	 5.066e+00 
0.05417 	 2.859e+01 	 5.479e+00 	 4.813e+00 
0.06250 	 2.285e+01 	 4.739e+00 	 4.643e+00 
0.07083 	 1.749e+01 	 4.217e+00 	 4.557e+00 
0.07917 	 1.496e+01 	 3.858e+00 	 4.374e+00 
0.08750 	 1.210e+01 	 3.446e+00 	 4.274e+00 
0.09583 	 1.028e+01 	 3.133e+00 	 4.114e+00 
0.10417 	 8.578e+00 	 2.954e+00 	 4.074e+00 
0.11250 	 7.186e+00 	 2.716e+00 	 3.940e+00 
0.12083 	 6.465e+00 	 2.584e+00 	 3.830e+00 
0.12917 	 5.792e+00 	 2.443e+00 	 3.787e+00 
0.13750 	 5.149e+00 	 2.338e+00 	 3.713e+00 
0.14583 	 4.789e+00 	 2.241e+00 	 3.757e+00 
0.15417 	 4.331e+00 	 2.120e+00 	 3.588e+00 
0.16250 	 3.827e+00 	 2.000e+00 	 3.562e+00 
0.17083 	 3.442e+00 	 1.907e+00 	 3.500e+00 
0.17917 	 3.180e+00 	 1.810e+00 	 3.371e+00 
0.18750 	 2.900e+00 	 1.774e+00 	 3.253e+00 
0.19583 	 2.794e+00 	 1.707e+00 	 3.301e+00 
0.20417 	 2.583e+00 	 1.630e+00 	 3.236e+00 
0.21250 	 2.391e+00 	 1.523e+00 	 3.175e+00 
0.22083 	 2.231e+00 	 1.481e+00 	 3.173e+00 
0.22917 	 2.082e+00 	 1.422e+00 	 3.045e+00 
0.23750 	 1.940e+00 	 1.397e+00 	 3.041e+00 
0.24583 	 1.903e+00 	 1.388e+00 	 2.989e+00 
0.25417 	 1.675e+00 	 1.324e+00 	 2.908e+00 
0.26250 	 1.612e+00 	 1.236e+00 	 2.881e+00 
0.27083 	 1.582e+00 	 1.226e+00 	 2.846e+00 
0.27917 	 1.485e+00 	 1.191e+00 	 2.754e+00 
0.28750 	 1.439e+00 	 1.183e+00 	 2.703e+00 
0.29583 	 1.340e+00 	 1.139e+00 	 2.664e+00 
0.30417 	 1.262e+00 	 1.128e+00 	 2.659e+00 
0.31250 	 1.233e+00 	 1.089e+00 	 2.582e+00 
0.32083 	 1.118e+00 	 1.032e+00 	 2.562e+00 
0.32917 	 1.120e+00 	 1.018e+00 	 2.500e+00 
0.33750 	 1.068e+00 	 9.796e-01 	 2.477e+00 
0.34583 	 9.743e-01 	 9.466e-01 	 2.390e+00 
0.35417 	 9.825e-01 	 9.336e-01 	 2.396e+00 
0.36250 	 9.220e-01 	 9.004e-01 	 2.350e+00 
0.37083 	 9.054e-01 	 8.969e-01 	 2.327e+00 
0.37917 	 8.462e-01 	 8.744e-01 	 2.330e+00 
0.38750 	 8.312e-01 	 8.611e-01 	 2.208e+00 
0.39583 	 7.967e-01 	 8.341e-01 	 2.250e+00 
0.40417 	 7.432e-01 	 7.887e-01 	 2.193e+00 
0.41250 	 7.240e-01 	 7.885e-01 	 2.211e+00 
0.42083 	 7.026e-01 	 7.870e-01 	 2.127e+00 
0.42917 	 7.015e-01 	 7.299e-01 	 2.132e+00 
0.43750 	 6.563e-01 	 7.355e-01 	 2.066e+00 
0.44583 	 6.578e-01 	 7.042e-01 	 2.117e+00 
0.45417 	 6.207e-01 	 6.997e-01 	 2.048e+00 
0.46250 	 5.707e-01 	 6.785e-01 	 2.004e+00 
0.47083 	 5.814e-01 	 6.775e-01 	 1.987e+00 
0.47917 	 5.495e-01 	 6.560e-01 	 1.938e+00 
0.48750 	 5.356e-01 	 6.671e-01 	 1.900e+00 
0.49583 	 5.229e-01 	 6.319e-01 	 1.906e+00 
0.50417 	 4.971e-01 	 6.160e-01 	 1.822e+00 
0.51250 	 4.984e-01 	 6.103e-01 	 1.853e+00 
0.52083 	 4.775e-01 	 5.891e-01 	 1.795e+00 
0.52917 	 4.734e-01 	 5.847e-01 	 1.741e+00 
0.53750 	 4.463e-01 	 5.625e-01 	 1.779e+00 
0.54583 	 4.404e-01 	 5.570e-01 	 1.747e+00 
0.55417 	 4.355e-01 	 5.274e-01 	 1.728e+00 
0.56250 	 4.195e-01 	 5.214e-01 	 1.663e+00 
0.57083 	 4.002e-01 	 5.114e-01 	 1.647e+00 
0.57917 	 3.824e-01 	 5.028e-01 	 1.649e+00 
0.58750 	 3.732e-01 	 4.985e-01 	 1.552e+00 
0.59583 	 3.555e-01 	 4.841e-01 	 1.582e+00 
0.60417 	 3.490e-01 	 4.722e-01 	 1.494e+00 
0.61250 	 3.379e-01 	 4.609e-01 	 1.514e+00 
0.62083 	 3.289e-01 	 4.440e-01 	 1.489e+00 
0.62917 	 3.210e-01 	 4.454e-01 	 1.453e+00 
0.63750 	 3.132e-01 	 4.490e-01 	 1.467e+00 
0.64583 	 3.058e-01 	 4.355e-01 	 1.458e+00 
0.65417 	 3.015e-01 	 4.231e-01 	 1.397e+00 
0.66250 	 2.924e-01 	 4.118e-01 	 1.399e+00 
0.67083 	 2.848e-01 	 3.997e-01 	 1.348e+00 
0.67917 	 2.696e-01 	 3.951e-01 	 1.320e+00 
0.68750 	 2.714e-01 	 3.886e-01 	 1.298e+00 
0.69583 	 2.610e-01 	 3.816e-01 	 1.327e+00 
0.70417 	 2.594e-01 	 3.707e-01 	 1.291e+00 
0.71250 	 2.514e-01 	 3.715e-01 	 1.278e+00 
0.72083 	 2.323e-01 	 3.540e-01 	 1.249e+00 
0.72917 	 2.357e-01 	 3.531e-01 	 1.250e+00 
0.73750 	 2.280e-01 	 3.417e-01 	 1.204e+00 
0.74583 	 2.235e-01 	 3.352e-01 	 1.176e+00 
0.75417 	 2.169e-01 	 3.294e-01 	 1.170e+00 
0.76250 	 2.129e-01 	 3.306e-01 	 1.143e+00 
0.77083 	 2.039e-01 	 3.200e-01 	 1.154e+00 
0.77917 	 2.024e-01 	 3.152e-01 	 1.121e+00 
0.78750 	 1.968e-01 	 3.125e-01 	 1.150e+00 
0.79583 	 1.957e-01 	 3.075e-01 	 1.086e+00 
0.80417 	 1.870e-01 	 3.002e-01 	 1.088e+00 
0.81250 	 1.806e-01 	 2.940e-01 	 1.055e+00 
0.82083 	 1.768e-01 	 2.901e-01 	 1.067e+00 
0.82917 	 1.741e-01 	 2.812e-01 	 1.033e+00 
0.83750 	 1.750e-01 	 2.678e-01 	 1.042e+00 
0.84583 	 1.660e-01 	 2.639e-01 	 9.955e-01 
0.85417 	 1.657e-01 	 2.629e-01 	 1.019e+00 
0.86250 	 1.576e-01 	 2.585e-01 	 9.997e-01 
0.87083 	 1.569e-01 	 2.584e-01 	 9.847e-01 
0.87917 	 1.510e-01 	 2.452e-01 	 9.881e-01 
0.88750 	 1.465e-01 	 2.415e-01 	 9.588e-01 
0.89583 	 1.391e-01 	 2.439e-01 	 9.245e-01 
0.90417 	 1.364e-01 	 2.344e-01 	 9.171e-01 
0.91250 	 1.279e-01 	 2.292e-01 	 8.764e-01 
0.92083 	 1.314e-01 	 2.281e-01 	 8.881e-01 
0.92917 	 1.258e-01 	 2.220e-01 	 8.624e-01 
0.93750 	 1.243e-01 	 2.205e-01 	 8.699e-01 
0.94583 	 1.215e-01 	 2.128e-01 	 8.452e-01 
0.95417 	 1.206e-01 	 2.133e-01 	 8.448e-01 
0.96250 	 1.152e-01 	 2.134e-01 	 8.073e-01 
0.97083 	 1.177e-01 	 2.076e-01 	 8.287e-01 
0.97917 	 1.116e-01 	 1.993e-01 	 8.154e-01 
0.98750 	 1.123e-01 	 1.998e-01 	 8.006e-01 
0.99583 	 1.104e-01 	 1.969e-01 	 7.684e-01 
1.00417 	 1.046e-01 	 1.963e-01 	 7.437e-01 
1.01250 	 1.042e-01 	 1.887e-01 	 7.382e-01 
1.02083 	 1.045e-01 	 1.860e-01 	 6.971e-01 
1.02917 	 9.900e-02 	 1.829e-01 	 7.181e-01 
1.03750 	 9.692e-02 	 1.796e-01 	 7.107e-01 
1.04583 	 9.512e-02 	 1.759e-01 	 7.093e-01 
1.05417 	 9.255e-02 	 1.748e-01 	 7.126e-01 
1.06250 	 9.024e-02 	 1.717e-01 	 6.999e-01 
1.07083 	 8.826e-02 	 1.660e-01 	 6.751e-01 
1.07917 	 8.583e-02 	 1.645e-01 	 6.782e-01 
1.08750 	 8.504e-02 	 1.638e-01 	 6.497e-01 
1.09583 	 8.238e-02 	 1.662e-01 	 6.559e-01 
1.10417 	 8.108e-02 	 1.581e-01 	 6.306e-01 
1.11250 	 7.820e-02 	 1.550e-01 	 6.315e-01 
1.12083 	 7.679e-02 	 1.497e-01 	 6.263e-01 
1.12917 	 7.340e-02 	 1.507e-01 	 6.125e-01 
1.13750 	 7.324e-02 	 1.484e-01 	 6.080e-01 
1.14583 	 7.090e-02 	 1.460e-01 	 6.011e-01 
1.15417 	 7.090e-02 	 1.456e-01 	 6.149e-01 
1.16250 	 7.019e-02 	 1.445e-01 	 5.877e-01 
1.17083 	 6.693e-02 	 1.398e-01 	 5.981e-01 
1.17917 	 6.455e-02 	 1.346e-01 	 5.707e-01 
1.18750 	 6.486e-02 	 1.340e-01 	 5.668e-01 
1.19583 	 6.331e-02 	 1.297e-01 	 5.603e-01 
1.20417 	 6.189e-02 	 1.278e-01 	 5.616e-01 
1.21250 	 6.079e-02 	 1.219e-01 	 5.490e-01 
1.22083 	 6.046e-02 	 1.234e-01 	 5.465e-01 
1.22917 	 5.871e-02 	 1.193e-01 	 5.253e-01 
1.23750 	 5.808e-02 	 1.169e-01 	 5.276e-01 
1.24583 	 5.554e-02 	 1.141e-01 	 5.112e-01 
1.25417 	 5.447e-02 	 1.105e-01 	 5.181e-01 
1.26250 	 5.263e-02 	 1.125e-01 	 5.258e-01 
1.27083 	 5.369e-02 	 1.077e-01 	 5.044e-01 
1.27917 	 5.253e-02 	 1.069e-01 	 4.900e-01 
1.28750 	 4.999e-02 	 1.067e-01 	 4.927e-01 
1.29583 	 4.759e-02 	 1.033e-01 	 4.794e-01 
1.30417 	 4.889e-02 	 1.068e-01 	 4.581e-01 
1.31250 	 4.887e-02 	 1.018e-01 	 4.695e-01 
1.32083 	 4.708e-02 	 9.591e-02 	 4.516e-01 
1.32917 	 4.584e-02 	 9.840e-02 	 4.582e-01 
1.33750 	 4.546e-02 	 9.906e-02 	 4.476e-01 
1.34583 	 4.436e-02 	 9.725e-02 	 4.404e-01 
1.35417 	 4.304e-02 	 9.489e-02 	 4.359e-01 
1.36250 	 4.243e-02 	 9.260e-02 	 4.300e-01 
1.37083 	 4.109e-02 	 9.303e-02 	 4.220e-01 
1.37917 	 4.094e-02 	 8.870e-02 	 4.064e-01 
1.38750 	 4.028e-02 	 8.996e-02 	 4.073e-01 
1.39583 	 3.889e-02 	 8.773e-02 	 4.015e-01 
1.40417 	 3.732e-02 	 8.502e-02 	 4.024e-01 
1.41250 	 3.837e-02 	 8.491e-02 	 3.769e-01 
1.42083 	 3.722e-02 	 8.208e-02 	 3.654e-01 
1.42917 	 3.590e-02 	 8.068e-02 	 3.635e-01 
1.43750 	 3.569e-02 	 7.937e-02 	 3.684e-01 
1.44583 	 3.534e-02 	 7.580e-02 	 3.680e-01 
1.45417 	 3.413e-02 	 7.790e-02 	 3.654e-01 
1.46250 	 3.446e-02 	 7.543e-02 	 3.573e-01 
1.47083 	 3.286e-02 	 7.385e-02 	 3.365e-01 
1.47917 	 3.204e-02 	 7.276e-02 	 3.422e-01 
1.48750 	 3.194e-02 	 7.179e-02 	 3.434e-01 
1.49583 	 3.079e-02 	 6.909e-02 	 3.314e-01 
1.50417 	 3.042e-02 	 6.981e-02 	 3.449e-01 
1.51250 	 2.944e-02 	 6.860e-02 	 3.273e-01 
1.52083 	 2.865e-02 	 6.685e-02 	 3.108e-01 
1.52917 	 2.839e-02 	 6.529e-02 	 3.114e-01 
1.53750 	 2.814e-02 	 6.257e-02 	 3.231e-01 
1.54583 	 2.688e-02 	 6.443e-02 	 3.152e-01 
1.55417 	 2.702e-02 	 6.133e-02 	 3.043e-01 
1.56250 	 2.630e-02 	 6.057e-02 	 2.874e-01 
1.57083 	 2.624e-02 	 6.014e-02 	 3.023e-01 
1.57917 	 2.572e-02 	 5.990e-02 	 2.905e-01 
1.58750 	 2.512e-02 	 5.662e-02 	 2.771e-01 
1.59583 	 2.441e-02 	 5.561e-02 	 2.738e-01 
1.60417 	 2.380e-02 	 5.683e-02 	 2.763e-01 
1.61250 	 2.344e-02 	 5.636e-02 	 2.745e-01 
1.62083 	 2.306e-02 	 5.446e-02 	 2.747e-01 
1.62917 	 2.301e-02 	 5.426e-02 	 2.679e-01 
1.63750 	 2.240e-02 	 5.259e-02 	 2.715e-01 
1.64583 	 2.123e-02 	 5.291e-02 	 2.685e-01 
1.65417 	 2.089e-02 	 5.134e-02 	 2.616e-01 
1.66250 	 2.049e-02 	 4.912e-02 	 2.599e-01 
1.67083 	 1.991e-02 	 4.697e-02 	 2.506e-01 
1.67917 	 1.943e-02 	 4.757e-02 	 2.500e-01 
1.68750 	 1.966e-02 	 4.858e-02 	 2.560e-01 
1.69583 	 1.896e-02 	 4.817e-02 	 2.391e-01 
1.70417 	 1.839e-02 	 4.657e-02 	 2.351e-01 
1.71250 	 1.838e-02 	 4.426e-02 	 2.461e-01 
1.72083 	 1.832e-02 	 4.291e-02 	 2.283e-01 
1.72917 	 1.744e-02 	 4.306e-02 	 2.278e-01 
1.73750 	 1.707e-02 	 4.212e-02 	 2.174e-01 
1.74583 	 1.685e-02 	 4.120e-02 	 2.220e-01 
1.75417 	 1.653e-02 	 4.037e-02 	 2.002e-01 
1.76250 	 1.606e-02 	 4.099e-02 	 2.111e-01 
1.77083 	 1.626e-02 	 3.897e-02 	 2.039e-01 
1.77917 	 1.567e-02 	 3.899e-02 	 2.067e-01 
1.78750 	 1.585e-02 	 3.894e-02 	 2.009e-01 
1.79583 	 1.469e-02 	 3.903e-02 	 2.071e-01 
1.80417 	 1.464e-02 	 3.751e-02 	 2.053e-01 
1.81250 	 1.467e-02 	 3.799e-02 	 2.073e-01 
1.82083 	 1.414e-02 	 3.588e-02 	 1.937e-01 
1.82917 	 1.436e-02 	 3.468e-02 	 1.895e-01 
1.83750 	 1.380e-02 	 3.553e-02 	 1.840e-01 
1.84583 	 1.371e-02 	 3.483e-02 	 1.818e-01 
1.85417 	 1.348e-02 	 3.331e-02 	 1.834e-01 
1.86250 	 1.327e-02 	 3.354e-02 	 1.767e-01 
1.87083 	 1.318e-02 	 3.368e-02 	 1.746e-01 
1.87917 	 1.266e-02 	 3.278e-02 	 1.759e-01 
1.88750 	 1.249e-02 	 3.222e-02 	 1.694e-01 
1.89583 	 1.244e-02 	 3.264e-02 	 1.681e-01 
1.90417 	 1.184e-02 	 2.996e-02 	 1.756e-01 
1.91250 	 1.194e-02 	 2.980e-02 	 1.673e-01 
1.92083 	 1.134e-02 	 3.029e-02 	 1.634e-01 
1.92917 	 1.131e-02 	 2.978e-02 	 1.622e-01 
1.93750 	 1.117e-02 	 2.887e-02 	 1.585e-01 
1.94583 	 1.095e-02 	 2.898e-02 	 1.533e-01 
1.95417 	 1.058e-02 	 2.804e-02 	 1.501e-01 
1.96250 	 1.070e-02 	 2.756e-02 	 1.468e-01 
1.97083 	 1.041e-02 	 2.788e-02 	 1.457e-01 
1.97917 	 1.055e-02 	 2.714e-02 	 1.477e-01 
1.98750 	 1.005e-02 	 2.570e-02 	 1.432e-01 
1.99583 	 9.363e-03 	 2.569e-02 	 1.437e-01 
2.00417 	 8.913e-01 	 2.062e+00 	 1.024e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 1.0E-4 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = int(1e4) # set number of photons in simulation
    radial_size = 2.0 # cm, total range over which bins extend
    NR          = 240 # set number of bins.
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = radial_size/NR  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    i_photon = 0
    InitRandomGen()
    Csph = [0 for _ in range(0,NR+1)]
    Ccyl = [0 for _ in range(0,NR+1)]
    Cpla = [0 for _ in range(0,NR+1)]

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    while (i_photon < Nphotons):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements an isotropic point source.
        # *****
        i_photon += 1	# increment photon count
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = 0                     # Set photon position to origin.
        y = 0
        z = 0

        # Randomly set photon trajectory to yield an isotropic source.
        # psi - berween x-y axis
        # theta between z and R
        costheta = 2.0*RandomNum() - 1.0
        sintheta = math.sqrt(1.0 - costheta*costheta)	# sintheta is always positive
        psi = 2.0*PI*RandomNum()
        ux = sintheta*math.cos(psi)
        uy = sintheta*math.sin(psi)
        uz = costheta


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR): # last bin is for overflow
                ir = NR
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR): # last bin is for overflow
                ir = NR
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR): # last bin is for overflow
                ir = NR
            Cpla[ir] += absorb # DROP absorbed weight into bin
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz);
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    file = open("mc321_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:4.3e} \t {Fcyl:4.3e} \t {Fpla:4.3e} \n")

    file.close()


    # end of main


main()
