time elapsed: 13.3888 seconds

=================================

sim results:

number of photons = 1000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 1.74146422297250719202e-01 	 2.94192152107444371278e-01 
0.01250 	 0.00000000000000000000e+00 	 2.68463640538518399925e-01 	 2.92167256807934649920e-01 
0.02083 	 0.00000000000000000000e+00 	 2.41817726956584821973e-01 	 2.52583108321956628650e-01 
0.02917 	 0.00000000000000000000e+00 	 1.77983101997031795127e-01 	 2.93699666162633710176e-01 
0.03750 	 2.91458295456999616144e-03 	 2.45945465913737615349e-01 	 2.80648753687123275746e-01 
0.04583 	 6.52488765981163679891e-03 	 1.43907888805431483092e-01 	 2.46781312076918529774e-01 
0.05417 	 3.55393541098037377135e-02 	 1.76161296037848275065e-01 	 2.80387089389158405961e-01 
0.06250 	 9.50329586933743863941e-02 	 2.64666674272697188819e-01 	 2.50982258658522527917e-01 
0.07083 	 1.87331643103737124738e-03 	 1.89710072171005272867e-01 	 2.09724162335807956525e-01 
0.07917 	 1.54650629570815588767e-03 	 2.14022700632307938395e-01 	 2.25510537849257008958e-01 
0.08750 	 1.51326116929523437488e-02 	 2.56480031289710475040e-01 	 2.44951298362714203760e-01 
0.09583 	 1.37442368832683091406e-02 	 1.98593998727100845558e-01 	 2.67386538526936834437e-01 
0.10417 	 0.00000000000000000000e+00 	 1.97111838606804756768e-01 	 2.53814903391548996048e-01 
0.11250 	 7.31318403096157154848e-04 	 2.23448628122289161269e-01 	 2.65065836801861021144e-01 
0.12083 	 0.00000000000000000000e+00 	 1.90278278484987684038e-01 	 2.45631749097363794032e-01 
0.12917 	 7.80194393477816848514e-03 	 1.86970010730532598675e-01 	 2.87105895762159668561e-01 
0.13750 	 1.14610481369807008095e-02 	 2.11856113549804575547e-01 	 2.56738014346517384734e-01 
0.14583 	 7.20726549024301027524e-03 	 2.23411836648614942069e-01 	 2.46329339214452214257e-01 
0.15417 	 1.18594336896414992433e-02 	 2.27587490018588911589e-01 	 2.96401103342621763392e-01 
0.16250 	 1.33951070518203187165e-02 	 2.19071083789739412540e-01 	 2.72608335242903232487e-01 
0.17083 	 6.00457233376564588484e-03 	 1.97915264513726124607e-01 	 2.48702849554471777660e-01 
0.17917 	 9.31971909848827197165e-03 	 2.17682264791856594499e-01 	 2.58184568311054740697e-01 
0.18750 	 1.51487495429082127257e-02 	 1.66189267116892525067e-01 	 2.44737642413958317311e-01 
0.19583 	 5.93368082294593295750e-03 	 2.08043494426721625734e-01 	 2.75239026843885348228e-01 
0.20417 	 2.70959813095124138482e-02 	 2.03023739174637202209e-01 	 2.82991087878836422576e-01 
0.21250 	 5.77901611744908311197e-03 	 2.09747715402424844688e-01 	 2.31534733454185015500e-01 
0.22083 	 1.05791443281334635040e-02 	 1.59908016392573959497e-01 	 2.46414712269992480786e-01 
0.22917 	 1.12365008468907224409e-02 	 1.75024912338646199128e-01 	 2.66713891357196808407e-01 
0.23750 	 1.28154949790680438432e-02 	 1.48431100084616324208e-01 	 2.50600858751418797965e-01 
0.24583 	 4.75334237273467279800e-03 	 1.69267145742489827365e-01 	 2.87300014222217126036e-01 
0.25417 	 2.09952010678104393493e-02 	 1.80763512757239119821e-01 	 2.65928545124841764213e-01 
0.26250 	 1.19266190889084858912e-02 	 1.66796782012592098576e-01 	 2.96362326779948559441e-01 
0.27083 	 1.55943058955173730756e-02 	 1.98146204047275981130e-01 	 2.65992787302627153867e-01 
0.27917 	 1.11389867645080419684e-02 	 1.98914318136883955246e-01 	 3.03278532373659703847e-01 
0.28750 	 1.41211760862441741693e-02 	 1.68077112359041130896e-01 	 2.55639611815241751813e-01 
0.29583 	 1.57718727914725187489e-02 	 1.62442174717796650185e-01 	 3.01635538786951706847e-01 
0.30417 	 8.99324355511371686944e-03 	 1.82744160891378903955e-01 	 2.99991145965445848987e-01 
0.31250 	 1.70662255021260013399e-02 	 1.65402778604506917048e-01 	 3.25874888134040308074e-01 
0.32083 	 8.10705962379616555669e-03 	 1.59967704862833709489e-01 	 2.84454185903391443269e-01 
0.32917 	 8.52854053691488173117e-03 	 1.93779821804699159404e-01 	 2.88373130428319579543e-01 
0.33750 	 1.39241939546731613442e-02 	 1.69036017339850352936e-01 	 2.68005933284058417421e-01 
0.34583 	 1.02311280110581569180e-02 	 2.06544747355274005418e-01 	 2.95508914938354294577e-01 
0.35417 	 1.24861946802166060705e-02 	 1.94726049854373584047e-01 	 3.19071661521862393052e-01 
0.36250 	 7.44933367202045906841e-03 	 1.80919645289544378519e-01 	 2.81712809731738456076e-01 
0.37083 	 1.31969673839858730319e-02 	 1.95390560416225572693e-01 	 2.87512982386294080328e-01 
0.37917 	 2.03132375470037700171e-02 	 1.67510240581415920103e-01 	 3.08289940101025006225e-01 
0.38750 	 7.15075546196243527763e-03 	 1.71004268728248781661e-01 	 3.07400895352058223242e-01 
0.39583 	 1.31313570246749146408e-02 	 2.03654699568061148263e-01 	 2.58040291458331461083e-01 
0.40417 	 8.01823017194901004057e-03 	 1.73103636437792585134e-01 	 3.56078844890856616168e-01 
0.41250 	 1.13403596832185420140e-02 	 1.78122961150238373618e-01 	 3.40170914101098731397e-01 
0.42083 	 1.34629551415419747296e-02 	 2.03838651449799096449e-01 	 3.20368408382566360881e-01 
0.42917 	 9.50327010790918275118e-03 	 1.81890130796841548166e-01 	 3.25904253743257377174e-01 
0.43750 	 7.36026594452556578302e-03 	 1.79576036449294734743e-01 	 3.91309478134816091099e-01 
0.44583 	 1.27590255098389022265e-02 	 1.76021299132085862205e-01 	 3.57115260778144760767e-01 
0.45417 	 9.60007504745007990421e-03 	 2.18574501359515782628e-01 	 3.66435359224272672041e-01 
0.46250 	 1.26311161595622830495e-02 	 2.17567939337667909383e-01 	 3.51046558796667851343e-01 
0.47083 	 7.47418562179107126564e-03 	 2.15430964490190363092e-01 	 3.36336456062402866518e-01 
0.47917 	 8.58065766870421200996e-03 	 2.11359543494687218690e-01 	 3.51741546428583851114e-01 
0.48750 	 1.08169564561657622487e-02 	 1.76155648401333603248e-01 	 3.39034666001316042916e-01 
0.49583 	 8.79201169916444223718e-03 	 2.17106775262852741415e-01 	 3.35221835891548913811e-01 
0.50417 	 1.16457396771348833248e-02 	 2.13920850921527183619e-01 	 3.34926719350658541607e-01 
0.51250 	 9.49576911663711428768e-03 	 1.87790720711201120086e-01 	 3.22379762949103032543e-01 
0.52083 	 8.95467572050366415748e-03 	 1.78714632348445506826e-01 	 3.74689261687550068114e-01 
0.52917 	 1.33006370334311889436e-02 	 1.90560487151282098583e-01 	 3.48676605974015230149e-01 
0.53750 	 1.05484185750549814414e-02 	 2.05435801164233128313e-01 	 3.68209803919943290396e-01 
0.54583 	 1.18202386364957071074e-02 	 1.97101486627812266805e-01 	 3.78568463995746951056e-01 
0.55417 	 7.76238703909668068676e-03 	 1.89360166411770669548e-01 	 3.33625411588606368696e-01 
0.56250 	 1.06850675526403773863e-02 	 2.06814367753564348762e-01 	 3.28425036377312018487e-01 
0.57083 	 1.28850051335258671686e-02 	 1.89086238837800985069e-01 	 3.88933445218735907023e-01 
0.57917 	 9.54708345117492862553e-03 	 1.78168019918968190130e-01 	 4.42983236864248897113e-01 
0.58750 	 1.02552131563240309792e-02 	 2.09363011177166352672e-01 	 4.06867177034543447967e-01 
0.59583 	 1.14959700201202937725e-02 	 1.87635064363062098458e-01 	 3.62908625614958568750e-01 
0.60417 	 7.46357024845693481363e-03 	 2.00079830608165282202e-01 	 3.71056251508757206636e-01 
0.61250 	 1.21228090331858100182e-02 	 2.05503266499260428546e-01 	 3.98860057274353418943e-01 
0.62083 	 1.00886126092244697572e-02 	 2.41360583560278174620e-01 	 4.09867267079419062004e-01 
0.62917 	 6.45769185711327076138e-03 	 2.23127282195928255959e-01 	 4.57633369801487666084e-01 
0.63750 	 9.27461252227410569426e-03 	 2.06720652934597209915e-01 	 4.46753501095727922898e-01 
0.64583 	 9.17615129724147320089e-03 	 2.27060149054597482099e-01 	 5.06592274460233249478e-01 
0.65417 	 9.05828385712379585692e-03 	 2.22176830945870318335e-01 	 4.30834631349758356844e-01 
0.66250 	 9.81119092911515201794e-03 	 2.14800517138872160139e-01 	 4.57475471066213557059e-01 
0.67083 	 1.67267165893204561300e-02 	 2.03554728600961520879e-01 	 4.88977838330656666699e-01 
0.67917 	 1.17961962540290878076e-02 	 2.28570319920669895453e-01 	 4.93275162996307692254e-01 
0.68750 	 1.33717996528447194415e-02 	 2.39855645825620605871e-01 	 4.61594210900305390588e-01 
0.69583 	 1.12496965181075724710e-02 	 2.39320445307149270997e-01 	 4.31626433972528755767e-01 
0.70417 	 9.39180103595811492656e-03 	 2.53397178189314120633e-01 	 4.75414985448470328588e-01 
0.71250 	 8.21014257679877033913e-03 	 2.41422070664467997014e-01 	 4.62903169703363315257e-01 
0.72083 	 1.18872770032113338895e-02 	 2.55218001796093663103e-01 	 3.80388981072418641549e-01 
0.72917 	 1.63692008653959913955e-02 	 2.46657815954288345273e-01 	 4.96747784689385796231e-01 
0.73750 	 1.69853544199364131506e-02 	 2.53162861651143433761e-01 	 4.47881876877586349028e-01 
0.74583 	 1.35817234527396517307e-02 	 2.40475213028387785341e-01 	 4.86816875305453478084e-01 
0.75417 	 1.12479500115750599698e-02 	 2.36398867552945868287e-01 	 5.01162768099531197308e-01 
0.76250 	 1.09253509175318841429e-02 	 2.40776040401887908571e-01 	 4.99136222423618491906e-01 
0.77083 	 1.23899959305580256025e-02 	 2.53373654855407082209e-01 	 4.63041665701452886950e-01 
0.77917 	 1.56590690722501271748e-02 	 2.64658517244704460936e-01 	 5.92932264217787774463e-01 
0.78750 	 1.59357335227789699561e-02 	 2.60763266414085148615e-01 	 5.34737037955153926561e-01 
0.79583 	 1.02200710917506841502e-02 	 2.78825248953736060109e-01 	 5.36847123682603011297e-01 
0.80417 	 1.30147531125031218346e-02 	 2.75823671856279595271e-01 	 5.47740848659846291113e-01 
0.81250 	 1.72625044584274849047e-02 	 2.77145266404353551870e-01 	 5.95115905871249850634e-01 
0.82083 	 1.16100155900308657508e-02 	 2.77305266384995641182e-01 	 5.26253035117470790993e-01 
0.82917 	 1.25477367841525504905e-02 	 2.60673644676696680822e-01 	 5.27841380382384706138e-01 
0.83750 	 1.29379675702697219397e-02 	 2.85534147450686504044e-01 	 5.51322036452864150391e-01 
0.84583 	 1.66030558845582792982e-02 	 2.39805262992264234256e-01 	 5.44974946847153751683e-01 
0.85417 	 1.66697445750724725089e-02 	 2.60345500694875997549e-01 	 6.17283790109330321449e-01 
0.86250 	 1.91367920894769429074e-02 	 2.91908106581966309001e-01 	 6.06634751571586638974e-01 
0.87083 	 1.61149663443209828495e-02 	 2.96626445504091618144e-01 	 5.99586168661835450244e-01 
0.87917 	 1.81565586883263123397e-02 	 2.90679763120300194146e-01 	 5.52014905827902024882e-01 
0.88750 	 1.71547903179138476470e-02 	 3.05137623059394791358e-01 	 6.00129360983526205509e-01 
0.89583 	 1.55257130339627701099e-02 	 3.08675225968443378566e-01 	 5.75302884983428630683e-01 
0.90417 	 1.67567423820472009843e-02 	 3.20128448981142454954e-01 	 7.03542441777029181615e-01 
0.91250 	 1.73337699710331936964e-02 	 3.07329783178110604869e-01 	 7.03997060356632675671e-01 
0.92083 	 1.92633401599880231536e-02 	 3.08884170142470881881e-01 	 6.86331475585883254986e-01 
0.92917 	 1.73055796444211637541e-02 	 3.49772905641679454636e-01 	 7.12245497706301522456e-01 
0.93750 	 1.87783671967840445904e-02 	 3.40069638129568752039e-01 	 6.97234363530527145869e-01 
0.94583 	 2.08323052023660533483e-02 	 3.25600689371824236762e-01 	 6.95300385203576398752e-01 
0.95417 	 1.92700842412102980872e-02 	 3.53577853030812183643e-01 	 6.17288646362302406700e-01 
0.96250 	 1.74543442912447471782e-02 	 3.84683062493162919449e-01 	 5.96555991252208150932e-01 
0.97083 	 2.04478649679037741138e-02 	 3.62183324535074180339e-01 	 7.33733785821533701643e-01 
0.97917 	 1.59227783454922861006e-02 	 3.49279477700270624130e-01 	 6.99119368919733696899e-01 
0.98750 	 1.78820419693070387090e-02 	 3.71156059018556694351e-01 	 7.08822555837134937740e-01 
0.99583 	 1.95236819701168073937e-02 	 4.10115130582704434659e-01 	 7.53405447614381107435e-01 
1.00417 	 1.99277977777958630046e-02 	 4.78653109550082112023e-01 	 6.59004947288713838205e-01 
1.01250 	 1.56982812544785403641e-02 	 4.44683809739950919315e-01 	 7.34804148069439277968e-01 
1.02083 	 1.99145226670984880346e-02 	 4.62125094922743284709e-01 	 7.53710261561680083808e-01 
1.02917 	 1.68709466165797156156e-02 	 5.79137645508603915445e-01 	 7.69423250151845983247e-01 
1.03750 	 2.01781852693053119496e-02 	 6.99209607689950773945e-01 	 7.94228704021248899103e-01 
1.04583 	 1.89256257070916679430e-02 	 1.97731499923751918857e+00 	 8.95466711223680711385e-01 
1.05417 	 2.06809196089439151223e-02 	 9.56729999402218034277e-01 	 7.81152170269791668034e-01 
1.06250 	 1.77061664760489179127e-02 	 6.48340133720700317888e-01 	 7.75910982488554390457e-01 
1.07083 	 2.12409755753695354830e-02 	 5.19484502569459327681e-01 	 8.09864170196030519477e-01 
1.07917 	 1.72406212953618437345e-02 	 5.17672572588025570184e-01 	 8.76390662214572402355e-01 
1.08750 	 1.86430552174526933951e-02 	 4.73225152757017930583e-01 	 7.99928385392091101380e-01 
1.09583 	 1.83689268983790905676e-02 	 4.37459348233265654660e-01 	 8.13436497706170436039e-01 
1.10417 	 2.27837728334134986818e-02 	 4.22647691303523531658e-01 	 9.86911798579873211779e-01 
1.11250 	 2.10996804200305095034e-02 	 3.82392282578438214014e-01 	 9.77897930246426794199e-01 
1.12083 	 2.00406074689189611648e-02 	 3.67385305008680218553e-01 	 9.15399006649280311265e-01 
1.12917 	 1.83688385334290112116e-02 	 3.72797877457744453178e-01 	 9.90170573301357825891e-01 
1.13750 	 1.85083879851495151925e-02 	 3.23778931939477265800e-01 	 9.63225666782946521316e-01 
1.14583 	 1.96035826258045622894e-02 	 2.96979037215729491095e-01 	 1.03353885170406689653e+00 
1.15417 	 2.05527608943191809898e-02 	 3.24944261088375430102e-01 	 8.95928998808345200544e-01 
1.16250 	 1.81586716541889334198e-02 	 2.90304949634271614034e-01 	 9.61251378238523024322e-01 
1.17083 	 2.04687652039685953620e-02 	 2.80019676031529052285e-01 	 1.01864016079444130725e+00 
1.17917 	 2.05490895249032072545e-02 	 2.70351760776952332321e-01 	 1.04299281103341101584e+00 
1.18750 	 2.26395445823283116005e-02 	 2.75582176933415357034e-01 	 1.11227871664820843201e+00 
1.19583 	 2.26803866134121165365e-02 	 2.47196946236641762473e-01 	 1.17132106342971975543e+00 
1.20417 	 2.22121812218279389428e-02 	 2.41094758390384356073e-01 	 1.09038214880817796448e+00 
1.21250 	 1.97364512333793873378e-02 	 2.40837274522788219455e-01 	 1.16684301647474519825e+00 
1.22083 	 1.93962781390597562015e-02 	 2.26142596909820359219e-01 	 1.13121977646384253013e+00 
1.22917 	 1.98181312747352268711e-02 	 2.28503152516754903800e-01 	 1.05694425991238860618e+00 
1.23750 	 1.98640182180905740250e-02 	 2.13730871092420671165e-01 	 1.18778425620915406569e+00 
1.24583 	 2.28464042262253863580e-02 	 2.38448676798844599878e-01 	 1.19248335537174265930e+00 
1.25417 	 2.01136437216436550490e-02 	 2.09279861387118737426e-01 	 1.18024516964122594409e+00 
1.26250 	 2.12070950301109124869e-02 	 1.99575620953383991996e-01 	 9.97303462385036976201e-01 
1.27083 	 2.11120236637334923735e-02 	 1.91558233712272679705e-01 	 1.21509415619578109435e+00 
1.27917 	 1.93533990929648132273e-02 	 2.01854335718242627884e-01 	 1.23170460685236049514e+00 
1.28750 	 2.24492792209040788187e-02 	 2.06248184577961568564e-01 	 1.30718507151237961494e+00 
1.29583 	 1.81489237593257107806e-02 	 1.94736604701033655385e-01 	 1.29774242004484485769e+00 
1.30417 	 2.31786851013895782436e-02 	 1.89642611439408498297e-01 	 1.19142101897721253145e+00 
1.31250 	 2.50745491552061619545e-02 	 1.93867955467595054486e-01 	 1.36099033897329069198e+00 
1.32083 	 2.48580967176169655153e-02 	 1.76633407807794018396e-01 	 1.24778665216290374218e+00 
1.32917 	 2.54044180490733649547e-02 	 1.75530973145265528634e-01 	 1.44324333990083597534e+00 
1.33750 	 2.40830398906965899297e-02 	 1.67484312938599166909e-01 	 1.49395520181720353747e+00 
1.34583 	 2.41894967631371519967e-02 	 1.76436766349909068818e-01 	 1.35438247267081979253e+00 
1.35417 	 2.45811809348102129624e-02 	 1.83833330721516613471e-01 	 1.53741017323279760554e+00 
1.36250 	 2.47115880347285217511e-02 	 1.54841202934775101774e-01 	 1.41388180315688827271e+00 
1.37083 	 2.62533963740349297888e-02 	 1.65343785492097106182e-01 	 1.39808408296893715850e+00 
1.37917 	 3.20861885206961475192e-02 	 1.59390074833554551414e-01 	 1.36874515920519712608e+00 
1.38750 	 3.01746109236337815840e-02 	 1.51291403478844593833e-01 	 1.34316827465418930920e+00 
1.39583 	 2.65438018352657824350e-02 	 1.47773602454426111752e-01 	 1.35061771565584343158e+00 
1.40417 	 2.85799396009082350145e-02 	 1.52629932324466310867e-01 	 1.34174805546402420298e+00 
1.41250 	 2.68631198396576433007e-02 	 1.39205761444682857286e-01 	 1.45203230926748982910e+00 
1.42083 	 3.00399874035106213832e-02 	 1.42521973013886416037e-01 	 1.49178217755383202281e+00 
1.42917 	 2.73456745423959202146e-02 	 1.36383676457623809197e-01 	 1.51151631073548342599e+00 
1.43750 	 2.93627439117436390970e-02 	 1.32676323029898374228e-01 	 1.50496864431973564891e+00 
1.44583 	 2.69680143988225012874e-02 	 1.37577510138344877300e-01 	 1.60756644376838964128e+00 
1.45417 	 2.76295820719516527220e-02 	 1.29318466131114723217e-01 	 1.59197097209680960006e+00 
1.46250 	 2.72744645129125856675e-02 	 1.19689745418531015564e-01 	 1.62232422219016103604e+00 
1.47083 	 3.17117515135172250984e-02 	 1.12313682639288259235e-01 	 1.61618323995838819584e+00 
1.47917 	 2.85019497273985913943e-02 	 1.09701018691950896722e-01 	 1.60715370423103864894e+00 
1.48750 	 2.82565366815004104240e-02 	 1.19108918686885043026e-01 	 1.59315687755998758313e+00 
1.49583 	 3.28211655366238072573e-02 	 1.21710070257887659206e-01 	 1.61959312956508449943e+00 
1.50417 	 2.64622522636888679592e-02 	 1.22514559241893666863e-01 	 1.68350605715367507287e+00 
1.51250 	 2.30931963204898879627e-02 	 1.12643135266725383237e-01 	 1.65928116901680255957e+00 
1.52083 	 2.72543382412365892131e-02 	 1.19576693463022173947e-01 	 1.71408786760425835283e+00 
1.52917 	 3.06400918452376727630e-02 	 1.06326524880174758114e-01 	 1.81888941051112551506e+00 
1.53750 	 3.19216614613069202266e-02 	 1.10441794811858715053e-01 	 1.75496691496873213900e+00 
1.54583 	 3.05052638872191396457e-02 	 1.13551864141064648428e-01 	 1.73876685106845241258e+00 
1.55417 	 3.18214019602126862996e-02 	 1.12340897342691564686e-01 	 1.72088248730477810788e+00 
1.56250 	 3.11012112422685282898e-02 	 1.03545160180206610723e-01 	 1.79637244652221994556e+00 
1.57083 	 3.19870638006254856545e-02 	 9.62250904749407665051e-02 	 1.85754839633898294338e+00 
1.57917 	 3.05097562887744720717e-02 	 9.33044707624519076283e-02 	 1.86132678560483855179e+00 
1.58750 	 3.09307570552948170317e-02 	 9.86634665535071064824e-02 	 1.84710492057330588622e+00 
1.59583 	 3.08274877969655081156e-02 	 9.58663501920489630193e-02 	 1.90047743494838372591e+00 
1.60417 	 3.30737982644931718945e-02 	 9.37648650422658325176e-02 	 1.95758989951292794451e+00 
1.61250 	 3.24459843061738820169e-02 	 8.67864684196212182732e-02 	 1.99268603639359898061e+00 
1.62083 	 3.14016670624805080414e-02 	 8.63826112249780342367e-02 	 1.91026505111797106906e+00 
1.62917 	 3.34149825699066940765e-02 	 8.78298731059567044932e-02 	 1.86362899059996256490e+00 
1.63750 	 3.19033325730509950691e-02 	 8.32641496921760898564e-02 	 2.03877224108922305845e+00 
1.64583 	 3.22213416967541341207e-02 	 9.17933094557556172877e-02 	 2.03589107991236550887e+00 
1.65417 	 3.10605004843753570998e-02 	 9.42392660208337534788e-02 	 2.09263936717553100664e+00 
1.66250 	 3.16028681348015580421e-02 	 8.86984264660126420221e-02 	 2.08858956131975714854e+00 
1.67083 	 3.14879746066242874325e-02 	 9.61982604424623521933e-02 	 1.89543554795877944308e+00 
1.67917 	 3.34460179494411175005e-02 	 8.39379764845449433119e-02 	 2.06279164367270562153e+00 
1.68750 	 3.43168252606139215222e-02 	 8.47432121937071042295e-02 	 2.12217974780470930440e+00 
1.69583 	 3.49243488449606717672e-02 	 8.43179801536338979773e-02 	 2.15593427759042732816e+00 
1.70417 	 3.48808688672422664845e-02 	 8.07626030511709863680e-02 	 2.27959747502857279500e+00 
1.71250 	 3.84175518255142206536e-02 	 8.51041108942740681664e-02 	 2.34392545237984117890e+00 
1.72083 	 3.74175590540368474546e-02 	 7.78003158263278205009e-02 	 2.07682403731362263954e+00 
1.72917 	 3.32560464004093281343e-02 	 7.87712636560806700459e-02 	 2.26399781347061379577e+00 
1.73750 	 3.74311879806476302535e-02 	 8.40894357435657130440e-02 	 2.29506917539863541933e+00 
1.74583 	 3.68009512650529710398e-02 	 7.86574720642700675466e-02 	 2.26022754013677751317e+00 
1.75417 	 3.63808073440189394532e-02 	 7.60606289348032676978e-02 	 2.51906325634295225058e+00 
1.76250 	 3.69250086026788951199e-02 	 8.09161561825389730185e-02 	 2.41999626509669685248e+00 
1.77083 	 3.80027486756252530498e-02 	 7.33152328719140072844e-02 	 2.47568839832254417033e+00 
1.77917 	 4.01619985000694693089e-02 	 7.84047184318546613868e-02 	 2.43582167834063501033e+00 
1.78750 	 3.75423174061673761703e-02 	 7.01310903457505879777e-02 	 2.35097838485106480633e+00 
1.79583 	 3.87340877669796468385e-02 	 6.84132494688551584527e-02 	 2.44229330089923646341e+00 
1.80417 	 4.22157270809499426956e-02 	 7.26809325784378706947e-02 	 2.38869532276098306411e+00 
1.81250 	 4.00000167667821301953e-02 	 6.26303158753702682304e-02 	 2.42344962183224765795e+00 
1.82083 	 3.95450778728561394559e-02 	 6.97738364831427398949e-02 	 2.38852898300340310556e+00 
1.82917 	 3.82921210692401120523e-02 	 7.18009491248918496620e-02 	 2.47568634072144799774e+00 
1.83750 	 4.32397903707356576208e-02 	 6.52829165649268378102e-02 	 2.46101002003068458635e+00 
1.84583 	 3.55946274792349331983e-02 	 6.82242794237859356832e-02 	 2.21500187769881495825e+00 
1.85417 	 4.19713001752350309270e-02 	 6.69405266060028175668e-02 	 2.42922055743142628614e+00 
1.86250 	 4.14261759260545758821e-02 	 6.40664000709470216055e-02 	 2.29090911211759840072e+00 
1.87083 	 4.06005909545299262242e-02 	 5.81846282558078076175e-02 	 2.53173261277014738369e+00 
1.87917 	 4.17264413801175168550e-02 	 6.25407001661381495294e-02 	 2.39947970101188934322e+00 
1.88750 	 4.32695482992589558480e-02 	 5.45700711217986592083e-02 	 2.43622646885950633333e+00 
1.89583 	 4.25931165747267734267e-02 	 5.47277573449820031737e-02 	 2.20892386894902870154e+00 
1.90417 	 4.32487386265136414254e-02 	 5.66730631949653937407e-02 	 2.31100372259278907805e+00 
1.91250 	 4.05993279038865811925e-02 	 6.19951859249773529204e-02 	 2.31688765990755696222e+00 
1.92083 	 4.08874200650996486028e-02 	 5.34024548004859295203e-02 	 2.41079269715959476628e+00 
1.92917 	 4.11158180830508632186e-02 	 5.26044602606772562781e-02 	 2.46210621725749145838e+00 
1.93750 	 4.02455701628386675051e-02 	 5.10863328303624367188e-02 	 2.53746291995060824220e+00 
1.94583 	 4.74274247797511622204e-02 	 5.22260364197794368923e-02 	 2.41796128595791071092e+00 
1.95417 	 4.24296068358766265138e-02 	 5.57174742993476884712e-02 	 2.22512150229771332732e+00 
1.96250 	 4.45160988192926168616e-02 	 4.83901906050708333074e-02 	 2.29334101081905261665e+00 
1.97083 	 4.71389217567779739149e-02 	 4.94296547500471875058e-02 	 2.20659491910689720129e+00 
1.97917 	 4.84505215923314441762e-02 	 4.80795365832575941067e-02 	 2.18424311671965520887e+00 
1.98750 	 4.95445101028880799388e-02 	 4.89849911156456652161e-02 	 2.19040443348237934273e+00 
1.99583 	 4.94317005908920525936e-02 	 4.72897751067036173356e-02 	 1.15750704627898937105e+00 
2.00417 	 3.97050688900112458413e+00 	 3.64989897782494310263e+00 	 7.62694353666101676481e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math
import json
from tqdm import tqdm

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 0.01 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = 1000 # set number of photons in simulation ID_EDIT_1_3
    z_size = 2.0 # cm, total range over which bins extend
    xy_size = 1.5 # cm
    NR_z          = 240 # set number of bins.
    NR_xy = 180
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = z_size/NR_z  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    InitRandomGen()
    Csph = [0 for _ in range(0,NR_z+1)]
    Ccyl = [0 for _ in range(0,NR_z+1)]
    Cpla = [0 for _ in range(0,NR_z+1)]

    # [x][y][z]
    # it could be done in numpy array, but list is easier to save
    Cube = [[[0 for _ in range(0,NR_z+1)] for _ in range(0,NR_xy+1)] for _ in range(0,NR_xy+1)]
    cube_overflow = 0

    # start pos
    x_start = 89 * dr
    y_start = 89 * dr
    z_start = 239 * dr

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    print("(1 iter = 1 photon) Simulation progerss:")
    for i_photon in tqdm(range(0,Nphotons)):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements a point source [0,0,-1].
        # *****
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = x_start                     # Set photon position to origin.
        y = y_start
        z = z_start

        # source - vartical down [0,0,-1]
        # psi - berween x-y axis
        # theta between z and R
        ux = 0
        uy = 0
        uz = -1


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Cpla[ir] += absorb # DROP absorbed weight into bin

            # --- cube ---
            ix = int(x/dr)
            iy = int(y/dr)
            iz = int(z/dr)
            ix_is_in = (0 <= ix < NR_xy)
            iy_is_in = (0 <= iy < NR_xy)
            iz_is_in = (0 <= iz < NR_z)
            is_in = ix_is_in and iy_is_in and iz_is_in
            if (not is_in):
                cube_overflow += absorb
            else:
                Cube[ix][iy][iz] += absorb
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz)
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    print("saving data...")
    file = open("mc456_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR_z+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:.20e} \t {Fcyl:.20e} \t {Fpla:.20e} \n")

    file.close()


    with open('mc456_p_cube.json', 'w') as f:
        data = {
            "n_photons": Nphotons,
            "overflow": cube_overflow,
            "bins_per_1_cm": NR_z/z_size,
            "mu_a": mua,
            "name": f"my_{ Nphotons // 1_000_000 }mln_cube",
            "photon_weight": W,
            "normalized_already": False,
            "cube": Cube
        }
        json.dump(data, f)

    print("done")
    # end of main


main()
