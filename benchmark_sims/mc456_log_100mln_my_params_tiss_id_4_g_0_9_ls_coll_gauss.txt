time elapsed: 3869.0042 seconds

=================================

sim results:

number of photons = 100000000
overflow: 4.96786776407880559564e+07
sum: 5.03209421435966119170e+07
sum: 5.03213223592119440436e+07
avg: 5.03209421435966142155e-01
perc_in: 50.32

number of photons = 100000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 1.53785902801674076446e-02 	 1.63905779765353587507e-01 	 2.69381386942803946472e-01 
0.01250 	 1.18939382750797642552e-02 	 1.64015190091594986743e-01 	 2.69395675890772956507e-01 
0.02083 	 1.13463525033448593693e-02 	 1.63964769211802058324e-01 	 2.69626788756244406553e-01 
0.02917 	 1.11458599539758645980e-02 	 1.64146019530219233751e-01 	 2.69646485151586789986e-01 
0.03750 	 1.12886083469847069150e-02 	 1.63973875170257549216e-01 	 2.69845826091837659444e-01 
0.04583 	 1.12340169303784421367e-02 	 1.64316749618106827668e-01 	 2.70124281451603387438e-01 
0.05417 	 1.12923681607343742717e-02 	 1.64276178774941217231e-01 	 2.70432693804359358669e-01 
0.06250 	 1.11725820672616618645e-02 	 1.64353133104999354908e-01 	 2.70928122573090679470e-01 
0.07083 	 1.12094034715915918943e-02 	 1.64700516480411146558e-01 	 2.71328370420967857068e-01 
0.07917 	 1.11847723835986172236e-02 	 1.64460521732449765908e-01 	 2.71818702075179441380e-01 
0.08750 	 1.12825322687255223675e-02 	 1.64822128228883535428e-01 	 2.72281562777153096633e-01 
0.09583 	 1.12224053202399469409e-02 	 1.65216806588672160405e-01 	 2.73011227025315605932e-01 
0.10417 	 1.12624106476785605657e-02 	 1.65108474662370413588e-01 	 2.73533734022983088252e-01 
0.11250 	 1.12666908057013192418e-02 	 1.65405749823138742416e-01 	 2.74240088073522403356e-01 
0.12083 	 1.13165932900982750542e-02 	 1.65655695082105952620e-01 	 2.75004873172431885120e-01 
0.12917 	 1.13098183754549753977e-02 	 1.65992994135324450911e-01 	 2.75759267207116409715e-01 
0.13750 	 1.12713754492322435624e-02 	 1.66185497816585620035e-01 	 2.76766670693298466599e-01 
0.14583 	 1.12786207017938865105e-02 	 1.66586803545568151730e-01 	 2.77757054961499105783e-01 
0.15417 	 1.13251387737102592740e-02 	 1.66931392629829894458e-01 	 2.78646232360752199586e-01 
0.16250 	 1.13598343501114234372e-02 	 1.67154545114008068474e-01 	 2.79730606458476138698e-01 
0.17083 	 1.13641342802718366828e-02 	 1.67411214606391495208e-01 	 2.80815707244811585408e-01 
0.17917 	 1.13745896829615198570e-02 	 1.67899440600239230337e-01 	 2.82001206306512763877e-01 
0.18750 	 1.13714319586808946388e-02 	 1.68395222587048282170e-01 	 2.83081880608935798627e-01 
0.19583 	 1.14139562436574287102e-02 	 1.68720236990439281799e-01 	 2.84343799324427881636e-01 
0.20417 	 1.14225587291507460486e-02 	 1.69113433440364502314e-01 	 2.85724461249252159600e-01 
0.21250 	 1.14459781021242195526e-02 	 1.69502557547522580972e-01 	 2.87199957193395194466e-01 
0.22083 	 1.14767749911894988840e-02 	 1.69933959408573226346e-01 	 2.88576712633350884740e-01 
0.22917 	 1.14870896035114498229e-02 	 1.70454637884404208714e-01 	 2.90043512804111558445e-01 
0.23750 	 1.15238407444330972357e-02 	 1.70961912245506580943e-01 	 2.91541484129774652878e-01 
0.24583 	 1.15473004215421708868e-02 	 1.71496196546614076972e-01 	 2.93047501771766361056e-01 
0.25417 	 1.15633394827628858265e-02 	 1.71967021066982445054e-01 	 2.94762473316809658908e-01 
0.26250 	 1.15869661760340265239e-02 	 1.72596459114430972326e-01 	 2.96656575445055914475e-01 
0.27083 	 1.16220303044459703778e-02 	 1.73177396386078041868e-01 	 2.98458408295898425244e-01 
0.27917 	 1.16178803810407550723e-02 	 1.73719381886503848600e-01 	 3.00268894345560422021e-01 
0.28750 	 1.16416204946405681814e-02 	 1.74252184414027705417e-01 	 3.02093410353738267560e-01 
0.29583 	 1.16674302122478645849e-02 	 1.74859307497506444307e-01 	 3.04139829939260031288e-01 
0.30417 	 1.17214402716893130452e-02 	 1.75436872627005968628e-01 	 3.06166781469112747605e-01 
0.31250 	 1.17591574395231202727e-02 	 1.76109780008557870179e-01 	 3.08250498538090056400e-01 
0.32083 	 1.17805666204683617132e-02 	 1.76781485172445573806e-01 	 3.10482939300253724113e-01 
0.32917 	 1.17704923873826125535e-02 	 1.77449503774521843980e-01 	 3.12659109938545787255e-01 
0.33750 	 1.18272677325094114492e-02 	 1.78188062516819956116e-01 	 3.14919581793211666998e-01 
0.34583 	 1.18504005768096040696e-02 	 1.79013806648656820242e-01 	 3.17247264759835279069e-01 
0.35417 	 1.19131476854308238772e-02 	 1.79594357764431777902e-01 	 3.19650728328576716475e-01 
0.36250 	 1.19345544097289903152e-02 	 1.80544774032492277849e-01 	 3.22232617468765747404e-01 
0.37083 	 1.19528595810362448654e-02 	 1.81278423187736459354e-01 	 3.24691720991435228694e-01 
0.37917 	 1.19998700819006279272e-02 	 1.82067177386303430398e-01 	 3.27342296506872021400e-01 
0.38750 	 1.20328600634128125846e-02 	 1.82933346118215350851e-01 	 3.29938251106149604830e-01 
0.39583 	 1.20644877719942606592e-02 	 1.83746766364021096862e-01 	 3.32656626042877878735e-01 
0.40417 	 1.21069730963285424052e-02 	 1.84656054028179139603e-01 	 3.35433028754038187191e-01 
0.41250 	 1.21362502382471749290e-02 	 1.85596584170747480602e-01 	 3.38221653236549679722e-01 
0.42083 	 1.21859029495134437576e-02 	 1.86542778198008712964e-01 	 3.41209792000153333547e-01 
0.42917 	 1.22214446736182546366e-02 	 1.87468460720238788708e-01 	 3.44188075810265559085e-01 
0.43750 	 1.22571279738129344100e-02 	 1.88421967298772086163e-01 	 3.47291350295465039988e-01 
0.44583 	 1.22842132927641674994e-02 	 1.89484857611415535850e-01 	 3.50297745230148505069e-01 
0.45417 	 1.23486077570979600054e-02 	 1.90467674098478340072e-01 	 3.53677552900020064630e-01 
0.46250 	 1.23823136506580871313e-02 	 1.91532126866027746503e-01 	 3.56984731279298361795e-01 
0.47083 	 1.24317663863918303341e-02 	 1.92701065371641444557e-01 	 3.60268833368119656413e-01 
0.47917 	 1.24691884714819914426e-02 	 1.93720718992374391076e-01 	 3.63657378509351536522e-01 
0.48750 	 1.25111041744278648352e-02 	 1.94951592637809922870e-01 	 3.67234494718338799757e-01 
0.49583 	 1.25529955667217987814e-02 	 1.96047626789762119426e-01 	 3.70596688519550521157e-01 
0.50417 	 1.26022680485220785196e-02 	 1.97278114500109597040e-01 	 3.74433125034477287674e-01 
0.51250 	 1.26659204748106792721e-02 	 1.98354886210705516625e-01 	 3.78202853212482814627e-01 
0.52083 	 1.27126709703260024065e-02 	 1.99744623435396145839e-01 	 3.81869700822373481230e-01 
0.52917 	 1.27545401659806111744e-02 	 2.00944984870425391588e-01 	 3.85732202729870299329e-01 
0.53750 	 1.28126823842564848549e-02 	 2.02200527610575803150e-01 	 3.89732096477093281628e-01 
0.54583 	 1.28844267384845539287e-02 	 2.03543243577624738405e-01 	 3.93781587738928795517e-01 
0.55417 	 1.29354247117043387461e-02 	 2.04860979453937663841e-01 	 3.97860754668709848403e-01 
0.56250 	 1.29775271983285696992e-02 	 2.06283174223738791087e-01 	 4.02033032112964205940e-01 
0.57083 	 1.30303637965127529913e-02 	 2.07663144427723461716e-01 	 4.06421905233653346645e-01 
0.57917 	 1.30877012595821129448e-02 	 2.09122339936473750077e-01 	 4.10740266074398285845e-01 
0.58750 	 1.31421547117766893131e-02 	 2.10679806532339003455e-01 	 4.15284761738883290150e-01 
0.59583 	 1.31912230376301370383e-02 	 2.12144775321284395631e-01 	 4.19583218134909730068e-01 
0.60417 	 1.32801113190137830972e-02 	 2.13791151391749673083e-01 	 4.24214425174721021516e-01 
0.61250 	 1.33340005536242336287e-02 	 2.15460863214150033507e-01 	 4.28890124270346673185e-01 
0.62083 	 1.33899031320419085317e-02 	 2.16984700405660702049e-01 	 4.33804422444069859299e-01 
0.62917 	 1.34523023485126850401e-02 	 2.18775007034288426766e-01 	 4.38673366207574133568e-01 
0.63750 	 1.35037996960790784157e-02 	 2.20497825270431851985e-01 	 4.43340889204212385000e-01 
0.64583 	 1.35650476606480937386e-02 	 2.22316578816858401169e-01 	 4.48470182288584318098e-01 
0.65417 	 1.36434342451683173619e-02 	 2.24223012820891354213e-01 	 4.53580338369978131041e-01 
0.66250 	 1.37113109410432910257e-02 	 2.26089513332561609094e-01 	 4.58875600089128587999e-01 
0.67083 	 1.37711533862010099272e-02 	 2.28159666153101903241e-01 	 4.64067169510963495327e-01 
0.67917 	 1.38335509622748032560e-02 	 2.30178358522384024498e-01 	 4.69425377371204988197e-01 
0.68750 	 1.39036147927105013106e-02 	 2.32389349207693690635e-01 	 4.74848743232263503788e-01 
0.69583 	 1.39770611348726692819e-02 	 2.34563282094283703794e-01 	 4.80394827192113516023e-01 
0.70417 	 1.40364501020198498282e-02 	 2.36802532618592465052e-01 	 4.86112479264635743981e-01 
0.71250 	 1.41283518063882590488e-02 	 2.39175763248392458937e-01 	 4.92143039678071880783e-01 
0.72083 	 1.41953124055687121552e-02 	 2.41667526142670036071e-01 	 4.98000226529778988738e-01 
0.72917 	 1.42609634698408760389e-02 	 2.44128255204430738567e-01 	 5.03953962656036980050e-01 
0.73750 	 1.43536927806035049388e-02 	 2.46882798362114658230e-01 	 5.09869229215108354936e-01 
0.74583 	 1.44249847828773619662e-02 	 2.49646382267489364004e-01 	 5.16036612154445850642e-01 
0.75417 	 1.45066976028412706473e-02 	 2.52572962511987519907e-01 	 5.22366745801664089655e-01 
0.76250 	 1.45881920436968445798e-02 	 2.55759113461191955885e-01 	 5.28886578406954299680e-01 
0.77083 	 1.46646427890163091878e-02 	 2.59079160861557578066e-01 	 5.35514127020778829547e-01 
0.77917 	 1.47513464100041402638e-02 	 2.62662956119873336469e-01 	 5.42012721552333265329e-01 
0.78750 	 1.48376370114738746764e-02 	 2.66678999587830478646e-01 	 5.48584748602994332067e-01 
0.79583 	 1.49267265156404864423e-02 	 2.71093446598599796538e-01 	 5.55436905428358995707e-01 
0.80417 	 1.50033972360259955370e-02 	 2.75895297630184443971e-01 	 5.62404288523232542829e-01 
0.81250 	 1.50973917588579469029e-02 	 2.81475234122318840324e-01 	 5.69381497003469738694e-01 
0.82083 	 1.51885258320270475491e-02 	 2.87641442528390967048e-01 	 5.76620636917161144552e-01 
0.82917 	 1.52726592662118642457e-02 	 2.94696682601330306461e-01 	 5.83859515016371233287e-01 
0.83750 	 1.53708217758014055454e-02 	 3.02671684819211028739e-01 	 5.91312089294790510507e-01 
0.84583 	 1.54525295426114431946e-02 	 3.11765284133560915958e-01 	 5.98753330442855835614e-01 
0.85417 	 1.55416957247506912210e-02 	 3.21750676098892463006e-01 	 6.06181519358356291072e-01 
0.86250 	 1.56395207911263697809e-02 	 3.32720397318712723944e-01 	 6.14036231560802669982e-01 
0.87083 	 1.57403150902019582646e-02 	 3.44732330909939599373e-01 	 6.21732121902058620933e-01 
0.87917 	 1.58369833041359341086e-02 	 3.57498948881004141587e-01 	 6.29982874780493529165e-01 
0.88750 	 1.59352962121499727721e-02 	 3.70808313664599820125e-01 	 6.37950181861939413785e-01 
0.89583 	 1.60413783836945572636e-02 	 3.84334778435748647407e-01 	 6.46181176107962440547e-01 
0.90417 	 1.61362800019700450282e-02 	 3.97928526642033320027e-01 	 6.54635168003701584105e-01 
0.91250 	 1.62461058265724808680e-02 	 4.10706838407051633144e-01 	 6.63353820079795486464e-01 
0.92083 	 1.63326031698488444155e-02 	 4.22953350013759499237e-01 	 6.71855529655209449125e-01 
0.92917 	 1.64569132942974927225e-02 	 4.33517993726607542282e-01 	 6.80462743240965450831e-01 
0.93750 	 1.65569997044912112227e-02 	 4.42431348241405564270e-01 	 6.89524390140270448946e-01 
0.94583 	 1.66643810568218968260e-02 	 4.48954261736289661489e-01 	 6.98333869426524422863e-01 
0.95417 	 1.67743362678678606392e-02 	 4.53043142209118843144e-01 	 7.07720726999150673286e-01 
0.96250 	 1.68906385826671223693e-02 	 4.54083046677372426103e-01 	 7.16925147228090309248e-01 
0.97083 	 1.69923157553383795404e-02 	 4.52348686397248456181e-01 	 7.26360034110451135980e-01 
0.97917 	 1.71054579884355600905e-02 	 4.47793446137320250156e-01 	 7.36226010970246647069e-01 
0.98750 	 1.72140503925973208099e-02 	 4.40256342412674861464e-01 	 7.45652782060439833778e-01 
0.99583 	 1.73386823444085062806e-02 	 4.30220815566154934917e-01 	 7.55661329359902933511e-01 
1.00417 	 1.74565232921712679137e-02 	 4.17926211061957098014e-01 	 7.66017313269579114277e-01 
1.01250 	 1.75808332350368586028e-02 	 4.04000070592863191887e-01 	 7.76039376013449300196e-01 
1.02083 	 1.76994117672039374956e-02 	 3.88973851847054408193e-01 	 7.86420621493378879663e-01 
1.02917 	 1.78161474511843755109e-02 	 3.73810263548012722268e-01 	 7.96473854897293054300e-01 
1.03750 	 1.79510622422615583049e-02 	 3.59442791832521701956e-01 	 8.07342821493269302557e-01 
1.04583 	 1.80726822777442751311e-02 	 3.47662447476634939303e-01 	 8.17922248323438849660e-01 
1.05417 	 1.82083161682537568449e-02 	 3.47006221752688137627e-01 	 8.29121018955976674114e-01 
1.06250 	 1.83322384312896886904e-02 	 3.54128310183661421107e-01 	 8.40096970947567189825e-01 
1.07083 	 1.84597811999496659585e-02 	 3.62324187738529146507e-01 	 8.51213309473362156332e-01 
1.07917 	 1.85986643638032904391e-02 	 3.70398927814783451851e-01 	 8.62962641462836299588e-01 
1.08750 	 1.87271035727342612109e-02 	 3.77449669374941731981e-01 	 8.74427638006769591961e-01 
1.09583 	 1.88615338453395932350e-02 	 3.83338057908629958881e-01 	 8.86530736069895186624e-01 
1.10417 	 1.89943570029329801552e-02 	 3.87390620937669016843e-01 	 8.98280729748128448087e-01 
1.11250 	 1.91486598023397174007e-02 	 3.89583480067015208714e-01 	 9.10431094021110665082e-01 
1.12083 	 1.92747558264879832735e-02 	 3.89873048070022765188e-01 	 9.22507753472434077757e-01 
1.12917 	 1.94245973999490235962e-02 	 3.88387644687787192410e-01 	 9.34982475651144007145e-01 
1.13750 	 1.95702521260133176229e-02 	 3.84930937556124452836e-01 	 9.47843762267881029260e-01 
1.14583 	 1.97190151392541770936e-02 	 3.79759980140732034126e-01 	 9.60590160008958360294e-01 
1.15417 	 1.98701279427458063487e-02 	 3.73263212448833536783e-01 	 9.73412931689919602718e-01 
1.16250 	 2.00077048874856416871e-02 	 3.65609151555134292977e-01 	 9.86768125986241861902e-01 
1.17083 	 2.01698019671927436525e-02 	 3.56843835683043619778e-01 	 1.00018386902289435625e+00 
1.17917 	 2.03143209372198992047e-02 	 3.47380300426365751232e-01 	 1.01355082898543069625e+00 
1.18750 	 2.04749106501168828820e-02 	 3.37399974495045273937e-01 	 1.02709492148260639333e+00 
1.19583 	 2.06295997987788991279e-02 	 3.26949515772940735303e-01 	 1.04102252214074630920e+00 
1.20417 	 2.07956193700235998645e-02 	 3.16489816433742465751e-01 	 1.05512593034181656471e+00 
1.21250 	 2.09441109817157383732e-02 	 3.05954262467058035746e-01 	 1.06961611651074206542e+00 
1.22083 	 2.11128368190177939656e-02 	 2.95480945928803528933e-01 	 1.08392751468706372009e+00 
1.22917 	 2.12765268677046551216e-02 	 2.85373749764066320100e-01 	 1.09859358132043749556e+00 
1.23750 	 2.14432727236794837267e-02 	 2.75626623742145915319e-01 	 1.11375676764252795614e+00 
1.24583 	 2.16137497097129253898e-02 	 2.66193113637352318790e-01 	 1.12859794236700938797e+00 
1.25417 	 2.17912350279461028424e-02 	 2.57234842871847335655e-01 	 1.14356984163790009745e+00 
1.26250 	 2.19499839032443952447e-02 	 2.48753812177099797864e-01 	 1.15972106536872199278e+00 
1.27083 	 2.21282912911641670151e-02 	 2.40738873624137733609e-01 	 1.17551318830757756118e+00 
1.27917 	 2.23032513054226000371e-02 	 2.33232797245834150290e-01 	 1.19057000666002288369e+00 
1.28750 	 2.24811133343733628165e-02 	 2.26137962046142004802e-01 	 1.20707773685277808262e+00 
1.29583 	 2.26598164389058484569e-02 	 2.19511333962049359769e-01 	 1.22305765031213597993e+00 
1.30417 	 2.28402210013955303536e-02 	 2.13307263079052844557e-01 	 1.23989254276878058114e+00 
1.31250 	 2.30283700186597814485e-02 	 2.07456927371537758198e-01 	 1.25657412580616223430e+00 
1.32083 	 2.32157602107325618246e-02 	 2.01982211825496776880e-01 	 1.27356160267467211078e+00 
1.32917 	 2.34013779986261757915e-02 	 1.96735582548443227457e-01 	 1.29069957173002713979e+00 
1.33750 	 2.35986391931547537237e-02 	 1.91931439797181357942e-01 	 1.30780441711282624517e+00 
1.34583 	 2.38027334202093251991e-02 	 1.87373443783240861693e-01 	 1.32580480403110234633e+00 
1.35417 	 2.39928998522925575332e-02 	 1.83104537574681869305e-01 	 1.34324997465790985096e+00 
1.36250 	 2.41896548702386256224e-02 	 1.78960337585234802171e-01 	 1.36127160182241757624e+00 
1.37083 	 2.44009391252704502251e-02 	 1.75072469316012391261e-01 	 1.37943583937057434596e+00 
1.37917 	 2.45903808301420091775e-02 	 1.71327523217118499188e-01 	 1.39791894889828194337e+00 
1.38750 	 2.48065835151781745316e-02 	 1.67713399534074686370e-01 	 1.41641207816650527285e+00 
1.39583 	 2.50174403451625254613e-02 	 1.64312805181526744303e-01 	 1.43488264608940285783e+00 
1.40417 	 2.52339275716669739213e-02 	 1.60984302009795521293e-01 	 1.45421293795330375254e+00 
1.41250 	 2.54378759804753662443e-02 	 1.57850439906611461627e-01 	 1.47275966143868641822e+00 
1.42083 	 2.56609429335566650854e-02 	 1.54774513655594858630e-01 	 1.49221520783385774855e+00 
1.42917 	 2.58725274001090320419e-02 	 1.51791505498170525845e-01 	 1.51204878525862640437e+00 
1.43750 	 2.60991416961906981531e-02 	 1.48970678377396748004e-01 	 1.53177031991676360079e+00 
1.44583 	 2.63111843498964916022e-02 	 1.46151973914123711751e-01 	 1.55165141933576755662e+00 
1.45417 	 2.65468679389349905551e-02 	 1.43488418004389189919e-01 	 1.57168116446472705405e+00 
1.46250 	 2.67782101005668501936e-02 	 1.40802407923053651828e-01 	 1.59172668629472124913e+00 
1.47083 	 2.70125002972800218326e-02 	 1.38248256817903619753e-01 	 1.61254547129004666139e+00 
1.47917 	 2.72462304121567286397e-02 	 1.35741900244736202197e-01 	 1.63342264609736309566e+00 
1.48750 	 2.74885270961968651571e-02 	 1.33282662891081066237e-01 	 1.65398484758620534230e+00 
1.49583 	 2.77264974266702365902e-02 	 1.30887701962704966485e-01 	 1.67494357687916517463e+00 
1.50417 	 2.79567482323204233308e-02 	 1.28615166838466604693e-01 	 1.69610641609122003715e+00 
1.51250 	 2.82021427749838543564e-02 	 1.26330011871537167822e-01 	 1.71775279458556950907e+00 
1.52083 	 2.84667322748995456350e-02 	 1.24097747544379355400e-01 	 1.73889197407116546934e+00 
1.52917 	 2.87102578725357895917e-02 	 1.21931269715619183813e-01 	 1.76035668002354062089e+00 
1.53750 	 2.89523750471378307769e-02 	 1.19834111607437690528e-01 	 1.78209272069693525076e+00 
1.54583 	 2.92111244009251695697e-02 	 1.17759085824376205642e-01 	 1.80422287129583236442e+00 
1.55417 	 2.94736109286394473705e-02 	 1.15698450528434013118e-01 	 1.82516303038640570477e+00 
1.56250 	 2.97349363727482871034e-02 	 1.13728598792158283604e-01 	 1.84716180210547142870e+00 
1.57083 	 2.99909387805294344598e-02 	 1.11777743682023408822e-01 	 1.86899975114364513828e+00 
1.57917 	 3.02597654756715794822e-02 	 1.09835694808745568118e-01 	 1.89090029699092432303e+00 
1.58750 	 3.05472711611141506394e-02 	 1.07954458767715658074e-01 	 1.91306883104849534405e+00 
1.59583 	 3.08082292397289826680e-02 	 1.06125575318187573282e-01 	 1.93509804153907327695e+00 
1.60417 	 3.10813762447898177255e-02 	 1.04365221123367268863e-01 	 1.95700569011050573565e+00 
1.61250 	 3.13693197708430002169e-02 	 1.02576983121397846688e-01 	 1.97896034550389932072e+00 
1.62083 	 3.16448562323679016828e-02 	 1.00862660139674598092e-01 	 2.00072944959930598685e+00 
1.62917 	 3.19173267466557469829e-02 	 9.91465664280577751999e-02 	 2.02298452341018109024e+00 
1.63750 	 3.22172574401481948136e-02 	 9.74693770100352463448e-02 	 2.04360250254296271777e+00 
1.64583 	 3.25015548432998138684e-02 	 9.58351069571144603687e-02 	 2.06627487794238717811e+00 
1.65417 	 3.28093757612085770714e-02 	 9.42493011486762455320e-02 	 2.08740736361379752850e+00 
1.66250 	 3.30963308063539768389e-02 	 9.26720685661303333891e-02 	 2.10878851277419032684e+00 
1.67083 	 3.33954147108044899217e-02 	 9.11085579788951799296e-02 	 2.13054219467653549458e+00 
1.67917 	 3.36917145591897684853e-02 	 8.95832000233065944839e-02 	 2.15066956095827688245e+00 
1.68750 	 3.39995791162321439605e-02 	 8.81079624872975336602e-02 	 2.17054066720283955760e+00 
1.69583 	 3.43030054945311912995e-02 	 8.66569507437948138850e-02 	 2.19088308866468972624e+00 
1.70417 	 3.46193409373801164186e-02 	 8.52194214198913752023e-02 	 2.21098268809185283246e+00 
1.71250 	 3.49308450238424439416e-02 	 8.38036552785744737193e-02 	 2.22965132046998171234e+00 
1.72083 	 3.52489602707791102598e-02 	 8.24347436362182633962e-02 	 2.24872718528239978752e+00 
1.72917 	 3.55690655857694992825e-02 	 8.10406893185449950234e-02 	 2.26725836164263006012e+00 
1.73750 	 3.59053284169895681188e-02 	 7.97243579561241338949e-02 	 2.28489548142857534785e+00 
1.74583 	 3.62122130887974694180e-02 	 7.84195391050537538025e-02 	 2.30188397162499969184e+00 
1.75417 	 3.65333285444136152131e-02 	 7.71268884619080163922e-02 	 2.31883758246585802709e+00 
1.76250 	 3.68630181112609978111e-02 	 7.58588569260165018759e-02 	 2.33483275453309824243e+00 
1.77083 	 3.71949547971913915823e-02 	 7.46153555818995367632e-02 	 2.34950556478714567277e+00 
1.77917 	 3.75246645051197438847e-02 	 7.33771606377772583896e-02 	 2.36398293693108385582e+00 
1.78750 	 3.78621714849770862887e-02 	 7.21763942420361875874e-02 	 2.37698644749380560981e+00 
1.79583 	 3.82062902275117771689e-02 	 7.09924853543029282799e-02 	 2.38887217860284728488e+00 
1.80417 	 3.85532228054166897779e-02 	 6.98693529330277340872e-02 	 2.40079015076049673283e+00 
1.81250 	 3.88829226263376834249e-02 	 6.87076004131483009107e-02 	 2.41080933755434312360e+00 
1.82083 	 3.92237244389690015156e-02 	 6.75841214290563152556e-02 	 2.41998291438043677815e+00 
1.82917 	 3.95790559400219996156e-02 	 6.64824092324036164392e-02 	 2.42745053844971092616e+00 
1.83750 	 3.99080310683497668789e-02 	 6.53940057705377636443e-02 	 2.43422152053042628594e+00 
1.84583 	 4.02500671200170384578e-02 	 6.43107573132047916076e-02 	 2.43966700448934536993e+00 
1.85417 	 4.06033603315216901075e-02 	 6.32755049699143812258e-02 	 2.44343096808517135088e+00 
1.86250 	 4.09467782533932747602e-02 	 6.22447267114264596310e-02 	 2.44507322214002753569e+00 
1.87083 	 4.12979003090516924579e-02 	 6.12280479936659835505e-02 	 2.44503371739194719225e+00 
1.87917 	 4.16476520043996059628e-02 	 6.02344433490442088264e-02 	 2.44402836886389884796e+00 
1.88750 	 4.19887737842084343698e-02 	 5.92824106348477583572e-02 	 2.44042768836177614844e+00 
1.89583 	 4.23342245261359231834e-02 	 5.83140662455326613811e-02 	 2.43530619700856298948e+00 
1.90417 	 4.26699752910173549236e-02 	 5.73707522383614734740e-02 	 2.42870143955957784598e+00 
1.91250 	 4.30104702434580335457e-02 	 5.64542587231774903311e-02 	 2.41849163577908754519e+00 
1.92083 	 4.33535485436694484340e-02 	 5.55294814552593912760e-02 	 2.40782543080327249285e+00 
1.92917 	 4.36900525127955283167e-02 	 5.46405202035242024139e-02 	 2.39387345782390426052e+00 
1.93750 	 4.40247338356650336211e-02 	 5.37595160197023094750e-02 	 2.37707049187728713946e+00 
1.94583 	 4.43398414784673816635e-02 	 5.28833229004619306823e-02 	 2.35808866812060946572e+00 
1.95417 	 4.46673739344431303122e-02 	 5.20224629580749442503e-02 	 2.33594872329769165376e+00 
1.96250 	 4.49788671791063396355e-02 	 5.12179527948180973729e-02 	 2.31054720989983097823e+00 
1.97083 	 4.52963142142876890039e-02 	 5.03751963543136241364e-02 	 2.28184885218319610800e+00 
1.97917 	 4.55805246980456116312e-02 	 4.95690522804231245568e-02 	 2.24750112160087311963e+00 
1.98750 	 4.58793785677710924675e-02 	 4.87789579313153004447e-02 	 2.20636240843137798606e+00 
1.99583 	 4.61667132033171598304e-02 	 4.79819420480494668313e-02 	 1.15767384483275992402e+00 
2.00417 	 4.01165330189556446072e+00 	 3.81761422527694449514e+00 	 7.36318795412913118525e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */
double z_focus, x_focus, b_rad, w_rad;


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */ /*ID_EDIT_4_1*/
mus         = 23.8888943003376;  /* cm^-1 */ /*ID_EDIT_4_2*/
g           = 0.9;  /*ID_EDIT_5*/
nt          = 1.36;  /*ID_EDIT_4_3*/
Nphotons    = 100000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

b_rad = 20 * SIGN(2*RandomNum-1) * dr;    /* Set photon position to origin. */ /*ID_EDIT_6_FIXED*/
x = x_start + b_rad * sqrt(-log(RandomNum)); /* log is e base */ /*ID_EDIT_6_DEL*/
y = y_start; /*ID_EDIT_6_DEL*/
z = z_start; /*ID_EDIT_6_DEL*/
ux = 0; /*ID_EDIT_6_DEL*/
uy = 0; /*ID_EDIT_6_DEL*/
uz = -1; /*ID_EDIT_6_DEL*/


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

printf("saving cube into file...\n");
double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);
printf("saving cube completed\n");

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);