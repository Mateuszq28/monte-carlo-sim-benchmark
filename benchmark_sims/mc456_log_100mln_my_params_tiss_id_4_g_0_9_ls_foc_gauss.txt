time elapsed: 3681.9429 seconds

=================================

sim results:

number of photons = 100000000
overflow: 8.46210042941678166389e+07
sum: 1.53789461849108990282e+07
sum: 1.53789957058321833611e+07
avg: 1.53789461849108993752e-01
perc_in: 15.38

number of photons = 100000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 6.15386951656196872634e-03 	 2.42158800657725076233e-01 	 9.29956192075639120898e-02 
0.01250 	 3.98111571249829074987e-03 	 2.42594937155220125025e-01 	 9.30130403993040533184e-02 
0.02083 	 4.21763501966923928799e-03 	 2.42499613605542230221e-01 	 9.30894625204218284509e-02 
0.02917 	 3.97545029312545115940e-03 	 2.42300188940615696120e-01 	 9.31610297608792825574e-02 
0.03750 	 3.91597182353724954096e-03 	 2.42703454457027206770e-01 	 9.31665930006239650929e-02 
0.04583 	 4.01406506229520614049e-03 	 2.42245923345440483665e-01 	 9.33113516560981487435e-02 
0.05417 	 3.99435892646068501505e-03 	 2.42449023634733584753e-01 	 9.33774623662442099237e-02 
0.06250 	 4.06003592780671516971e-03 	 2.42790998669579705105e-01 	 9.34928417862764538082e-02 
0.07083 	 4.03464938785469580396e-03 	 2.43092222044197558972e-01 	 9.36648793708483307086e-02 
0.07917 	 4.00039157448534282019e-03 	 2.43331486659417645102e-01 	 9.38200095386746563131e-02 
0.08750 	 4.01135919011803235984e-03 	 2.43510129557581639359e-01 	 9.40146941991508028336e-02 
0.09583 	 3.98781472240725652634e-03 	 2.43709420874003046542e-01 	 9.42167306103447177446e-02 
0.10417 	 4.02178339170421433185e-03 	 2.44207248782027541711e-01 	 9.44435606260315974048e-02 
0.11250 	 4.01649323505084282493e-03 	 2.44397243840248773461e-01 	 9.46889929658599055484e-02 
0.12083 	 4.03642364831488607152e-03 	 2.44949898518502490186e-01 	 9.49546522423141553526e-02 
0.12917 	 4.03410674713486436943e-03 	 2.45189853370704480273e-01 	 9.52594499890845602952e-02 
0.13750 	 4.03476276956295839410e-03 	 2.45637173251444712596e-01 	 9.55564241368412614630e-02 
0.14583 	 4.00990751087718089174e-03 	 2.45996429935110200171e-01 	 9.58164386822510649733e-02 
0.15417 	 4.04196132634980064696e-03 	 2.46366848021144224656e-01 	 9.62129397276868941757e-02 
0.16250 	 4.03126172085809062612e-03 	 2.46881054687052209351e-01 	 9.66099135398441055678e-02 
0.17083 	 4.06424203614735683743e-03 	 2.47498159998121719516e-01 	 9.68997670205697381185e-02 
0.17917 	 4.04672612677276378329e-03 	 2.47909575963213668626e-01 	 9.73268288767372563575e-02 
0.18750 	 4.05567387872755522049e-03 	 2.48362207933170042740e-01 	 9.77404581669729377591e-02 
0.19583 	 4.06325764233407115550e-03 	 2.49051695277760609670e-01 	 9.82340825038590242935e-02 
0.20417 	 4.07865904613448695959e-03 	 2.49728898943033350566e-01 	 9.86859406413341661013e-02 
0.21250 	 4.06589999323041587087e-03 	 2.50403287551358100238e-01 	 9.91806604679147524317e-02 
0.22083 	 4.07494638412232799279e-03 	 2.51099976066191332702e-01 	 9.96566035357594470767e-02 
0.22917 	 4.09119366346930111306e-03 	 2.51893973496885026364e-01 	 1.00161646845696034047e-01 
0.23750 	 4.10239566939165061638e-03 	 2.52567177101645445880e-01 	 1.00731493871221863823e-01 
0.24583 	 4.10899949310231538818e-03 	 2.53418062981631220243e-01 	 1.01294188450554420444e-01 
0.25417 	 4.11297817490800625417e-03 	 2.54090193312622558697e-01 	 1.01823671312770827613e-01 
0.26250 	 4.12272380274052597376e-03 	 2.54966939898530919884e-01 	 1.02468422247133733594e-01 
0.27083 	 4.12027502006707783966e-03 	 2.55695458147673082561e-01 	 1.03005066498450578716e-01 
0.27917 	 4.13548370814488443908e-03 	 2.56479528211628449164e-01 	 1.03623568585483688542e-01 
0.28750 	 4.14684888457358697550e-03 	 2.57557775994730731028e-01 	 1.04361538351614852038e-01 
0.29583 	 4.15228241753272039882e-03 	 2.58346880041755988522e-01 	 1.05018375553487655627e-01 
0.30417 	 4.15290979560102666707e-03 	 2.59392303936865187275e-01 	 1.05684469264160516011e-01 
0.31250 	 4.16770948827977980033e-03 	 2.60400350695247362331e-01 	 1.06451748541540339166e-01 
0.32083 	 4.18046775657081749050e-03 	 2.61445395722095408342e-01 	 1.07131363638252249948e-01 
0.32917 	 4.19135165117101235466e-03 	 2.62552154443205787437e-01 	 1.07918566784026573324e-01 
0.33750 	 4.19766412880089728743e-03 	 2.63526319574315159855e-01 	 1.08725086074497198640e-01 
0.34583 	 4.21071374058751887043e-03 	 2.64682513493593674081e-01 	 1.09505539113019731423e-01 
0.35417 	 4.22044470306009479599e-03 	 2.65742266338412913562e-01 	 1.10336074059428579375e-01 
0.36250 	 4.23363433047063350556e-03 	 2.66979109009892412452e-01 	 1.11146670753077797533e-01 
0.37083 	 4.24783899254619918412e-03 	 2.68193584503992221713e-01 	 1.12050188206901463195e-01 
0.37917 	 4.26310400026879993823e-03 	 2.69427102821226838181e-01 	 1.12983782027863063901e-01 
0.38750 	 4.28065096952981276324e-03 	 2.70642393010320392310e-01 	 1.13951769038656197663e-01 
0.39583 	 4.29376870151252417601e-03 	 2.71980758775114683790e-01 	 1.14859782236617191664e-01 
0.40417 	 4.30727017180831082965e-03 	 2.73463810147918207072e-01 	 1.15729458795085934919e-01 
0.41250 	 4.31008704783934337018e-03 	 2.74817345786180833311e-01 	 1.16808265673056563272e-01 
0.42083 	 4.32878694497666575980e-03 	 2.76317120279103545233e-01 	 1.17762395253639781667e-01 
0.42917 	 4.34163730045848857142e-03 	 2.77727340618595996968e-01 	 1.18781393781085972683e-01 
0.43750 	 4.35948556411636448105e-03 	 2.79268111374029182059e-01 	 1.19867285296159462038e-01 
0.44583 	 4.38031787758927457915e-03 	 2.80849505444394631493e-01 	 1.20956639912801075520e-01 
0.45417 	 4.38978341611921066973e-03 	 2.82346003142439461175e-01 	 1.22111612320560031231e-01 
0.46250 	 4.40539255442598705337e-03 	 2.83970286943081628994e-01 	 1.23182456783304222769e-01 
0.47083 	 4.41624229836154718470e-03 	 2.85609300774065266726e-01 	 1.24395181331130408320e-01 
0.47917 	 4.44040008170498452095e-03 	 2.87442027820960399609e-01 	 1.25602207201494148192e-01 
0.48750 	 4.44579082400462042429e-03 	 2.89300053619581942765e-01 	 1.26823372225060848617e-01 
0.49583 	 4.46907591106529555880e-03 	 2.91072848987480370386e-01 	 1.27967560495616333727e-01 
0.50417 	 4.48530104118272099356e-03 	 2.92880927713693894887e-01 	 1.29253705686804110098e-01 
0.51250 	 4.49808067481753323658e-03 	 2.94809238806296169955e-01 	 1.30499003743571762026e-01 
0.52083 	 4.51502639178626759969e-03 	 2.96822001900258147788e-01 	 1.31798323602834943635e-01 
0.52917 	 4.54038464149075175064e-03 	 2.98772057754619013714e-01 	 1.33132730817290378944e-01 
0.53750 	 4.55549911201077149803e-03 	 3.00724503657489983244e-01 	 1.34548740634073682454e-01 
0.54583 	 4.57133715689487206413e-03 	 3.02844846957276092603e-01 	 1.35908452862499778968e-01 
0.55417 	 4.58641683764695901743e-03 	 3.04962137962984436435e-01 	 1.37304333047506027521e-01 
0.56250 	 4.61380171412625970234e-03 	 3.07328139580231918249e-01 	 1.38721121769930427758e-01 
0.57083 	 4.63298764570532328050e-03 	 3.09641281486163488790e-01 	 1.40282893123764323962e-01 
0.57917 	 4.65111427208690295099e-03 	 3.11996036866722170622e-01 	 1.41720248649411212361e-01 
0.58750 	 4.66922610082027428335e-03 	 3.14418309062972356482e-01 	 1.43215777943578120857e-01 
0.59583 	 4.69314781087997422160e-03 	 3.16875818261141473098e-01 	 1.44833858071638260645e-01 
0.60417 	 4.70923909345921307135e-03 	 3.19500824382139336777e-01 	 1.46349269502997647585e-01 
0.61250 	 4.72754240284480823503e-03 	 3.22030962335257797680e-01 	 1.48016777152396389328e-01 
0.62083 	 4.76575090386571580126e-03 	 3.24849959385270281587e-01 	 1.49681886278891229658e-01 
0.62917 	 4.77772487958430698562e-03 	 3.27724950794737457382e-01 	 1.51406742666133270481e-01 
0.63750 	 4.80367270606808782762e-03 	 3.30716166554399615407e-01 	 1.53110241521910661611e-01 
0.64583 	 4.82363806936045042689e-03 	 3.33683722482390310304e-01 	 1.54833344066609895906e-01 
0.65417 	 4.85378077732131606864e-03 	 3.36958074514312200254e-01 	 1.56469124424932493067e-01 
0.66250 	 4.87423136721385364539e-03 	 3.40156943426073721248e-01 	 1.58341950730024189076e-01 
0.67083 	 4.89868075903974672936e-03 	 3.43510002298691663469e-01 	 1.60171145381030333166e-01 
0.67917 	 4.91674898571432730104e-03 	 3.47097834804858784707e-01 	 1.62024223502217623594e-01 
0.68750 	 4.94544182656703537604e-03 	 3.50830866398649243720e-01 	 1.63867264981381988154e-01 
0.69583 	 4.96660023491947433261e-03 	 3.54722949975935064604e-01 	 1.65792684645777760322e-01 
0.70417 	 4.99896724241509580328e-03 	 3.58775650492788922286e-01 	 1.67783055094200966861e-01 
0.71250 	 5.02256747261733711013e-03 	 3.63082920020935284722e-01 	 1.69736495376131141244e-01 
0.72083 	 5.05299095364938454650e-03 	 3.67653095568734822329e-01 	 1.71793372686748407885e-01 
0.72917 	 5.07742397453008181135e-03 	 3.72229836222807419777e-01 	 1.73894530224404125773e-01 
0.73750 	 5.10049277704590579147e-03 	 3.77360100327112368834e-01 	 1.76004857666311825826e-01 
0.74583 	 5.12829510557417933558e-03 	 3.82784655542319884880e-01 	 1.78315976130084180573e-01 
0.75417 	 5.15248687520382300103e-03 	 3.88710689488973026862e-01 	 1.80356590863988169859e-01 
0.76250 	 5.18012559289345812102e-03 	 3.95044330914034069746e-01 	 1.82423245272534673145e-01 
0.77083 	 5.21768730375974255226e-03 	 4.01749580389078375653e-01 	 1.84770113095855309515e-01 
0.77917 	 5.24764427081267012531e-03 	 4.09188516769253496363e-01 	 1.87062717887334611921e-01 
0.78750 	 5.28011358952681572609e-03 	 4.17359328446488653253e-01 	 1.89385283970328888170e-01 
0.79583 	 5.30693320390882624510e-03 	 4.26247312067908779021e-01 	 1.91667531198504770273e-01 
0.80417 	 5.33902753534571967303e-03 	 4.35669437356396682670e-01 	 1.94077617872456253956e-01 
0.81250 	 5.36796190302296291619e-03 	 4.45793016307162948131e-01 	 1.96513117518079760693e-01 
0.82083 	 5.39827908837100557682e-03 	 4.56353334005599020617e-01 	 1.98965662258263148443e-01 
0.82917 	 5.43223696971234515374e-03 	 4.67294415803128804221e-01 	 2.01500783256506416086e-01 
0.83750 	 5.46281898761757141875e-03 	 4.78408955728497065074e-01 	 2.03914577689573578434e-01 
0.84583 	 5.49982213233319357920e-03 	 4.89082353963882776604e-01 	 2.06560825582090296093e-01 
0.85417 	 5.52869923340975049503e-03 	 4.99306210185069265783e-01 	 2.09203800580539056586e-01 
0.86250 	 5.56630599560601225378e-03 	 5.08586444389400260668e-01 	 2.11938522486178421156e-01 
0.87083 	 5.59632823203348207797e-03 	 5.16411518733306151852e-01 	 2.14654088204477067059e-01 
0.87917 	 5.62633062099302146131e-03 	 5.22803542157089906617e-01 	 2.17398633393166673677e-01 
0.88750 	 5.66119542544823300956e-03 	 5.27131638333407148700e-01 	 2.20160274979993492162e-01 
0.89583 	 5.69465321142792035153e-03 	 5.29431827569180502024e-01 	 2.22998041599906132726e-01 
0.90417 	 5.72954006777249506138e-03 	 5.29362356309666548526e-01 	 2.25818408952372651211e-01 
0.91250 	 5.77134822716274080434e-03 	 5.27037361925949410235e-01 	 2.28768998281441954257e-01 
0.92083 	 5.80422639837907192173e-03 	 5.22147904122404638017e-01 	 2.31754716693088030910e-01 
0.92917 	 5.84516932903049891285e-03 	 5.15476739279177920139e-01 	 2.34764420946741159124e-01 
0.93750 	 5.88471773302470281541e-03 	 5.06695643480751911625e-01 	 2.37943714222154018012e-01 
0.94583 	 5.91700006522985141877e-03 	 4.96417734287815881622e-01 	 2.41005429446213781386e-01 
0.95417 	 5.96425168391326657180e-03 	 4.84858449005954206257e-01 	 2.44249923138930069566e-01 
0.96250 	 6.00107534435016624907e-03 	 4.72522217289756019110e-01 	 2.47449349660764011949e-01 
0.97083 	 6.04365386765620682397e-03 	 4.59863296161049206479e-01 	 2.50738430480757112928e-01 
0.97917 	 6.08539193158608247153e-03 	 4.47190534822421048577e-01 	 2.53975235842065438785e-01 
0.98750 	 6.12283442720087164174e-03 	 4.34999483235505690626e-01 	 2.57435050894316896919e-01 
0.99583 	 6.15467983077727827379e-03 	 4.23521826916368027138e-01 	 2.60788711483001256486e-01 
1.00417 	 6.20331372765983365958e-03 	 4.13321670423082432322e-01 	 2.64346943292481706411e-01 
1.01250 	 6.24553146559170182378e-03 	 4.04575023640222797283e-01 	 2.67828627230143945237e-01 
1.02083 	 6.29246052188923987725e-03 	 3.97358540824928774260e-01 	 2.71447084409190131371e-01 
1.02917 	 6.33080347759841510769e-03 	 3.91678388603729554784e-01 	 2.75021151792572970951e-01 
1.03750 	 6.38499341586203777998e-03 	 3.87564080868985028072e-01 	 2.78793442538956826038e-01 
1.04583 	 6.42189312336057405856e-03 	 3.85152233227508522528e-01 	 2.82492215905362775707e-01 
1.05417 	 6.46797955349640973227e-03 	 3.83178676746445956436e-01 	 2.86207184042906570554e-01 
1.06250 	 6.51497073060474524153e-03 	 3.79931355157003602940e-01 	 2.90117255134142992823e-01 
1.07083 	 6.56242663944556735289e-03 	 3.75239224898847645306e-01 	 2.93965171399488356396e-01 
1.07917 	 6.60694549759382326881e-03 	 3.69005509475468507219e-01 	 2.97983951751372155847e-01 
1.08750 	 6.65476347900142463365e-03 	 3.61620058885653461456e-01 	 3.02022619965263694475e-01 
1.09583 	 6.70159600503793598247e-03 	 3.53084135069904325732e-01 	 3.06027556322600424732e-01 
1.10417 	 6.75352340945577830217e-03 	 3.43719681890323258688e-01 	 3.10352815852618146852e-01 
1.11250 	 6.79728967156702484215e-03 	 3.33631932090332483654e-01 	 3.14436965258555300995e-01 
1.12083 	 6.85095057440186176040e-03 	 3.23128903705936720847e-01 	 3.18715808438512770984e-01 
1.12917 	 6.90327468380370380674e-03 	 3.12308673835613892500e-01 	 3.22817708938978098487e-01 
1.13750 	 6.95036493508039386613e-03 	 3.01322954048226621104e-01 	 3.27476528320149173901e-01 
1.14583 	 7.00827981738423675534e-03 	 2.90421630493125360051e-01 	 3.32008127604993985571e-01 
1.15417 	 7.05413879985555044433e-03 	 2.79706626184705597904e-01 	 3.36496178269906576208e-01 
1.16250 	 7.11069252986456720733e-03 	 2.69180156764477984677e-01 	 3.41051141709600824647e-01 
1.17083 	 7.16295140551158945191e-03 	 2.59174977026460806595e-01 	 3.45985428160857977353e-01 
1.17917 	 7.22054558290013710070e-03 	 2.49629014406080651511e-01 	 3.50585690237882441345e-01 
1.18750 	 7.27345035642039568213e-03 	 2.40547763397547326170e-01 	 3.55416112199685108042e-01 
1.19583 	 7.32931967116432197401e-03 	 2.31917638223571087597e-01 	 3.60227384313370369018e-01 
1.20417 	 7.38279150603585350432e-03 	 2.23815722543475509321e-01 	 3.65156117977988303736e-01 
1.21250 	 7.44440757750702754997e-03 	 2.16295814440341960250e-01 	 3.70236397546244655476e-01 
1.22083 	 7.49869726813575179780e-03 	 2.09243904196329766343e-01 	 3.75358847975590936841e-01 
1.22917 	 7.55600014080721592985e-03 	 2.02760755278227983167e-01 	 3.80566810498418339748e-01 
1.23750 	 7.62349890064487056840e-03 	 1.96685778583804038444e-01 	 3.85846672594886197505e-01 
1.24583 	 7.68370128402783014732e-03 	 1.91019491641918032210e-01 	 3.90998755147470511417e-01 
1.25417 	 7.73988293388982572657e-03 	 1.85772857732855289914e-01 	 3.96444648073378591580e-01 
1.26250 	 7.79910913886631973480e-03 	 1.80883808201083573497e-01 	 4.01903295528960258221e-01 
1.27083 	 7.86253253020340568680e-03 	 1.76389055322170834605e-01 	 4.07599191275620942321e-01 
1.27917 	 7.92660471165703220398e-03 	 1.72100266088156261812e-01 	 4.13179239274761300749e-01 
1.28750 	 7.99362353483779389252e-03 	 1.68058933890076561690e-01 	 4.19052941597974293320e-01 
1.29583 	 8.05788316166617182845e-03 	 1.64260315418270103072e-01 	 4.24899742746708108942e-01 
1.30417 	 8.12327681360374212471e-03 	 1.60725357614281749719e-01 	 4.30609631641211298980e-01 
1.31250 	 8.18842085651684710446e-03 	 1.57292566346187628890e-01 	 4.36586374160797319188e-01 
1.32083 	 8.25581004551437062922e-03 	 1.54063157865947486513e-01 	 4.42790997564849853063e-01 
1.32917 	 8.32165221547700138804e-03 	 1.51032828581108502508e-01 	 4.49100568743396100224e-01 
1.33750 	 8.39479146626486913418e-03 	 1.48027924153404155660e-01 	 4.55297535715471102247e-01 
1.34583 	 8.46197426846755085261e-03 	 1.45173366619307436798e-01 	 4.61670524810373683611e-01 
1.35417 	 8.52912590720938425248e-03 	 1.42475647454608667086e-01 	 4.68194176329795375135e-01 
1.36250 	 8.59915526733302272577e-03 	 1.39858256046455076138e-01 	 4.74580748309868349910e-01 
1.37083 	 8.67712669553192400551e-03 	 1.37251864611702328878e-01 	 4.81367512596885538390e-01 
1.37917 	 8.74665689663239702412e-03 	 1.34705236192031896358e-01 	 4.88315194105328476137e-01 
1.38750 	 8.81663972969940964997e-03 	 1.32266501103182970711e-01 	 4.95012493982357137945e-01 
1.39583 	 8.89363679840579277047e-03 	 1.29925458206801486272e-01 	 5.02034544885355926702e-01 
1.40417 	 8.96383290743460459105e-03 	 1.27623237117126725471e-01 	 5.09072952613048079762e-01 
1.41250 	 9.04387620234759284643e-03 	 1.25365746849231990412e-01 	 5.16353304726627770904e-01 
1.42083 	 9.12607292905917404091e-03 	 1.23146511271670505705e-01 	 5.23576972603379653393e-01 
1.42917 	 9.19915904212827151287e-03 	 1.21037534373312952174e-01 	 5.30784696610362316527e-01 
1.43750 	 9.27874784550815866202e-03 	 1.18901073767016793314e-01 	 5.38378363815370186707e-01 
1.44583 	 9.35362376397674312456e-03 	 1.16836022280559753694e-01 	 5.45875277616716392259e-01 
1.45417 	 9.44086636141028626157e-03 	 1.14855674337794505524e-01 	 5.53582040665583252625e-01 
1.46250 	 9.51772762572070281373e-03 	 1.12873548539008994318e-01 	 5.61356819297820219816e-01 
1.47083 	 9.60576157933450136550e-03 	 1.10935820904481591276e-01 	 5.69238529653961489174e-01 
1.47917 	 9.69469711862135444247e-03 	 1.09007286762014612980e-01 	 5.77551568810879101257e-01 
1.48750 	 9.77638454241695244173e-03 	 1.07156958011205019621e-01 	 5.85542239795480812248e-01 
1.49583 	 9.86012698237673235191e-03 	 1.05316788068224267971e-01 	 5.93813901348088757359e-01 
1.50417 	 9.95039445237694102075e-03 	 1.03605457137876305618e-01 	 6.02377859207520627294e-01 
1.51250 	 1.00372665986168691649e-02 	 1.01837869859371196735e-01 	 6.10780348006842332964e-01 
1.52083 	 1.01282477211230795971e-02 	 1.00079139878175793488e-01 	 6.19747284944091925141e-01 
1.52917 	 1.02150410527928892090e-02 	 9.84366106562533649260e-02 	 6.28650257173173909742e-01 
1.53750 	 1.03118798232113440677e-02 	 9.67407399865680972528e-02 	 6.37396211283623226329e-01 
1.54583 	 1.03998909758326735231e-02 	 9.51248032248174224534e-02 	 6.46631221289307722699e-01 
1.55417 	 1.04910760737667307918e-02 	 9.35347081959647663751e-02 	 6.55736439088659195384e-01 
1.56250 	 1.05896706076682445286e-02 	 9.19520342509831389854e-02 	 6.65351965751882823419e-01 
1.57083 	 1.06832806394701294861e-02 	 9.04347521976025109369e-02 	 6.74675116781833339452e-01 
1.57917 	 1.07856770837889501952e-02 	 8.89152297511922456996e-02 	 6.84503149584175685227e-01 
1.58750 	 1.08786119371374785658e-02 	 8.74334642212988705223e-02 	 6.94117450197977547965e-01 
1.59583 	 1.09828562759322293646e-02 	 8.59635042562332668536e-02 	 7.04562814134901294061e-01 
1.60417 	 1.10798745719391297099e-02 	 8.45449801988534116459e-02 	 7.14683065702541364672e-01 
1.61250 	 1.11858394213809036327e-02 	 8.31247185831729407113e-02 	 7.25384688792403586888e-01 
1.62083 	 1.12873578503939701184e-02 	 8.17741084062062473237e-02 	 7.35710578179336938121e-01 
1.62917 	 1.13878641080314389755e-02 	 8.04183120504362441983e-02 	 7.46510953514918029761e-01 
1.63750 	 1.14928168046232806465e-02 	 7.91043840266664188832e-02 	 7.57312789172422728967e-01 
1.64583 	 1.16052629739817961263e-02 	 7.77954639009819509665e-02 	 7.68648745845601943927e-01 
1.65417 	 1.17090152059915238864e-02 	 7.64767974853348131425e-02 	 7.79878600500736096635e-01 
1.66250 	 1.18206798659712866012e-02 	 7.52213575116865013070e-02 	 7.91148210357239700663e-01 
1.67083 	 1.19264362005887143703e-02 	 7.39916631208616254467e-02 	 8.02761019096389527583e-01 
1.67917 	 1.20408588426313151870e-02 	 7.27580842253098269978e-02 	 8.15037801953385931952e-01 
1.68750 	 1.21536194709119683283e-02 	 7.15539096701042626192e-02 	 8.26978499778730502534e-01 
1.69583 	 1.22703314136762449416e-02 	 7.03957098589935159616e-02 	 8.39250274950782526595e-01 
1.70417 	 1.23890286234712224123e-02 	 6.92444023736934616275e-02 	 8.52049695644458315869e-01 
1.71250 	 1.25038284478919820009e-02 	 6.80842791147003995045e-02 	 8.64811982964050152134e-01 
1.72083 	 1.26243998800034690905e-02 	 6.69686201084300214426e-02 	 8.78257326239749835928e-01 
1.72917 	 1.27450557000548508196e-02 	 6.59101003502828158842e-02 	 8.91869393046764047384e-01 
1.73750 	 1.28701287770729196763e-02 	 6.47969590624109387234e-02 	 9.05725039955146749016e-01 
1.74583 	 1.29950760374766098593e-02 	 6.37710560637269469053e-02 	 9.19703747332127563574e-01 
1.75417 	 1.31186714041054818675e-02 	 6.27217101738680032907e-02 	 9.34052596176647487169e-01 
1.76250 	 1.32445511502112412555e-02 	 6.16935506122514160099e-02 	 9.48975416459157616877e-01 
1.77083 	 1.33831377069139334512e-02 	 6.06813020590622059780e-02 	 9.63916982147732359643e-01 
1.77917 	 1.35120681336705385223e-02 	 5.96902912763112789007e-02 	 9.79230820240073795979e-01 
1.78750 	 1.36502462467865438855e-02 	 5.87380431212757223025e-02 	 9.95263757713150232220e-01 
1.79583 	 1.37837730986003405981e-02 	 5.77435313539644973213e-02 	 1.01150470740912279410e+00 
1.80417 	 1.39171314653008890844e-02 	 5.68267316420066684324e-02 	 1.02777496170896620598e+00 
1.81250 	 1.40540633902346903672e-02 	 5.58747148151753289524e-02 	 1.04536039236054145718e+00 
1.82083 	 1.42037412225741489780e-02 	 5.49944403393334418917e-02 	 1.06274253911934923877e+00 
1.82917 	 1.43542715480287717128e-02 	 5.40942979409699264970e-02 	 1.08078703509603402111e+00 
1.83750 	 1.44976798544240136069e-02 	 5.32131209311793931804e-02 	 1.09971790381502865230e+00 
1.84583 	 1.46429046220155501673e-02 	 5.23609186247778329859e-02 	 1.11936706068034186323e+00 
1.85417 	 1.47887604419380935122e-02 	 5.15274795576634303540e-02 	 1.13949623819995737861e+00 
1.86250 	 1.49415353676034812214e-02 	 5.06769992075141936794e-02 	 1.16019058179209055837e+00 
1.87083 	 1.51037624685297633409e-02 	 4.98754408308633920277e-02 	 1.18170288202338369388e+00 
1.87917 	 1.52647168816826706711e-02 	 4.90444712460373979934e-02 	 1.20438378031249326838e+00 
1.88750 	 1.54222989644362314804e-02 	 4.82458945224919916184e-02 	 1.22810750163920268108e+00 
1.89583 	 1.55847054706508905686e-02 	 4.74694683754822571720e-02 	 1.25327902372622967953e+00 
1.90417 	 1.57587588645687649846e-02 	 4.67168239951199631976e-02 	 1.27915244648983628117e+00 
1.91250 	 1.59278693236547773393e-02 	 4.59474298269481468138e-02 	 1.30708724721226121623e+00 
1.92083 	 1.60929471220397565800e-02 	 4.52083497280752061309e-02 	 1.33647108176136852897e+00 
1.92917 	 1.62780767170931997545e-02 	 4.44764186087803561898e-02 	 1.36784311712507533620e+00 
1.93750 	 1.64634479415131408653e-02 	 4.37673778117188064241e-02 	 1.40234522584712451021e+00 
1.94583 	 1.66441857573261693670e-02 	 4.30560332841866955089e-02 	 1.43957245521352095174e+00 
1.95417 	 1.68360833263783600533e-02 	 4.23718869101680842282e-02 	 1.48059025325225035452e+00 
1.96250 	 1.70337878439523887630e-02 	 4.16812383626797428038e-02 	 1.52724911954017850135e+00 
1.97083 	 1.72210709836715485099e-02 	 4.10211406225466576614e-02 	 1.58157702374152497882e+00 
1.97917 	 1.74275800158515403737e-02 	 4.03620519550500350681e-02 	 1.64849785469009058048e+00 
1.98750 	 1.76373300018572154446e-02 	 3.97038908879645546790e-02 	 1.74241387445884821084e+00 
1.99583 	 1.78538029022992372763e-02 	 3.90659761583632691995e-02 	 3.69473380292250608292e+00 
2.00417 	 5.55098644757005832417e+00 	 3.10752102483352832252e+00 	 2.20933910199982221911e+02 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */
double z_focus, x_focus, b_rad, w_rad;


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */ /*ID_EDIT_4_1*/
mus         = 23.8888943003376;  /* cm^-1 */ /*ID_EDIT_4_2*/
g           = 0.9;  /*ID_EDIT_5*/
nt          = 1.36;  /*ID_EDIT_4_3*/
Nphotons    = 100000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

w_rad = 20 * SIGN(2*RandomNum-1) * dr;    /* Set photon position to origin. */ /*ID_EDIT_6_FIXED*/
x = x_start + w_rad * sqrt(-log(RandomNum)); /* log is e base */ /*ID_EDIT_6_DEL*/
y = y_start; /*ID_EDIT_6_DEL*/
z = z_start; /*ID_EDIT_6_DEL*/
z_focus = 60 * dr; /*ID_EDIT_6_DEL*/
x_focus = w_rad * sqrt(-log(RandomNum)) * SIGN(2*RandomNum-1); /*ID_EDIT_6_DEL*/
temp = sqrt(pow((x-x_focus),2) + pow(z_focus,2)); /*ID_EDIT_6_DEL*/
sintheta = -(x-x_focus)/temp; /*ID_EDIT_6_DEL*/
costheta = z_focus/temp; /*ID_EDIT_6_DEL*/
ux = sintheta; /*ID_EDIT_6_DEL*/
uy = 0; /*ID_EDIT_6_DEL*/
uz = costheta; /*ID_EDIT_6_DEL*/


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

printf("saving cube into file...\n");
double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);
printf("saving cube completed\n");

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);