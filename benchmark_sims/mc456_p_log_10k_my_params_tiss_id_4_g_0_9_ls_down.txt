time elapsed: 33.1600 seconds

=================================

sim results:

number of photons = 10000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 1.68962221996572820037e-01 	 2.74970077633071519063e-01 
0.01250 	 0.00000000000000000000e+00 	 1.68152120285095629804e-01 	 2.82251547557063997562e-01 
0.02083 	 1.08131652400295661179e-03 	 1.43936017664951898531e-01 	 2.65837622137425233504e-01 
0.02917 	 1.60338890882473182609e-02 	 1.65903718142575817840e-01 	 2.76382089300101052576e-01 
0.03750 	 2.20779648294122977925e-02 	 1.59185161594232515991e-01 	 2.59492713543281239286e-01 
0.04583 	 1.49271599456845724917e-03 	 1.65317224136263651868e-01 	 2.66003900126994818898e-01 
0.05417 	 8.32164889011866200363e-03 	 1.70244140073799732349e-01 	 2.64872849443323288288e-01 
0.06250 	 1.51936847810476890336e-02 	 1.74112884890674057825e-01 	 2.69867922432824758339e-01 
0.07083 	 8.03296146752904838273e-03 	 1.66835932770414557824e-01 	 2.54018679216316434211e-01 
0.07917 	 8.01956229411700770304e-03 	 1.69610489652354284873e-01 	 2.64017036930084603163e-01 
0.08750 	 1.16651709168858370991e-02 	 1.72952652133201212337e-01 	 2.58992848588632751383e-01 
0.09583 	 7.27145114881087850645e-03 	 1.63352400575622141998e-01 	 2.61222732591478601361e-01 
0.10417 	 6.08300314309217875219e-03 	 1.54679892502230686979e-01 	 2.65386351973670275850e-01 
0.11250 	 4.30275169297983893502e-03 	 1.75247664426456145614e-01 	 2.77994219363449757143e-01 
0.12083 	 4.97373968466615756084e-03 	 1.73695664338232136359e-01 	 2.75132925307661313497e-01 
0.12917 	 7.23744994343981061513e-03 	 1.69150436517372104728e-01 	 2.79605090077954088201e-01 
0.13750 	 9.45404809219259519015e-03 	 1.76152887659160761746e-01 	 2.72250821342227722344e-01 
0.14583 	 1.05463460058612384235e-02 	 1.77197536985322867675e-01 	 2.86313579314461164049e-01 
0.15417 	 1.08426993996868867992e-02 	 1.68458721021805757356e-01 	 2.97546474324788201571e-01 
0.16250 	 1.02689578728395545376e-02 	 1.66809437027744839055e-01 	 2.91097037130762292811e-01 
0.17083 	 8.49542101537648780551e-03 	 1.62972832668422829006e-01 	 2.83454484800874650929e-01 
0.17917 	 1.10551646925403871530e-02 	 1.64083371664327043460e-01 	 2.84414725322508554761e-01 
0.18750 	 8.20838212262580031731e-03 	 1.57902546654825726158e-01 	 2.81324063749907093968e-01 
0.19583 	 8.94967640067097398859e-03 	 1.58122895252977874181e-01 	 2.85053930283993672834e-01 
0.20417 	 1.23150781533144047103e-02 	 1.75028074797886762370e-01 	 2.94330568608977716227e-01 
0.21250 	 1.09571546521576145689e-02 	 1.72844459147668577659e-01 	 2.88649917866757421692e-01 
0.22083 	 1.40672996353918972057e-02 	 1.70360487733469484484e-01 	 2.92504814705684679232e-01 
0.22917 	 1.10995369168580809011e-02 	 1.61286749873521151333e-01 	 3.03741566670873375244e-01 
0.23750 	 8.62455371098725352697e-03 	 1.68258386167764201202e-01 	 2.88441064226194587850e-01 
0.24583 	 1.02354462121557240190e-02 	 1.67971975807749862586e-01 	 2.85938586498318492168e-01 
0.25417 	 1.12977159834022969354e-02 	 1.69776958578698150548e-01 	 2.89216873713890210151e-01 
0.26250 	 1.31385528768326893118e-02 	 1.68840714521149543037e-01 	 3.06848169516315993910e-01 
0.27083 	 1.26809021575820263933e-02 	 1.72193626543680561314e-01 	 2.96563753005880836877e-01 
0.27917 	 1.20033665253433952103e-02 	 1.79500441282335859716e-01 	 2.98410372892097208730e-01 
0.28750 	 1.20049215806565402059e-02 	 1.71792959724782562381e-01 	 2.93802253289994708130e-01 
0.29583 	 1.25686482364153456065e-02 	 1.71826624585720344474e-01 	 3.13873748341911340543e-01 
0.30417 	 1.21427484425791955974e-02 	 1.82378352471020965808e-01 	 2.99827342957458664596e-01 
0.31250 	 1.51599501327385581539e-02 	 1.71526467224112522114e-01 	 3.14304978852821936819e-01 
0.32083 	 1.10699881836807904195e-02 	 1.76712474501906802171e-01 	 3.15224790174692459654e-01 
0.32917 	 1.09552213679009868147e-02 	 1.79425011755578039940e-01 	 3.11381556141033744023e-01 
0.33750 	 1.08236420744962109214e-02 	 1.77938981537249796272e-01 	 3.19808692316308651460e-01 
0.34583 	 1.10051328847054590010e-02 	 1.84307211465841808140e-01 	 3.25888923327814106212e-01 
0.35417 	 1.45395723775842613396e-02 	 1.79766908668380298586e-01 	 3.28777741919420496419e-01 
0.36250 	 1.26731374413745507407e-02 	 1.74012576894052500842e-01 	 3.17757448391868813076e-01 
0.37083 	 1.06409450503833682283e-02 	 1.81071913096934516973e-01 	 3.21289714668794357255e-01 
0.37917 	 1.21996271031267877055e-02 	 1.82378069113326268802e-01 	 3.22548750959442354080e-01 
0.38750 	 1.05497190249719905580e-02 	 1.84265727698746994978e-01 	 3.31280054403892687542e-01 
0.39583 	 1.36085255419019068163e-02 	 1.90902930089850930706e-01 	 3.25307666324926414436e-01 
0.40417 	 1.25313037286269562259e-02 	 1.79216057743466161689e-01 	 3.39983556697785627154e-01 
0.41250 	 1.22239711153504290037e-02 	 1.81332142866567486150e-01 	 3.27819311886191788741e-01 
0.42083 	 1.36639231905707550507e-02 	 1.87152319071031802977e-01 	 3.28337077396099408233e-01 
0.42917 	 1.38444282625371558465e-02 	 1.85131123016073095844e-01 	 3.32700095384688088185e-01 
0.43750 	 1.33571697049962127835e-02 	 1.82377740588347408979e-01 	 3.53434127964685707024e-01 
0.44583 	 1.51521215313414163439e-02 	 1.82589147170010235310e-01 	 3.53859491204823517485e-01 
0.45417 	 1.21464427817068159471e-02 	 1.89798679050507818067e-01 	 3.50612120523502601710e-01 
0.46250 	 1.31511295806326887481e-02 	 1.84878716305193729896e-01 	 3.73105160637725030703e-01 
0.47083 	 9.61207387964265781710e-03 	 1.91579823355027989429e-01 	 3.72834364654655747717e-01 
0.47917 	 1.30147101296682558141e-02 	 1.89145359075161223483e-01 	 3.72884246972715993618e-01 
0.48750 	 1.19830424047610902688e-02 	 1.93573678225946316234e-01 	 3.77446030167776946929e-01 
0.49583 	 1.14614917569151059801e-02 	 1.95881879629085181582e-01 	 3.75801823425220060670e-01 
0.50417 	 1.19266678235648501682e-02 	 1.96662994406111374390e-01 	 3.83987522943828540889e-01 
0.51250 	 1.14576420138871714477e-02 	 1.89801234082697056760e-01 	 3.96916161900531361262e-01 
0.52083 	 1.17682031450213574197e-02 	 1.88447992464280122960e-01 	 3.86778265092358464194e-01 
0.52917 	 1.16713341910078642616e-02 	 1.89212399533227576542e-01 	 4.11529607499438954132e-01 
0.53750 	 1.20505257207322875185e-02 	 1.85095813185340685170e-01 	 4.03206030861780584384e-01 
0.54583 	 1.10051260973138172183e-02 	 1.91041548896109913969e-01 	 4.16262279921496003432e-01 
0.55417 	 1.22212538876644554592e-02 	 1.97831578314096812043e-01 	 3.99494809683031582015e-01 
0.56250 	 1.14106354683171703351e-02 	 1.93416309663753782644e-01 	 4.07382297110540358975e-01 
0.57083 	 1.13476279829995037318e-02 	 1.85768541502980444324e-01 	 4.23126678151368895708e-01 
0.57917 	 1.18924793693747834350e-02 	 1.90663702129761386539e-01 	 4.25147606468819883041e-01 
0.58750 	 1.15867042960653525430e-02 	 2.03658225779513590847e-01 	 4.26234168480721320460e-01 
0.59583 	 1.26377294718870644696e-02 	 2.00080412309037281027e-01 	 4.36267804220847876806e-01 
0.60417 	 1.25025416950585478715e-02 	 2.00437837689602188496e-01 	 4.29274324366189619084e-01 
0.61250 	 1.26459182816231491958e-02 	 2.08699675464206396702e-01 	 4.46886472857004557468e-01 
0.62083 	 1.22217013939495116465e-02 	 2.06675864503758910384e-01 	 4.46209825653793523692e-01 
0.62917 	 1.27081841467752490460e-02 	 2.08160421886455559992e-01 	 4.49211085498157691731e-01 
0.63750 	 1.27388352291106059233e-02 	 2.15782402369080805737e-01 	 4.58564155641717707823e-01 
0.64583 	 1.29107094341206554700e-02 	 2.17356419911797799083e-01 	 4.75166646958384897292e-01 
0.65417 	 1.29613644306303312653e-02 	 2.09250443562745774839e-01 	 4.64977537697321585686e-01 
0.66250 	 1.27103256944060202804e-02 	 2.14049747254649119776e-01 	 4.79386295984028099060e-01 
0.67083 	 1.42627369415310699396e-02 	 2.13480038478323280726e-01 	 4.91637218428758515643e-01 
0.67917 	 1.44172414350280490847e-02 	 2.21372509031759506781e-01 	 5.02472786549073680007e-01 
0.68750 	 1.46499440697591964966e-02 	 2.24144018469866590504e-01 	 5.12531274250336066345e-01 
0.69583 	 1.41986625888370684295e-02 	 2.23537912402540089873e-01 	 4.89801793854572176112e-01 
0.70417 	 1.36203545844690750155e-02 	 2.25451857087963947190e-01 	 4.85301095989184305690e-01 
0.71250 	 1.33329373232678755762e-02 	 2.27318642892231054242e-01 	 5.02475381739350579480e-01 
0.72083 	 1.51016635885674391226e-02 	 2.30979112985464196672e-01 	 5.03059225414591804082e-01 
0.72917 	 1.50531981868739818398e-02 	 2.30874084720316063990e-01 	 5.13860020746314538620e-01 
0.73750 	 1.46149326537213016669e-02 	 2.30571504428337181736e-01 	 5.10594193317301159318e-01 
0.74583 	 1.42084657453891410189e-02 	 2.35293307539294116459e-01 	 5.31538497014549249364e-01 
0.75417 	 1.44646335260644447879e-02 	 2.26179674656024093382e-01 	 5.31515597550280216588e-01 
0.76250 	 1.50688539171835739899e-02 	 2.38587898255778113610e-01 	 5.53317185157888857816e-01 
0.77083 	 1.44435110061759894307e-02 	 2.40880720401200565384e-01 	 5.48311303089656032483e-01 
0.77917 	 1.45686153395399604210e-02 	 2.42544280150875118940e-01 	 5.63690101387166464519e-01 
0.78750 	 1.64476432025865738906e-02 	 2.50245701288683286556e-01 	 5.82227389387685367872e-01 
0.79583 	 1.46423259363125529697e-02 	 2.55629585448537033354e-01 	 5.69918095821959846958e-01 
0.80417 	 1.58580000040973966013e-02 	 2.54446126912620251836e-01 	 5.75714091723126708544e-01 
0.81250 	 1.49512771847954226839e-02 	 2.57297935668982347135e-01 	 5.92263568921021943403e-01 
0.82083 	 1.48622663521963578603e-02 	 2.53773036035644161679e-01 	 5.82084923592507852419e-01 
0.82917 	 1.55141456525155103929e-02 	 2.53547414005976745610e-01 	 5.66106472398834270621e-01 
0.83750 	 1.56161878716542870671e-02 	 2.60618620606977269283e-01 	 5.71535483242298747442e-01 
0.84583 	 1.54398175590325231754e-02 	 2.55341627950124661073e-01 	 6.00424894444474110955e-01 
0.85417 	 1.58715718154386238592e-02 	 2.69038914476062707148e-01 	 5.98082674184856277755e-01 
0.86250 	 1.66379855962137807035e-02 	 2.78638934947386784913e-01 	 6.07533455802252264633e-01 
0.87083 	 1.54502533561801623507e-02 	 2.76434094566217702926e-01 	 6.11148504941298020832e-01 
0.87917 	 1.68647146709473248760e-02 	 2.80191525273632557891e-01 	 6.13147541827663844494e-01 
0.88750 	 1.57327656477465882556e-02 	 2.88108586955769574445e-01 	 6.58700069768881291132e-01 
0.89583 	 1.56676141697261843422e-02 	 2.99863590162171789189e-01 	 6.44542586385349225431e-01 
0.90417 	 1.59726311902847716018e-02 	 3.01678200655309813882e-01 	 6.48871133888857754002e-01 
0.91250 	 1.60215692884026032761e-02 	 3.06973961459348188008e-01 	 6.68018147262409267562e-01 
0.92083 	 1.62533131743497726018e-02 	 3.15916552352966562012e-01 	 6.90351553807870610413e-01 
0.92917 	 1.69671425604729642078e-02 	 3.31196837748140349156e-01 	 6.81968460604334358877e-01 
0.93750 	 1.73383748264646087023e-02 	 3.24216697572585976772e-01 	 7.18220129879748592217e-01 
0.94583 	 1.71792473554228594668e-02 	 3.39035828454160970136e-01 	 7.35347268324889502544e-01 
0.95417 	 1.67293284182161855478e-02 	 3.43626485244259760599e-01 	 7.18491887054609534857e-01 
0.96250 	 1.68051680624825908184e-02 	 3.52076080760833298733e-01 	 7.21732763966210000284e-01 
0.97083 	 1.73126323655993091810e-02 	 3.70757719932130913598e-01 	 7.62802740033359683025e-01 
0.97917 	 1.64829754885585169633e-02 	 3.71896629394256994505e-01 	 7.69991700613495644312e-01 
0.98750 	 1.71968399358812841504e-02 	 3.91169660260175411359e-01 	 7.50480255391664963227e-01 
0.99583 	 1.70285621412393090024e-02 	 4.14070642342141803649e-01 	 7.68362815571610568988e-01 
1.00417 	 1.77492876420218340106e-02 	 4.29911184516992561644e-01 	 7.91810698968672732612e-01 
1.01250 	 1.74135310920354273445e-02 	 4.69286343309490205922e-01 	 8.04464587758713989274e-01 
1.02083 	 1.71320422206776810936e-02 	 5.00385277760619029408e-01 	 8.06100845345389060981e-01 
1.02917 	 1.74138079819570294748e-02 	 5.59491661778831250729e-01 	 8.30638440612496364857e-01 
1.03750 	 1.85511174436631016971e-02 	 6.92493142455270938029e-01 	 8.27071695498091008503e-01 
1.04583 	 1.85372579009707265374e-02 	 1.96584931262613937797e+00 	 8.07682874527949401511e-01 
1.05417 	 1.86796461258193560728e-02 	 9.18077536108583114327e-01 	 8.00796674727038970687e-01 
1.06250 	 1.90821427579297049626e-02 	 6.19483373477988763511e-01 	 8.39589077053174759335e-01 
1.07083 	 1.86307855000278806135e-02 	 5.14474327755767846249e-01 	 8.49321184380121385615e-01 
1.07917 	 1.78603529992560280948e-02 	 4.73308588431590682166e-01 	 8.39731118908407014878e-01 
1.08750 	 1.85837703397485481949e-02 	 4.42667807689109349401e-01 	 8.70808195643959503940e-01 
1.09583 	 1.72431198022163639783e-02 	 4.14053527548423783156e-01 	 9.10351512105469939939e-01 
1.10417 	 1.84519091496877576941e-02 	 3.95772138928924321899e-01 	 9.08284699870274825351e-01 
1.11250 	 1.86404798605967099434e-02 	 3.66048299550171596373e-01 	 9.47768631648116310906e-01 
1.12083 	 1.95462269760505041871e-02 	 3.48947540089949714837e-01 	 9.12334308259226678395e-01 
1.12917 	 1.93550428889725581461e-02 	 3.37194800692097118588e-01 	 9.24906161022680306516e-01 
1.13750 	 1.89255276190861271290e-02 	 3.19745095971400772328e-01 	 9.35384656247334800305e-01 
1.14583 	 1.90972172891608962808e-02 	 3.05267600864775723313e-01 	 9.49669736217825688485e-01 
1.15417 	 2.14763470610207646283e-02 	 3.08817068046400411419e-01 	 9.65403489577048357084e-01 
1.16250 	 2.01938582234517105540e-02 	 2.90241508314151186454e-01 	 9.78771780816296566030e-01 
1.17083 	 2.01642714283666764363e-02 	 2.80616642399387661300e-01 	 9.90482308865929694797e-01 
1.17917 	 2.16333549186501911121e-02 	 2.71836598746362900769e-01 	 1.01203473111290120912e+00 
1.18750 	 2.10176049287104475816e-02 	 2.71332062536502160999e-01 	 1.03551658468590757067e+00 
1.19583 	 2.17785578447740636732e-02 	 2.64284939931761664322e-01 	 1.04975610220802439976e+00 
1.20417 	 2.12283965620146501674e-02 	 2.57467630190716334493e-01 	 1.05416721706963212313e+00 
1.21250 	 1.99353808878992531939e-02 	 2.44689770763024588840e-01 	 1.07620650419800067965e+00 
1.22083 	 2.16215130144668879475e-02 	 2.45540939980713135427e-01 	 1.07805125669949886102e+00 
1.22917 	 2.13305481426080516261e-02 	 2.36312172007538623397e-01 	 1.07576067585316015318e+00 
1.23750 	 2.14433364486487330891e-02 	 2.33936960391075476906e-01 	 1.14907070032878233512e+00 
1.24583 	 2.17474346884726117690e-02 	 2.29315096185991107447e-01 	 1.12882245817767024043e+00 
1.25417 	 2.14358165283299283155e-02 	 2.22031742237799173401e-01 	 1.13847236085111580550e+00 
1.26250 	 2.14029854667208141450e-02 	 2.15465497988744703051e-01 	 1.11413832432826698238e+00 
1.27083 	 2.15526786339227671707e-02 	 2.10758319286926038005e-01 	 1.16455633025984384155e+00 
1.27917 	 2.18348860673241960961e-02 	 2.07664584695958998051e-01 	 1.14380832424791178958e+00 
1.28750 	 2.36103177656361747083e-02 	 2.09064329715360069928e-01 	 1.20585808568330321577e+00 
1.29583 	 2.09631313771879608521e-02 	 1.97053513175693612025e-01 	 1.20471449189031387661e+00 
1.30417 	 2.19886408164804009191e-02 	 1.99130719828242264136e-01 	 1.26077551657587449974e+00 
1.31250 	 2.22270268435127357765e-02 	 1.94340664918622313406e-01 	 1.27325867827275107658e+00 
1.32083 	 2.21062604328962873657e-02 	 1.90993828371193330451e-01 	 1.30954754061265443710e+00 
1.32917 	 2.43584558413679243272e-02 	 1.87701964192570458501e-01 	 1.33243076273171512369e+00 
1.33750 	 2.44836199736698026386e-02 	 1.85494543934008465635e-01 	 1.32932333119597423376e+00 
1.34583 	 2.37129880228516901064e-02 	 1.81012195493776228972e-01 	 1.35157136563951940644e+00 
1.35417 	 2.50564388212720055849e-02 	 1.76552031653252367027e-01 	 1.41907294657346039202e+00 
1.36250 	 2.49134166088121160321e-02 	 1.74209585474827510776e-01 	 1.38531736964263219036e+00 
1.37083 	 2.46195801467400804396e-02 	 1.67610399254176367645e-01 	 1.37810241803495259205e+00 
1.37917 	 2.50753546995825561672e-02 	 1.69011207831273241320e-01 	 1.37707528102484944021e+00 
1.38750 	 2.53757037056986135826e-02 	 1.66579503373318699166e-01 	 1.39752188228050377994e+00 
1.39583 	 2.53610835406880251452e-02 	 1.63621073234436031907e-01 	 1.42616326071187904390e+00 
1.40417 	 2.49377759340305774072e-02 	 1.57542942856017359476e-01 	 1.45319692411848366831e+00 
1.41250 	 2.47023618656902511914e-02 	 1.56690694214372178150e-01 	 1.46262466926818768265e+00 
1.42083 	 2.58208901433043466755e-02 	 1.52802392617886334536e-01 	 1.46488426521334913488e+00 
1.42917 	 2.73257905516821435199e-02 	 1.42685405914350055268e-01 	 1.50156410602205370175e+00 
1.43750 	 2.63752034900942913809e-02 	 1.45633138454089705593e-01 	 1.56168605090348644460e+00 
1.44583 	 2.54885197419491386917e-02 	 1.44695281638374168010e-01 	 1.57218580579119837637e+00 
1.45417 	 2.71361511151115251950e-02 	 1.42000788943595773750e-01 	 1.57322628325039581831e+00 
1.46250 	 2.57598131364242081964e-02 	 1.36981491387701354023e-01 	 1.61379220305970694227e+00 
1.47083 	 2.63270612369750356407e-02 	 1.37833113692619746438e-01 	 1.59327805125998800406e+00 
1.47917 	 2.71592680087240946618e-02 	 1.33316418987590168399e-01 	 1.57924794133700840959e+00 
1.48750 	 2.73062360529283433552e-02 	 1.30358473069530328425e-01 	 1.63171273624316337525e+00 
1.49583 	 2.86418655643343005035e-02 	 1.26392841027751445804e-01 	 1.68052441615318115531e+00 
1.50417 	 2.78796443752610013933e-02 	 1.24943524346712298012e-01 	 1.68012671578929784211e+00 
1.51250 	 2.72385895461256105632e-02 	 1.22079863022001910977e-01 	 1.71257557255850367817e+00 
1.52083 	 2.83446235080027954256e-02 	 1.25413430339341241959e-01 	 1.69578237615370408520e+00 
1.52917 	 2.95195680461746295942e-02 	 1.15858835674940430227e-01 	 1.73322137522205199645e+00 
1.53750 	 2.90261564801575291939e-02 	 1.14982821384236752471e-01 	 1.81096954554375355606e+00 
1.54583 	 2.91238994903533394976e-02 	 1.17825083253174159315e-01 	 1.80688041788138109567e+00 
1.55417 	 3.06483166074281235258e-02 	 1.10166150789136607635e-01 	 1.88240682188248764639e+00 
1.56250 	 3.10431355064045184922e-02 	 1.11584693517525021522e-01 	 1.89243505046281756954e+00 
1.57083 	 3.03232829491788778709e-02 	 1.08682897023307578621e-01 	 1.93807922265412280183e+00 
1.57917 	 3.11471332631130873314e-02 	 1.06034916904147902272e-01 	 1.96027923986466823258e+00 
1.58750 	 3.17282883649905242396e-02 	 1.03227896495420815026e-01 	 1.92375886240503279900e+00 
1.59583 	 3.13784825979100123750e-02 	 1.00562003902989374748e-01 	 1.92494103524264237315e+00 
1.60417 	 3.11984602515565784264e-02 	 9.97196205034666244282e-02 	 2.00617923754924420976e+00 
1.61250 	 3.19833593333345503340e-02 	 9.92214715667730090543e-02 	 2.01654690006216696929e+00 
1.62083 	 3.25069252312330109200e-02 	 9.66882844688326387184e-02 	 1.98077514666882681382e+00 
1.62917 	 3.32570353311033017896e-02 	 9.37410297629279881670e-02 	 1.99171756061673876914e+00 
1.63750 	 3.28869760874195629641e-02 	 9.25697746588880765461e-02 	 2.04757431794056010688e+00 
1.64583 	 3.16362114475226274823e-02 	 9.43684349032058583662e-02 	 2.03608039510617366830e+00 
1.65417 	 3.24919869439914549281e-02 	 9.37722940649080849429e-02 	 2.11291917538662277209e+00 
1.66250 	 3.28703641730615503391e-02 	 8.99528962461752928936e-02 	 2.09345839188349369664e+00 
1.67083 	 3.30734732424735541900e-02 	 8.90004175164767208361e-02 	 2.15827173811574413165e+00 
1.67917 	 3.30666061838547908902e-02 	 8.75582585407976982106e-02 	 2.17072466113182249714e+00 
1.68750 	 3.43936124221536215773e-02 	 8.72665712942978649691e-02 	 2.19561265431682395288e+00 
1.69583 	 3.41394138242833572461e-02 	 8.17819311740578674952e-02 	 2.23823516988938520100e+00 
1.70417 	 3.51230192776986124836e-02 	 8.43066062590107911934e-02 	 2.22953343438593876158e+00 
1.71250 	 3.62526820968737673034e-02 	 8.34137969706029019923e-02 	 2.23279004755990850839e+00 
1.72083 	 3.57498683929159261075e-02 	 8.33718980826732430911e-02 	 2.28931010795571410199e+00 
1.72917 	 3.51671358951495816036e-02 	 7.82890582793389216976e-02 	 2.26285902230353208608e+00 
1.73750 	 3.59681801754070731847e-02 	 7.65436930174794583071e-02 	 2.23198447962640766917e+00 
1.74583 	 3.65535067390273041288e-02 	 7.45254857293186079303e-02 	 2.28097783694601297100e+00 
1.75417 	 3.72966658380296453568e-02 	 7.71296393046282807715e-02 	 2.27431909017382860583e+00 
1.76250 	 3.74760197823712851162e-02 	 7.50419428486732986716e-02 	 2.28843225548581319373e+00 
1.77083 	 3.84823815550304829114e-02 	 7.37542574031191389139e-02 	 2.33393984157582012884e+00 
1.77917 	 3.93008196072341109417e-02 	 7.14918531548017904820e-02 	 2.36642893758817507432e+00 
1.78750 	 3.90676550037804826143e-02 	 7.21015483540253798722e-02 	 2.34082103944168906651e+00 
1.79583 	 4.03302263230705046460e-02 	 6.96087818845480682528e-02 	 2.33932118445252745786e+00 
1.80417 	 4.04604436206504117224e-02 	 7.01560671177881289839e-02 	 2.35455638572945336051e+00 
1.81250 	 4.07180344994909626521e-02 	 6.67353716871435520552e-02 	 2.37453444968713833774e+00 
1.82083 	 4.02355700024647905400e-02 	 6.75808587673352861858e-02 	 2.39194048274371517948e+00 
1.82917 	 4.05108120352727710256e-02 	 6.36075128368941700163e-02 	 2.42657788153245590479e+00 
1.83750 	 4.12405353978397490322e-02 	 6.26651749770046756494e-02 	 2.45815543198788644119e+00 
1.84583 	 4.05358311926857090013e-02 	 6.21647648130543364897e-02 	 2.37942915716276059968e+00 
1.85417 	 4.20946103426625695132e-02 	 6.27589752220645696879e-02 	 2.43485836976329084180e+00 
1.86250 	 4.18476057691515024306e-02 	 6.02623022447491343834e-02 	 2.46206953735681643991e+00 
1.87083 	 4.30237477582839436541e-02 	 5.94628587597738761383e-02 	 2.41646136668374733603e+00 
1.87917 	 4.19672843689690572289e-02 	 5.99473369722105728363e-02 	 2.42903901633775332058e+00 
1.88750 	 4.25273134007740916118e-02 	 5.74832378381751052387e-02 	 2.45996334432078223031e+00 
1.89583 	 4.47275309151643624128e-02 	 5.65520532054273952771e-02 	 2.44196846341070950004e+00 
1.90417 	 4.37727466794496575253e-02 	 5.73849614543376768117e-02 	 2.43208573160684693448e+00 
1.91250 	 4.33730305708405206033e-02 	 5.53805681782740463759e-02 	 2.37215254302278744092e+00 
1.92083 	 4.32331201448019827871e-02 	 5.50987307351648442078e-02 	 2.31734381970652947302e+00 
1.92917 	 4.43418403331589938698e-02 	 5.43461691993095755149e-02 	 2.33412097456651101979e+00 
1.93750 	 4.48682652110056548467e-02 	 5.39203764892728226732e-02 	 2.36654278994230082844e+00 
1.94583 	 4.60208514155515321931e-02 	 5.19115576134407535891e-02 	 2.29303347416098279865e+00 
1.95417 	 4.42501768886382693124e-02 	 5.10500881449501564546e-02 	 2.33501386954055467626e+00 
1.96250 	 4.49606686652880699340e-02 	 4.96919177306290593688e-02 	 2.24829215019379136109e+00 
1.97083 	 4.69387174117265257300e-02 	 4.84548211991596283754e-02 	 2.23208280472248876691e+00 
1.97917 	 4.70831059085227363048e-02 	 4.96606414709463775403e-02 	 2.19729334960184852221e+00 
1.98750 	 4.69173511495584172337e-02 	 4.92315864062727731598e-02 	 2.22397641438234616729e+00 
1.99583 	 4.87805523391194317817e-02 	 4.81063256753154061540e-02 	 1.12333263229704560793e+00 
2.00417 	 3.97666041680872384134e+00 	 3.76839809817956084004e+00 	 7.32493109678520539774e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math
import json
from tqdm import tqdm

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 0.01 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = 10000 # set number of photons in simulation ID_EDIT_1_3
    z_size = 2.0 # cm, total range over which bins extend
    xy_size = 1.5 # cm
    NR_z          = 240 # set number of bins.
    NR_xy = 180
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = z_size/NR_z  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    InitRandomGen()
    Csph = [0 for _ in range(0,NR_z+1)]
    Ccyl = [0 for _ in range(0,NR_z+1)]
    Cpla = [0 for _ in range(0,NR_z+1)]

    # [x][y][z]
    # it could be done in numpy array, but list is easier to save
    Cube = [[[0 for _ in range(0,NR_z+1)] for _ in range(0,NR_xy+1)] for _ in range(0,NR_xy+1)]
    cube_overflow = 0

    # start pos
    x_start = 89 * dr
    y_start = 89 * dr
    z_start = 239 * dr

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    print("(1 iter = 1 photon) Simulation progerss:")
    for i_photon in tqdm(range(0,Nphotons)):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements a point source [0,0,-1].
        # *****
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = x_start                     # Set photon position to origin.
        y = y_start
        z = z_start

        # source - vartical down [0,0,-1]
        # psi - berween x-y axis
        # theta between z and R
        ux = 0
        uy = 0
        uz = -1


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Cpla[ir] += absorb # DROP absorbed weight into bin

            # --- cube ---
            ix = int(x/dr)
            iy = int(y/dr)
            iz = int(z/dr)
            ix_is_in = (0 <= ix < NR_xy)
            iy_is_in = (0 <= iy < NR_xy)
            iz_is_in = (0 <= iz < NR_z)
            is_in = ix_is_in and iy_is_in and iz_is_in
            if (not is_in):
                cube_overflow += absorb
            else:
                Cube[ix][iy][iz] += absorb
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz)
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    print("saving data...")
    file = open("mc456_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR_z+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:.20e} \t {Fcyl:.20e} \t {Fpla:.20e} \n")

    file.close()


    with open('mc456_p_cube.json', 'w') as f:
        data = {
            "n_photons": Nphotons,
            "overflow": cube_overflow,
            "bins_per_1_cm": NR_z/z_size,
            "mu_a": mua,
            "name": f"my_{ Nphotons // 1_000_000 }mln_cube",
            "photon_weight": W,
            "normalized_already": False,
            "cube": Cube
        }
        json.dump(data, f)

    print("done")
    # end of main


main()
