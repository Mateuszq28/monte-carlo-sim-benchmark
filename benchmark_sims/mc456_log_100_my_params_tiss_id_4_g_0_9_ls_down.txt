time elapsed: 11.1367 seconds

=================================

sim results:

number of photons = 100
overflow: 4.80837619605841837256e+01
sum: 5.20851254499940665710e+01
sum: 5.19162380394158162744e+01
avg: 5.20851254499940630183e-01
perc_in: 52.09

number of photons = 100
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 1.69150453527189936764e-01 
0.01250 	 0.00000000000000000000e+00 	 3.79268617996003254422e-01 	 1.15620121748657295191e-01 
0.02083 	 0.00000000000000000000e+00 	 6.16207704924374502498e-02 	 1.08757136467236253941e-01 
0.02917 	 0.00000000000000000000e+00 	 6.97987571108055759872e-02 	 1.61458093278902758971e-01 
0.03750 	 0.00000000000000000000e+00 	 1.52420877196681042731e-01 	 1.16256809900120633428e-01 
0.04583 	 0.00000000000000000000e+00 	 7.01081246509359656827e-02 	 2.03665824994016697591e-01 
0.05417 	 0.00000000000000000000e+00 	 5.58457992741537012638e-02 	 1.91574020466383804218e-01 
0.06250 	 0.00000000000000000000e+00 	 4.80764768031837819162e-01 	 2.35440419344423362835e-01 
0.07083 	 0.00000000000000000000e+00 	 3.69993001711983682256e-01 	 1.50480943923918641936e-01 
0.07917 	 0.00000000000000000000e+00 	 4.26411633010620683137e-01 	 1.98532828113624354449e-01 
0.08750 	 0.00000000000000000000e+00 	 5.73978918412683558614e-01 	 2.03659870251313185330e-01 
0.09583 	 0.00000000000000000000e+00 	 5.20715374508037953660e-01 	 1.92328257979457600824e-01 
0.10417 	 0.00000000000000000000e+00 	 1.98612756384788397002e-01 	 1.97888322464400995271e-01 
0.11250 	 0.00000000000000000000e+00 	 5.08047238463153583155e-01 	 1.48103262386867828848e-01 
0.12083 	 0.00000000000000000000e+00 	 4.62876135351564077514e-01 	 1.16591255890828471298e-01 
0.12917 	 0.00000000000000000000e+00 	 2.74944382188401115208e-01 	 1.47835764565722782571e-01 
0.13750 	 1.12082468432891185772e-01 	 4.81931792627573574173e-01 	 1.97742580899360254065e-01 
0.14583 	 0.00000000000000000000e+00 	 3.27352095817111055087e-01 	 1.93971721547161940480e-01 
0.15417 	 2.14462135553790053666e-02 	 1.38293815723713242605e-01 	 1.74527892143792856539e-01 
0.16250 	 2.08448909335178268754e-02 	 3.23634736727208272011e-01 	 2.49405363747894986970e-01 
0.17083 	 1.91529679126326325689e-02 	 1.72014162230066797177e-01 	 1.51308738118899055447e-01 
0.17917 	 1.56365957968214626395e-02 	 2.03932130503589381654e-01 	 1.89136507269492437633e-01 
0.18750 	 1.61455825826728009698e-02 	 3.46190776811936051782e-01 	 2.26833062935675289218e-01 
0.19583 	 0.00000000000000000000e+00 	 3.04218499653224616619e-01 	 1.43399819230990710484e-01 
0.20417 	 0.00000000000000000000e+00 	 2.73910632751365401560e-01 	 2.09141426848464484500e-01 
0.21250 	 2.65303849731654411981e-02 	 3.12054001117881840699e-01 	 1.57962429272306970063e-01 
0.22083 	 2.45716740984085781074e-02 	 2.05626977069609750970e-01 	 1.81759142001697487911e-01 
0.22917 	 6.08419436244256595092e-02 	 2.08381821333742500713e-01 	 1.82569468356993946934e-01 
0.23750 	 3.09644148403833939509e-02 	 1.70482099896529487593e-01 	 2.21527511375567115470e-01 
0.24583 	 1.02996969064537337996e-02 	 2.15040405109587745569e-01 	 2.03342059070212965999e-01 
0.25417 	 7.09984672936345012628e-02 	 2.60179904911625237141e-01 	 2.22573941498634880753e-01 
0.26250 	 5.32677736357516154464e-02 	 1.42055609817631767200e-01 	 3.38680408057025039703e-01 
0.27083 	 2.75465155901667771432e-02 	 1.99753648792752813712e-01 	 2.44801174034097540622e-01 
0.27917 	 3.60088714453229083445e-02 	 2.70513539633633226522e-01 	 2.82270095279014199274e-01 
0.28750 	 4.00182337260670678569e-02 	 2.38118845337853407562e-01 	 3.39173598525250752367e-01 
0.29583 	 5.67981302565472093158e-02 	 1.27732391249488597129e-01 	 2.82897027253760924292e-01 
0.30417 	 2.37422734279682107195e-02 	 2.57080220982098095472e-01 	 2.13698853618717488079e-01 
0.31250 	 4.90787768322869175086e-02 	 1.03295154457302557072e-01 	 2.66273979773416991090e-01 
0.32083 	 7.27187588679507369849e-03 	 1.45130273097823947470e-01 	 2.66899063671483471882e-01 
0.32917 	 0.00000000000000000000e+00 	 1.79577424822570885787e-01 	 2.21344020292490367696e-01 
0.33750 	 9.95134106323757039458e-03 	 1.06541729531185583313e-01 	 2.94607608902811068941e-01 
0.34583 	 8.57307350767462159058e-03 	 1.59359358064302319979e-01 	 2.29826553319325638247e-01 
0.35417 	 3.29794020926147748995e-02 	 1.96686388353414176589e-01 	 3.41550191426205296263e-01 
0.36250 	 6.86358614733417575493e-03 	 1.52016976737929937480e-01 	 3.67924551343026873251e-01 
0.37083 	 1.64746720841517924061e-02 	 2.58060950324573268322e-01 	 2.73807856332212939954e-01 
0.37917 	 3.38568406651724518666e-03 	 1.48223775729365320197e-01 	 1.95318521575824799452e-01 
0.38750 	 3.72252735127014079339e-03 	 1.83752400064548071512e-01 	 1.58172272949993475422e-01 
0.39583 	 1.55627979393157048205e-02 	 1.73275600025025400264e-01 	 2.41417443586900648533e-01 
0.40417 	 3.58331663781382694575e-03 	 2.25809344720917432037e-01 	 1.79788090981974041371e-01 
0.41250 	 0.00000000000000000000e+00 	 2.28498924008592729784e-01 	 2.74567898210882122001e-01 
0.42083 	 1.34758841293191999194e-02 	 2.47351812154808808897e-01 	 3.02457027066617922806e-01 
0.42917 	 2.08938548733596900220e-02 	 1.78715523794875347230e-01 	 3.13805926916258415282e-01 
0.43750 	 8.40083184776676920869e-03 	 2.61981571961238668411e-01 	 4.18084992243165143311e-01 
0.44583 	 1.56042253399356050519e-02 	 2.05448898493243575780e-01 	 3.77365296930220306404e-01 
0.45417 	 5.49539169395687945169e-03 	 2.16681710199269322858e-01 	 4.24228920532786046849e-01 
0.46250 	 1.13445415526405146006e-02 	 2.00629836927032068061e-01 	 3.62911367777872806428e-01 
0.47083 	 1.16314282652182753725e-02 	 3.22735271773738396917e-01 	 2.40689483899940104283e-01 
0.47917 	 1.06569161041697342551e-02 	 3.03028331626231828277e-01 	 4.72883614260581730537e-01 
0.48750 	 1.87527995391845274387e-02 	 1.75781853674727900350e-01 	 3.40144832506135252892e-01 
0.49583 	 5.98731259578904554536e-03 	 2.41515962185932575590e-01 	 4.36700388341060508068e-01 
0.50417 	 2.00486908766411633942e-02 	 1.73714939773316451310e-01 	 4.13742427254840561268e-01 
0.51250 	 7.38623641106429720121e-03 	 2.23343234397939099933e-01 	 2.71308892194873474413e-01 
0.52083 	 7.73809643794898423252e-03 	 1.62206551174908342183e-01 	 3.73019187756502113018e-01 
0.52917 	 1.40175600559561651381e-03 	 1.56197697091288639770e-01 	 2.64105367316520123211e-01 
0.53750 	 0.00000000000000000000e+00 	 2.28099459973669038693e-01 	 2.43213582329696587081e-01 
0.54583 	 7.66993944779199247203e-03 	 1.99872447315353779507e-01 	 4.59748877932673993829e-01 
0.55417 	 1.29960917808520561717e-02 	 1.16924917659753546673e-01 	 3.38270875473304089009e-01 
0.56250 	 0.00000000000000000000e+00 	 2.79054568956790427503e-01 	 4.45473377785926327732e-01 
0.57083 	 1.71183329752649729394e-02 	 1.99666266125963109968e-01 	 5.65472461939235837569e-01 
0.57917 	 1.72103229610244962133e-02 	 1.86371189676114545897e-01 	 6.14552587804850891651e-01 
0.58750 	 1.88849179714156408319e-03 	 2.54463433681328454750e-01 	 5.78897904501825877333e-01 
0.59583 	 1.45760564332057824394e-02 	 2.02664915004246382058e-01 	 3.46313075382048196627e-01 
0.60417 	 1.79592938346186808962e-02 	 2.12717440191250495296e-01 	 3.94984282782010476254e-01 
0.61250 	 1.41427552053890025902e-02 	 2.15820273438688980949e-01 	 3.60239361473507990752e-01 
0.62083 	 1.77094735589250224655e-03 	 1.89871159109151310673e-01 	 5.13399052558908497446e-01 
0.62917 	 0.00000000000000000000e+00 	 1.68683784984827611630e-01 	 3.69932945998091733397e-01 
0.63750 	 2.09617885339254475530e-02 	 2.70991547641755148312e-01 	 3.88469048217335910511e-01 
0.64583 	 9.54226681292972417348e-03 	 2.93686731983049342798e-01 	 3.21905808731099751796e-01 
0.65417 	 4.50526168291737368066e-03 	 1.99480814540886536301e-01 	 4.87595148492931840245e-01 
0.66250 	 8.65930830497699775827e-03 	 3.21035867362137739001e-01 	 5.63764706690181194304e-01 
0.67083 	 2.22741053779541408469e-03 	 2.11071295135840747426e-01 	 4.12196842528051943244e-01 
0.67917 	 3.17291984584810093581e-03 	 2.63345800838236887564e-01 	 4.61816059711692317169e-01 
0.68750 	 1.09765553493262092710e-02 	 2.89932108474480587645e-01 	 4.21641197599469552681e-01 
0.69583 	 6.80719580793445050437e-03 	 2.33845060076473876265e-01 	 3.55548935022028722575e-01 
0.70417 	 9.40446346413139656895e-03 	 2.85312657200243180444e-01 	 5.96619382261327713124e-01 
0.71250 	 8.97203024494323472804e-03 	 2.76513729180093759119e-01 	 4.65217704072452331587e-01 
0.72083 	 8.53680135603962844670e-03 	 2.67947970932080670181e-01 	 3.58013888475318953208e-01 
0.72917 	 1.13505954130129638885e-02 	 2.28415945954335897206e-01 	 4.54578962218968041231e-01 
0.73750 	 2.08260773369377295838e-02 	 2.32893218534351992277e-01 	 4.05930112489803929243e-01 
0.74583 	 8.64856524332229849306e-03 	 2.93881097958760828526e-01 	 4.73902158169723586312e-01 
0.75417 	 9.37286590873571273663e-03 	 2.42594983807140784915e-01 	 4.95624548877861614837e-01 
0.76250 	 4.61332814719040296830e-03 	 3.56168338543283613529e-01 	 5.95755883229950544688e-01 
0.77083 	 2.83620774437004681545e-03 	 2.47613578187110078277e-01 	 5.60467593321855028776e-01 
0.77917 	 1.02257048842131197802e-02 	 2.78206812640413858606e-01 	 4.30478276775688450950e-01 
0.78750 	 1.01880918483239716471e-02 	 2.20898224284472727286e-01 	 3.94646406265091842513e-01 
0.79583 	 1.05859609287637500968e-02 	 3.49815840884462658789e-01 	 4.68704918857913099828e-01 
0.80417 	 1.38851040232214652248e-02 	 4.21239811513237472074e-01 	 4.43433002313366131375e-01 
0.81250 	 2.34408035783180666856e-02 	 2.86649564347134178099e-01 	 5.87243421414196276054e-01 
0.82083 	 7.41812347913202788097e-03 	 3.48199427424980501034e-01 	 4.92228210543868394122e-01 
0.82917 	 4.99314553270459055706e-03 	 2.28414140922483882568e-01 	 2.00965997052394845790e-01 
0.83750 	 1.52782084088298013291e-02 	 2.80551373446208784923e-01 	 2.90659084220738606064e-01 
0.84583 	 1.50888455234417396406e-02 	 1.92749703730998950268e-01 	 4.28995690380261640584e-01 
0.85417 	 1.95869006192840935943e-02 	 2.33502877672547515253e-01 	 4.04640694430619896060e-01 
0.86250 	 6.70563921576996027629e-03 	 3.26994210219709757759e-01 	 6.13353047182780053426e-01 
0.87083 	 1.37160921826389725631e-02 	 3.80721141376034022397e-01 	 4.74858184705319430474e-01 
0.87917 	 2.10788230070822028839e-02 	 3.16978114781798270272e-01 	 6.53748011057289080128e-01 
0.88750 	 2.10985923057058835650e-02 	 3.25772335353651520951e-01 	 4.11583991860155096187e-01 
0.89583 	 2.48670064831658307880e-02 	 3.67764656415640600606e-01 	 6.66007312644400495394e-01 
0.90417 	 2.42212761766629793014e-02 	 3.61494170405975201454e-01 	 5.56603360859307394470e-01 
0.91250 	 1.88743266455005213877e-02 	 3.21546427671631440681e-01 	 4.97419185401761720922e-01 
0.92083 	 2.84591397422702188647e-02 	 3.61617324615043311820e-01 	 4.44169366713106750222e-01 
0.92917 	 2.47066049485635264027e-02 	 4.45990817700929964573e-01 	 5.02632819444557288335e-01 
0.93750 	 2.72230000363073952607e-02 	 3.28386307609472238855e-01 	 5.51885558845935930705e-01 
0.94583 	 2.56432857365642905001e-02 	 3.22494605889494023732e-01 	 3.90370180184524240286e-01 
0.95417 	 2.64075792105084999895e-02 	 3.11312703646207278307e-01 	 2.91147477631372886275e-01 
0.96250 	 1.89375908051588395797e-02 	 3.28232731389531295907e-01 	 4.92147797118784202652e-01 
0.97083 	 1.65714413174754653102e-02 	 3.59674559750331801489e-01 	 7.49664697839878324537e-01 
0.97917 	 1.36192376434100207577e-02 	 2.69776072216115270219e-01 	 6.06118924028989258801e-01 
0.98750 	 1.94562131137056733288e-02 	 3.17801105339117762050e-01 	 5.10042647122609604793e-01 
0.99583 	 2.24373787384979130055e-02 	 3.41725148779686016542e-01 	 8.19988371596593768054e-01 
1.00417 	 3.17621350251046444257e-02 	 3.88848936572597669858e-01 	 6.22913461783124344784e-01 
1.01250 	 2.24718632108622876076e-02 	 3.87979211855651817675e-01 	 7.31142761316320166642e-01 
1.02083 	 3.07544444262523794520e-02 	 3.23292263081581154882e-01 	 7.16944563320942696016e-01 
1.02917 	 2.64127319933226203941e-02 	 5.18787025391023393084e-01 	 6.54660012140792058055e-01 
1.03750 	 2.14319794826310708324e-02 	 7.34348098535755111627e-01 	 7.12279629658567947637e-01 
1.04583 	 2.32065614147181492610e-02 	 2.00449146539724720739e+00 	 6.06055992693291578632e-01 
1.05417 	 2.43395017776276735566e-02 	 8.35102065204948229571e-01 	 6.10534888635716144201e-01 
1.06250 	 1.58289200714022831873e-02 	 5.98980768073023139841e-01 	 5.85522495265836218081e-01 
1.07083 	 1.47400030849797140237e-02 	 5.87884944747191773295e-01 	 8.92309532874811295322e-01 
1.07917 	 1.69394340872019641409e-02 	 5.74753024857939887049e-01 	 6.59883783838504323072e-01 
1.08750 	 1.47397281655279165785e-02 	 5.77202712762913905387e-01 	 7.76965961052009768117e-01 
1.09583 	 7.81775872524896955906e-03 	 4.42732264622920257402e-01 	 7.18518240491113902024e-01 
1.10417 	 1.32718371752218906867e-02 	 4.63730547816081362100e-01 	 8.60390206973819959835e-01 
1.11250 	 1.52423813986755501970e-02 	 3.49953663781549073608e-01 	 9.20015248051911149751e-01 
1.12083 	 2.35706462306401118290e-02 	 4.11911343725172296448e-01 	 7.71583293296984606968e-01 
1.12917 	 1.96270470534672843155e-02 	 4.09267147731187663773e-01 	 1.18968265870505174320e+00 
1.13750 	 1.80653697140102063867e-02 	 4.11187617596198706771e-01 	 1.08142299101360661595e+00 
1.14583 	 1.51669501029388278240e-02 	 3.23989685118031667255e-01 	 9.29669059996954372238e-01 
1.15417 	 2.07937121023933982333e-02 	 3.96247237304768407107e-01 	 9.01624028974074898102e-01 
1.16250 	 2.51057916251849685962e-02 	 3.85870491554615890895e-01 	 6.30778204140227893859e-01 
1.17083 	 2.93561201704169820459e-02 	 2.83821638126647346478e-01 	 1.24294782394960079408e+00 
1.17917 	 2.04824304897157499772e-02 	 2.64845297833453563463e-01 	 1.43865199419588996044e+00 
1.18750 	 3.23219038635708041940e-02 	 2.69803205667572432169e-01 	 1.41057989555277174532e+00 
1.19583 	 2.98214652668181319506e-02 	 2.96461207615459076958e-01 	 1.38785067645769322198e+00 
1.20417 	 2.87796357821419566958e-02 	 2.28860488299382158761e-01 	 1.05114242761428666739e+00 
1.21250 	 2.68505798039683947487e-02 	 2.50987814671764342123e-01 	 1.08468494201718312908e+00 
1.22083 	 2.18160239726565181873e-02 	 2.11145426951644066271e-01 	 8.51022182922338443767e-01 
1.22917 	 1.97830477117761846517e-02 	 2.09816546899502048840e-01 	 6.02925162896855826311e-01 
1.23750 	 1.97114542633477010658e-02 	 2.28168725775683450818e-01 	 1.18441062034171173956e+00 
1.24583 	 1.61727778657592448364e-02 	 2.93844567843502324500e-01 	 1.22259332300281875483e+00 
1.25417 	 2.59783505087904306730e-02 	 1.83656132018870099643e-01 	 1.01286947236912161507e+00 
1.26250 	 1.86024302738104288513e-02 	 2.10792239496053052106e-01 	 7.78127552535915145704e-01 
1.27083 	 1.72712243188079365985e-02 	 2.30811765637508797822e-01 	 1.15859548206164020279e+00 
1.27917 	 1.50176381447503452110e-02 	 1.37262823957152002574e-01 	 1.13140991001082746870e+00 
1.28750 	 2.51156956925176651219e-02 	 1.88730543451220783568e-01 	 1.33601432025233446410e+00 
1.29583 	 1.99182322732968618284e-02 	 1.64774692395980110193e-01 	 1.15588112983727597793e+00 
1.30417 	 2.38764625795328359892e-02 	 1.80839478253002450270e-01 	 1.08248819786008665389e+00 
1.31250 	 2.91823924156157550602e-02 	 2.02282815282684935720e-01 	 1.58278729921257244051e+00 
1.32083 	 2.60255587183608680379e-02 	 1.83222696545045443672e-01 	 1.42244196950497214793e+00 
1.32917 	 3.03035445297325962966e-02 	 1.60854189736333669236e-01 	 1.59602690039833072788e+00 
1.33750 	 3.15989694096974194082e-02 	 1.67620465528079187756e-01 	 1.38428527259523392878e+00 
1.34583 	 3.10710959167646329215e-02 	 1.36760157196085530007e-01 	 1.32193207417916802626e+00 
1.35417 	 2.02529711543121028472e-02 	 1.89836748187821729994e-01 	 1.59875247194645120352e+00 
1.36250 	 2.20693823139715833426e-02 	 1.12912767027383953433e-01 	 1.51142846076610282147e+00 
1.37083 	 2.05884354005607048133e-02 	 1.03704760344718052711e-01 	 1.67744779945383148956e+00 
1.37917 	 3.24720485936021846518e-02 	 1.41640392346982862959e-01 	 1.38609119096340949184e+00 
1.38750 	 3.69741685415987050844e-02 	 1.29775904786101486943e-01 	 1.49451614639489416270e+00 
1.39583 	 3.66133795832719391439e-02 	 1.18900805232636103126e-01 	 1.74685445814718898205e+00 
1.40417 	 3.90849708651678784399e-02 	 1.20304191606317278929e-01 	 1.23211015716142946452e+00 
1.41250 	 2.75051628069673953503e-02 	 1.64150413948491502580e-01 	 1.32567226191685216818e+00 
1.42083 	 3.70841218247696738364e-02 	 1.45078614326016597236e-01 	 1.86681707350909475984e+00 
1.42917 	 3.33846417897582098400e-02 	 1.17124560130710528294e-01 	 1.86550564026190701661e+00 
1.43750 	 3.59549859574360072823e-02 	 1.11682604294627549346e-01 	 1.95047771824702853571e+00 
1.44583 	 2.73659946960462668875e-02 	 1.61827669904765658604e-01 	 1.91142323252828272295e+00 
1.45417 	 2.57519786454958321542e-02 	 1.16842367008231168279e-01 	 2.13981903426635611254e+00 
1.46250 	 3.02173603023029903325e-02 	 1.21085158359856434607e-01 	 2.30590951272495914282e+00 
1.47083 	 3.07052380924355619585e-02 	 1.23164513312380860532e-01 	 2.03037887428770114084e+00 
1.47917 	 2.63674985529858546540e-02 	 1.34528397160038948321e-01 	 2.29291580118695703661e+00 
1.48750 	 2.13531044992783733405e-02 	 1.06815656951489423854e-01 	 1.68357698826577895090e+00 
1.49583 	 3.11185629674293334768e-02 	 1.18178045792623989674e-01 	 2.00849205797788377126e+00 
1.50417 	 3.03718755560193932885e-02 	 1.68698247172800963600e-01 	 1.84219904660115374462e+00 
1.51250 	 2.15828673183679140002e-02 	 1.05654051011580124575e-01 	 1.53703688240598257408e+00 
1.52083 	 2.47153636073426247188e-02 	 9.87290676637214842382e-02 	 2.21914116269794003955e+00 
1.52917 	 2.72320902739089203137e-02 	 8.33923017496843860252e-02 	 1.74153581670239354651e+00 
1.53750 	 2.84901215683903176468e-02 	 1.05504032909080128211e-01 	 1.62328346146797741767e+00 
1.54583 	 3.87794429578012175841e-02 	 8.87915180665414943695e-02 	 1.64753535366498882198e+00 
1.55417 	 3.27951944161192082694e-02 	 8.78478840473393557398e-02 	 1.89926262023380498789e+00 
1.56250 	 2.41646709212632281039e-02 	 1.23570363153716042404e-01 	 1.89989199915257933604e+00 
1.57083 	 3.64746103754222880666e-02 	 1.04819988179554596242e-01 	 1.67980305606444924038e+00 
1.57917 	 3.07211032331184130673e-02 	 6.28032441217164227876e-02 	 2.15404775185101415858e+00 
1.58750 	 3.68673232551348858954e-02 	 9.99562623032105163068e-02 	 1.80316069183943916698e+00 
1.59583 	 2.87306688745617051783e-02 	 1.09844420971530312703e-01 	 2.61497408815008558491e+00 
1.60417 	 2.85013496186965128998e-02 	 1.31893837134539226863e-01 	 2.42047853362816667300e+00 
1.61250 	 2.64674636637162001562e-02 	 1.28971269279451128398e-01 	 2.42111316412430133127e+00 
1.62083 	 3.45111422120009392334e-02 	 1.08964317754270817451e-01 	 1.79378586240508974825e+00 
1.62917 	 3.36881031965834895625e-02 	 7.72559230137025848562e-02 	 1.82319227319263688081e+00 
1.63750 	 3.84772483011704760636e-02 	 6.63036233724624141095e-02 	 2.24549465785546287222e+00 
1.64583 	 2.45089267461944572413e-02 	 1.00843359268065368983e-01 	 1.68243477002295005462e+00 
1.65417 	 2.91521709550838642455e-02 	 7.30137162889001462007e-02 	 2.53506722329772848923e+00 
1.66250 	 2.08100902567072594540e-02 	 9.31882902088859432777e-02 	 2.05219088042977571007e+00 
1.67083 	 2.61363410861622687265e-02 	 1.33435619072374722638e-01 	 2.11156456958360339016e+00 
1.67917 	 3.48612749889485387667e-02 	 9.67788038138902850793e-02 	 1.79385691039011829773e+00 
1.68750 	 3.84880688531943487840e-02 	 8.10261397599944255266e-02 	 2.53817633708152357030e+00 
1.69583 	 3.25181844260928540336e-02 	 1.02963558912448738258e-01 	 2.20635699537916396551e+00 
1.70417 	 4.02990979028282486629e-02 	 7.82830509412172637074e-02 	 1.92250752461013396655e+00 
1.71250 	 3.80776290207852433078e-02 	 8.53038431550626891076e-02 	 2.09061479306625574992e+00 
1.72083 	 2.61273731476743958924e-02 	 1.14406366584904287120e-01 	 2.35842615682354006523e+00 
1.72917 	 3.47274428379354058172e-02 	 9.44364943925115468693e-02 	 2.43497036233214192436e+00 
1.73750 	 3.59442416368588937847e-02 	 8.92878240483416518725e-02 	 2.00119197603459797463e+00 
1.74583 	 3.14770563993946039805e-02 	 7.75913439503743557202e-02 	 2.68083287969086558888e+00 
1.75417 	 3.98318762324833125499e-02 	 6.53774291837503629399e-02 	 2.75821582619834959615e+00 
1.76250 	 3.37316743774863231353e-02 	 1.06589345502263538323e-01 	 3.41712933975984434198e+00 
1.77083 	 3.57787814034161572030e-02 	 9.49665380831994643263e-02 	 2.61557138343553274851e+00 
1.77917 	 3.63475860678698706185e-02 	 8.42592967210222670849e-02 	 2.46487116657926463859e+00 
1.78750 	 2.56631768804351408086e-02 	 7.68197003213722390269e-02 	 2.70589203656380972163e+00 
1.79583 	 2.64844124778234844830e-02 	 8.59949139103723947386e-02 	 3.13266810149385754869e+00 
1.80417 	 3.95886319783566725805e-02 	 6.52306360666313200802e-02 	 3.04189360850925405444e+00 
1.81250 	 3.11939026974549227234e-02 	 8.59937610585129602603e-02 	 2.79554944690757256609e+00 
1.82083 	 4.02666400503466082039e-02 	 7.54600615126398283072e-02 	 2.25002682782363461200e+00 
1.82917 	 2.45661785646746899658e-02 	 7.31688244367837969939e-02 	 2.82416608515739309127e+00 
1.83750 	 4.76261570027726316434e-02 	 5.87686400792102950352e-02 	 2.98129748978323627639e+00 
1.84583 	 3.05406389426077021221e-02 	 5.47080272875676287825e-02 	 2.69676466015790250452e+00 
1.85417 	 4.62067740422421047164e-02 	 4.83590031186378055406e-02 	 2.52242347829111590585e+00 
1.86250 	 3.55605821557890694473e-02 	 5.84187061965606713176e-02 	 2.48112528332637038986e+00 
1.87083 	 4.05171540116715800384e-02 	 5.15721354705247769790e-02 	 3.00435603195495115614e+00 
1.87917 	 3.71949999423410587740e-02 	 7.61459432094569732552e-02 	 2.19542616437337834157e+00 
1.88750 	 4.76902949461169012313e-02 	 4.26578296119531491515e-02 	 2.10999595704364484305e+00 
1.89583 	 5.38436447878861967897e-02 	 5.01216118311680267072e-02 	 2.12983549142271488819e+00 
1.90417 	 3.44265602648036669886e-02 	 6.26480874860780578839e-02 	 1.98901479462300811996e+00 
1.91250 	 3.64334777746047472347e-02 	 4.81603599616176117348e-02 	 2.94238943128626262435e+00 
1.92083 	 3.39749794361271437171e-02 	 6.07171552500262237673e-02 	 2.29035286072509336464e+00 
1.92917 	 5.13764485251747074490e-02 	 4.97047334519314862322e-02 	 2.54043439239266710672e+00 
1.93750 	 4.32948600505554670459e-02 	 4.95455696270054521402e-02 	 1.60146374365947541385e+00 
1.94583 	 6.15537994349719397302e-02 	 4.87011872764258613167e-02 	 2.24268971125093541374e+00 
1.95417 	 4.66738689629219369315e-02 	 4.73171919352755807053e-02 	 2.06169862672770998202e+00 
1.96250 	 4.22844975674960613099e-02 	 3.89256393366467848272e-02 	 2.06252102939603743081e+00 
1.97083 	 4.83002349876313977206e-02 	 4.44923325474093911414e-02 	 1.85405110090625346864e+00 
1.97917 	 5.31963896755130657978e-02 	 4.03186668856318625176e-02 	 1.91745214713747880175e+00 
1.98750 	 5.06869094417224386184e-02 	 4.26482149100970084343e-02 	 1.95432705685762386771e+00 
1.99583 	 4.92919441833826466048e-02 	 3.67944700301998661729e-02 	 8.98667478644472161875e-01 
2.00417 	 3.98362087690741129009e+00 	 3.14551768991434332889e+00 	 7.45646192140669228365e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */ /*ID_EDIT_4_1*/
mus         = 23.8888943003376;  /* cm^-1 */ /*ID_EDIT_4_2*/
g           = 0.9;  /*ID_EDIT_5*/
nt          = 1.36;  /*ID_EDIT_4_3*/
Nphotons    = 100; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */ /*ID_EDIT_6_FIXED*/
y = y_start; /*ID_EDIT_6_DEL*/
z = z_start; /*ID_EDIT_6_DEL*/
/*ID_EDIT_6_DEL*/
/* source - vartical down [0,0,-1] */ /*ID_EDIT_6_DEL*/
ux = 0; /*ID_EDIT_6_DEL*/
uy = 0; /*ID_EDIT_6_DEL*/
uz = -1; /*ID_EDIT_6_DEL*/


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

printf("saving cube into file...\n");
double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);
printf("saving cube completed\n");

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);