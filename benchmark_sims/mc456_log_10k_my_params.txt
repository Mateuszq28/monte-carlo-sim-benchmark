time elapsed: 10.6598 seconds

=================================

sim results:

number of photons = 10000
overflow: 4.89873669387575046130e+03
sum: 5.10116139939257845981e+03
sum: 5.10126330612424953870e+03
avg: 5.10116139939257862146e-01
perc_in: 51.01

number of photons = 10000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 1.68962224878757671931e-01 	 2.74970077633071519063e-01 
0.01250 	 0.00000000000000000000e+00 	 1.68152123153461563465e-01 	 2.82251547557063997562e-01 
0.02083 	 1.08131654244822818060e-03 	 1.43936020120235680375e-01 	 2.65837622137425233504e-01 
0.02917 	 1.60338893617559853644e-02 	 1.65903720972588153426e-01 	 2.76382089300101052576e-01 
0.03750 	 2.20779652060217809750e-02 	 1.59185164309638693680e-01 	 2.59492713543281239286e-01 
0.04583 	 1.49271602003144703875e-03 	 1.65317226956271462468e-01 	 2.66003900126994818898e-01 
0.05417 	 8.32164903207068852586e-03 	 1.70244142977851731224e-01 	 2.64919951760766159143e-01 
0.06250 	 1.51936850402240152674e-02 	 1.74112887860719739441e-01 	 2.69795737712545002918e-01 
0.07083 	 8.03296160455660088195e-03 	 1.66789785033627957489e-01 	 2.54043761619153207754e-01 
0.07917 	 8.01956243091599303707e-03 	 1.69651785172224428555e-01 	 2.64017036930084603163e-01 
0.08750 	 1.16651711158722061479e-02 	 1.72952655083455447693e-01 	 2.58992848588632751383e-01 
0.09583 	 7.27145127284846426452e-03 	 1.63352403362113707264e-01 	 2.61179114415303559316e-01 
0.10417 	 6.08300324685702702848e-03 	 1.54679895140785200747e-01 	 2.65452777573465359406e-01 
0.11250 	 4.30275176637687217784e-03 	 1.75247667415859065265e-01 	 2.77971411939829660120e-01 
0.12083 	 4.97373976950901078992e-03 	 1.73695667301160788787e-01 	 2.75132925307661313497e-01 
0.12917 	 7.23745006689739851791e-03 	 1.69150439402767527319e-01 	 2.79605090077954088201e-01 
0.13750 	 9.45404825346127068719e-03 	 1.76152890664005107313e-01 	 2.72259115502269555265e-01 
0.14583 	 1.05463461857625076523e-02 	 1.77197540007987014432e-01 	 2.86305285154419386640e-01 
0.15417 	 1.08426995846434021803e-02 	 1.68458723895401785153e-01 	 2.97546474324788201571e-01 
0.16250 	 1.02689580480090948689e-02 	 1.66809439873207093763e-01 	 2.91097037130762292811e-01 
0.17083 	 8.49542116029275082290e-03 	 1.62972835448439712369e-01 	 2.83454484800874650929e-01 
0.17917 	 1.10551648811211683521e-02 	 1.64083374463287662293e-01 	 2.84414725322508554761e-01 
0.18750 	 8.20838226264570397506e-03 	 1.57902549348352794212e-01 	 2.81329375024184813459e-01 
0.19583 	 8.94967655333599523826e-03 	 1.58122897950263713307e-01 	 2.85048619009715897832e-01 
0.20417 	 1.23150783633869942424e-02 	 1.75028077783543872803e-01 	 2.94330568608977716227e-01 
0.21250 	 1.09571548390665230582e-02 	 1.72844462096077206015e-01 	 2.88649917866757421692e-01 
0.22083 	 1.40672998753541608069e-02 	 1.70360490639506145794e-01 	 2.92504814705684679232e-01 
0.22917 	 1.10995371061957705250e-02 	 1.61249760387108337367e-01 	 3.03805619949730376650e-01 
0.23750 	 8.62455385810628229193e-03 	 1.68294083302359565035e-01 	 2.88377010947337530933e-01 
0.24583 	 1.02354463867536139843e-02 	 1.67971978673042920960e-01 	 2.85948408430049316742e-01 
0.25417 	 1.12977161761205584234e-02 	 1.69776961474780885286e-01 	 2.89207051782159441089e-01 
0.26250 	 1.31385531009522420892e-02 	 1.68840717401261664055e-01 	 3.06848169516315993910e-01 
0.27083 	 1.26809023738949002563e-02 	 1.72193629480987209224e-01 	 2.96563753005880836877e-01 
0.27917 	 1.20033667300987571813e-02 	 1.79500444344283360820e-01 	 2.98410372892097208730e-01 
0.28750 	 1.20049217854384295684e-02 	 1.71792962655254566329e-01 	 2.93802253289994708130e-01 
0.29583 	 1.25686484508133727162e-02 	 1.71826627516766666792e-01 	 3.13873748341911340543e-01 
0.30417 	 1.21427486497121556869e-02 	 1.82378355582060280859e-01 	 2.99827342957458664596e-01 
0.31250 	 1.51599503913394349774e-02 	 1.71526470150038634621e-01 	 3.14304978852821936819e-01 
0.32083 	 1.10699883725144318514e-02 	 1.76712477516296706526e-01 	 3.15224790174692459654e-01 
0.32917 	 1.09552215547769199455e-02 	 1.79425014816238792559e-01 	 3.11338062644778978960e-01 
0.33750 	 1.08236422591276425925e-02 	 1.77938984572561659236e-01 	 3.19852185812563416523e-01 
0.34583 	 1.10051330724327909444e-02 	 1.84296390818064453887e-01 	 3.25888923327814106212e-01 
0.35417 	 1.45395726256026328049e-02 	 1.79777480849140414154e-01 	 3.28777741919420496419e-01 
0.36250 	 1.26731376575549767316e-02 	 1.74012579862387134488e-01 	 3.17757448391868813076e-01 
0.37083 	 1.06409452318983275415e-02 	 1.81071916185688408518e-01 	 3.21289714668794357255e-01 
0.37917 	 1.21996273112299925129e-02 	 1.82378072224360726628e-01 	 3.22548750959442354080e-01 
0.38750 	 1.05497192049307970951e-02 	 1.84265730841981473231e-01 	 3.31280054403892687542e-01 
0.39583 	 1.36085257740383297476e-02 	 1.90902933346303843587e-01 	 3.25307666324926414436e-01 
0.40417 	 1.25313039423879529766e-02 	 1.79216060800562543287e-01 	 3.39972785930602483528e-01 
0.41250 	 1.22239713238688988556e-02 	 1.81332145959760465681e-01 	 3.27806855586741607844e-01 
0.42083 	 1.36639234236521581872e-02 	 1.87152322263506226685e-01 	 3.28360304462732788267e-01 
0.42917 	 1.38444284986976445806e-02 	 1.85131126174069626789e-01 	 3.32700095384688088185e-01 
0.43750 	 1.33571699328449648020e-02 	 1.82377743699376315689e-01 	 3.53434127964685707024e-01 
0.44583 	 1.51521217898087472153e-02 	 1.82589150284645312938e-01 	 3.53859491204823517485e-01 
0.45417 	 1.21464429889027950710e-02 	 1.89798682288124298534e-01 	 3.50612120523502601710e-01 
0.46250 	 1.31511298049667782473e-02 	 1.84878719458884704929e-01 	 3.73098368632645838172e-01 
0.47083 	 9.61207404360696349155e-03 	 1.91579826623027527077e-01 	 3.72841156659735051271e-01 
0.47917 	 1.30147103516752779551e-02 	 1.89145362301633229718e-01 	 3.72884246972715993618e-01 
0.48750 	 1.19830426091697590796e-02 	 1.93573681527957314197e-01 	 3.77446030167776946929e-01 
0.49583 	 1.14614919524270823803e-02 	 1.95881882970469878291e-01 	 3.75795629752191051587e-01 
0.50417 	 1.19266680270118715507e-02 	 1.96662997760820357218e-01 	 3.83993716616857494461e-01 
0.51250 	 1.14576422093334746866e-02 	 1.89801237320357113481e-01 	 3.96899761365315295603e-01 
0.52083 	 1.17682033457652650277e-02 	 1.88441621987167545749e-01 	 3.86808652508118022695e-01 
0.52917 	 1.16713343900993662267e-02 	 1.89218676079434572346e-01 	 4.11515620618895461291e-01 
0.53750 	 1.20505259262920997460e-02 	 1.85095816342734920124e-01 	 4.03206030861780584384e-01 
0.54583 	 1.10051262850410346700e-02 	 1.91041552154927490870e-01 	 4.16262279921496003432e-01 
0.55417 	 1.22212540961365734998e-02 	 1.97831581688739738256e-01 	 3.99494809683031582015e-01 
0.56250 	 1.14106356629616288723e-02 	 1.93416312963080400111e-01 	 4.07365265642154916748e-01 
0.57083 	 1.13476281765691744408e-02 	 1.85768544671850194261e-01 	 4.23143709619754337936e-01 
0.57917 	 1.18924795722386116015e-02 	 1.90667657629995657143e-01 	 4.25147606468819883041e-01 
0.58750 	 1.15867044937132245702e-02 	 2.03658960151636203584e-01 	 4.26234168480721320460e-01 
0.59583 	 1.26377296874634892365e-02 	 2.00075853350829946375e-01 	 4.36267804220847876806e-01 
0.60417 	 1.25025419083289145161e-02 	 2.00437841108703107551e-01 	 4.29274324366189619084e-01 
0.61250 	 1.26459184973392608359e-02 	 2.08689656389303285211e-01 	 4.46886472857004557468e-01 
0.62083 	 1.22217016024292642051e-02 	 2.06682908776911977711e-01 	 4.46209825653793523692e-01 
0.62917 	 1.27081843635535006454e-02 	 2.08163235079255104498e-01 	 4.49211085498157691731e-01 
0.63750 	 1.27388354464117101172e-02 	 2.15806583706624727226e-01 	 4.58564155641717707823e-01 
0.64583 	 1.29107096543536192801e-02 	 2.17332557932569503389e-01 	 4.75166646958384897292e-01 
0.65417 	 1.29613646517273729819e-02 	 2.09250447132173611475e-01 	 4.64977537697321585686e-01 
0.66250 	 1.27103259112208051562e-02 	 2.14049750905944163870e-01 	 4.79386295984028099060e-01 
0.67083 	 1.42627371848271372601e-02 	 2.13480042119900237374e-01 	 4.91637218428758515643e-01 
0.67917 	 1.44172416809596748433e-02 	 2.21372512807967436466e-01 	 5.02472786549073680007e-01 
0.68750 	 1.46511983050244855298e-02 	 2.24144022293351369290e-01 	 5.12531274250336066345e-01 
0.69583 	 1.41974387013997869339e-02 	 2.23537916215685833476e-01 	 4.89801793854572176112e-01 
0.70417 	 1.36203548168072809815e-02 	 2.25451860933758047034e-01 	 4.85301095989184305690e-01 
0.71250 	 1.33329375507032707460e-02 	 2.27318646769869125990e-01 	 5.02475381739350579480e-01 
0.72083 	 1.51016638461740522470e-02 	 2.30979116925543126460e-01 	 5.03059225414591804082e-01 
0.72917 	 1.50531984436538639194e-02 	 2.30874088658603426882e-01 	 5.13860020746314538620e-01 
0.73750 	 1.46149329030251812905e-02 	 2.30571508361463090031e-01 	 5.10594193317301159318e-01 
0.74583 	 1.42084659877594384619e-02 	 2.35293311552965317413e-01 	 5.31538497014549249364e-01 
0.75417 	 1.44646337728044933196e-02 	 2.26181534530820127493e-01 	 5.31515597550280216588e-01 
0.76250 	 1.50688541742305115445e-02 	 2.38586066593396456392e-01 	 5.53317185157888857816e-01 
0.77083 	 1.44435112525557272228e-02 	 2.40880724510182692155e-01 	 5.48311303089656032483e-01 
0.77917 	 1.45686155880537498292e-02 	 2.42503482633478817387e-01 	 5.63690101387166464519e-01 
0.78750 	 1.64476434831531195813e-02 	 2.50310385399379442539e-01 	 5.82227389387685367872e-01 
0.79583 	 1.46423261860837098519e-02 	 2.55605534412814472400e-01 	 5.69918095821959846958e-01 
0.80417 	 1.58580002746057172058e-02 	 2.54446131253003304806e-01 	 5.75701336996978563221e-01 
0.81250 	 1.49512774398367180584e-02 	 2.57297940058012097886e-01 	 5.92276323647169866682e-01 
0.82083 	 1.48622666057192983485e-02 	 2.53773040364545565684e-01 	 5.82084923592507852419e-01 
0.82917 	 1.55141459171583093873e-02 	 2.53547418331029394967e-01 	 5.66106472398834270621e-01 
0.83750 	 1.56161881380377388223e-02 	 2.60618625052651819995e-01 	 5.71535483242298747442e-01 
0.84583 	 1.54398178224074214548e-02 	 2.55341632305783328150e-01 	 6.00424894444474110955e-01 
0.85417 	 1.58715720861784537199e-02 	 2.69039971453807591484e-01 	 5.98082674184856277755e-01 
0.86250 	 1.66379858800272187325e-02 	 2.78637897480023211116e-01 	 6.07533455802252264633e-01 
0.87083 	 1.54502536197330744838e-02 	 2.76434099281675005333e-01 	 6.11148504941298020832e-01 
0.87917 	 1.68647149586283531808e-02 	 2.80191530053184756355e-01 	 6.13147541827663844494e-01 
0.88750 	 1.57327659161186385328e-02 	 2.88108591870372354737e-01 	 6.58700069768881291132e-01 
0.89583 	 1.56676144369868736161e-02 	 2.99860785231334081580e-01 	 6.44542586385349225431e-01 
0.90417 	 1.59726314627484933251e-02 	 3.01680989948303279746e-01 	 6.48871133888857754002e-01 
0.91250 	 1.60215695617011155694e-02 	 3.06973966695759548085e-01 	 6.68018147262409267562e-01 
0.92083 	 1.62533134516014109161e-02 	 3.15891556990380850678e-01 	 6.90351553807870610413e-01 
0.92917 	 1.69671428499012198754e-02 	 3.31221619927303700948e-01 	 6.81968460604334358877e-01 
0.93750 	 1.73383751222253995605e-02 	 3.24203626658376042879e-01 	 7.18220129879748592217e-01 
0.94583 	 1.71784004056152635187e-02 	 3.39048795471272368385e-01 	 7.35341353751689519314e-01 
0.95417 	 1.67301612120643802828e-02 	 3.43626491105895714995e-01 	 7.18497801627809518088e-01 
0.96250 	 1.68051683491478622001e-02 	 3.52076086766603846279e-01 	 7.21732763966210000284e-01 
0.97083 	 1.73126326609209860163e-02 	 3.70757726256575825818e-01 	 7.62802740033359683025e-01 
0.97917 	 1.64829757697277715089e-02 	 3.71896635738129699433e-01 	 7.69991700613495644312e-01 
0.98750 	 1.71968402292277493248e-02 	 3.91171570549047498133e-01 	 7.50480255391664963227e-01 
0.99583 	 1.70285624317152682605e-02 	 4.14068761719031563917e-01 	 7.68362815571610568988e-01 
1.00417 	 1.77492879447920422209e-02 	 4.29905370628536454003e-01 	 7.91810698968672732612e-01 
1.01250 	 1.74135313890782517099e-02 	 4.69292124625310891339e-01 	 8.04380120082238470047e-01 
1.02083 	 1.71320425129188151636e-02 	 5.00385286296271769579e-01 	 8.06185313021864691230e-01 
1.02917 	 1.74138082790045757575e-02 	 5.59493638132621873282e-01 	 8.30638440612496364857e-01 
1.03750 	 1.85511177601110563429e-02 	 6.92491203255708676068e-01 	 8.27071695498091008503e-01 
1.04583 	 1.85372582171822626596e-02 	 1.96584934615991402396e+00 	 8.07670880327010953792e-01 
1.05417 	 1.86796464444597687393e-02 	 9.18063990472352431382e-01 	 8.00818797467340304230e-01 
1.06250 	 1.90821430834359727358e-02 	 6.19496838979068042974e-01 	 8.39578948513811651466e-01 
1.07083 	 1.86258357354391682059e-02 	 5.14461189925104145360e-01 	 8.49321184380121385615e-01 
1.07917 	 1.78652272323379518459e-02 	 4.73321641593816400118e-01 	 8.39731118908407014878e-01 
1.08750 	 1.85837706567534982627e-02 	 4.42672424605720316038e-01 	 8.70797088649696626739e-01 
1.09583 	 1.72431200963522775205e-02 	 4.14048960298112611600e-01 	 9.10340776991860556322e-01 
1.10417 	 1.84519094644433959140e-02 	 3.95772145680069131757e-01 	 9.08306541978147197192e-01 
1.11250 	 1.86404801785690181493e-02 	 3.66004558240623334431e-01 	 9.47768631648116310906e-01 
1.12083 	 1.95462273094731894818e-02 	 3.48990968335390339128e-01 	 9.12314993250386230272e-01 
1.12917 	 1.93550432191339980004e-02 	 3.37194806444020389602e-01 	 9.24925476031520865661e-01 
1.13750 	 1.89255279419208270741e-02 	 3.19759533663947603799e-01 	 9.35375560840317255007e-01 
1.14583 	 1.90972176149243125232e-02 	 3.05253278795529048306e-01 	 9.49678831624843233783e-01 
1.15417 	 2.14763474273677555659e-02 	 3.08817073314251788752e-01 	 9.65403489577048357084e-01 
1.16250 	 2.01938585679218018942e-02 	 2.90241513265137640598e-01 	 9.78771780816296566030e-01 
1.17083 	 2.01642717723320707979e-02 	 2.80622668170809441701e-01 	 9.90482308865929694797e-01 
1.17917 	 2.16333552876754459104e-02 	 2.71830624949905563792e-01 	 1.01203473111290120912e+00 
1.18750 	 2.10176052872321356135e-02 	 2.71327279986510239151e-01 	 1.03551658468590757067e+00 
1.19583 	 2.17785582162762121616e-02 	 2.64289698258266314568e-01 	 1.04974232865734906639e+00 
1.20417 	 2.12283969241320591426e-02 	 2.57467634582640658714e-01 	 1.05418099062030767854e+00 
1.21250 	 1.99353812279601909363e-02 	 2.44689774936982129550e-01 	 1.07620650419800067965e+00 
1.22083 	 2.16230512585684139792e-02 	 2.45540944169190117341e-01 	 1.07804065020957073884e+00 
1.22917 	 2.13290314130492528188e-02 	 2.36312176038589671911e-01 	 1.07577128234308849741e+00 
1.23750 	 2.14433368144326293170e-02 	 2.33936964381609879826e-01 	 1.14899937134317653431e+00 
1.24583 	 2.17474350594438585460e-02 	 2.29315100097684965164e-01 	 1.12889378716327581920e+00 
1.25417 	 2.14358168939855382729e-02 	 2.22031746025252441079e-01 	 1.13847236085111580550e+00 
1.26250 	 2.14029858318163929143e-02 	 2.15465501664189901243e-01 	 1.11413832432826698238e+00 
1.27083 	 2.15526790015718346105e-02 	 2.10758322882075438409e-01 	 1.16455633025984384155e+00 
1.27917 	 2.18348864397871975096e-02 	 2.07664588238334973935e-01 	 1.14380832424791178958e+00 
1.28750 	 2.36103181683847765382e-02 	 2.09048276364093704727e-01 	 1.20585808568330321577e+00 
1.29583 	 2.09631317347804373152e-02 	 1.97069470194663892704e-01 	 1.20471449189031387661e+00 
1.30417 	 2.19886411915661862670e-02 	 1.99130723225046213365e-01 	 1.26077551657587449974e+00 
1.31250 	 2.22270272226649454050e-02 	 1.94340668233716679092e-01 	 1.27325867827275107658e+00 
1.32083 	 2.21062608099884400081e-02 	 1.90989038822719170430e-01 	 1.30952086779126664062e+00 
1.32917 	 2.43584562568783871694e-02 	 1.87706730151954936936e-01 	 1.33245743555310269812e+00 
1.33750 	 2.44836203913153353795e-02 	 1.85495519003178760409e-01 	 1.32928475957718439382e+00 
1.34583 	 2.37129884273516652882e-02 	 1.81011232694524487608e-01 	 1.35160993725830924639e+00 
1.35417 	 2.50564392486887707601e-02 	 1.76552034664905377337e-01 	 1.41907294657346039202e+00 
1.36250 	 2.49134170337891938662e-02 	 1.74209588446522678495e-01 	 1.38531736964263219036e+00 
1.37083 	 2.46195805667048517318e-02 	 1.67610402113301582006e-01 	 1.37810241803495259205e+00 
1.37917 	 2.50753551273219972562e-02 	 1.69011210714293647062e-01 	 1.37707528102484944021e+00 
1.38750 	 2.53718753231009994109e-02 	 1.66579506214858702462e-01 	 1.39752188228050377994e+00 
1.39583 	 2.53648672080316606170e-02 	 1.63621076025510653329e-01 	 1.42623601582567105517e+00 
1.40417 	 2.49377763594231804944e-02 	 1.57542945543410306541e-01 	 1.45312416900469165704e+00 
1.41250 	 2.47023622870671220875e-02 	 1.56690696887227282064e-01 	 1.46262466926818768265e+00 
1.42083 	 2.58208905837612572032e-02 	 1.52803282430575754214e-01 	 1.46488426521334913488e+00 
1.42917 	 2.73257910178098875620e-02 	 1.42684526315352999681e-01 	 1.50156410602205370175e+00 
1.43750 	 2.63752039400067597730e-02 	 1.45633140938323246694e-01 	 1.56168605090348644460e+00 
1.44583 	 2.54885201767364212577e-02 	 1.44695248545332971757e-01 	 1.57215272938471528619e+00 
1.45417 	 2.71361515780043638379e-02 	 1.42000826723355205727e-01 	 1.57325935965687868645e+00 
1.46250 	 2.57598135758392542127e-02 	 1.36969918241117594171e-01 	 1.61378428265182116697e+00 
1.47083 	 2.63265311266937945822e-02 	 1.37844625943560838977e-01 	 1.59328597166787333528e+00 
1.47917 	 2.71597930700898035350e-02 	 1.33316421261723161429e-01 	 1.57924794133700840959e+00 
1.48750 	 2.73062365187225174201e-02 	 1.30368234813809047434e-01 	 1.63171273624316337525e+00 
1.49583 	 2.86418660529118573876e-02 	 1.26380985962212089024e-01 	 1.68052441615318115531e+00 
1.50417 	 2.78779099871298598201e-02 	 1.24945666626739226857e-01 	 1.68012671578929784211e+00 
1.51250 	 2.72403058101808211167e-02 	 1.22078539254683787751e-01 	 1.71257557255850367817e+00 
1.52083 	 2.83446239915099498785e-02 	 1.25414751063509549711e-01 	 1.69575767631120100098e+00 
1.52917 	 2.95195685497241823436e-02 	 1.15858837651279092396e-01 	 1.73324607506455508066e+00 
1.53750 	 2.90261569752903909880e-02 	 1.14982823345632284573e-01 	 1.81097758862585789252e+00 
1.54583 	 2.91238999871535099440e-02 	 1.17825085263053422335e-01 	 1.80687237479927653716e+00 
1.55417 	 3.06483171302320521467e-02 	 1.10166152668368558243e-01 	 1.88240682188248764639e+00 
1.56250 	 3.10363179423668554546e-02 	 1.11596395525754912836e-01 	 1.89243505046281756954e+00 
1.57083 	 3.03300294113840428201e-02 	 1.08672913414155955514e-01 	 1.93807922265412280183e+00 
1.57917 	 3.11471337944259074604e-02 	 1.06031004805113737710e-01 	 1.96027923986466823258e+00 
1.58750 	 3.17282889062167824945e-02 	 1.03230156396288727527e-01 	 1.92375886240503279900e+00 
1.59583 	 3.13784831331692382062e-02 	 1.00568798808851181392e-01 	 1.92494103524264237315e+00 
1.60417 	 3.11984607837449481882e-02 	 9.97128643033421413477e-02 	 2.00617923754924420976e+00 
1.61250 	 3.19833598789118558892e-02 	 9.92316541405786622931e-02 	 2.01652636033221144274e+00 
1.62083 	 3.25075019328422282205e-02 	 9.66781575807497822739e-02 	 1.98079568639878211833e+00 
1.62917 	 3.32564656303199132625e-02 	 9.37586695620532678541e-02 	 1.99171756061673876914e+00 
1.63750 	 3.28869766484109066207e-02 	 9.25484788751970016696e-02 	 2.04757431794056010688e+00 
1.64583 	 3.16355703153342951439e-02 	 9.43641228664516829028e-02 	 2.03608039510617366830e+00 
1.65417 	 3.24926227211665835659e-02 	 9.37802987317592345873e-02 	 2.11291917538662277209e+00 
1.66250 	 3.28703647337695165076e-02 	 8.99528977806062918221e-02 	 2.09345839188349369664e+00 
1.67083 	 3.30718592041812434190e-02 	 8.90004190346601886663e-02 	 2.15819471149937625043e+00 
1.67917 	 3.30682053643106474428e-02 	 8.75582600343805944609e-02 	 2.17080168774818993427e+00 
1.68750 	 3.43936130088454139475e-02 	 8.72632232589633100028e-02 	 2.19531385591228689336e+00 
1.69583 	 3.41394144066389931824e-02 	 8.17852656334719513298e-02 	 2.23853396829392270462e+00 
1.70417 	 3.51221675924842866023e-02 	 8.43066076971264594109e-02 	 2.22953343438593876158e+00 
1.71250 	 3.62533612234293839416e-02 	 8.34137983934888915805e-02 	 2.23256416243167699065e+00 
1.72083 	 3.57500329053432319704e-02 	 8.33892722925817231339e-02 	 2.28953599308394606382e+00 
1.72917 	 3.51671364950362497215e-02 	 7.82717705513473194223e-02 	 2.26285902230353208608e+00 
1.73750 	 3.59681807889580887339e-02 	 7.65436943231741079297e-02 	 2.23198447962640766917e+00 
1.74583 	 3.65535073625629161609e-02 	 7.45254870005863656601e-02 	 2.28097783694601297100e+00 
1.75417 	 3.72966664742421863399e-02 	 7.71290786704680736419e-02 	 2.27431909017382860583e+00 
1.76250 	 3.74753434023237519401e-02 	 7.50425034216276320986e-02 	 2.28821187888547550315e+00 
1.77083 	 3.84830528738349456064e-02 	 7.37393296515850837913e-02 	 2.33416021817615781941e+00 
1.77917 	 3.93009833310923803462e-02 	 7.15070995829434619129e-02 	 2.36642893758817507432e+00 
1.78750 	 3.90674941335123968034e-02 	 7.20981483502308312383e-02 	 2.34082103944168906651e+00 
1.79583 	 4.03302270110299995731e-02 	 6.96111458760632906273e-02 	 2.33932118445252745786e+00 
1.80417 	 4.04604443108311784272e-02 	 7.01567054639599813060e-02 	 2.35455638572945336051e+00 
1.81250 	 4.07180351940657631049e-02 	 6.67374123855435374963e-02 	 2.37453444968713833774e+00 
1.82083 	 4.02355706888096256724e-02 	 6.75788296944939970157e-02 	 2.39194048274371517948e+00 
1.82917 	 4.05108127263127393292e-02 	 6.36075139219213769870e-02 	 2.42657788153245590479e+00 
1.83750 	 4.12405361013274476822e-02 	 6.26651760459573242690e-02 	 2.45815543198788644119e+00 
1.84583 	 4.05358318841524609133e-02 	 6.21647658734709174233e-02 	 2.37942915716276059968e+00 
1.85417 	 4.20946110607192114372e-02 	 6.27575563282708887014e-02 	 2.43485836976329084180e+00 
1.86250 	 4.18476064829947161372e-02 	 6.02665002299202501312e-02 	 2.46199710360139212284e+00 
1.87083 	 4.30237484921899629442e-02 	 5.94610783046132865270e-02 	 2.41653380043917165310e+00 
1.87917 	 4.19672850848537559720e-02 	 5.99463529040314968555e-02 	 2.42903901633775332058e+00 
1.88750 	 4.25273141262118570260e-02 	 5.74826390883598631332e-02 	 2.45996334432078223031e+00 
1.89583 	 4.47275316781338000416e-02 	 5.65526512642975306977e-02 	 2.44196846341070950004e+00 
1.90417 	 4.37727474261322344051e-02 	 5.73849624332195967780e-02 	 2.43208573160684693448e+00 
1.91250 	 4.33730313107046627774e-02 	 5.53810111180338959791e-02 	 2.37215254302278744092e+00 
1.92083 	 4.32331208822795132196e-02 	 5.50988208082554414835e-02 	 2.31732699992616764106e+00 
1.92917 	 4.43418410895492498547e-02 	 5.43456432016351173586e-02 	 2.33408846934179070587e+00 
1.93750 	 4.48682659763757485383e-02 	 5.39203774090552950815e-02 	 2.36659211494738297432e+00 
1.94583 	 4.60210463231197075551e-02 	 5.19115584989564768370e-02 	 2.29303347416098279865e+00 
1.95417 	 4.42499851730270427064e-02 	 5.10500890157707942762e-02 	 2.33501386954055467626e+00 
1.96250 	 4.49605662346043780109e-02 	 4.96919185782818059738e-02 	 2.24824589887310688496e+00 
1.97083 	 4.69388205391825727442e-02 	 4.84548220257097830843e-02 	 2.23212905604317324304e+00 
1.97917 	 4.70831067116739554468e-02 	 4.96606423180656134098e-02 	 2.19728566895780419443e+00 
1.98750 	 4.69173519498821620100e-02 	 4.92315872460731066007e-02 	 2.22398409502639005098e+00 
1.99583 	 4.87793681989400068622e-02 	 4.81063264959208716776e-02 	 1.12333263229704560793e+00 
2.00417 	 3.97666165978177144069e+00 	 3.76839816246150283163e+00 	 7.32493109678520539774e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 10000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);