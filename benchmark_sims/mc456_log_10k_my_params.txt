time elapsed: 12.4692 seconds

=================================

sim results:

number of photons = 10000
overflow: 4.89955837526412778971e+03
sum: 5.10044777655077905365e+03
sum: 5.10044162473587221029e+03
avg: 5.10044777655077941070e-01
perc_in: 51.00

number of photons = 10000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 7.68437440649764824663e-01 	 1.52870999373068167104e-01 	 2.77935541582360279289e-01 
0.01250 	 8.27972854276373126936e-02 	 1.51270953336186286808e-01 	 2.75456212264215627439e-01 
0.02083 	 1.83395073864289631649e-02 	 1.60102542526564445291e-01 	 2.76264367938779287215e-01 
0.02917 	 1.61719483622771408038e-02 	 1.58917781343895364587e-01 	 2.78393576109394691454e-01 
0.03750 	 2.04219666038364111582e-02 	 1.55024233004331823960e-01 	 2.65518728455789110310e-01 
0.04583 	 8.88032713021675093601e-04 	 1.52035460799386984432e-01 	 2.78928754025465464039e-01 
0.05417 	 2.83469484696671466042e-03 	 1.66135497172594959192e-01 	 2.64582550910014702161e-01 
0.06250 	 9.05064296542404042589e-03 	 1.48373261627208874458e-01 	 2.71610928440530419170e-01 
0.07083 	 5.57727304675196666056e-03 	 1.52102686621653687693e-01 	 2.75753357696294998380e-01 
0.07917 	 3.07873464520084768117e-03 	 1.59966016212596706669e-01 	 2.80790156110141242429e-01 
0.08750 	 1.24125985575766796531e-02 	 1.58831744090634469080e-01 	 2.84396224773121930607e-01 
0.09583 	 6.11442088741038711208e-03 	 1.65406393264741935489e-01 	 2.69385108179264254336e-01 
0.10417 	 5.11571051829901989744e-03 	 1.67568518265952981494e-01 	 2.83963523177193644109e-01 
0.11250 	 6.93219941115912150625e-03 	 1.50478825969974694399e-01 	 2.72369257239933604264e-01 
0.12083 	 6.89559950421582672914e-03 	 1.44745878290847951320e-01 	 2.71281194356098265263e-01 
0.12917 	 8.36649504534648681686e-03 	 1.55050105737915527859e-01 	 2.76226093780862436144e-01 
0.13750 	 7.11218989734372676603e-03 	 1.69392562478000135995e-01 	 2.66500271643602903993e-01 
0.14583 	 1.24606306089621327732e-02 	 1.64934965135832611871e-01 	 2.66942432102310833741e-01 
0.15417 	 7.94599598109368109033e-03 	 1.58682097322382503757e-01 	 2.53923123853687260354e-01 
0.16250 	 9.87120829576234107283e-03 	 1.67571494794069270062e-01 	 2.70503733385372369113e-01 
0.17083 	 7.32648406627421991399e-03 	 1.69415249237124670989e-01 	 2.72012828741943601951e-01 
0.17917 	 8.33023936888899717290e-03 	 1.62089256779731322178e-01 	 2.77964862942492563214e-01 
0.18750 	 8.28419801746670299292e-03 	 1.62759931847670458183e-01 	 2.72842619535163810607e-01 
0.19583 	 9.11195748967331096979e-03 	 1.63842273793116416369e-01 	 2.69109251116991854413e-01 
0.20417 	 9.36019796672563769713e-03 	 1.69881842446094249999e-01 	 2.80852284646857019990e-01 
0.21250 	 1.06892876984953800329e-02 	 1.61691292657599100524e-01 	 2.83531343708072536280e-01 
0.22083 	 1.01152451264710004780e-02 	 1.66475159994702165411e-01 	 3.04824052858981675573e-01 
0.22917 	 1.21821658105684405005e-02 	 1.68564130176864279687e-01 	 2.79675362453211562297e-01 
0.23750 	 7.66942462459617706888e-03 	 1.65010304091956161443e-01 	 2.77656709885090557943e-01 
0.24583 	 1.03916361508083355397e-02 	 1.68288005726782957661e-01 	 2.80918336846556815356e-01 
0.25417 	 1.05220362211343836101e-02 	 1.72412221060721071453e-01 	 2.76442060511334908313e-01 
0.26250 	 1.05964492971372462038e-02 	 1.61766606592518874530e-01 	 2.86354734519204345844e-01 
0.27083 	 1.12164423835335765045e-02 	 1.78455437120844329080e-01 	 2.83871993061114546997e-01 
0.27917 	 9.55284687376551852611e-03 	 1.79184414645532114063e-01 	 2.73634013722445057493e-01 
0.28750 	 1.00997712433006665150e-02 	 1.73784853387668136726e-01 	 2.81944520972801038194e-01 
0.29583 	 1.10810259847377856612e-02 	 1.81161456213098898127e-01 	 2.97126683344508923934e-01 
0.30417 	 1.39111682952453765555e-02 	 1.86848487380841282723e-01 	 2.95792747232745123487e-01 
0.31250 	 1.32676136987619659735e-02 	 1.78322433041823130706e-01 	 3.04105371282855696524e-01 
0.32083 	 9.35520249051579808053e-03 	 1.84205972119560357214e-01 	 3.11664727768758031967e-01 
0.32917 	 1.03527558690927456303e-02 	 1.81732867608137393933e-01 	 3.05366178543835520287e-01 
0.33750 	 1.33682764819928745492e-02 	 1.81978097953921114094e-01 	 3.01812261816930493818e-01 
0.34583 	 1.06403045727361186823e-02 	 1.93204586070814643417e-01 	 3.13545868995980858696e-01 
0.35417 	 1.43745930485987827296e-02 	 1.86224916382770444567e-01 	 2.99690636256026876616e-01 
0.36250 	 1.30823241240145184822e-02 	 1.76793362054158964547e-01 	 3.14367887953817926050e-01 
0.37083 	 1.19676804022038341113e-02 	 1.78356491320393134581e-01 	 3.18508428535317522634e-01 
0.37917 	 1.11566940406822943249e-02 	 1.83666647215443235019e-01 	 3.23332749323733126268e-01 
0.38750 	 1.11466467019454978926e-02 	 1.93767939647740417008e-01 	 3.31486523717290149094e-01 
0.39583 	 1.39452489529456394313e-02 	 1.89982231499340625813e-01 	 3.36763054815307938394e-01 
0.40417 	 1.41764480982927709718e-02 	 1.79187662134927733204e-01 	 3.32979361190973044415e-01 
0.41250 	 1.23739392631300720166e-02 	 1.85623092637091480217e-01 	 3.32179923856279202266e-01 
0.42083 	 1.03767105637671830376e-02 	 1.97854934380953778605e-01 	 3.41259934214742544079e-01 
0.42917 	 1.20755507011105749776e-02 	 1.93709885249889440795e-01 	 3.49164015168812735812e-01 
0.43750 	 1.15408908538969165458e-02 	 1.87955671106537103299e-01 	 3.56287827828531855623e-01 
0.44583 	 1.14246326855174783893e-02 	 1.89855347332300333774e-01 	 3.51976334095704779248e-01 
0.45417 	 1.17833745603423238613e-02 	 1.94355402725199910563e-01 	 3.58917983290054753986e-01 
0.46250 	 1.47270848967387402162e-02 	 1.98315077764250002890e-01 	 3.59424650303897974535e-01 
0.47083 	 1.37425167344806808956e-02 	 1.97343703400493647448e-01 	 3.60497195766039890685e-01 
0.47917 	 1.21857897297084922378e-02 	 1.94839526745565816412e-01 	 3.68420171109273664189e-01 
0.48750 	 1.18254203694905697664e-02 	 1.91147331083107913097e-01 	 3.53304509688954104796e-01 
0.49583 	 1.23753683174927624211e-02 	 1.94355248853011253196e-01 	 3.74323965859564289360e-01 
0.50417 	 1.32857785034133282082e-02 	 1.96463653715731795257e-01 	 3.75659531516273292873e-01 
0.51250 	 1.33120424918044526902e-02 	 1.98891440785669365576e-01 	 3.81528575490136911963e-01 
0.52083 	 1.33839024051697393775e-02 	 1.97790340449031404324e-01 	 3.72325328239979325140e-01 
0.52917 	 1.16697187891651090602e-02 	 2.01332945027493576129e-01 	 3.60522001110682610570e-01 
0.53750 	 1.32622554555148017968e-02 	 2.01657617947780726242e-01 	 3.84158626845509054704e-01 
0.54583 	 1.45225919237706013049e-02 	 1.96737198141144764563e-01 	 3.86333546180293530004e-01 
0.55417 	 1.40135756504848243281e-02 	 2.03974689555601829127e-01 	 3.84728565523564103312e-01 
0.56250 	 1.33301025619300805153e-02 	 2.02883892534685611464e-01 	 3.87789531591524960774e-01 
0.57083 	 1.30663117460003332798e-02 	 2.05303667623367935846e-01 	 3.93215242456116831349e-01 
0.57917 	 1.34329996281460899848e-02 	 2.07817167366128097150e-01 	 3.90816183463732036429e-01 
0.58750 	 1.33135560300424622693e-02 	 2.04326074853296207889e-01 	 4.07533488825920442444e-01 
0.59583 	 1.36109265566407774961e-02 	 2.15618270962884522879e-01 	 4.08016262433097465223e-01 
0.60417 	 1.41603260826521793608e-02 	 2.10712536857327659146e-01 	 4.24407750173109721281e-01 
0.61250 	 1.34293278213836707324e-02 	 2.07395964345714167720e-01 	 4.45481712558249420830e-01 
0.62083 	 1.47118297416297238306e-02 	 2.12825271584295649951e-01 	 4.32249035412474724716e-01 
0.62917 	 1.39146412880655195171e-02 	 2.18648371202000812996e-01 	 4.36301900309131518441e-01 
0.63750 	 1.35018012791253590177e-02 	 2.16897274994271888060e-01 	 4.40082123871299246698e-01 
0.64583 	 1.39744510066663000375e-02 	 2.17558708413079976429e-01 	 4.56386237864806920683e-01 
0.65417 	 1.52309529985448274120e-02 	 2.20487080686039310651e-01 	 4.65598416366655443177e-01 
0.66250 	 1.45766300476518947254e-02 	 2.20425984740809488560e-01 	 4.57388392934595489070e-01 
0.67083 	 1.47266998259007811378e-02 	 2.24347872196964698288e-01 	 4.74340541621258104943e-01 
0.67917 	 1.41980924806649269621e-02 	 2.30470205761844793013e-01 	 4.73366773106814242578e-01 
0.68750 	 1.55118503760096251159e-02 	 2.23680466100801278451e-01 	 4.87071097741211878063e-01 
0.69583 	 1.50065753237807637810e-02 	 2.23462659076310077300e-01 	 4.75238877281610627712e-01 
0.70417 	 1.63113684721759022445e-02 	 2.27278576073121768575e-01 	 4.88033533583352552299e-01 
0.71250 	 1.45646801830439116127e-02 	 2.31086933309180175833e-01 	 4.87274711549938288613e-01 
0.72083 	 1.29251023476681051877e-02 	 2.31750615572581891710e-01 	 5.03635431475112138600e-01 
0.72917 	 1.49782658745599532579e-02 	 2.36223199783400256146e-01 	 5.02643905008499758402e-01 
0.73750 	 1.47306602357719414881e-02 	 2.43098789928391234572e-01 	 5.08213039301543489934e-01 
0.74583 	 1.54732397436505939720e-02 	 2.36323096664031506720e-01 	 5.22629307071256210548e-01 
0.75417 	 1.45661948262604118431e-02 	 2.40915377080164583301e-01 	 5.19306183767541451601e-01 
0.76250 	 1.40053094155009449223e-02 	 2.49427601250041902636e-01 	 5.28656182210416103473e-01 
0.77083 	 1.35188323059493107486e-02 	 2.44335475854202066603e-01 	 5.51554461189016631550e-01 
0.77917 	 1.45995377236925773234e-02 	 2.59476212109111148418e-01 	 5.48738030691234723868e-01 
0.78750 	 1.50269575402781525864e-02 	 2.54370726737940200390e-01 	 5.59074812485052086153e-01 
0.79583 	 1.59861687029917813596e-02 	 2.62329256658134890579e-01 	 5.52576690381662127827e-01 
0.80417 	 1.55913340891029386648e-02 	 2.61194828699928938143e-01 	 6.01055840187956880172e-01 
0.81250 	 1.42774328241080123575e-02 	 2.59154901055991315761e-01 	 5.69827810569408788055e-01 
0.82083 	 1.48150376637932595925e-02 	 2.63187587677509493567e-01 	 5.89498659634477006897e-01 
0.82917 	 1.45326407144936182309e-02 	 2.74938693350907148449e-01 	 6.02455378023745713456e-01 
0.83750 	 1.51395682957203864955e-02 	 2.63766966780617562183e-01 	 5.95949750412733458838e-01 
0.84583 	 1.56610916700824255587e-02 	 2.77468599210987543202e-01 	 5.91724059540447933081e-01 
0.85417 	 1.60286421022792537061e-02 	 2.67780237231062090419e-01 	 6.15612581562361316223e-01 
0.86250 	 1.64415254134417342102e-02 	 2.75986919440975864148e-01 	 5.95597959728214165764e-01 
0.87083 	 1.72605489139148506050e-02 	 2.83309613927610781658e-01 	 6.27350528543623386923e-01 
0.87917 	 1.56413638667804166804e-02 	 2.78147096624223155725e-01 	 6.23896489889642857918e-01 
0.88750 	 1.66839264923133896723e-02 	 2.88365391724520359062e-01 	 6.35877869387526994949e-01 
0.89583 	 1.62066789975238711996e-02 	 3.02412093407811388701e-01 	 6.44884348315288069564e-01 
0.90417 	 1.71285754522410051115e-02 	 3.04110754157872476000e-01 	 6.53491563445690926137e-01 
0.91250 	 1.81911105401106956703e-02 	 3.08292556780256465920e-01 	 6.56251559945510987149e-01 
0.92083 	 1.75501941049913089132e-02 	 3.22537193518007414550e-01 	 6.87753383213418167941e-01 
0.92917 	 1.67771370531285823890e-02 	 3.24345358091243207710e-01 	 6.89285150844151872640e-01 
0.93750 	 1.72672817836849318285e-02 	 3.41323554765675052369e-01 	 6.97104938271492557966e-01 
0.94583 	 1.68936757391684906626e-02 	 3.49155437400076262833e-01 	 7.14545618111058544741e-01 
0.95417 	 1.59261385882413925019e-02 	 3.49211541675772119131e-01 	 6.94893854419721623827e-01 
0.96250 	 1.81130863165217571853e-02 	 3.50742673502405621910e-01 	 7.34390077651611461462e-01 
0.97083 	 1.79253088186632700274e-02 	 3.64292460751355684501e-01 	 7.08798446277462246279e-01 
0.97917 	 1.69271961073903971784e-02 	 3.73237696973733212857e-01 	 7.67761144261567274327e-01 
0.98750 	 1.83950061397448322298e-02 	 3.93737747982215502418e-01 	 7.42127726608787008367e-01 
0.99583 	 1.90516609197932326736e-02 	 4.10249657881502749479e-01 	 7.46021497604083538846e-01 
1.00417 	 1.82014902699037979528e-02 	 4.30333942066706442997e-01 	 7.52211711955035000621e-01 
1.01250 	 1.85958559650312195421e-02 	 4.63031945969083869041e-01 	 7.48715397445431363188e-01 
1.02083 	 1.88856070515891379114e-02 	 5.08921486253128274591e-01 	 7.67258935422495014222e-01 
1.02917 	 1.80640523758557360046e-02 	 5.76721264281004897256e-01 	 7.94946447892066920815e-01 
1.03750 	 1.87110461068410796615e-02 	 6.84040566314597753284e-01 	 7.90545470774351222154e-01 
1.04583 	 1.86138263090751959750e-02 	 1.99256480173210959173e+00 	 8.11590134600448487312e-01 
1.05417 	 1.82282513672399962279e-02 	 9.41141788413714652783e-01 	 8.46739049013831679424e-01 
1.06250 	 1.85670900553122492083e-02 	 6.41198136866396151134e-01 	 8.48155622301305700539e-01 
1.07083 	 1.89907102124705455537e-02 	 5.28419251623669428142e-01 	 8.83735405303292642643e-01 
1.07917 	 1.83912058619472261467e-02 	 4.77460420262164231264e-01 	 8.80456490228897936667e-01 
1.08750 	 1.84898911482906519455e-02 	 4.42454262878571646933e-01 	 8.80920633467081160006e-01 
1.09583 	 1.88201421491652684526e-02 	 4.05433025684121595145e-01 	 8.86365134047812253115e-01 
1.10417 	 1.97405373277036166879e-02 	 3.87651592552060386687e-01 	 8.95718586433664420987e-01 
1.11250 	 1.89489185286123226759e-02 	 3.61771172868402268730e-01 	 8.89725628150812686279e-01 
1.12083 	 1.91158611900849213783e-02 	 3.42693583694266556972e-01 	 9.30963179981369126637e-01 
1.12917 	 1.93173635117047694243e-02 	 3.30248441203168818792e-01 	 9.20097252694776157611e-01 
1.13750 	 1.91147417929571801498e-02 	 3.30523092116600802903e-01 	 9.07132071750660351483e-01 
1.14583 	 1.98245418270002332628e-02 	 3.09097495113480003059e-01 	 9.28075155718887878642e-01 
1.15417 	 1.97310924497490942919e-02 	 3.00321580446719804680e-01 	 9.74125463152293091795e-01 
1.16250 	 1.98503875349792559268e-02 	 2.98895791531069876523e-01 	 9.52090984984192867380e-01 
1.17083 	 2.03274378620828914677e-02 	 2.84019347931320054190e-01 	 9.90689574285939733578e-01 
1.17917 	 2.03462184688585380476e-02 	 2.67472228348142659904e-01 	 1.00601525107130340686e+00 
1.18750 	 1.98183083098417006651e-02 	 2.65887947632780674567e-01 	 1.01097268143679408503e+00 
1.19583 	 2.06091157900831767336e-02 	 2.55301417320328072336e-01 	 1.07372885018821007108e+00 
1.20417 	 2.06405967067704379514e-02 	 2.56729863464163987619e-01 	 1.07616757817682762166e+00 
1.21250 	 2.19369450606169379137e-02 	 2.52540219838914559158e-01 	 1.05544747034140717901e+00 
1.22083 	 2.08374692940480540915e-02 	 2.38253703786097920103e-01 	 1.08679691071340567277e+00 
1.22917 	 2.13426904760800686955e-02 	 2.36914503812824056572e-01 	 1.07955872267689079180e+00 
1.23750 	 2.14007927786678403548e-02 	 2.28773294994272347047e-01 	 1.09074496374240936802e+00 
1.24583 	 2.20133514993584751551e-02 	 2.23105433674743364181e-01 	 1.11256601553486400569e+00 
1.25417 	 2.15783918218723953786e-02 	 2.21829353820930469388e-01 	 1.12731156741593152582e+00 
1.26250 	 2.16750166276538647203e-02 	 2.13499856043692037844e-01 	 1.19814760212645188275e+00 
1.27083 	 2.24548245119155741312e-02 	 2.14144562539897526099e-01 	 1.16887579151544018785e+00 
1.27917 	 2.23882338958352050673e-02 	 2.08086266370144379323e-01 	 1.21953395459782898413e+00 
1.28750 	 2.23433597712400268398e-02 	 2.02309378754516711041e-01 	 1.23969675162292514159e+00 
1.29583 	 2.16307656891883103023e-02 	 1.95487446216171451008e-01 	 1.23298337283086278937e+00 
1.30417 	 2.25580510302747852536e-02 	 1.89533389323273793181e-01 	 1.27118000436202871484e+00 
1.31250 	 2.24331872420611352914e-02 	 1.85747860044900348075e-01 	 1.25181350488621467854e+00 
1.32083 	 2.29136750149726668713e-02 	 1.81448922524916594901e-01 	 1.25809857850831119386e+00 
1.32917 	 2.45746195605407863338e-02 	 1.78942108552457512793e-01 	 1.32813739819529019748e+00 
1.33750 	 2.38874027505203180566e-02 	 1.74367656748249943988e-01 	 1.31049376746232359991e+00 
1.34583 	 2.58340725844923221888e-02 	 1.74038613366641614633e-01 	 1.34418796669802076416e+00 
1.35417 	 2.40651324737924977859e-02 	 1.73130985757480732046e-01 	 1.35939826179576872534e+00 
1.36250 	 2.55427907379936654231e-02 	 1.66409375017251448536e-01 	 1.41637080535648340884e+00 
1.37083 	 2.52048274411980841037e-02 	 1.66749242823767851451e-01 	 1.37264062706708300787e+00 
1.37917 	 2.55851981030629505032e-02 	 1.58900023629500675160e-01 	 1.40751526796483950044e+00 
1.38750 	 2.60403913164834882599e-02 	 1.50061928601181365783e-01 	 1.48591954416684624007e+00 
1.39583 	 2.61474489404146283322e-02 	 1.51126607116306044265e-01 	 1.49612535256107404003e+00 
1.40417 	 2.55684750752572451105e-02 	 1.49257064217676094220e-01 	 1.50577336879929180036e+00 
1.41250 	 2.55469080900516364030e-02 	 1.49048388971069811770e-01 	 1.48666314279515177077e+00 
1.42083 	 2.60602081271983122834e-02 	 1.48504062397808944684e-01 	 1.51389276186948040781e+00 
1.42917 	 2.69253325462929203604e-02 	 1.47709489554583517368e-01 	 1.56127593519874729999e+00 
1.43750 	 2.66975982892998127405e-02 	 1.43174871673283771178e-01 	 1.52386485826385587039e+00 
1.44583 	 2.65774157382754547263e-02 	 1.36615463101685846725e-01 	 1.58848684566374731553e+00 
1.45417 	 2.67577383218995656922e-02 	 1.35631798032133127352e-01 	 1.61205226635373177757e+00 
1.46250 	 2.73865623112619846480e-02 	 1.31349918134378046419e-01 	 1.62326996185669325534e+00 
1.47083 	 2.74743387409645094255e-02 	 1.32215518943296472809e-01 	 1.63502671448472081117e+00 
1.47917 	 2.74027191876942723125e-02 	 1.28324651514690996068e-01 	 1.66516325780648943855e+00 
1.48750 	 2.79261387136105279638e-02 	 1.28850538303055067724e-01 	 1.67783414007987019545e+00 
1.49583 	 2.90471993663052319157e-02 	 1.25759214496735161060e-01 	 1.69904336164760505490e+00 
1.50417 	 2.87504294618040855125e-02 	 1.27325850853989064326e-01 	 1.68572664970203445201e+00 
1.51250 	 2.85277977474776671396e-02 	 1.22582275364415280161e-01 	 1.75176312988471449827e+00 
1.52083 	 2.91700365732066833890e-02 	 1.22332336439206490475e-01 	 1.76050813673507033918e+00 
1.52917 	 2.85478992734367956197e-02 	 1.17135182944962529250e-01 	 1.78877914812947791390e+00 
1.53750 	 2.86727696283046520898e-02 	 1.13244429561795020844e-01 	 1.76395893153519645047e+00 
1.54583 	 2.87784598837926459958e-02 	 1.15075844092168796950e-01 	 1.77303696400786003906e+00 
1.55417 	 3.02568790705999499102e-02 	 1.11956232436780739325e-01 	 1.80419943233541157923e+00 
1.56250 	 3.01743024128337117284e-02 	 1.12268629526195040658e-01 	 1.84673118273932312938e+00 
1.57083 	 3.02749176561580395084e-02 	 1.12954142868729429106e-01 	 1.83970327012473466866e+00 
1.57917 	 3.07498504581429285554e-02 	 1.09203356649296534631e-01 	 1.89973417535541355683e+00 
1.58750 	 3.13086744985526799212e-02 	 1.09876972053704655141e-01 	 1.90981422680639756351e+00 
1.59583 	 3.01537319900611576473e-02 	 1.06443289337496665992e-01 	 1.94109562585771744381e+00 
1.60417 	 3.02639959698876338801e-02 	 1.03825963815936048174e-01 	 1.96691275493550277176e+00 
1.61250 	 3.13077221540662212207e-02 	 1.02110196618698259585e-01 	 1.94849480348031245391e+00 
1.62083 	 3.15037949123125049500e-02 	 1.00851988440536194380e-01 	 1.92767740844341539663e+00 
1.62917 	 3.15098639052200507615e-02 	 9.66629540704810885643e-02 	 2.04163291253041911943e+00 
1.63750 	 3.22142601073631615338e-02 	 9.58636231027775176372e-02 	 2.06190324931775093020e+00 
1.64583 	 3.24668441194174914322e-02 	 9.38493851504367676553e-02 	 2.07606649196418802106e+00 
1.65417 	 3.34769177141796131503e-02 	 9.07526663278270251389e-02 	 2.10313700911015244444e+00 
1.66250 	 3.26050244416993817431e-02 	 9.18641991972673349620e-02 	 2.16059123697598831626e+00 
1.67083 	 3.32759181321650443497e-02 	 8.89241085261208707990e-02 	 2.13890404391254440597e+00 
1.67917 	 3.33270788127444164695e-02 	 8.63228284989588229292e-02 	 2.18822515371388925942e+00 
1.68750 	 3.43126352793824695997e-02 	 8.52346111904195430364e-02 	 2.26053208155147489222e+00 
1.69583 	 3.37765723819495461422e-02 	 8.57614829075255685753e-02 	 2.26679015468767230956e+00 
1.70417 	 3.55220361347188054446e-02 	 8.36684560413372135912e-02 	 2.24676119275265628872e+00 
1.71250 	 3.52112942580693547012e-02 	 8.03680097948771821059e-02 	 2.23167949901332773877e+00 
1.72083 	 3.53884292409500228471e-02 	 8.17611106542129040253e-02 	 2.18746071448303380791e+00 
1.72917 	 3.59259497263777760612e-02 	 7.72816968499499129530e-02 	 2.25022978832955056205e+00 
1.73750 	 3.53189210205894360550e-02 	 7.45530539544610043601e-02 	 2.25428943501436052088e+00 
1.74583 	 3.52190976425522175863e-02 	 7.76688822395609351767e-02 	 2.24468009042803373632e+00 
1.75417 	 3.63068132879854135742e-02 	 7.23199325927560698890e-02 	 2.30347221985467731642e+00 
1.76250 	 3.68532373370463531281e-02 	 7.19696037373481478649e-02 	 2.30046155505624794202e+00 
1.77083 	 3.71889671387691037041e-02 	 7.04382393329349987265e-02 	 2.33557805153320874325e+00 
1.77917 	 3.65373209566597842435e-02 	 6.90805623321118639213e-02 	 2.33043666583823583238e+00 
1.78750 	 3.81799335771255202165e-02 	 7.01871935766614218899e-02 	 2.32911869273034399797e+00 
1.79583 	 3.86749699852281109136e-02 	 6.80905001809841564642e-02 	 2.31446053721171152162e+00 
1.80417 	 3.90131886480220152480e-02 	 6.75995073840875565496e-02 	 2.42457239838465454795e+00 
1.81250 	 3.96142347767294150662e-02 	 6.47872202207423614206e-02 	 2.43720203402573298845e+00 
1.82083 	 4.02171857224477985460e-02 	 6.43411411469997363000e-02 	 2.39852089575227989116e+00 
1.82917 	 4.03140890146641214797e-02 	 6.45441383705276094940e-02 	 2.38489905684373093564e+00 
1.83750 	 4.06753666694320836772e-02 	 6.29016024600177331427e-02 	 2.39409887038007918036e+00 
1.84583 	 4.13569921759472866607e-02 	 6.16943770165548910356e-02 	 2.45634728721143735797e+00 
1.85417 	 4.03506935709726163863e-02 	 6.03567223518937240323e-02 	 2.47932890931961225078e+00 
1.86250 	 4.08756578754075894366e-02 	 6.15072157228179622335e-02 	 2.41061304357569650136e+00 
1.87083 	 4.20786873199766042752e-02 	 5.82756940226049555132e-02 	 2.44079137998037154489e+00 
1.87917 	 4.25220079934573655378e-02 	 5.66355266403930357466e-02 	 2.44187219047542258821e+00 
1.88750 	 4.18827484133860936111e-02 	 5.92443186141694971836e-02 	 2.48386367883343739393e+00 
1.89583 	 4.20809758481554899157e-02 	 5.66975653983831789917e-02 	 2.44374310811947781374e+00 
1.90417 	 4.28286409391163067073e-02 	 5.71989611940698639003e-02 	 2.45511908664371514277e+00 
1.91250 	 4.28440358883632188558e-02 	 5.58950081905303167162e-02 	 2.41415853925540835334e+00 
1.92083 	 4.37206893251448833193e-02 	 5.38250728386029456130e-02 	 2.43624354900088135878e+00 
1.92917 	 4.48034721794193582789e-02 	 5.28653687505262551150e-02 	 2.41837579507693956060e+00 
1.93750 	 4.46163791952670779617e-02 	 5.14190947833043990323e-02 	 2.37326852581025971034e+00 
1.94583 	 4.33364601277057906459e-02 	 5.03853019486008094074e-02 	 2.42391568501182730344e+00 
1.95417 	 4.61946118108114006651e-02 	 4.85501064458990286288e-02 	 2.38991691194936661802e+00 
1.96250 	 4.72667987873593362091e-02 	 5.07667498711483825002e-02 	 2.33924074083723754214e+00 
1.97083 	 4.59407127998825021153e-02 	 4.73737864184431839432e-02 	 2.33223860998357146457e+00 
1.97917 	 4.61241218231138241923e-02 	 4.85005855565181637212e-02 	 2.28229549800818221073e+00 
1.98750 	 4.59501409779395145194e-02 	 4.81201781748554491269e-02 	 2.24389859701823146665e+00 
1.99583 	 4.74961044864699519219e-02 	 4.75842448965887870882e-02 	 1.17392619022947086727e+00 
2.00417 	 3.98782047361700797694e+00 	 3.72396337529843401981e+00 	 7.30448017662956061713e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   1.0E-4		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1e4; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);