time elapsed: 3.9385 seconds

=================================

sim results:

number of photons = 1000.0
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.574e+03 	 6.245e+01 	 7.496e+00 
0.01250 	 5.532e+02 	 2.044e+01 	 6.398e+00 
0.02083 	 1.909e+02 	 1.216e+01 	 6.062e+00 
0.02917 	 8.503e+01 	 9.164e+00 	 5.520e+00 
0.03750 	 5.232e+01 	 6.656e+00 	 5.525e+00 
0.04583 	 4.161e+01 	 6.665e+00 	 5.187e+00 
0.05417 	 3.161e+01 	 5.756e+00 	 4.343e+00 
0.06250 	 2.427e+01 	 5.107e+00 	 4.406e+00 
0.07083 	 1.870e+01 	 3.810e+00 	 4.552e+00 
0.07917 	 1.605e+01 	 4.249e+00 	 4.517e+00 
0.08750 	 1.103e+01 	 3.176e+00 	 4.271e+00 
0.09583 	 1.018e+01 	 3.084e+00 	 4.221e+00 
0.10417 	 8.041e+00 	 2.680e+00 	 4.141e+00 
0.11250 	 7.698e+00 	 2.613e+00 	 4.210e+00 
0.12083 	 6.335e+00 	 2.589e+00 	 3.772e+00 
0.12917 	 6.284e+00 	 2.422e+00 	 3.855e+00 
0.13750 	 4.890e+00 	 2.220e+00 	 3.708e+00 
0.14583 	 4.470e+00 	 2.084e+00 	 3.605e+00 
0.15417 	 4.399e+00 	 2.036e+00 	 3.743e+00 
0.16250 	 3.438e+00 	 1.788e+00 	 3.897e+00 
0.17083 	 3.470e+00 	 1.894e+00 	 3.465e+00 
0.17917 	 3.194e+00 	 1.865e+00 	 3.187e+00 
0.18750 	 2.854e+00 	 1.778e+00 	 3.207e+00 
0.19583 	 2.654e+00 	 1.654e+00 	 3.416e+00 
0.20417 	 2.521e+00 	 1.648e+00 	 3.155e+00 
0.21250 	 2.357e+00 	 1.628e+00 	 3.116e+00 
0.22083 	 2.244e+00 	 1.569e+00 	 3.131e+00 
0.22917 	 2.340e+00 	 1.451e+00 	 3.045e+00 
0.23750 	 1.938e+00 	 1.410e+00 	 3.112e+00 
0.24583 	 1.972e+00 	 1.357e+00 	 3.038e+00 
0.25417 	 1.800e+00 	 1.316e+00 	 2.774e+00 
0.26250 	 1.732e+00 	 1.170e+00 	 2.931e+00 
0.27083 	 1.669e+00 	 1.240e+00 	 2.804e+00 
0.27917 	 1.479e+00 	 1.305e+00 	 2.657e+00 
0.28750 	 1.448e+00 	 1.246e+00 	 2.635e+00 
0.29583 	 1.463e+00 	 1.186e+00 	 2.642e+00 
0.30417 	 1.161e+00 	 1.087e+00 	 2.530e+00 
0.31250 	 1.120e+00 	 1.068e+00 	 2.688e+00 
0.32083 	 1.122e+00 	 1.034e+00 	 2.359e+00 
0.32917 	 1.195e+00 	 1.048e+00 	 2.433e+00 
0.33750 	 9.963e-01 	 9.546e-01 	 2.280e+00 
0.34583 	 1.069e+00 	 8.373e-01 	 2.222e+00 
0.35417 	 1.028e+00 	 9.226e-01 	 2.307e+00 
0.36250 	 9.628e-01 	 9.116e-01 	 2.247e+00 
0.37083 	 8.139e-01 	 8.723e-01 	 2.242e+00 
0.37917 	 8.819e-01 	 9.454e-01 	 2.232e+00 
0.38750 	 8.170e-01 	 7.990e-01 	 2.293e+00 
0.39583 	 8.228e-01 	 8.025e-01 	 2.215e+00 
0.40417 	 7.548e-01 	 7.720e-01 	 2.236e+00 
0.41250 	 6.851e-01 	 7.524e-01 	 2.294e+00 
0.42083 	 6.741e-01 	 7.917e-01 	 2.119e+00 
0.42917 	 7.116e-01 	 6.737e-01 	 2.077e+00 
0.43750 	 6.178e-01 	 7.691e-01 	 2.053e+00 
0.44583 	 6.435e-01 	 6.954e-01 	 2.141e+00 
0.45417 	 6.043e-01 	 6.688e-01 	 1.929e+00 
0.46250 	 5.946e-01 	 6.357e-01 	 1.925e+00 
0.47083 	 5.665e-01 	 7.299e-01 	 1.997e+00 
0.47917 	 5.707e-01 	 6.277e-01 	 1.920e+00 
0.48750 	 6.084e-01 	 6.732e-01 	 1.917e+00 
0.49583 	 4.981e-01 	 6.228e-01 	 1.634e+00 
0.50417 	 4.831e-01 	 6.293e-01 	 1.697e+00 
0.51250 	 4.836e-01 	 6.064e-01 	 1.743e+00 
0.52083 	 4.861e-01 	 5.914e-01 	 1.768e+00 
0.52917 	 4.661e-01 	 5.908e-01 	 1.633e+00 
0.53750 	 4.551e-01 	 5.245e-01 	 1.709e+00 
0.54583 	 4.206e-01 	 5.824e-01 	 1.635e+00 
0.55417 	 4.010e-01 	 5.153e-01 	 1.701e+00 
0.56250 	 3.664e-01 	 5.158e-01 	 1.663e+00 
0.57083 	 3.715e-01 	 5.038e-01 	 1.619e+00 
0.57917 	 3.905e-01 	 5.160e-01 	 1.502e+00 
0.58750 	 3.465e-01 	 5.029e-01 	 1.436e+00 
0.59583 	 3.320e-01 	 4.726e-01 	 1.558e+00 
0.60417 	 3.328e-01 	 4.742e-01 	 1.445e+00 
0.61250 	 3.242e-01 	 4.762e-01 	 1.486e+00 
0.62083 	 3.152e-01 	 4.812e-01 	 1.495e+00 
0.62917 	 2.854e-01 	 4.572e-01 	 1.484e+00 
0.63750 	 2.922e-01 	 5.015e-01 	 1.442e+00 
0.64583 	 3.005e-01 	 4.234e-01 	 1.363e+00 
0.65417 	 2.909e-01 	 4.294e-01 	 1.358e+00 
0.66250 	 2.414e-01 	 3.995e-01 	 1.291e+00 
0.67083 	 2.439e-01 	 4.195e-01 	 1.288e+00 
0.67917 	 2.606e-01 	 4.099e-01 	 1.296e+00 
0.68750 	 2.595e-01 	 3.732e-01 	 1.235e+00 
0.69583 	 2.406e-01 	 4.066e-01 	 1.296e+00 
0.70417 	 2.472e-01 	 3.943e-01 	 1.314e+00 
0.71250 	 2.238e-01 	 3.787e-01 	 1.361e+00 
0.72083 	 2.184e-01 	 3.876e-01 	 1.269e+00 
0.72917 	 2.376e-01 	 3.819e-01 	 1.332e+00 
0.73750 	 2.154e-01 	 3.400e-01 	 1.119e+00 
0.74583 	 2.195e-01 	 3.350e-01 	 1.160e+00 
0.75417 	 2.106e-01 	 3.399e-01 	 1.119e+00 
0.76250 	 2.167e-01 	 3.363e-01 	 1.135e+00 
0.77083 	 2.073e-01 	 3.201e-01 	 1.101e+00 
0.77917 	 2.068e-01 	 3.095e-01 	 1.033e+00 
0.78750 	 1.959e-01 	 3.389e-01 	 1.172e+00 
0.79583 	 1.937e-01 	 3.008e-01 	 9.881e-01 
0.80417 	 1.746e-01 	 2.937e-01 	 1.062e+00 
0.81250 	 1.826e-01 	 3.312e-01 	 1.077e+00 
0.82083 	 2.035e-01 	 3.176e-01 	 1.067e+00 
0.82917 	 1.809e-01 	 3.097e-01 	 1.084e+00 
0.83750 	 1.680e-01 	 2.646e-01 	 9.925e-01 
0.84583 	 1.630e-01 	 2.852e-01 	 9.077e-01 
0.85417 	 1.534e-01 	 2.788e-01 	 1.015e+00 
0.86250 	 1.375e-01 	 2.630e-01 	 1.036e+00 
0.87083 	 1.517e-01 	 2.565e-01 	 9.940e-01 
0.87917 	 1.560e-01 	 2.599e-01 	 9.980e-01 
0.88750 	 1.384e-01 	 2.593e-01 	 9.566e-01 
0.89583 	 1.452e-01 	 2.518e-01 	 8.676e-01 
0.90417 	 1.304e-01 	 2.460e-01 	 8.704e-01 
0.91250 	 1.297e-01 	 2.426e-01 	 9.115e-01 
0.92083 	 1.325e-01 	 2.406e-01 	 9.215e-01 
0.92917 	 1.363e-01 	 2.298e-01 	 9.037e-01 
0.93750 	 1.386e-01 	 2.481e-01 	 9.443e-01 
0.94583 	 1.321e-01 	 2.084e-01 	 9.264e-01 
0.95417 	 1.180e-01 	 2.055e-01 	 8.608e-01 
0.96250 	 1.227e-01 	 1.975e-01 	 8.291e-01 
0.97083 	 1.361e-01 	 2.222e-01 	 9.158e-01 
0.97917 	 1.190e-01 	 1.879e-01 	 8.875e-01 
0.98750 	 1.127e-01 	 1.958e-01 	 8.952e-01 
0.99583 	 1.165e-01 	 1.948e-01 	 8.474e-01 
1.00417 	 1.073e-01 	 1.950e-01 	 8.073e-01 
1.01250 	 1.026e-01 	 1.881e-01 	 8.127e-01 
1.02083 	 1.029e-01 	 1.663e-01 	 6.990e-01 
1.02917 	 1.027e-01 	 1.942e-01 	 7.218e-01 
1.03750 	 1.001e-01 	 1.821e-01 	 7.230e-01 
1.04583 	 9.957e-02 	 1.615e-01 	 7.445e-01 
1.05417 	 9.287e-02 	 1.727e-01 	 7.562e-01 
1.06250 	 9.746e-02 	 1.676e-01 	 7.576e-01 
1.07083 	 9.223e-02 	 1.467e-01 	 6.806e-01 
1.07917 	 8.619e-02 	 1.775e-01 	 7.476e-01 
1.08750 	 8.670e-02 	 1.589e-01 	 7.114e-01 
1.09583 	 8.661e-02 	 1.466e-01 	 7.272e-01 
1.10417 	 8.144e-02 	 1.525e-01 	 6.955e-01 
1.11250 	 8.188e-02 	 1.417e-01 	 7.346e-01 
1.12083 	 7.818e-02 	 1.349e-01 	 7.806e-01 
1.12917 	 7.756e-02 	 1.481e-01 	 7.035e-01 
1.13750 	 7.328e-02 	 1.403e-01 	 6.815e-01 
1.14583 	 6.806e-02 	 1.504e-01 	 6.000e-01 
1.15417 	 7.307e-02 	 1.496e-01 	 6.475e-01 
1.16250 	 7.580e-02 	 1.505e-01 	 6.648e-01 
1.17083 	 6.982e-02 	 1.568e-01 	 7.039e-01 
1.17917 	 6.583e-02 	 1.400e-01 	 6.152e-01 
1.18750 	 6.796e-02 	 1.286e-01 	 6.467e-01 
1.19583 	 6.996e-02 	 1.233e-01 	 6.198e-01 
1.20417 	 6.269e-02 	 1.247e-01 	 6.557e-01 
1.21250 	 6.531e-02 	 1.124e-01 	 5.920e-01 
1.22083 	 5.481e-02 	 1.061e-01 	 5.862e-01 
1.22917 	 5.354e-02 	 1.152e-01 	 5.611e-01 
1.23750 	 5.252e-02 	 1.226e-01 	 5.651e-01 
1.24583 	 5.417e-02 	 1.053e-01 	 5.612e-01 
1.25417 	 5.256e-02 	 1.071e-01 	 6.200e-01 
1.26250 	 4.743e-02 	 1.139e-01 	 6.036e-01 
1.27083 	 5.429e-02 	 1.084e-01 	 5.401e-01 
1.27917 	 5.112e-02 	 1.088e-01 	 5.127e-01 
1.28750 	 5.066e-02 	 1.023e-01 	 5.202e-01 
1.29583 	 4.554e-02 	 1.002e-01 	 4.911e-01 
1.30417 	 5.053e-02 	 1.022e-01 	 4.982e-01 
1.31250 	 5.005e-02 	 9.907e-02 	 4.963e-01 
1.32083 	 4.806e-02 	 9.379e-02 	 4.569e-01 
1.32917 	 4.452e-02 	 1.057e-01 	 4.801e-01 
1.33750 	 4.595e-02 	 1.036e-01 	 4.843e-01 
1.34583 	 4.454e-02 	 9.533e-02 	 4.587e-01 
1.35417 	 4.428e-02 	 9.761e-02 	 4.145e-01 
1.36250 	 4.185e-02 	 9.289e-02 	 4.435e-01 
1.37083 	 4.193e-02 	 9.597e-02 	 3.907e-01 
1.37917 	 4.189e-02 	 8.881e-02 	 4.406e-01 
1.38750 	 4.006e-02 	 8.679e-02 	 4.379e-01 
1.39583 	 4.240e-02 	 8.824e-02 	 3.976e-01 
1.40417 	 3.632e-02 	 7.717e-02 	 4.240e-01 
1.41250 	 4.214e-02 	 8.626e-02 	 3.725e-01 
1.42083 	 3.768e-02 	 8.862e-02 	 3.550e-01 
1.42917 	 3.810e-02 	 8.191e-02 	 3.608e-01 
1.43750 	 3.668e-02 	 7.530e-02 	 3.707e-01 
1.44583 	 3.807e-02 	 6.730e-02 	 3.801e-01 
1.45417 	 3.424e-02 	 7.193e-02 	 3.194e-01 
1.46250 	 3.797e-02 	 7.160e-02 	 3.057e-01 
1.47083 	 3.482e-02 	 7.174e-02 	 3.358e-01 
1.47917 	 3.532e-02 	 6.688e-02 	 3.105e-01 
1.48750 	 3.407e-02 	 7.766e-02 	 3.465e-01 
1.49583 	 3.055e-02 	 7.206e-02 	 3.461e-01 
1.50417 	 3.305e-02 	 7.221e-02 	 3.430e-01 
1.51250 	 3.098e-02 	 6.496e-02 	 3.222e-01 
1.52083 	 3.232e-02 	 6.685e-02 	 2.753e-01 
1.52917 	 2.929e-02 	 6.652e-02 	 3.320e-01 
1.53750 	 2.896e-02 	 6.581e-02 	 3.003e-01 
1.54583 	 2.646e-02 	 6.888e-02 	 3.352e-01 
1.55417 	 2.504e-02 	 5.412e-02 	 3.495e-01 
1.56250 	 2.608e-02 	 6.373e-02 	 2.850e-01 
1.57083 	 2.578e-02 	 5.748e-02 	 3.039e-01 
1.57917 	 2.545e-02 	 5.300e-02 	 2.802e-01 
1.58750 	 2.386e-02 	 5.595e-02 	 2.762e-01 
1.59583 	 2.473e-02 	 5.348e-02 	 2.909e-01 
1.60417 	 2.412e-02 	 5.075e-02 	 2.621e-01 
1.61250 	 2.314e-02 	 5.425e-02 	 2.966e-01 
1.62083 	 2.327e-02 	 5.581e-02 	 2.749e-01 
1.62917 	 2.190e-02 	 5.487e-02 	 2.718e-01 
1.63750 	 2.220e-02 	 5.167e-02 	 2.866e-01 
1.64583 	 2.053e-02 	 4.761e-02 	 2.907e-01 
1.65417 	 2.081e-02 	 5.323e-02 	 2.487e-01 
1.66250 	 1.943e-02 	 5.081e-02 	 2.455e-01 
1.67083 	 2.103e-02 	 4.489e-02 	 2.500e-01 
1.67917 	 1.862e-02 	 4.466e-02 	 2.369e-01 
1.68750 	 1.977e-02 	 5.433e-02 	 2.266e-01 
1.69583 	 1.984e-02 	 5.093e-02 	 2.130e-01 
1.70417 	 1.749e-02 	 4.079e-02 	 2.495e-01 
1.71250 	 1.814e-02 	 4.264e-02 	 2.286e-01 
1.72083 	 2.008e-02 	 3.471e-02 	 2.219e-01 
1.72917 	 1.826e-02 	 3.995e-02 	 2.328e-01 
1.73750 	 1.725e-02 	 4.318e-02 	 2.463e-01 
1.74583 	 1.727e-02 	 4.101e-02 	 2.134e-01 
1.75417 	 1.574e-02 	 4.247e-02 	 2.306e-01 
1.76250 	 1.521e-02 	 3.860e-02 	 2.427e-01 
1.77083 	 1.666e-02 	 3.818e-02 	 2.412e-01 
1.77917 	 1.613e-02 	 3.626e-02 	 2.199e-01 
1.78750 	 1.718e-02 	 4.005e-02 	 2.128e-01 
1.79583 	 1.448e-02 	 3.874e-02 	 1.923e-01 
1.80417 	 1.499e-02 	 3.513e-02 	 2.016e-01 
1.81250 	 1.586e-02 	 3.617e-02 	 2.179e-01 
1.82083 	 1.417e-02 	 3.797e-02 	 1.641e-01 
1.82917 	 1.434e-02 	 3.509e-02 	 2.068e-01 
1.83750 	 1.480e-02 	 3.561e-02 	 1.849e-01 
1.84583 	 1.408e-02 	 3.519e-02 	 1.748e-01 
1.85417 	 1.381e-02 	 3.351e-02 	 1.730e-01 
1.86250 	 1.255e-02 	 3.353e-02 	 1.840e-01 
1.87083 	 1.332e-02 	 3.206e-02 	 1.580e-01 
1.87917 	 1.271e-02 	 3.383e-02 	 1.775e-01 
1.88750 	 1.155e-02 	 3.394e-02 	 1.553e-01 
1.89583 	 1.280e-02 	 3.242e-02 	 1.687e-01 
1.90417 	 1.126e-02 	 2.826e-02 	 1.738e-01 
1.91250 	 9.717e-03 	 3.276e-02 	 1.696e-01 
1.92083 	 1.087e-02 	 2.941e-02 	 1.744e-01 
1.92917 	 1.188e-02 	 2.910e-02 	 1.620e-01 
1.93750 	 1.135e-02 	 2.953e-02 	 1.664e-01 
1.94583 	 1.076e-02 	 2.965e-02 	 1.302e-01 
1.95417 	 1.053e-02 	 3.116e-02 	 1.458e-01 
1.96250 	 1.141e-02 	 3.169e-02 	 1.540e-01 
1.97083 	 1.050e-02 	 2.844e-02 	 1.278e-01 
1.97917 	 9.094e-03 	 2.844e-02 	 1.376e-01 
1.98750 	 9.023e-03 	 2.703e-02 	 1.147e-01 
1.99583 	 8.431e-03 	 2.497e-02 	 1.429e-01 
2.00417 	 8.996e-01 	 2.084e+00 	 1.037e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 1.0E-4 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = 1e3 # set number of photons in simulation
    radial_size = 2.0 # cm, total range over which bins extend
    NR          = 240 # set number of bins.
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = radial_size/NR  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    i_photon = 0
    InitRandomGen()
    Csph = [0 for _ in range(0,NR+1)]
    Ccyl = [0 for _ in range(0,NR+1)]
    Cpla = [0 for _ in range(0,NR+1)]

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    while (i_photon < Nphotons):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements an isotropic point source.
        # *****
        i_photon += 1	# increment photon count
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = 0                     # Set photon position to origin.
        y = 0
        z = 0

        # Randomly set photon trajectory to yield an isotropic source.
        # psi - berween x-y axis
        # theta between z and R
        costheta = 2.0*RandomNum() - 1.0
        sintheta = math.sqrt(1.0 - costheta*costheta)	# sintheta is always positive
        psi = 2.0*PI*RandomNum()
        ux = sintheta*math.cos(psi)
        uy = sintheta*math.sin(psi)
        uz = costheta


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR): # last bin is for overflow
                ir = NR
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR): # last bin is for overflow
                ir = NR
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR): # last bin is for overflow
                ir = NR
            Cpla[ir] += absorb # DROP absorbed weight into bin
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz);
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    file = open("mc321_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:4.3e} \t {Fcyl:4.3e} \t {Fpla:4.3e} \n")

    file.close()


    # end of main


main()
