time elapsed: 2264.5167 seconds

=================================

sim results:

number of photons = 1000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.95110845797313257888e-03 	 1.61988484634443735688e-01 	 2.70246940822659209580e-01 
0.01250 	 1.14036208716282901066e-02 	 1.62753740780734512672e-01 	 2.69685792001774560234e-01 
0.02083 	 1.22020128773012680179e-02 	 1.60438806368929903767e-01 	 2.69754643289407181062e-01 
0.02917 	 1.08691298734702943007e-02 	 1.61065358071509845406e-01 	 2.70404536208321222279e-01 
0.03750 	 1.01482932260080673664e-02 	 1.62167313884925140544e-01 	 2.69589482665169355435e-01 
0.04583 	 1.00566523235266248870e-02 	 1.62560656184506241440e-01 	 2.69465133119751565349e-01 
0.05417 	 1.11971780842794101790e-02 	 1.58925194033364858281e-01 	 2.69391179102388300670e-01 
0.06250 	 1.08685789892339363522e-02 	 1.61978452958341373469e-01 	 2.71041405618230812902e-01 
0.07083 	 1.07304872120655963447e-02 	 1.61942510692995561561e-01 	 2.70533592416205947995e-01 
0.07917 	 1.09527917008929824572e-02 	 1.61601115143962803522e-01 	 2.72010691770657120347e-01 
0.08750 	 1.07576662710885482405e-02 	 1.60630510717017338518e-01 	 2.72996067977024248208e-01 
0.09583 	 1.08934044850985452951e-02 	 1.61653114003961706491e-01 	 2.73531062996933860276e-01 
0.10417 	 1.08717066401809222403e-02 	 1.62777631213220974615e-01 	 2.73544185638581238695e-01 
0.11250 	 1.05461466030574903957e-02 	 1.62718536816838177383e-01 	 2.74260331731612738704e-01 
0.12083 	 1.10033309214701228301e-02 	 1.60604616966514790466e-01 	 2.75174942439301739583e-01 
0.12917 	 1.11003283770189260793e-02 	 1.61483991991826392187e-01 	 2.77393275499480618240e-01 
0.13750 	 1.16052082529557593071e-02 	 1.62443769461450393532e-01 	 2.76465698658734437831e-01 
0.14583 	 1.12392222814373787115e-02 	 1.64493274392406213513e-01 	 2.77448333759907961316e-01 
0.15417 	 1.15259748861601570014e-02 	 1.64444433204055745490e-01 	 2.79436105717843941143e-01 
0.16250 	 1.11168891728694995552e-02 	 1.64491538049170743507e-01 	 2.79440784405275921554e-01 
0.17083 	 1.14761443559284592036e-02 	 1.65145269794316401635e-01 	 2.80847032102145344190e-01 
0.17917 	 1.16818507585085846340e-02 	 1.64865044046408726341e-01 	 2.82946653941873738081e-01 
0.18750 	 1.13218196050844637640e-02 	 1.65458741182299695627e-01 	 2.83388421528940503968e-01 
0.19583 	 1.18651119049009937806e-02 	 1.66344973333920620462e-01 	 2.85064503592776352647e-01 
0.20417 	 1.16305894935224574810e-02 	 1.66660635437601567510e-01 	 2.86258891937085702128e-01 
0.21250 	 1.15083865508315875970e-02 	 1.65926453235250792595e-01 	 2.87410077888019421799e-01 
0.22083 	 1.14898131742866890098e-02 	 1.65918375493370157114e-01 	 2.89460584574511903266e-01 
0.22917 	 1.14177865238095626460e-02 	 1.66052222897342366403e-01 	 2.91106451860462522863e-01 
0.23750 	 1.16391599570923320872e-02 	 1.66951612052344405823e-01 	 2.91586378502758980513e-01 
0.24583 	 1.16824848262120552927e-02 	 1.69417090444309775821e-01 	 2.93762103397872231803e-01 
0.25417 	 1.14599204474434539919e-02 	 1.68384663896715219833e-01 	 2.95301846747490714939e-01 
0.26250 	 1.15630461771514553987e-02 	 1.69489905456406325657e-01 	 2.97324952262133235248e-01 
0.27083 	 1.15234579187239276343e-02 	 1.70754317478913369976e-01 	 2.98485711356276384176e-01 
0.27917 	 1.18843326039975629577e-02 	 1.70893090355305754535e-01 	 3.00598030719253561660e-01 
0.28750 	 1.17451653328232326345e-02 	 1.71490749795196406602e-01 	 3.02257181803623264926e-01 
0.29583 	 1.17533329421635260315e-02 	 1.71193523218892584836e-01 	 3.03996794212657905909e-01 
0.30417 	 1.13934524103391741912e-02 	 1.72654823788280176178e-01 	 3.06068167080890685128e-01 
0.31250 	 1.18489609688541431415e-02 	 1.72347228412935205011e-01 	 3.09216113113925661349e-01 
0.32083 	 1.15564842697780233854e-02 	 1.74337849703325886708e-01 	 3.10463767391385370154e-01 
0.32917 	 1.17000266425868783282e-02 	 1.74289548840127872520e-01 	 3.13745965719177621889e-01 
0.33750 	 1.20199750336801476636e-02 	 1.75250813868371935200e-01 	 3.15423638427405950146e-01 
0.34583 	 1.19557089329970257785e-02 	 1.75482060243059206917e-01 	 3.17339689860307361258e-01 
0.35417 	 1.20335595194384741002e-02 	 1.76507580121169932452e-01 	 3.20367846329212446754e-01 
0.36250 	 1.21425543979892126140e-02 	 1.77066031262819778558e-01 	 3.21801237270457229922e-01 
0.37083 	 1.19149107479154994088e-02 	 1.77577070469999293012e-01 	 3.23538777953471134996e-01 
0.37917 	 1.20187471128682769883e-02 	 1.78895990808929289395e-01 	 3.27194802297874953734e-01 
0.38750 	 1.19725934347542917191e-02 	 1.79556761833647909876e-01 	 3.29590022965928375331e-01 
0.39583 	 1.22066030557140096924e-02 	 1.79624566591613882283e-01 	 3.34342504645440297129e-01 
0.40417 	 1.20978814785687310840e-02 	 1.80993582627248822403e-01 	 3.35715436298891167777e-01 
0.41250 	 1.22866445674992361831e-02 	 1.81645343476718984510e-01 	 3.37226847983172151046e-01 
0.42083 	 1.22761921517711841689e-02 	 1.83024612958508497984e-01 	 3.39772654783127237010e-01 
0.42917 	 1.22613975626157320487e-02 	 1.83064648926656303729e-01 	 3.43439581895314760551e-01 
0.43750 	 1.23396207454792052050e-02 	 1.84613777856014155132e-01 	 3.46727578916348255778e-01 
0.44583 	 1.23611260301663417049e-02 	 1.85549077977688409158e-01 	 3.50187875282378768826e-01 
0.45417 	 1.25501472813828954950e-02 	 1.87115963020015069196e-01 	 3.52736470042102068234e-01 
0.46250 	 1.24981846764395821553e-02 	 1.87463340899063996003e-01 	 3.57616884018410019497e-01 
0.47083 	 1.23401635107915665091e-02 	 1.88838214533634918268e-01 	 3.60922147026537576409e-01 
0.47917 	 1.24367082760596624202e-02 	 1.90163833689349637268e-01 	 3.64024662340167226571e-01 
0.48750 	 1.24685715674306245304e-02 	 1.90810572558015839606e-01 	 3.67737882737542209899e-01 
0.49583 	 1.25995550133228655099e-02 	 1.92090079221986981262e-01 	 3.70819494614555489331e-01 
0.50417 	 1.28164445713928147608e-02 	 1.93192428099633162208e-01 	 3.74830625478770995684e-01 
0.51250 	 1.26892998327138694509e-02 	 1.94330538339337860476e-01 	 3.77045024744099455116e-01 
0.52083 	 1.28761564294589420793e-02 	 1.95458745152371382581e-01 	 3.82804748970200392488e-01 
0.52917 	 1.27696500425302540693e-02 	 1.96486636755013238664e-01 	 3.88080372810067741884e-01 
0.53750 	 1.27774122552373487621e-02 	 1.98286002548288292635e-01 	 3.91068604137926434383e-01 
0.54583 	 1.29285018619829834841e-02 	 1.99566943642629390787e-01 	 3.95086943559960712680e-01 
0.55417 	 1.29914067144318995384e-02 	 2.00519710276044760278e-01 	 3.99831707315565498817e-01 
0.56250 	 1.28984572605739464257e-02 	 2.02414253237842040045e-01 	 4.02797183674030723211e-01 
0.57083 	 1.30621657614921424934e-02 	 2.02954227366959005785e-01 	 4.06354785377853411354e-01 
0.57917 	 1.30563308386438120534e-02 	 2.04683532976694559924e-01 	 4.10848593932301164866e-01 
0.58750 	 1.32521957559125838633e-02 	 2.06396172060091920297e-01 	 4.16573213380353968294e-01 
0.59583 	 1.31992222850111692173e-02 	 2.07052630839566320642e-01 	 4.21302151357251630781e-01 
0.60417 	 1.31787563664445637329e-02 	 2.07919150753226422701e-01 	 4.25938810014987900843e-01 
0.61250 	 1.32745267353529278892e-02 	 2.09270458303955020352e-01 	 4.30050772141750581312e-01 
0.62083 	 1.33627171064335786149e-02 	 2.11373309457020125413e-01 	 4.34178524586963265897e-01 
0.62917 	 1.33902442925072119595e-02 	 2.13462226019483503059e-01 	 4.39321290098421579629e-01 
0.63750 	 1.34834849692425408352e-02 	 2.14966448384104363845e-01 	 4.43852140328065081221e-01 
0.64583 	 1.35534496366859456840e-02 	 2.16469902769861000102e-01 	 4.49635144235164763149e-01 
0.65417 	 1.35839692086481104993e-02 	 2.18152463647930311419e-01 	 4.55445198563337760866e-01 
0.66250 	 1.36584854487537751822e-02 	 2.19774139111351296538e-01 	 4.58980366003384210316e-01 
0.67083 	 1.36904427271701250451e-02 	 2.21263661429742658493e-01 	 4.64884205163107189218e-01 
0.67917 	 1.37177869903264415541e-02 	 2.22270909237099578704e-01 	 4.68687483210524447053e-01 
0.68750 	 1.38238069542640992782e-02 	 2.23939081924557470415e-01 	 4.76129260421824129779e-01 
0.69583 	 1.40025459686023718425e-02 	 2.26747116494387002117e-01 	 4.79397388650492750628e-01 
0.70417 	 1.41750839587619966581e-02 	 2.28341042018557788262e-01 	 4.86999237796601369688e-01 
0.71250 	 1.41424067533702478572e-02 	 2.30146100094860223129e-01 	 4.91092897414545814794e-01 
0.72083 	 1.42972818212570382951e-02 	 2.32265519785307933409e-01 	 4.98440382991181207828e-01 
0.72917 	 1.43445883617582554265e-02 	 2.34800121556365259945e-01 	 5.05324239747271919398e-01 
0.73750 	 1.44327034753203454348e-02 	 2.37369401811100833033e-01 	 5.09707396784000010825e-01 
0.74583 	 1.44639129354452670301e-02 	 2.40468404570600646775e-01 	 5.17245828044637478982e-01 
0.75417 	 1.45662700875774930864e-02 	 2.40913953980273265465e-01 	 5.22599409798618408374e-01 
0.76250 	 1.47495516201837512105e-02 	 2.44127855006093352763e-01 	 5.26952493604809224514e-01 
0.77083 	 1.47331540280215209093e-02 	 2.46197083236165764619e-01 	 5.34737716518737693505e-01 
0.77917 	 1.47959857608854095795e-02 	 2.49198185265917748765e-01 	 5.44480242539149950076e-01 
0.78750 	 1.50437790132588629366e-02 	 2.51297500134821383266e-01 	 5.51004450468120188233e-01 
0.79583 	 1.50284894002950201314e-02 	 2.54162741594688212921e-01 	 5.58955735302899880956e-01 
0.80417 	 1.50846678082620401506e-02 	 2.57079627088516782241e-01 	 5.63940255968150894184e-01 
0.81250 	 1.52080950847718835567e-02 	 2.59997662397510986843e-01 	 5.70964992549209071626e-01 
0.82083 	 1.53148908614818626828e-02 	 2.63137915735774052806e-01 	 5.75815351071813585904e-01 
0.82917 	 1.53743747068965184305e-02 	 2.65483864208607533985e-01 	 5.86246138289736706817e-01 
0.83750 	 1.53982694512752611021e-02 	 2.69988023195187554215e-01 	 5.93044077358217847085e-01 
0.84583 	 1.55948541281725333585e-02 	 2.71956830945876137928e-01 	 5.98432784274647189271e-01 
0.85417 	 1.56462012156950332209e-02 	 2.76359173825750037423e-01 	 6.07125648619378899262e-01 
0.86250 	 1.56927850464928797525e-02 	 2.80838139944111664370e-01 	 6.16792729107898285434e-01 
0.87083 	 1.58298657834904377140e-02 	 2.84689264568265820721e-01 	 6.23346437954342635912e-01 
0.87917 	 1.59317993264320688362e-02 	 2.88023743977441071262e-01 	 6.31446242550059211318e-01 
0.88750 	 1.61046410496264169598e-02 	 2.92732051288452144178e-01 	 6.36947803898275433099e-01 
0.89583 	 1.60406010856016835453e-02 	 2.98270945825255262562e-01 	 6.47025370078358919024e-01 
0.90417 	 1.62866100132093433173e-02 	 3.03375733044058903953e-01 	 6.53975027173735123931e-01 
0.91250 	 1.63620672530133577649e-02 	 3.07999204022849470963e-01 	 6.64877168590097711309e-01 
0.92083 	 1.64652784891625922348e-02 	 3.14460534673649150239e-01 	 6.73359544662326725550e-01 
0.92917 	 1.65442972421278623740e-02 	 3.21058294555995382691e-01 	 6.81622735727851036813e-01 
0.93750 	 1.66535386717906151721e-02 	 3.27184529972335047532e-01 	 6.88361344780567430135e-01 
0.94583 	 1.68198446514572219623e-02 	 3.34845184011392182910e-01 	 6.94173747176937916414e-01 
0.95417 	 1.68835455018990533704e-02 	 3.44450810482261837731e-01 	 7.07046792414470548493e-01 
0.96250 	 1.69843472299176130591e-02 	 3.54508403134400851275e-01 	 7.16385724107727051013e-01 
0.97083 	 1.71791975569898780485e-02 	 3.64951134639313612418e-01 	 7.23454148857909928871e-01 
0.97917 	 1.72957160924217222264e-02 	 3.77517494965634969883e-01 	 7.34727262869456221317e-01 
0.98750 	 1.72680275117167471299e-02 	 3.92078935159294872381e-01 	 7.42068484771619796270e-01 
0.99583 	 1.73882046430631383160e-02 	 4.10875716906474841572e-01 	 7.52485655837572542382e-01 
1.00417 	 1.75295367436698809605e-02 	 4.32887208757071817455e-01 	 7.65978360705147021115e-01 
1.01250 	 1.77157324495401113928e-02 	 4.62863689948147416509e-01 	 7.73708285701684705948e-01 
1.02083 	 1.77606718054127768469e-02 	 5.02826081718928286080e-01 	 7.86038488316012085022e-01 
1.02917 	 1.79018129255636808395e-02 	 5.63942711736716839610e-01 	 7.97502907193236354466e-01 
1.03750 	 1.80332832793812930516e-02 	 6.83190511982350257014e-01 	 8.07993707049451725943e-01 
1.04583 	 1.81907174569563741262e-02 	 1.98663140657491466001e+00 	 8.14690237936714245492e-01 
1.05417 	 1.81772111313361801888e-02 	 9.25014232019286675168e-01 	 8.27413107014100868142e-01 
1.06250 	 1.82714850353712238151e-02 	 6.32283889067433935161e-01 	 8.38084681768269557089e-01 
1.07083 	 1.85198314631998782465e-02 	 5.33861055060197764455e-01 	 8.50202930655848510000e-01 
1.07917 	 1.86736881695706430362e-02 	 4.76764379743663202493e-01 	 8.63879934752121214636e-01 
1.08750 	 1.86625144471404755264e-02 	 4.37871278624520021694e-01 	 8.75626984242854677909e-01 
1.09583 	 1.87749457377229325705e-02 	 4.07694966344441245276e-01 	 8.86772145221267238391e-01 
1.10417 	 1.89916057642680047302e-02 	 3.83460608297691185609e-01 	 8.95083403792942267074e-01 
1.11250 	 1.91065240600035435303e-02 	 3.64130836181149442066e-01 	 9.11139931710587713809e-01 
1.12083 	 1.92592671058043549137e-02 	 3.48675900387933501712e-01 	 9.20410976278977388532e-01 
1.12917 	 1.94400836650717029341e-02 	 3.34865147269375051930e-01 	 9.35322443052518659456e-01 
1.13750 	 1.96488887052871340211e-02 	 3.21668740081228754502e-01 	 9.48551994045029545077e-01 
1.14583 	 1.96081682597483882013e-02 	 3.10873770650919312164e-01 	 9.59677717246448680477e-01 
1.15417 	 1.98349357043313238858e-02 	 3.00253085167843214442e-01 	 9.74897934017877831891e-01 
1.16250 	 1.99928709707077115199e-02 	 2.90403990216833607363e-01 	 9.90751198420007694878e-01 
1.17083 	 2.00950799434045784819e-02 	 2.83075436272040070751e-01 	 1.00223349768575942242e+00 
1.17917 	 2.02883199689349452699e-02 	 2.74438441689112744282e-01 	 1.01131116263500064889e+00 
1.18750 	 2.04574313415858445586e-02 	 2.66906254094283590383e-01 	 1.02465519385886616455e+00 
1.19583 	 2.05829817484470926903e-02 	 2.59756203704748500627e-01 	 1.03813413579749536098e+00 
1.20417 	 2.07986213964798799525e-02 	 2.53996118315474472826e-01 	 1.05239803127543063432e+00 
1.21250 	 2.09382319928140894771e-02 	 2.47477214590492877733e-01 	 1.06766440522474193031e+00 
1.22083 	 2.11055937270295569663e-02 	 2.41432547203704217509e-01 	 1.08080849962871905490e+00 
1.22917 	 2.12436884120693614264e-02 	 2.35419027284170162551e-01 	 1.09716378862961749796e+00 
1.23750 	 2.14552860013655193050e-02 	 2.29972934298038333978e-01 	 1.11076379709157246900e+00 
1.24583 	 2.16084223867770569560e-02 	 2.25600965373148915072e-01 	 1.12651104872141449853e+00 
1.25417 	 2.17727001798090763485e-02 	 2.20753179357807916006e-01 	 1.14586531702486671414e+00 
1.26250 	 2.19755306877990018444e-02 	 2.16008159424407431004e-01 	 1.15773084557878624956e+00 
1.27083 	 2.21974560779987402370e-02 	 2.11052698518923304016e-01 	 1.17457730174504604292e+00 
1.27917 	 2.23878299768848487705e-02 	 2.07212681403516729706e-01 	 1.18615782960960602921e+00 
1.28750 	 2.24387155585190067875e-02 	 2.01715396784818118414e-01 	 1.20169876145411547164e+00 
1.29583 	 2.26189156924264979376e-02 	 1.98142031442285954101e-01 	 1.22054256615167844302e+00 
1.30417 	 2.28858233555432298567e-02 	 1.93834311467126874096e-01 	 1.23932359746772235987e+00 
1.31250 	 2.29968739498373625496e-02 	 1.90880302410618679643e-01 	 1.25644989358388103895e+00 
1.32083 	 2.32074585899346361173e-02 	 1.87007504215303654860e-01 	 1.27357395793842376186e+00 
1.32917 	 2.34206270988769719998e-02 	 1.83269933881907987061e-01 	 1.28950825666037749428e+00 
1.33750 	 2.36131317141454223629e-02 	 1.79414656767347191479e-01 	 1.30880527059863971395e+00 
1.34583 	 2.38586087938039044520e-02 	 1.76862902661011567318e-01 	 1.32287696966764567463e+00 
1.35417 	 2.40294460018310035432e-02 	 1.73116776177172804196e-01 	 1.34466381921776734210e+00 
1.36250 	 2.43089524718767546752e-02 	 1.69899879488688093643e-01 	 1.36398245898818792909e+00 
1.37083 	 2.44750655651399424972e-02 	 1.66082317337082313591e-01 	 1.38100236662256015130e+00 
1.37917 	 2.47310130332526051378e-02 	 1.63352641340836768347e-01 	 1.39790789309946172914e+00 
1.38750 	 2.49872560759746772940e-02 	 1.60803319934826050019e-01 	 1.41276705004155034295e+00 
1.39583 	 2.51667558030587573681e-02 	 1.57576153748891417683e-01 	 1.43313810596747726045e+00 
1.40417 	 2.52538866079661597497e-02 	 1.54485536364791425923e-01 	 1.44863280516756010030e+00 
1.41250 	 2.55827991359814203853e-02 	 1.51854181100584989528e-01 	 1.47305893030349288608e+00 
1.42083 	 2.57282173932544579176e-02 	 1.49004015740473505502e-01 	 1.49499222914733875811e+00 
1.42917 	 2.59753714270977535683e-02 	 1.46225268905312233425e-01 	 1.50989672350444692484e+00 
1.43750 	 2.61366568627567907868e-02 	 1.44531054152532867363e-01 	 1.53149328987961785842e+00 
1.44583 	 2.63971602323865815742e-02 	 1.42040765870100393897e-01 	 1.55935686668036321834e+00 
1.45417 	 2.66332522978954579218e-02 	 1.39430872506426661861e-01 	 1.57523026549525058115e+00 
1.46250 	 2.68019226127751523936e-02 	 1.36860233182784535311e-01 	 1.59586158283193668694e+00 
1.47083 	 2.70491289233800204228e-02 	 1.34237635917444447786e-01 	 1.61604736317933439516e+00 
1.47917 	 2.72394453485502660572e-02 	 1.31743590192787557447e-01 	 1.63430969824572591698e+00 
1.48750 	 2.74557327148933771888e-02 	 1.30006839883939129265e-01 	 1.65515169989452082255e+00 
1.49583 	 2.77506549903481711250e-02 	 1.27952729982971885603e-01 	 1.67368312566585020207e+00 
1.50417 	 2.80897773868254048424e-02 	 1.25458321574339531912e-01 	 1.69926714657821298360e+00 
1.51250 	 2.81706354646414428022e-02 	 1.22978840710463027674e-01 	 1.71959923381786472518e+00 
1.52083 	 2.85004485812338677342e-02 	 1.21030044626429578170e-01 	 1.74289307736862442155e+00 
1.52917 	 2.87923738579947373351e-02 	 1.18891125891821547444e-01 	 1.75853244753949944368e+00 
1.53750 	 2.90919318531301235309e-02 	 1.16957018899413761615e-01 	 1.78230686435665286460e+00 
1.54583 	 2.92592940706314121047e-02 	 1.14919531623219287053e-01 	 1.81015560547096843180e+00 
1.55417 	 2.96041602952893910528e-02 	 1.12614599318908353842e-01 	 1.82779601501940569541e+00 
1.56250 	 2.99375846259803922444e-02 	 1.11103069044316382641e-01 	 1.84623582523895279905e+00 
1.57083 	 3.00883581371761514578e-02 	 1.09259969805758264116e-01 	 1.86635669636163670226e+00 
1.57917 	 3.04314417588748518939e-02 	 1.07329072071730910465e-01 	 1.89306148916123184733e+00 
1.58750 	 3.07253882273153672289e-02 	 1.05727994306475989172e-01 	 1.91966726609743898457e+00 
1.59583 	 3.08372766307148868381e-02 	 1.04145261345131398545e-01 	 1.93502248572215806988e+00 
1.60417 	 3.12129975063241728306e-02 	 1.02024297929115950745e-01 	 1.95953577952629531822e+00 
1.61250 	 3.14697779689779785772e-02 	 1.00073095133337897078e-01 	 1.97606340521017842526e+00 
1.62083 	 3.18287526548137258975e-02 	 9.83463207313149817557e-02 	 1.99495062532971401126e+00 
1.62917 	 3.22264261977546068172e-02 	 9.70467976946317173459e-02 	 2.02326292484953818018e+00 
1.63750 	 3.24525925389015784672e-02 	 9.55457702916516909974e-02 	 2.04728866214787696975e+00 
1.64583 	 3.26522065193707716757e-02 	 9.39633141060844806480e-02 	 2.06557546426145766105e+00 
1.65417 	 3.29672534865311159247e-02 	 9.21450341220961671729e-02 	 2.08692236664380059707e+00 
1.66250 	 3.31883454693535639990e-02 	 9.07478842402779095622e-02 	 2.10401981022646022979e+00 
1.67083 	 3.36618672153490700039e-02 	 8.93080506696852932658e-02 	 2.13271606066194285845e+00 
1.67917 	 3.38196767705356005074e-02 	 8.75566801552240675521e-02 	 2.14808121753084213523e+00 
1.68750 	 3.42263346053518074941e-02 	 8.61724668885912731264e-02 	 2.16988533822022544584e+00 
1.69583 	 3.45356255002884290906e-02 	 8.47882863024429639376e-02 	 2.18698700468121387530e+00 
1.70417 	 3.48187601947645558598e-02 	 8.33959601563825508874e-02 	 2.20590769427820232451e+00 
1.71250 	 3.51830580467719852833e-02 	 8.19994858917380275987e-02 	 2.22743028060179826255e+00 
1.72083 	 3.54084884434257285424e-02 	 8.06129645213181506014e-02 	 2.24800280804255736555e+00 
1.72917 	 3.57332656049957897437e-02 	 7.96792449580377981633e-02 	 2.27201270585410730618e+00 
1.73750 	 3.61725715634066830040e-02 	 7.80442597027266177223e-02 	 2.28953049903057426206e+00 
1.74583 	 3.63713126026433339333e-02 	 7.66777703717978209585e-02 	 2.30447045689368668064e+00 
1.75417 	 3.67383265155666050017e-02 	 7.57647283071490179607e-02 	 2.32169688386555606030e+00 
1.76250 	 3.70898619344552232802e-02 	 7.44103738136580039608e-02 	 2.33756549585944695124e+00 
1.77083 	 3.74553371947049726365e-02 	 7.33557043796641272682e-02 	 2.35001984562069843321e+00 
1.77917 	 3.78143533655586616682e-02 	 7.22709166953480752760e-02 	 2.36121718942655789419e+00 
1.78750 	 3.80743289956230052118e-02 	 7.08935162395277762570e-02 	 2.37416916292054525073e+00 
1.79583 	 3.84503337716245174871e-02 	 6.93813562760182966915e-02 	 2.38738946128288276327e+00 
1.80417 	 3.87968980644946906389e-02 	 6.84554373633436685775e-02 	 2.40297865097748353236e+00 
1.81250 	 3.92323696201584137810e-02 	 6.73189130718235273498e-02 	 2.40525197939936541403e+00 
1.82083 	 3.95138990555323199594e-02 	 6.61183546151120210554e-02 	 2.41398802921726129966e+00 
1.82917 	 3.98781653814407957559e-02 	 6.49021221097727529781e-02 	 2.42399488844429855661e+00 
1.83750 	 4.02276723493474944182e-02 	 6.41122730970245524595e-02 	 2.42430058453262242679e+00 
1.84583 	 4.06481860837151279253e-02 	 6.28576844175307014595e-02 	 2.44167647158449874212e+00 
1.85417 	 4.09736738942824071930e-02 	 6.16573023643072759548e-02 	 2.44186362352125740927e+00 
1.86250 	 4.13122716401389394880e-02 	 6.10497536771222454322e-02 	 2.45185119322372369055e+00 
1.87083 	 4.17939348171177116331e-02 	 5.99573827037389803229e-02 	 2.45121443361267310479e+00 
1.87917 	 4.20361194958913109154e-02 	 5.90924076115947188859e-02 	 2.44674458146691176097e+00 
1.88750 	 4.23385613372837185664e-02 	 5.81163392042151130679e-02 	 2.44087636872178137537e+00 
1.89583 	 4.28575619650975944697e-02 	 5.71872299321499744096e-02 	 2.43535142657845904424e+00 
1.90417 	 4.31246678895713941859e-02 	 5.62433859533293598054e-02 	 2.42714954835898444330e+00 
1.91250 	 4.34804995321692450139e-02 	 5.51986736646331507816e-02 	 2.41802647810857296307e+00 
1.92083 	 4.39098399599536295956e-02 	 5.43735051429507579290e-02 	 2.40150220532788738481e+00 
1.92917 	 4.42203210398811052961e-02 	 5.33729231904977105549e-02 	 2.39068842291162786395e+00 
1.93750 	 4.45568128331882834514e-02 	 5.27093912631113187262e-02 	 2.37184814500950613692e+00 
1.94583 	 4.50038995961118196143e-02 	 5.18229345141352215620e-02 	 2.34912745089325314396e+00 
1.95417 	 4.52175640371020315378e-02 	 5.08997652527987468063e-02 	 2.33528043998068168818e+00 
1.96250 	 4.55935298790806214919e-02 	 5.03010706742953658810e-02 	 2.30926709079579550732e+00 
1.97083 	 4.59454229745980199939e-02 	 4.93918563026785675807e-02 	 2.28164035329214565095e+00 
1.97917 	 4.63083252206114778793e-02 	 4.85826721303425981824e-02 	 2.24687715839086576963e+00 
1.98750 	 4.66353301214199392200e-02 	 4.78191937936777791696e-02 	 2.20639619704857192772e+00 
1.99583 	 4.69491074406221328696e-02 	 4.69985433617152031927e-02 	 1.15517407653312975668e+00 
2.00417 	 3.99517886893498497258e+00 	 3.73781924814904398247e+00 	 7.36425181773326897883e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math
import json
from tqdm import tqdm

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 0.01 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = 1000000 # set number of photons in simulation ID_EDIT_1_3
    z_size = 2.0 # cm, total range over which bins extend
    xy_size = 1.5 # cm
    NR_z          = 240 # set number of bins.
    NR_xy = 180
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = z_size/NR_z  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    InitRandomGen()
    Csph = [0 for _ in range(0,NR_z+1)]
    Ccyl = [0 for _ in range(0,NR_z+1)]
    Cpla = [0 for _ in range(0,NR_z+1)]

    # [x][y][z]
    # it could be done in numpy array, but list is easier to save
    Cube = [[[0 for _ in range(0,NR_z+1)] for _ in range(0,NR_xy+1)] for _ in range(0,NR_xy+1)]
    cube_overflow = 0

    # start pos
    x_start = 89 * dr
    y_start = 89 * dr
    z_start = 239 * dr

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    print("(1 iter = 1 photon) Simulation progerss:")
    for i_photon in tqdm(range(0,Nphotons)):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements a point source [0,0,-1].
        # *****
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = x_start                     # Set photon position to origin.
        y = y_start
        z = z_start

        # source - vartical down [0,0,-1]
        # psi - berween x-y axis
        # theta between z and R
        ux = 0
        uy = 0
        uz = -1


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Cpla[ir] += absorb # DROP absorbed weight into bin

            # --- cube ---
            ix = int(x/dr)
            iy = int(y/dr)
            iz = int(z/dr)
            ix_is_in = (0 <= ix < NR_xy)
            iy_is_in = (0 <= iy < NR_xy)
            iz_is_in = (0 <= iz < NR_z)
            is_in = ix_is_in and iy_is_in and iz_is_in
            if (not is_in):
                cube_overflow += absorb
            else:
                Cube[ix][iy][iz] += absorb
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz)
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    print("saving data...")
    file = open("mc456_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR_z+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:.20e} \t {Fcyl:.20e} \t {Fpla:.20e} \n")

    file.close()


    with open('mc456_p_cube.json', 'w') as f:
        data = {
            "n_photons": Nphotons,
            "overflow": cube_overflow,
            "bins_per_1_cm": NR_z/z_size,
            "mu_a": mua,
            "name": f"my_{ Nphotons // 1_000_000 }mln_cube",
            "photon_weight": W,
            "normalized_already": False,
            "cube": Cube
        }
        json.dump(data, f)

    print("done")
    # end of main


main()
