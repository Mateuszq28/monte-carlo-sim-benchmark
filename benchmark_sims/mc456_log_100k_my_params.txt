time elapsed: 16.0533 seconds

=================================

sim results:

number of photons = 100000
overflow: 4.90751461565584759228e+04
sum: 5.09178735068368478096e+04
sum: 5.09248538434415240772e+04
avg: 5.09178735068368526484e-01
perc_in: 50.92

number of photons = 100000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.95110854242993975172e-02 	 1.46244351883808743064e-01 	 2.68411583486772298279e-01 
0.01250 	 2.20656618766796527864e-02 	 1.61432534820693029953e-01 	 2.68013556370067906887e-01 
0.02083 	 2.13386608146520322105e-02 	 1.57709608790624983277e-01 	 2.69052324193954361942e-01 
0.02917 	 8.83461680397260723518e-03 	 1.64490167430005718163e-01 	 2.68033665199364778964e-01 
0.03750 	 1.33429830114973162203e-02 	 1.62849050856567534318e-01 	 2.68916076524818581373e-01 
0.04583 	 1.00832307573020633906e-02 	 1.63453482904576646861e-01 	 2.67891211692784181331e-01 
0.05417 	 1.16143009886268515352e-02 	 1.63300956121212703653e-01 	 2.67921006231089997573e-01 
0.06250 	 1.12487152446471717210e-02 	 1.62763745498708672921e-01 	 2.70835860180456411417e-01 
0.07083 	 1.09685831178488006621e-02 	 1.65962995109667887927e-01 	 2.67300456379992001921e-01 
0.07917 	 1.13097237804729456451e-02 	 1.64528747613318759857e-01 	 2.74184839555407289247e-01 
0.08750 	 9.82077291181260997321e-03 	 1.64570094840606584441e-01 	 2.69739539503551228883e-01 
0.09583 	 1.07359279676578472235e-02 	 1.62955568965241187618e-01 	 2.72156472107990765608e-01 
0.10417 	 1.08693154488645887801e-02 	 1.64719946968807262611e-01 	 2.71533825895156510910e-01 
0.11250 	 1.05378518920626624428e-02 	 1.64662209810829407441e-01 	 2.74780303888780830235e-01 
0.12083 	 1.22026831653486017570e-02 	 1.64202328780010509135e-01 	 2.71103998456709016640e-01 
0.12917 	 1.15822889267359202536e-02 	 1.63150044417847028821e-01 	 2.75204394403613883391e-01 
0.13750 	 1.32253274258020709492e-02 	 1.65576050549630704456e-01 	 2.76763340286614423214e-01 
0.14583 	 9.85828328723217968410e-03 	 1.66827730132791174356e-01 	 2.74091449985856661087e-01 
0.15417 	 1.07527863129861130098e-02 	 1.65021168866898493288e-01 	 2.76976080444202521491e-01 
0.16250 	 1.07143418195095839474e-02 	 1.65189983274173668448e-01 	 2.80047422591062078467e-01 
0.17083 	 1.08736533411037533670e-02 	 1.66271252374620898129e-01 	 2.79704526651440577023e-01 
0.17917 	 1.11894690095314941480e-02 	 1.66150592810429181823e-01 	 2.79504404017693997009e-01 
0.18750 	 1.15324528001682150014e-02 	 1.63746492931040571461e-01 	 2.81332672315019849396e-01 
0.19583 	 1.13699231677171167659e-02 	 1.64329417724798643174e-01 	 2.82167697495527891594e-01 
0.20417 	 1.14159174719157905514e-02 	 1.68295650315812284070e-01 	 2.82331607449638088969e-01 
0.21250 	 1.02481139105026243519e-02 	 1.70188617213426290897e-01 	 2.82555705927660216759e-01 
0.22083 	 1.18511908325634497674e-02 	 1.68131579872235509265e-01 	 2.85009937544830782574e-01 
0.22917 	 1.08600408528777420125e-02 	 1.67909837449898013961e-01 	 2.88067915083413672583e-01 
0.23750 	 1.11543062811926465411e-02 	 1.66610924017383837947e-01 	 2.88195622172588372667e-01 
0.24583 	 1.05581811161222904188e-02 	 1.71948069677188425386e-01 	 2.88397226214247293097e-01 
0.25417 	 1.04421636773907554330e-02 	 1.70033736907253762993e-01 	 2.88580141826077996026e-01 
0.26250 	 1.12142065269207943240e-02 	 1.75369140642066489999e-01 	 2.92534437263382018912e-01 
0.27083 	 1.06100524148638949984e-02 	 1.75994133812221953406e-01 	 2.95013794779862115192e-01 
0.27917 	 1.21858082801502270315e-02 	 1.74943301876795270777e-01 	 2.96112830294781137486e-01 
0.28750 	 1.19157412131462390331e-02 	 1.74221398068497457245e-01 	 3.00374007366716100353e-01 
0.29583 	 1.17620017503260749364e-02 	 1.73081826236185981616e-01 	 3.00610450801723272374e-01 
0.30417 	 1.07483010297605100641e-02 	 1.77770363879576759336e-01 	 3.00788488546009258329e-01 
0.31250 	 1.19642285109103647250e-02 	 1.76764017063944428587e-01 	 3.08232130486129796143e-01 
0.32083 	 1.17197503614689581969e-02 	 1.77000744329075088146e-01 	 3.10646922010153425653e-01 
0.32917 	 1.13188501118275108848e-02 	 1.77329620511753854872e-01 	 3.12646334906332645787e-01 
0.33750 	 1.15984085337099609297e-02 	 1.79041016526108209828e-01 	 3.13825120648121069777e-01 
0.34583 	 1.12735757795961420713e-02 	 1.78495023998236856944e-01 	 3.16595585181022431964e-01 
0.35417 	 1.23626904895913075633e-02 	 1.78954087496702801685e-01 	 3.15540065433405514383e-01 
0.36250 	 1.17418701954464781839e-02 	 1.77789929463936069443e-01 	 3.19867447758889256182e-01 
0.37083 	 1.09126252905790560588e-02 	 1.80105162459033241174e-01 	 3.17721510264212247954e-01 
0.37917 	 1.13292329912599507025e-02 	 1.82271388073027534871e-01 	 3.22852552572877760095e-01 
0.38750 	 1.11376690151127714923e-02 	 1.82942047985499761653e-01 	 3.28759086126825361696e-01 
0.39583 	 1.19034463155452737565e-02 	 1.85605569596784619746e-01 	 3.31980146441896772913e-01 
0.40417 	 1.20053386399518978445e-02 	 1.83504390680299472871e-01 	 3.35144743763387154001e-01 
0.41250 	 1.18516696830273989688e-02 	 1.81115702976154702153e-01 	 3.35262729219200139585e-01 
0.42083 	 1.25258699702423086098e-02 	 1.84687525909034977456e-01 	 3.39301885613407405717e-01 
0.42917 	 1.22023812433838824837e-02 	 1.85112249905928588634e-01 	 3.42244082180377162672e-01 
0.43750 	 1.19896106032169481176e-02 	 1.84484343372364412161e-01 	 3.47590924735678374891e-01 
0.44583 	 1.23085116512445975900e-02 	 1.87460070086322844185e-01 	 3.51997523362098718724e-01 
0.45417 	 1.24976705056242531899e-02 	 1.87316831037588754638e-01 	 3.50607324524605634686e-01 
0.46250 	 1.26648568608813457542e-02 	 1.90869109392566072003e-01 	 3.62449341486786424937e-01 
0.47083 	 1.21624371206542243595e-02 	 1.90756635883715663926e-01 	 3.61879591444401405020e-01 
0.47917 	 1.27410593348154990018e-02 	 1.90641779653484250145e-01 	 3.66856684835068946882e-01 
0.48750 	 1.24543693384637447347e-02 	 1.89908022226590533776e-01 	 3.70932930833064722353e-01 
0.49583 	 1.29325744323355532744e-02 	 1.93902988240118423491e-01 	 3.72974377880173124655e-01 
0.50417 	 1.27739775867139818133e-02 	 1.95201000728735418743e-01 	 3.78900433487258381238e-01 
0.51250 	 1.29384005453046825596e-02 	 1.94639950502347919281e-01 	 3.78212090082814533787e-01 
0.52083 	 1.22653582184307132635e-02 	 1.96420891155508786641e-01 	 3.81157565999764469389e-01 
0.52917 	 1.27202699331474856914e-02 	 1.98142999685677279054e-01 	 3.91382480237800700618e-01 
0.53750 	 1.28207106018055488894e-02 	 1.99193092317200864949e-01 	 3.95231646052883800468e-01 
0.54583 	 1.30562223744433575368e-02 	 2.01781673274883749380e-01 	 4.02330226685632730277e-01 
0.55417 	 1.29548978517936841381e-02 	 2.00965551755105859000e-01 	 4.02271385554596405676e-01 
0.56250 	 1.29027836902135158159e-02 	 2.00799914980315019619e-01 	 4.01399322177756257002e-01 
0.57083 	 1.30387860502558274034e-02 	 2.01090970011450653754e-01 	 4.06485230995174307012e-01 
0.57917 	 1.30267500163375096051e-02 	 2.04203174388210978440e-01 	 4.11079558834749780871e-01 
0.58750 	 1.28370517359265336188e-02 	 2.07389315300439913692e-01 	 4.15136104703893948908e-01 
0.59583 	 1.29309979288657183466e-02 	 2.08441138785218804674e-01 	 4.19501054684384755422e-01 
0.60417 	 1.29436649080145980972e-02 	 2.09010698746277145954e-01 	 4.21748189582069055170e-01 
0.61250 	 1.31181905947671869489e-02 	 2.11325630149925502987e-01 	 4.31470372748051278489e-01 
0.62083 	 1.33253124958444130188e-02 	 2.13623087070891587436e-01 	 4.35220766893457344793e-01 
0.62917 	 1.37630313430737432484e-02 	 2.15651031291684891489e-01 	 4.36467389173359310295e-01 
0.63750 	 1.35049173105727619154e-02 	 2.15747853884077855913e-01 	 4.41997738006145723944e-01 
0.64583 	 1.36541837156003362241e-02 	 2.16794337447469315228e-01 	 4.47499597341154187191e-01 
0.65417 	 1.35893842649664094158e-02 	 2.16963782576994251849e-01 	 4.52646711761502451576e-01 
0.66250 	 1.33249072868582459084e-02 	 2.19021142483160208281e-01 	 4.63228217746696036006e-01 
0.67083 	 1.34682995089816723300e-02 	 2.21091666250458285248e-01 	 4.70093075483796252190e-01 
0.67917 	 1.35543300473056956695e-02 	 2.21269570620535455108e-01 	 4.75202720491640528966e-01 
0.68750 	 1.39626625294432364643e-02 	 2.24603180460922507988e-01 	 4.84020162380477347863e-01 
0.69583 	 1.39440142295116364934e-02 	 2.27548677767348522805e-01 	 4.83906847873636913882e-01 
0.70417 	 1.41707395651251132768e-02 	 2.27541476516897933635e-01 	 4.94572441471496038190e-01 
0.71250 	 1.41332109964828391696e-02 	 2.27654028495029525647e-01 	 4.97489745770408553494e-01 
0.72083 	 1.43322640617044791411e-02 	 2.31043602129487907204e-01 	 5.01901399830492089826e-01 
0.72917 	 1.44278468827204620767e-02 	 2.31967301451501045628e-01 	 5.15589915855680147594e-01 
0.73750 	 1.41842184556676617624e-02 	 2.34450610499483819149e-01 	 5.19889723357098487710e-01 
0.74583 	 1.44165400848802471856e-02 	 2.39681012224204903482e-01 	 5.20692761903028933368e-01 
0.75417 	 1.45101197458703812249e-02 	 2.39378965692609191329e-01 	 5.22320021591035299480e-01 
0.76250 	 1.47952123007387865983e-02 	 2.45342786295605241875e-01 	 5.36785175252094459708e-01 
0.77083 	 1.46781144007025309700e-02 	 2.46381040406698170742e-01 	 5.39789150905052306229e-01 
0.77917 	 1.44430020308838995280e-02 	 2.47943699761086183697e-01 	 5.47331360144543754842e-01 
0.78750 	 1.48119920398761713287e-02 	 2.49244284603424987035e-01 	 5.59433932332539463061e-01 
0.79583 	 1.46753552292836729476e-02 	 2.54550812609982746171e-01 	 5.61991748881688235606e-01 
0.80417 	 1.49972701887650522456e-02 	 2.57491419457282044725e-01 	 5.66777296849727552086e-01 
0.81250 	 1.48070154278082052879e-02 	 2.63906279763429063578e-01 	 5.80928653779283710179e-01 
0.82083 	 1.53571709919894470314e-02 	 2.61678966226201459300e-01 	 5.77314429744015145118e-01 
0.82917 	 1.53786852066417189383e-02 	 2.62912896559853892509e-01 	 5.85119502368229849054e-01 
0.83750 	 1.55395215523484002407e-02 	 2.65606835307791555589e-01 	 5.96172336273099956472e-01 
0.84583 	 1.60236133704737340744e-02 	 2.69187853823224798600e-01 	 5.99293846592628964842e-01 
0.85417 	 1.59427339728416515852e-02 	 2.73692114397000529902e-01 	 6.08755666403254624974e-01 
0.86250 	 1.58826947037962705467e-02 	 2.81865433078435090319e-01 	 6.19069920394687112086e-01 
0.87083 	 1.61130288825499790040e-02 	 2.83617714894039529838e-01 	 6.25848502554777641471e-01 
0.87917 	 1.62816159962454361232e-02 	 2.83923104339126708417e-01 	 6.34972335201893001155e-01 
0.88750 	 1.65634198475571939313e-02 	 2.93674295193691925476e-01 	 6.48175137767696862845e-01 
0.89583 	 1.62552297355170322080e-02 	 2.98363867318450215471e-01 	 6.49347586457054926079e-01 
0.90417 	 1.64907885869706449800e-02 	 3.03066528071995466842e-01 	 6.59627855023349529695e-01 
0.91250 	 1.66954674046877367399e-02 	 3.04536140353643514089e-01 	 6.68362183811503141051e-01 
0.92083 	 1.64268848985959954601e-02 	 3.11509975626662494186e-01 	 6.78906415260738582695e-01 
0.92917 	 1.65282496635500014692e-02 	 3.21784393598939288950e-01 	 6.85462064023949713132e-01 
0.93750 	 1.69859134288228748322e-02 	 3.26005518825650320025e-01 	 6.93947377459709469072e-01 
0.94583 	 1.69928452797195421453e-02 	 3.36592076792681105246e-01 	 6.98503193069858530073e-01 
0.95417 	 1.67467825259628964873e-02 	 3.45101250165818218552e-01 	 7.12672935915345417968e-01 
0.96250 	 1.69246747112278689285e-02 	 3.54162262102614755488e-01 	 7.18166156821084311623e-01 
0.97083 	 1.69523252602471960482e-02 	 3.65456484103217071890e-01 	 7.29377643045226786711e-01 
0.97917 	 1.70393855044226813500e-02 	 3.74763931669735983476e-01 	 7.41520254793688993189e-01 
0.98750 	 1.73569937713529409695e-02 	 3.93077367054738779917e-01 	 7.40497354854137590507e-01 
0.99583 	 1.76760490416554560955e-02 	 4.08283199030417709441e-01 	 7.53258911842046408047e-01 
1.00417 	 1.80040645136874816190e-02 	 4.34665083338734936635e-01 	 7.65167402761568360425e-01 
1.01250 	 1.76852978992030306082e-02 	 4.59900181251461814824e-01 	 7.70446561539071761437e-01 
1.02083 	 1.77844265385258513967e-02 	 5.02703611333209399170e-01 	 7.82390367759932980896e-01 
1.02917 	 1.79693336134286764383e-02 	 5.63285190293229320879e-01 	 7.99509142355615987086e-01 
1.03750 	 1.80458096998505797270e-02 	 6.85455846844124638828e-01 	 7.97820870009346871932e-01 
1.04583 	 1.82634364493890685721e-02 	 1.98541020978824067633e+00 	 8.10211007515621584041e-01 
1.05417 	 1.83315696821304656428e-02 	 9.22964307993470844949e-01 	 8.19075065833731796872e-01 
1.06250 	 1.88518622504704122522e-02 	 6.28893065462389211362e-01 	 8.25003404584526367493e-01 
1.07083 	 1.87564044268057131259e-02 	 5.33339297046943272562e-01 	 8.42659309904880249320e-01 
1.07917 	 1.88757101914942583554e-02 	 4.75044164916188005332e-01 	 8.56789488263371756815e-01 
1.08750 	 1.88291215442470891150e-02 	 4.38002238590259829198e-01 	 8.69030851336311527255e-01 
1.09583 	 1.87388356488005884681e-02 	 4.06524676550468255787e-01 	 8.87902436126397520688e-01 
1.10417 	 1.88608129288081877162e-02 	 3.83537141745387166747e-01 	 9.02280008783582943011e-01 
1.11250 	 1.91470488951693725010e-02 	 3.66245398964332724567e-01 	 9.14928914651782942968e-01 
1.12083 	 1.97156438685991454440e-02 	 3.47089053352365228822e-01 	 9.12518930553932405836e-01 
1.12917 	 1.96923975894076862259e-02 	 3.35625782465806599131e-01 	 9.33944803498573783429e-01 
1.13750 	 1.97449448286415342457e-02 	 3.21953523517751249994e-01 	 9.51698491009274727404e-01 
1.14583 	 1.95837777111018858378e-02 	 3.09280769754068429744e-01 	 9.55567310733017816204e-01 
1.15417 	 2.01405730338623974174e-02 	 3.02049865518220772564e-01 	 9.77175680554248637932e-01 
1.16250 	 2.02582370794108963807e-02 	 2.91200334261648874357e-01 	 9.94567879902273355164e-01 
1.17083 	 2.02971331578397258533e-02 	 2.84750148992234886069e-01 	 1.00623203456626719721e+00 
1.17917 	 2.02094616726175534127e-02 	 2.75931517358782019134e-01 	 1.00856275097495662330e+00 
1.18750 	 2.05713610541381104746e-02 	 2.69006503759720794200e-01 	 1.02930281366847875546e+00 
1.19583 	 2.05532087541711559753e-02 	 2.62048500322413557839e-01 	 1.03785164388227979515e+00 
1.20417 	 2.07152529839698673619e-02 	 2.53492211425852986828e-01 	 1.05183307900963018966e+00 
1.21250 	 2.09686546458144398852e-02 	 2.47496723643512245294e-01 	 1.07013971237071703335e+00 
1.22083 	 2.11177739093812467941e-02 	 2.40865828741763376986e-01 	 1.07914333590289523990e+00 
1.22917 	 2.14897513277256500819e-02 	 2.37031119472568441164e-01 	 1.09781077139916849461e+00 
1.23750 	 2.16417672001710630070e-02 	 2.29958664279147240173e-01 	 1.11745525182681659793e+00 
1.24583 	 2.19442833444561773149e-02 	 2.24402626622546119695e-01 	 1.13897636905791399542e+00 
1.25417 	 2.16160323566241020787e-02 	 2.20644579672379326230e-01 	 1.14519524744043410536e+00 
1.26250 	 2.17823338937455646125e-02 	 2.15279243585050489296e-01 	 1.14705476084219104571e+00 
1.27083 	 2.21791932135409208815e-02 	 2.10063890632891298038e-01 	 1.18339139109421487284e+00 
1.27917 	 2.23520855495061426810e-02 	 2.06648252846792446213e-01 	 1.17661413641773893168e+00 
1.28750 	 2.26833682085421789454e-02 	 2.02544490599703530531e-01 	 1.19917210280980701675e+00 
1.29583 	 2.23465433537011030907e-02 	 1.97457119508549244769e-01 	 1.21498001990150839013e+00 
1.30417 	 2.28784782857935561906e-02 	 1.95488499292342327029e-01 	 1.24713852119750390202e+00 
1.31250 	 2.30706648531983568584e-02 	 1.93167004599309355406e-01 	 1.24944397311294541630e+00 
1.32083 	 2.29634352265176318320e-02 	 1.86702902296482453615e-01 	 1.27340773391067818565e+00 
1.32917 	 2.36766331964326261217e-02 	 1.84536561577955504632e-01 	 1.28396955216964969715e+00 
1.33750 	 2.37649262894793732170e-02 	 1.78574803583121860528e-01 	 1.30744043773849827339e+00 
1.34583 	 2.40390576450468171354e-02 	 1.78614535126898538175e-01 	 1.32887715597472566564e+00 
1.35417 	 2.41305096214675211808e-02 	 1.73783453223541356492e-01 	 1.34223431251405367348e+00 
1.36250 	 2.46495385998394093974e-02 	 1.70813789589397496682e-01 	 1.35314104088131581527e+00 
1.37083 	 2.45660352247261022651e-02 	 1.66279969978811864584e-01 	 1.38128434396939736573e+00 
1.37917 	 2.48653607736700268949e-02 	 1.64061364744754301093e-01 	 1.39072256325709187053e+00 
1.38750 	 2.53321966019423652772e-02 	 1.61418071709439309158e-01 	 1.41698207559144950807e+00 
1.39583 	 2.55332479915285903704e-02 	 1.59488749132179724599e-01 	 1.42446548012966633934e+00 
1.40417 	 2.53853541028944765245e-02 	 1.54326036849755016123e-01 	 1.46261000882121061650e+00 
1.41250 	 2.58043591068398692201e-02 	 1.53332595944797256404e-01 	 1.46155261178605089256e+00 
1.42083 	 2.58623050165963687397e-02 	 1.48812065598747655937e-01 	 1.50389577622643977328e+00 
1.42917 	 2.59455412300782749246e-02 	 1.46203079563434062971e-01 	 1.50199319412198506463e+00 
1.43750 	 2.60549839665692659074e-02 	 1.44510727959995727288e-01 	 1.52905333410183597032e+00 
1.44583 	 2.63493089678307132462e-02 	 1.42868620462280188077e-01 	 1.56141576669131576516e+00 
1.45417 	 2.72064431560534621124e-02 	 1.39558194287028730640e-01 	 1.56655188255435673383e+00 
1.46250 	 2.68411453374710722020e-02 	 1.36367074546485278486e-01 	 1.60755165806117483740e+00 
1.47083 	 2.67727176858533061354e-02 	 1.33293574940150288954e-01 	 1.61332042386063823081e+00 
1.47917 	 2.71873160428589798199e-02 	 1.30663268078852229381e-01 	 1.62397363410793094118e+00 
1.48750 	 2.73443661092390398470e-02 	 1.30548785303197828478e-01 	 1.64240566418416222838e+00 
1.49583 	 2.77213683287959138102e-02 	 1.27447865555276901306e-01 	 1.67017913670366002776e+00 
1.50417 	 2.79893391179994489859e-02 	 1.26227696325215327233e-01 	 1.68851054177985893112e+00 
1.51250 	 2.79442056880014923215e-02 	 1.23523787134838566870e-01 	 1.70286937603255994489e+00 
1.52083 	 2.81218091056454067012e-02 	 1.21572656851241994724e-01 	 1.73705190890219340893e+00 
1.52917 	 2.88626493264794378724e-02 	 1.19519455078024611216e-01 	 1.75562775829688511031e+00 
1.53750 	 2.92975084865674424706e-02 	 1.15579197678166684105e-01 	 1.79265713291621220371e+00 
1.54583 	 2.90807726084107084907e-02 	 1.15429692251747983978e-01 	 1.82574810531622300225e+00 
1.55417 	 2.96407401132832599988e-02 	 1.13028526287226524505e-01 	 1.84047196249038158555e+00 
1.56250 	 2.97399804338775337886e-02 	 1.11654138834181654305e-01 	 1.86249451326609527513e+00 
1.57083 	 2.98603581786416986954e-02 	 1.09528426270822765165e-01 	 1.86912444520251308511e+00 
1.57917 	 3.04221983905473176979e-02 	 1.08068464855832185867e-01 	 1.89724542083551095395e+00 
1.58750 	 3.06643816745476929797e-02 	 1.05888013989374016321e-01 	 1.91169831232601117321e+00 
1.59583 	 3.10607480111166588121e-02 	 1.04191812246912235418e-01 	 1.93144716999946530755e+00 
1.60417 	 3.08822901179698176832e-02 	 1.02293056751978708729e-01 	 1.96521674840298588016e+00 
1.61250 	 3.15172324329685699107e-02 	 1.00425129673491736471e-01 	 1.97441513291646897343e+00 
1.62083 	 3.19788490049468937526e-02 	 9.81075469214199163970e-02 	 1.97389638888314178367e+00 
1.62917 	 3.22162636023762619097e-02 	 9.64911660147093341866e-02 	 2.02823207733918753348e+00 
1.63750 	 3.24692917713828646531e-02 	 9.57271892617876929421e-02 	 2.04385163077235487705e+00 
1.64583 	 3.24380141089105761276e-02 	 9.36699295397915299155e-02 	 2.05521782568915734046e+00 
1.65417 	 3.30064896898773219025e-02 	 9.15177086453742988370e-02 	 2.08592369320753245887e+00 
1.66250 	 3.30076517965394236609e-02 	 9.00371914296819730872e-02 	 2.09838584255130244927e+00 
1.67083 	 3.37909688631221963306e-02 	 8.83510778682228270497e-02 	 2.14438764486759625427e+00 
1.67917 	 3.38609143444573018611e-02 	 8.76397046756950681701e-02 	 2.14452464617308091732e+00 
1.68750 	 3.41045676167654396305e-02 	 8.61115139018324843301e-02 	 2.18428712839750804875e+00 
1.69583 	 3.45323637574737260514e-02 	 8.53063622503409529907e-02 	 2.18927627077631781205e+00 
1.70417 	 3.50126600721201788891e-02 	 8.35474496470307304019e-02 	 2.22399933093020640840e+00 
1.71250 	 3.52215039016510952918e-02 	 8.27588172152960710459e-02 	 2.24383000003821164725e+00 
1.72083 	 3.54996270652278358981e-02 	 8.07584289881037864500e-02 	 2.24760930753164434037e+00 
1.72917 	 3.54753455235452611061e-02 	 7.98072304007416688520e-02 	 2.25554826323839785474e+00 
1.73750 	 3.63789744838508705138e-02 	 7.79281197609739684218e-02 	 2.27037958041261678233e+00 
1.74583 	 3.65966064902024240668e-02 	 7.63398979539998412402e-02 	 2.28208313425995168444e+00 
1.75417 	 3.66900971139728915293e-02 	 7.53651804594765717393e-02 	 2.31957613221780434287e+00 
1.76250 	 3.70090211408587166364e-02 	 7.37760389452811332633e-02 	 2.33895115702513090028e+00 
1.77083 	 3.75971568176355006030e-02 	 7.30492368708647171749e-02 	 2.33726212064828020587e+00 
1.77917 	 3.76267526540206495578e-02 	 7.17582426915436694115e-02 	 2.36764313795434766519e+00 
1.78750 	 3.80867138400088622863e-02 	 6.99532823238605411253e-02 	 2.37163599809958514086e+00 
1.79583 	 3.86754501339494002887e-02 	 6.92161957805529637344e-02 	 2.39669960907571288899e+00 
1.80417 	 3.87868958503078745115e-02 	 6.81800047909017770120e-02 	 2.40064625886225391227e+00 
1.81250 	 3.94515278476062908330e-02 	 6.63144541417566985020e-02 	 2.39068963175059723270e+00 
1.82083 	 3.97589892981110720749e-02 	 6.56071541434334465359e-02 	 2.41084129641190880733e+00 
1.82917 	 3.98644228011168777481e-02 	 6.44799541300709738723e-02 	 2.44308451952501615168e+00 
1.83750 	 3.96818881495287212324e-02 	 6.46261356969681372009e-02 	 2.41662647573595990025e+00 
1.84583 	 4.02283108280769158283e-02 	 6.29377480324111449050e-02 	 2.43920368832958445182e+00 
1.85417 	 4.08465289144234605656e-02 	 6.12063750506148251951e-02 	 2.45093095828824569793e+00 
1.86250 	 4.11088164037833742048e-02 	 6.07153785213070881777e-02 	 2.44236615197343098771e+00 
1.87083 	 4.19394690841777273427e-02 	 6.01070333332299339135e-02 	 2.44881512410985324735e+00 
1.87917 	 4.16871281756911390981e-02 	 5.89432913964214114100e-02 	 2.45102589377023472039e+00 
1.88750 	 4.24431237241388661929e-02 	 5.75029782382748266834e-02 	 2.45472515607222874223e+00 
1.89583 	 4.29356150057144184129e-02 	 5.65177011532149997652e-02 	 2.43398754300938868766e+00 
1.90417 	 4.28836925502407567690e-02 	 5.54678523511328708251e-02 	 2.42789529437416762292e+00 
1.91250 	 4.33866346829926211037e-02 	 5.48526249120767847578e-02 	 2.41486801262303130144e+00 
1.92083 	 4.38354546073173867438e-02 	 5.43043862276106834019e-02 	 2.40594008624123611995e+00 
1.92917 	 4.43441845671276937968e-02 	 5.30914322275499103720e-02 	 2.37889601202063749597e+00 
1.93750 	 4.43175686930230017246e-02 	 5.23852456934986721038e-02 	 2.36069666613520023901e+00 
1.94583 	 4.49187377664753625939e-02 	 5.12803918211915746306e-02 	 2.34186727616682688335e+00 
1.95417 	 4.54056087490560672526e-02 	 5.07499465415155032177e-02 	 2.31767382538806465675e+00 
1.96250 	 4.57627402013121992175e-02 	 4.99116209550107617354e-02 	 2.30864441257049346490e+00 
1.97083 	 4.60029113884823370739e-02 	 4.91482908056541170638e-02 	 2.28768644954137290171e+00 
1.97917 	 4.66753966870939382416e-02 	 4.88248131665272241952e-02 	 2.23497969056932355159e+00 
1.98750 	 4.66211937937192691384e-02 	 4.77838495083290001886e-02 	 2.20036172784921379986e+00 
1.99583 	 4.74016290609317811344e-02 	 4.69766725831249412626e-02 	 1.14644769464422391358e+00 
2.00417 	 3.99322926490212193329e+00 	 3.73245326785135045355e+00 	 7.37223907183022504341e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 100000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);