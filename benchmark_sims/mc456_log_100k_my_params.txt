time elapsed: 1358.7487 seconds

=================================

sim results:

number of photons = 10000000
overflow: 4.90675636788619868457e+06
sum: 5.09324393949667178094e+06
sum: 5.09324363211380131543e+06
avg: 5.09324393949667220127e-01
perc_in: 50.93

number of photons = 10000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 1.68840353872000137336e-02 	 1.62087233749758863333e-01 	 2.69559780246761138134e-01 
0.01250 	 1.22452077749906369092e-02 	 1.60737185527946080388e-01 	 2.69241690682017364988e-01 
0.02083 	 1.16201827195155597133e-02 	 1.60807564669819075265e-01 	 2.69428283809242774538e-01 
0.02917 	 1.21870742995534558223e-02 	 1.60951213069661619448e-01 	 2.69909777986889920509e-01 
0.03750 	 1.17840114283782465554e-02 	 1.61089400887780620497e-01 	 2.70066298242180979905e-01 
0.04583 	 1.17252640678637137794e-02 	 1.61150169422002581543e-01 	 2.70463163194542055567e-01 
0.05417 	 1.14544387144611299612e-02 	 1.61447265632299968852e-01 	 2.70748821015472929119e-01 
0.06250 	 1.14455726648426802522e-02 	 1.61604369440399298075e-01 	 2.71220639146385722462e-01 
0.07083 	 1.15187141372134899120e-02 	 1.61536733084691686013e-01 	 2.71505270183326707922e-01 
0.07917 	 1.12983872065061888984e-02 	 1.62110574280105668166e-01 	 2.72379471627768043884e-01 
0.08750 	 1.12301562916153289257e-02 	 1.62093252080138777727e-01 	 2.72712073453337311424e-01 
0.09583 	 1.14807831219562537367e-02 	 1.62140243783646609277e-01 	 2.72905578947733096218e-01 
0.10417 	 1.14810654503066916082e-02 	 1.62131141873848139134e-01 	 2.73541932051194536246e-01 
0.11250 	 1.14947941788507996402e-02 	 1.62725793854385125670e-01 	 2.74121293992236891857e-01 
0.12083 	 1.14079813693243898448e-02 	 1.62881373094825587788e-01 	 2.74716337377935548858e-01 
0.12917 	 1.13663920779904850655e-02 	 1.63117632523719163773e-01 	 2.75843500996307278150e-01 
0.13750 	 1.16300968890550703722e-02 	 1.62918427516118735632e-01 	 2.76752384244502769306e-01 
0.14583 	 1.14698946262457492778e-02 	 1.63542041068367671741e-01 	 2.77857823623931354806e-01 
0.15417 	 1.15260769131767804030e-02 	 1.63871487456428183149e-01 	 2.78683500182441146187e-01 
0.16250 	 1.15392804814985639600e-02 	 1.63758621573132617799e-01 	 2.79998137782293099463e-01 
0.17083 	 1.14566684925107176857e-02 	 1.64767856484687807983e-01 	 2.80976743793536265503e-01 
0.17917 	 1.14095462106289808474e-02 	 1.64736838078761632653e-01 	 2.82544551426194445742e-01 
0.18750 	 1.15811333633137614196e-02 	 1.65100164241880620342e-01 	 2.83531353799030938490e-01 
0.19583 	 1.14876824354170122694e-02 	 1.65627560601414702823e-01 	 2.84950057086296393294e-01 
0.20417 	 1.15938345506278305680e-02 	 1.65845747231570056490e-01 	 2.86269809597624214081e-01 
0.21250 	 1.14788068897046392075e-02 	 1.65807795359911303024e-01 	 2.87150420179742960070e-01 
0.22083 	 1.14404899804358937965e-02 	 1.67038743624498053908e-01 	 2.88613725652491104334e-01 
0.22917 	 1.14515474285709316360e-02 	 1.67143632694848276454e-01 	 2.90548363637928130920e-01 
0.23750 	 1.15777791531479854609e-02 	 1.67651185209579278723e-01 	 2.91744863633288664673e-01 
0.24583 	 1.15791236429998289220e-02 	 1.67871356892884238121e-01 	 2.93171834410368148394e-01 
0.25417 	 1.16073073100289546333e-02 	 1.68711557396134886888e-01 	 2.95370888603123660232e-01 
0.26250 	 1.15217931557644332613e-02 	 1.69187036572545440594e-01 	 2.96903957561239495444e-01 
0.27083 	 1.16836875030777789797e-02 	 1.69933746410598163212e-01 	 2.98701928963771234926e-01 
0.27917 	 1.16386119840019425231e-02 	 1.70445005706714419746e-01 	 3.00690733511783769849e-01 
0.28750 	 1.16035449085115961732e-02 	 1.70903081023712738462e-01 	 3.02454275169413422386e-01 
0.29583 	 1.17616406875581218372e-02 	 1.71782573988329717585e-01 	 3.04691985008874066665e-01 
0.30417 	 1.17390879626050083362e-02 	 1.71986810035463927315e-01 	 3.06601892839990730621e-01 
0.31250 	 1.17819183446447491026e-02 	 1.72918522662320189864e-01 	 3.08788644212291907287e-01 
0.32083 	 1.17901998099628948363e-02 	 1.73966609635909486009e-01 	 3.10611041364628415185e-01 
0.32917 	 1.18356524671572697904e-02 	 1.74159735004901061739e-01 	 3.13096238233852963706e-01 
0.33750 	 1.17965107576640838849e-02 	 1.75091398343919568692e-01 	 3.15474923990333333546e-01 
0.34583 	 1.18918420561923386669e-02 	 1.75285766112006746731e-01 	 3.17454820766892853445e-01 
0.35417 	 1.19320397451859339794e-02 	 1.76395454499239934254e-01 	 3.20147680989952720942e-01 
0.36250 	 1.19563074978828523531e-02 	 1.77162297240149840816e-01 	 3.22592876524904481617e-01 
0.37083 	 1.19910291454233871450e-02 	 1.78156111866779126585e-01 	 3.25028785502648298600e-01 
0.37917 	 1.20817160925182978670e-02 	 1.78809372723510690006e-01 	 3.27140700377415105660e-01 
0.38750 	 1.21029810241309980501e-02 	 1.79274613793919207483e-01 	 3.30452808327688807299e-01 
0.39583 	 1.21437070546133694948e-02 	 1.80475090561298567859e-01 	 3.33200898798826694591e-01 
0.40417 	 1.21689055887911970477e-02 	 1.81164685394485741599e-01 	 3.36236359033584009115e-01 
0.41250 	 1.21860788898993169238e-02 	 1.82183607476539971559e-01 	 3.39175172838833027811e-01 
0.42083 	 1.22235454792922939443e-02 	 1.82961841428418814370e-01 	 3.41537649503328821776e-01 
0.42917 	 1.23086954850529731870e-02 	 1.83686763112830941935e-01 	 3.44711640113547490571e-01 
0.43750 	 1.23825843448546590170e-02 	 1.84946447419047171890e-01 	 3.47996747427406216691e-01 
0.44583 	 1.23977191130386233536e-02 	 1.85892345869355823940e-01 	 3.51051785451496067836e-01 
0.45417 	 1.24100508945413634532e-02 	 1.86504897557794702134e-01 	 3.54243172078181789431e-01 
0.46250 	 1.24815738884167613115e-02 	 1.87672677163124440591e-01 	 3.57404973547767623732e-01 
0.47083 	 1.24799134158905099951e-02 	 1.89073735101689482940e-01 	 3.60687219479448761827e-01 
0.47917 	 1.25336701860848005741e-02 	 1.90078128968270948507e-01 	 3.64219214075233999051e-01 
0.48750 	 1.25964959080823498544e-02 	 1.90925491887574599881e-01 	 3.68270660712835096184e-01 
0.49583 	 1.26030073007006269969e-02 	 1.92010542456168942227e-01 	 3.71260448816985166864e-01 
0.50417 	 1.26845094320790462150e-02 	 1.93007086777374881059e-01 	 3.75032287663538910216e-01 
0.51250 	 1.27187420430653272407e-02 	 1.94285673143181902844e-01 	 3.78852254731147752853e-01 
0.52083 	 1.28039883139930994044e-02 	 1.95485966499769792115e-01 	 3.82180154585046616411e-01 
0.52917 	 1.27835449717571287415e-02 	 1.96543787822229309992e-01 	 3.86004263755925391965e-01 
0.53750 	 1.29132282463563317215e-02 	 1.97760419028028294752e-01 	 3.89634186232843127140e-01 
0.54583 	 1.29250796431966356176e-02 	 1.99103975850472764142e-01 	 3.93679707686314495074e-01 
0.55417 	 1.30252896654560988698e-02 	 2.00127018295764486089e-01 	 3.97602066195139269844e-01 
0.56250 	 1.30557096095182852136e-02 	 2.01692015669499347119e-01 	 4.02681292899267517793e-01 
0.57083 	 1.30835052286977504554e-02 	 2.02907556921283399598e-01 	 4.07239572482988143598e-01 
0.57917 	 1.31475737608885649005e-02 	 2.04405114992547876085e-01 	 4.10694872211873840406e-01 
0.58750 	 1.32163291796370870740e-02 	 2.05994293666394795439e-01 	 4.14888347428409076656e-01 
0.59583 	 1.32535134159710195345e-02 	 2.07301452279904013798e-01 	 4.19807916173543294036e-01 
0.60417 	 1.33493903594068194507e-02 	 2.08797786756205222547e-01 	 4.24728454698455826222e-01 
0.61250 	 1.33736356442823167701e-02 	 2.10402800409162898942e-01 	 4.28774556051048139071e-01 
0.62083 	 1.34505140642195500367e-02 	 2.11792861481832073167e-01 	 4.33781383177143986529e-01 
0.62917 	 1.35118114638091840751e-02 	 2.13385847181291776753e-01 	 4.38316644336738114873e-01 
0.63750 	 1.35446140186481003842e-02 	 2.14885518899772753887e-01 	 4.43530628480650501722e-01 
0.64583 	 1.36474155374653009776e-02 	 2.16420339189610316799e-01 	 4.48767424058200803394e-01 
0.65417 	 1.37361773612872054701e-02 	 2.18214725719350632893e-01 	 4.53697174890051124763e-01 
0.66250 	 1.38218729737456403478e-02 	 2.20101186479389809847e-01 	 4.59476877465343491735e-01 
0.67083 	 1.38234707153719171141e-02 	 2.21705217469100129835e-01 	 4.64599511859481451026e-01 
0.67917 	 1.38846186797176290167e-02 	 2.23454844370417016197e-01 	 4.70370704521713312030e-01 
0.68750 	 1.39782194272470641772e-02 	 2.25468156494336213758e-01 	 4.75200303050211825262e-01 
0.69583 	 1.40461335152417161887e-02 	 2.27305285991597327833e-01 	 4.81056222136344302509e-01 
0.70417 	 1.41131177488401753084e-02 	 2.29134496458957864773e-01 	 4.86591661139922193602e-01 
0.71250 	 1.42116178987345079948e-02 	 2.31158224189598832110e-01 	 4.92393537677282555620e-01 
0.72083 	 1.42671938342718677972e-02 	 2.33158242038154106535e-01 	 4.98308283290862241710e-01 
0.72917 	 1.43460945060411293461e-02 	 2.35471601295935417664e-01 	 5.04651152852994999698e-01 
0.73750 	 1.44382483454584646665e-02 	 2.37534293772356464025e-01 	 5.10530913572224132047e-01 
0.74583 	 1.44990932778030160583e-02 	 2.39493727934116884537e-01 	 5.15977301279693767455e-01 
0.75417 	 1.45517328761210346100e-02 	 2.41672848701405623695e-01 	 5.23103612574505105748e-01 
0.76250 	 1.46482330469205473955e-02 	 2.44255403462504017131e-01 	 5.29308728436451936261e-01 
0.77083 	 1.47176872966521335440e-02 	 2.46738459556257144767e-01 	 5.35749891191179550276e-01 
0.77917 	 1.48436620928323569080e-02 	 2.49192909886089830618e-01 	 5.41904717672548885687e-01 
0.78750 	 1.49184922663025357897e-02 	 2.51926555977149413401e-01 	 5.48973480145316106160e-01 
0.79583 	 1.49905993343788547512e-02 	 2.54591395217840077425e-01 	 5.56093243649597668288e-01 
0.80417 	 1.50721104284480059143e-02 	 2.57145396213261379081e-01 	 5.63166424923494113308e-01 
0.81250 	 1.51755209240223565281e-02 	 2.60265374372274593817e-01 	 5.70326118799414527594e-01 
0.82083 	 1.52711595447949655124e-02 	 2.63205474852292176102e-01 	 5.76731546127591254702e-01 
0.82917 	 1.53604948456975958643e-02 	 2.66624657278218268885e-01 	 5.84367370944655961651e-01 
0.83750 	 1.54321305311399103316e-02 	 2.69955264542997563915e-01 	 5.91641707491758372939e-01 
0.84583 	 1.55613786971235852630e-02 	 2.73171785720290438704e-01 	 5.99012758596048411341e-01 
0.85417 	 1.56389852248088774556e-02 	 2.76977478798741960642e-01 	 6.06426853968763945879e-01 
0.86250 	 1.57147740335933407130e-02 	 2.80544023146782173228e-01 	 6.14318585705322717239e-01 
0.87083 	 1.57886308202493004516e-02 	 2.84960675358824355730e-01 	 6.22149064217816238909e-01 
0.87917 	 1.59089636450024211889e-02 	 2.89202139268968483332e-01 	 6.30270987509138902460e-01 
0.88750 	 1.60344578901160175755e-02 	 2.93487522921092480743e-01 	 6.38567225371330704498e-01 
0.89583 	 1.61219045509468951460e-02 	 2.98225690848884283923e-01 	 6.46536815842934653453e-01 
0.90417 	 1.62369060382056909497e-02 	 3.03640204863960760928e-01 	 6.55583403449300217147e-01 
0.91250 	 1.63403421601486624481e-02 	 3.08887445943812066762e-01 	 6.63129977186279973012e-01 
0.92083 	 1.64448478431697062141e-02 	 3.14917112372916085938e-01 	 6.71182894824933207190e-01 
0.92917 	 1.65366205815017618119e-02 	 3.20865622931383320804e-01 	 6.80639236020685323147e-01 
0.93750 	 1.66213143858662155961e-02 	 3.27925112964227161161e-01 	 6.89688655968042962918e-01 
0.94583 	 1.67677248316902109682e-02 	 3.36138389950422555863e-01 	 6.99406023316984204463e-01 
0.95417 	 1.68606138851070050388e-02 	 3.44473162788774545096e-01 	 7.08111933257278391984e-01 
0.96250 	 1.69705598613367411587e-02 	 3.54297964067320336756e-01 	 7.17604136451687302234e-01 
0.97083 	 1.70756719945638277269e-02 	 3.65270510867021336310e-01 	 7.26706319952792334504e-01 
0.97917 	 1.71580498419290281009e-02 	 3.77844523047826730267e-01 	 7.35572910576401062244e-01 
0.98750 	 1.72650051853768318755e-02 	 3.93009762284549479805e-01 	 7.46115602011505396618e-01 
0.99583 	 1.74241448816862404270e-02 	 4.11326715071002713131e-01 	 7.56538970067580307521e-01 
1.00417 	 1.75059060339286046148e-02 	 4.33664032711937319498e-01 	 7.65846164327652179082e-01 
1.01250 	 1.75992847514824073130e-02 	 4.62634467005065330714e-01 	 7.75206703552165365956e-01 
1.02083 	 1.77679006940732915620e-02 	 5.03347323472910890274e-01 	 7.85968447135443004647e-01 
1.02917 	 1.78824195635821636685e-02 	 5.64989332177420866543e-01 	 7.95927011554629193490e-01 
1.03750 	 1.80231639977545925191e-02 	 6.84207846610114800434e-01 	 8.07347809213262879169e-01 
1.04583 	 1.81051742275174960828e-02 	 1.98721940720099521371e+00 	 8.18595104236406800879e-01 
1.05417 	 1.82138211960912455023e-02 	 9.26049896723101451101e-01 	 8.30023638110351624775e-01 
1.06250 	 1.83526190418871783250e-02 	 6.32612269406103266967e-01 	 8.40223691125382199374e-01 
1.07083 	 1.85103352910821403188e-02 	 5.33096557852686392387e-01 	 8.52146782304652461448e-01 
1.07917 	 1.86509336931100673518e-02 	 4.76067069408328158442e-01 	 8.62914341962125797103e-01 
1.08750 	 1.87752946723442198929e-02 	 4.36492587229265427418e-01 	 8.75363950006809887761e-01 
1.09583 	 1.89075883557012179581e-02 	 4.07146950891554837426e-01 	 8.87259421630336997389e-01 
1.10417 	 1.90767194120514300970e-02 	 3.83827622759011888309e-01 	 8.99685012071027467861e-01 
1.11250 	 1.91893154025656771655e-02 	 3.64729163368885667129e-01 	 9.10764144862424962490e-01 
1.12083 	 1.93308876492041085970e-02 	 3.48546692046703965318e-01 	 9.23995238346390190820e-01 
1.12917 	 1.94797625427665099807e-02 	 3.34054997901985339936e-01 	 9.37059940840667793260e-01 
1.13750 	 1.96534356598100368174e-02 	 3.21464820910315085545e-01 	 9.48386166348677450699e-01 
1.14583 	 1.97811839716333370820e-02 	 3.10265967717300361617e-01 	 9.60775719478017431463e-01 
1.15417 	 1.99345722939776454075e-02 	 3.00001592877053469000e-01 	 9.72957315134936995271e-01 
1.16250 	 2.00995526299746381238e-02 	 2.90777078533325461507e-01 	 9.85954435102476267616e-01 
1.17083 	 2.02494501605404927935e-02 	 2.81936018053630332858e-01 	 1.00049805966617122444e+00 
1.17917 	 2.03931767735242436279e-02 	 2.74120110776254755081e-01 	 1.01331941693985250197e+00 
1.18750 	 2.05405919238447372266e-02 	 2.66622966612341194548e-01 	 1.02769486551710387268e+00 
1.19583 	 2.07086692106759444332e-02 	 2.59633925396668463481e-01 	 1.04155866022219556477e+00 
1.20417 	 2.08713214462028402718e-02 	 2.53187429900737226429e-01 	 1.05548660735690158496e+00 
1.21250 	 2.09986438686421798827e-02 	 2.46898309302368335061e-01 	 1.07083434644820396642e+00 
1.22083 	 2.11767869501586387948e-02 	 2.40932162908233132859e-01 	 1.08492222072640220887e+00 
1.22917 	 2.13272406125779856456e-02 	 2.35443096757879610781e-01 	 1.09922082063449377820e+00 
1.23750 	 2.14910645380643472446e-02 	 2.30068160643998903536e-01 	 1.11383889933526769589e+00 
1.24583 	 2.16895746637265837697e-02 	 2.24947464833173849108e-01 	 1.12860667749397380888e+00 
1.25417 	 2.18768959178841995716e-02 	 2.20285520726225231281e-01 	 1.14396033286130216489e+00 
1.26250 	 2.20344266885285182400e-02 	 2.15583697057415091258e-01 	 1.16025372877551058437e+00 
1.27083 	 2.22203760686956290626e-02 	 2.10722549914818396699e-01 	 1.17499919274801012392e+00 
1.27917 	 2.23933432574375257396e-02 	 2.06618782321089100584e-01 	 1.19056546764069692834e+00 
1.28750 	 2.25835220750778796484e-02 	 2.02261325400603070301e-01 	 1.20697615786479128808e+00 
1.29583 	 2.27843585868195697142e-02 	 1.98128721623008902109e-01 	 1.22410431677095288272e+00 
1.30417 	 2.29289884627576039111e-02 	 1.94128988269541030709e-01 	 1.24086788279816939706e+00 
1.31250 	 2.31263359591742309607e-02 	 1.90417336783299279146e-01 	 1.25663324559279176995e+00 
1.32083 	 2.33064959432621558733e-02 	 1.86686776496516854129e-01 	 1.27520192423962996919e+00 
1.32917 	 2.35361783089864731733e-02 	 1.83138984680338651190e-01 	 1.29182408510797852585e+00 
1.33750 	 2.37138862352736720651e-02 	 1.79710220761802985656e-01 	 1.30815355081696194084e+00 
1.34583 	 2.38759557658352120080e-02 	 1.76210307919730690962e-01 	 1.32503212474100506846e+00 
1.35417 	 2.40911305727124318288e-02 	 1.72959180413791296926e-01 	 1.34429078920991207369e+00 
1.36250 	 2.43150498605402207164e-02 	 1.69809750993787172968e-01 	 1.36162836398406961180e+00 
1.37083 	 2.45072988931572186000e-02 	 1.66575841898463333779e-01 	 1.37935499903179659142e+00 
1.37917 	 2.47280242435404945534e-02 	 1.63570777093239194677e-01 	 1.39683662815140663405e+00 
1.38750 	 2.49121048234242463415e-02 	 1.60551030326127108783e-01 	 1.41609896772236432128e+00 
1.39583 	 2.51361208190925694561e-02 	 1.57544929850096743218e-01 	 1.43543148884977078694e+00 
1.40417 	 2.53562472449576463418e-02 	 1.54932184257766308866e-01 	 1.45502242148146154754e+00 
1.41250 	 2.55761457482603406233e-02 	 1.52083344425612193573e-01 	 1.47494290731227617464e+00 
1.42083 	 2.57500058537899652322e-02 	 1.49445367149689922748e-01 	 1.49414452703633138242e+00 
1.42917 	 2.59895588627504330048e-02 	 1.46528732938389361085e-01 	 1.51252572216974123798e+00 
1.43750 	 2.62008516162415203143e-02 	 1.43901856090988045089e-01 	 1.53305018207356091864e+00 
1.44583 	 2.64492862373237047624e-02 	 1.41465363566595031530e-01 	 1.55150680950308816897e+00 
1.45417 	 2.66651459352545555648e-02 	 1.38919115972121448577e-01 	 1.57254027150128439239e+00 
1.46250 	 2.69009072566057903797e-02 	 1.36499828803380685027e-01 	 1.59329171366156141509e+00 
1.47083 	 2.71149042470423540241e-02 	 1.34199428712323515223e-01 	 1.61482141448512472870e+00 
1.47917 	 2.73629493234030796156e-02 	 1.31794770043084374933e-01 	 1.63347071217935635445e+00 
1.48750 	 2.76044880026799048511e-02 	 1.29451857311270512874e-01 	 1.65375585115085876886e+00 
1.49583 	 2.78384053303234769994e-02 	 1.27421077280236355600e-01 	 1.67690178628913422187e+00 
1.50417 	 2.80666073935604346024e-02 	 1.25220305766694739447e-01 	 1.69730818894057899904e+00 
1.51250 	 2.83223454250601906768e-02 	 1.22978524286040030722e-01 	 1.71796730283581777776e+00 
1.52083 	 2.85700496452950397641e-02 	 1.21018448981574017198e-01 	 1.73817696267795418485e+00 
1.52917 	 2.88461525750078606745e-02 	 1.18761723640690722292e-01 	 1.76120537072230209930e+00 
1.53750 	 2.90882706321264478122e-02 	 1.16745280813975726986e-01 	 1.78278200535002451232e+00 
1.54583 	 2.93427322763787461202e-02 	 1.14820815459269212622e-01 	 1.80431715902936518070e+00 
1.55417 	 2.95980523992154763435e-02 	 1.12897957308475904714e-01 	 1.82540591296772891639e+00 
1.56250 	 2.98836950419577307425e-02 	 1.10958857131156926612e-01 	 1.84744768421537020053e+00 
1.57083 	 3.01536630468708030661e-02 	 1.08995435880842012066e-01 	 1.86939120949599346666e+00 
1.57917 	 3.03845312663441023682e-02 	 1.07040335544711998073e-01 	 1.89115537328683736007e+00 
1.58750 	 3.06490613836202865916e-02 	 1.05440526844454027233e-01 	 1.91369806468334724414e+00 
1.59583 	 3.09260738688092798321e-02 	 1.03654754037693946911e-01 	 1.93578763500882322646e+00 
1.60417 	 3.12300979420369467787e-02 	 1.01789218290558647340e-01 	 1.95643746423018982661e+00 
1.61250 	 3.15035415289939974004e-02 	 1.00143907540835935821e-01 	 1.97822869932999378939e+00 
1.62083 	 3.17642999583583052203e-02 	 9.84291996736197660756e-02 	 1.99964250633612428132e+00 
1.62917 	 3.20672965141859042659e-02 	 9.69244433261694238180e-02 	 2.02218709454398704040e+00 
1.63750 	 3.23447347050359462761e-02 	 9.53065975879442001117e-02 	 2.04450376538147082783e+00 
1.64583 	 3.26775075951329235791e-02 	 9.36470936355236482918e-02 	 2.06610115653083248333e+00 
1.65417 	 3.29671245025058914924e-02 	 9.20833463402103008510e-02 	 2.08732085531486122321e+00 
1.66250 	 3.32338215312455442785e-02 	 9.05381952013406127167e-02 	 2.10982347761401589636e+00 
1.67083 	 3.35570405541194619059e-02 	 8.90197053015875650051e-02 	 2.12909569259605646607e+00 
1.67917 	 3.38956268090535028925e-02 	 8.76765915601242645794e-02 	 2.15111171595397943079e+00 
1.68750 	 3.41852895485580191015e-02 	 8.61403804249078058897e-02 	 2.17140905356653979297e+00 
1.69583 	 3.45071327357039173145e-02 	 8.47411517355562970977e-02 	 2.19313828086010964569e+00 
1.70417 	 3.48181755423849076392e-02 	 8.33311536012991821432e-02 	 2.21013153940026318978e+00 
1.71250 	 3.51363958865390235697e-02 	 8.19232176102723808064e-02 	 2.22952674815575724310e+00 
1.72083 	 3.54400912334352502508e-02 	 8.07205037141534437195e-02 	 2.24861821847539111729e+00 
1.72917 	 3.57669815163463300500e-02 	 7.93021127466165542952e-02 	 2.26705148160741210006e+00 
1.73750 	 3.60663300297366165581e-02 	 7.79888372020656195360e-02 	 2.28603194097819395481e+00 
1.74583 	 3.64143641400576714706e-02 	 7.67396310040542595221e-02 	 2.30232305893088051718e+00 
1.75417 	 3.68002930672749056784e-02 	 7.54348637602086646847e-02 	 2.31724165838535300921e+00 
1.76250 	 3.71109446469140499825e-02 	 7.41372155347925776425e-02 	 2.33364157551009965275e+00 
1.77083 	 3.74588804059887217623e-02 	 7.29621792474897529202e-02 	 2.34901730491209415064e+00 
1.77917 	 3.77847630091379255157e-02 	 7.17919914198815178885e-02 	 2.36288094559195283040e+00 
1.78750 	 3.81472496651019329916e-02 	 7.06542505312761776048e-02 	 2.37544504587176552590e+00 
1.79583 	 3.84664314922281008746e-02 	 6.94999655618191297668e-02 	 2.38733052548433866136e+00 
1.80417 	 3.88277091523097153680e-02 	 6.83232324818985048420e-02 	 2.39798742004620724089e+00 
1.81250 	 3.91902620137374105291e-02 	 6.72244306776723227204e-02 	 2.40768750569072542689e+00 
1.82083 	 3.95262104197013491858e-02 	 6.60974220667131379114e-02 	 2.41641544707918054513e+00 
1.82917 	 3.98928047583643613505e-02 	 6.50898920127987168360e-02 	 2.42453359368163301468e+00 
1.83750 	 4.02286333608848634125e-02 	 6.39606311852745218482e-02 	 2.43339003652292085178e+00 
1.84583 	 4.06203436961356176282e-02 	 6.29422722768390591197e-02 	 2.43695686517717913233e+00 
1.85417 	 4.09646683387819843247e-02 	 6.19123428342000375890e-02 	 2.44188872708164872449e+00 
1.86250 	 4.12953855426639315773e-02 	 6.09478948277716384152e-02 	 2.44171423588257452408e+00 
1.87083 	 4.17064526487035749924e-02 	 5.99705240508566148061e-02 	 2.44617773903418145309e+00 
1.87917 	 4.20452717444871615360e-02 	 5.90090627893273753091e-02 	 2.44232170639662404810e+00 
1.88750 	 4.23987161393106215534e-02 	 5.79809790029384361509e-02 	 2.43818685165173087981e+00 
1.89583 	 4.27496684581205738107e-02 	 5.71041625153452525598e-02 	 2.43419342764095025800e+00 
1.90417 	 4.31263932159397928023e-02 	 5.61974423892735580610e-02 	 2.42594889937224555965e+00 
1.91250 	 4.34680420028289923873e-02 	 5.52756002165568638418e-02 	 2.41827644668696972730e+00 
1.92083 	 4.38583294842528753632e-02 	 5.43806273954373156632e-02 	 2.40722531529642846948e+00 
1.92917 	 4.41988109865376205265e-02 	 5.35002183346722087753e-02 	 2.39376616385722540414e+00 
1.93750 	 4.45984456889234534560e-02 	 5.25811505935805043044e-02 	 2.37627018231435682694e+00 
1.94583 	 4.49031890829415941679e-02 	 5.17831701275759184733e-02 	 2.35804742887544671603e+00 
1.95417 	 4.52697450245760774079e-02 	 5.09767443701032579861e-02 	 2.33438676263878264194e+00 
1.96250 	 4.55988663244634231941e-02 	 5.01225379354062680615e-02 	 2.30957450181505796749e+00 
1.97083 	 4.59063838046084859990e-02 	 4.93266554833388798373e-02 	 2.27995397847871350550e+00 
1.97917 	 4.63003287671255939206e-02 	 4.85695297757673880024e-02 	 2.24898994152990061579e+00 
1.98750 	 4.65796600649612535516e-02 	 4.78012769783585506067e-02 	 2.20579759683508935808e+00 
1.99583 	 4.69080373839175640560e-02 	 4.69742666001475434046e-02 	 1.15658902527083995437e+00 
2.00417 	 3.99418451906936056162e+00 	 3.73974027585223867121e+00 	 7.35992669571701441100e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   1.0E-4		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1e7; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);