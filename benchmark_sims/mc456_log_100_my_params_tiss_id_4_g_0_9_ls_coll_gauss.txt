time elapsed: 10.5543 seconds

=================================

sim results:

number of photons = 100
overflow: 4.64059991707760630675e+01
sum: 5.39421734896301430240e+01
sum: 5.35940008292239369325e+01
avg: 5.39421734896301408035e-01
perc_in: 53.94

number of photons = 100
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 8.00477059778039734539e-01 
0.01250 	 0.00000000000000000000e+00 	 1.83645841324928740801e-02 	 9.92202287098872481863e-01 
0.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 9.57098483819000311890e-01 
0.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 7.61356234458899550077e-01 
0.03750 	 0.00000000000000000000e+00 	 1.71713879189632434574e-01 	 1.03254428118542440629e+00 
0.04583 	 0.00000000000000000000e+00 	 3.51761533418812277763e-01 	 9.16233399518893265601e-01 
0.05417 	 0.00000000000000000000e+00 	 3.79861273253365924751e-02 	 5.69283702607209285418e-01 
0.06250 	 0.00000000000000000000e+00 	 1.32368901342686362543e-01 	 7.77804957013167430624e-01 
0.07083 	 3.02536598612298701649e-01 	 2.15796453864873061246e-01 	 7.03544203684657198927e-01 
0.07917 	 0.00000000000000000000e+00 	 5.22395296983618820374e-02 	 7.47114391100196284512e-01 
0.08750 	 0.00000000000000000000e+00 	 1.27418281001460881319e-01 	 7.71542632931928817897e-01 
0.09583 	 0.00000000000000000000e+00 	 1.87242748401503344979e-01 	 4.09782764490037532124e-01 
0.10417 	 1.42059636355186980072e-01 	 1.37837835234980332633e-01 	 7.04776527434214261625e-01 
0.11250 	 1.23679619653667194346e-01 	 7.97238752860637694964e-02 	 8.79397005463950387494e-01 
0.12083 	 0.00000000000000000000e+00 	 1.18019904855079391104e-01 	 8.61512301567168292671e-01 
0.12917 	 0.00000000000000000000e+00 	 7.39605309752469491924e-02 	 8.35176092468109199096e-01 
0.13750 	 0.00000000000000000000e+00 	 1.42138747541907251026e-01 	 1.06273022598598032573e+00 
0.14583 	 0.00000000000000000000e+00 	 1.15757867834092129100e-01 	 8.36093156514540414292e-01 
0.15417 	 1.29772423322665947376e-01 	 9.94262325956360576429e-02 	 6.62863254870825868714e-01 
0.16250 	 1.86241631137678997909e-01 	 1.02807123837810154843e-01 	 1.17222704085161599785e+00 
0.17083 	 0.00000000000000000000e+00 	 2.22394904214606059512e-01 	 9.75588821781544934808e-01 
0.17917 	 0.00000000000000000000e+00 	 4.94443887562207862185e-02 	 1.10439297736384056670e+00 
0.18750 	 4.80812122222807059035e-02 	 1.04649851984038685937e-01 	 8.90063416312495858662e-01 
0.19583 	 0.00000000000000000000e+00 	 2.47000883436693907669e-01 	 9.92180748891975494708e-01 
0.20417 	 0.00000000000000000000e+00 	 8.02295525766165557036e-02 	 9.83786616186939633089e-01 
0.21250 	 3.25975907992959099135e-02 	 1.49290039689871228967e-02 	 9.61113532813179349823e-01 
0.22083 	 4.20859450617960036828e-03 	 1.19116616712126907607e-01 	 8.67471817194181094024e-01 
0.22917 	 3.14495183137829883990e-02 	 1.47909260714733703512e-01 	 1.15915378157396764536e+00 
0.23750 	 3.52849255216880573066e-03 	 7.63555399924793626321e-02 	 8.26250977991700441549e-01 
0.24583 	 2.36195666823901320730e-02 	 1.56994559201250216685e-01 	 1.02957399432577911824e+00 
0.25417 	 3.22629523312049654865e-03 	 2.41017501800793509936e-01 	 1.12890210404322122173e+00 
0.26250 	 2.84434887651898848232e-03 	 2.07836227247244459404e-01 	 9.84788228539297372244e-01 
0.27083 	 5.22237001578798078205e-03 	 1.32560887163939183919e-01 	 1.31522361200678350457e+00 
0.27917 	 2.14826163256138617796e-02 	 1.38121956112594868049e-01 	 1.00543131067026036973e+00 
0.28750 	 5.05940669814810249638e-03 	 3.43654820243891809262e-02 	 1.05063012861117810459e+00 
0.29583 	 2.17791217250739351646e-03 	 1.25585730746230750388e-01 	 1.24942412711541095405e+00 
0.30417 	 8.57661750925495583453e-03 	 1.03299011983988275887e-01 	 1.28704396084029992764e+00 
0.31250 	 1.89271239462188416852e-03 	 1.06041592520048702508e-01 	 8.50295754499618694489e-01 
0.32083 	 1.59275322065783528358e-02 	 1.34065006959711741086e-01 	 1.08008710567735866093e+00 
0.32917 	 1.88485975532147152778e-02 	 1.08296499651553329580e-01 	 1.19797295898142319714e+00 
0.33750 	 4.45500278186343676157e-02 	 1.44857772105038584698e-01 	 1.06375222880479558540e+00 
0.34583 	 1.28327121451862237456e-02 	 8.94911702671570968848e-02 	 1.39931884725488897558e+00 
0.35417 	 1.24643917361321708570e-02 	 1.32242362227893039961e-01 	 1.02705803243356030841e+00 
0.36250 	 4.33236315810447553121e-02 	 1.25786215340648294125e-01 	 7.90784497838581068585e-01 
0.37083 	 2.51463867136863736262e-02 	 1.15193647336690532801e-01 	 6.40328168377791162591e-01 
0.37917 	 8.69918502038943310117e-03 	 1.35471018747047644570e-01 	 7.73939701158351756050e-01 
0.38750 	 1.14267491601892784425e-02 	 1.05355354660423741753e-01 	 5.78737850721692148603e-01 
0.39583 	 4.49705234660582459094e-02 	 1.59707635416030141462e-01 	 8.88209634125269320570e-01 
0.40417 	 1.35618149464391858638e-02 	 9.45404795015427068527e-02 	 1.10678318628877825347e+00 
0.41250 	 1.41883298315259604588e-02 	 1.17778983789182015163e-01 	 9.80941464172950028377e-01 
0.42083 	 5.65990672975148507301e-03 	 1.47379406134514417959e-01 	 1.10942657049863058205e+00 
0.42917 	 8.47924025713944588822e-03 	 1.37236485803700902775e-01 	 1.19099217798301881821e+00 
0.43750 	 1.66612426047830809728e-02 	 1.71792825929959785958e-01 	 8.48693247654595528395e-01 
0.44583 	 6.16572320859548606009e-03 	 1.56644032675321925874e-01 	 1.09366158845131877797e+00 
0.45417 	 1.65513161523893684302e-02 	 1.49078037640949678799e-01 	 1.11770181668496704219e+00 
0.46250 	 3.29794605093227943815e-02 	 1.42588498780680472677e-01 	 1.00894229791032152832e+00 
0.47083 	 4.27533028443972118460e-02 	 9.56934072038113925363e-02 	 1.24811913057220302825e+00 
0.47917 	 1.58009678318490470739e-02 	 1.20633997924119565348e-01 	 1.15673666614676240449e+00 
0.48750 	 2.75017197629890547406e-02 	 9.54284886057384096336e-02 	 1.20528095245727051577e+00 
0.49583 	 2.13656570548198879167e-02 	 1.46595556510937197192e-01 	 1.09750775178112736086e+00 
0.50417 	 2.79910103797779696855e-02 	 1.95997495761078194265e-01 	 1.36310941795156836953e+00 
0.51250 	 1.75372907288173056350e-02 	 1.07341852761772271752e-01 	 1.00759189542464011602e+00 
0.52083 	 3.70914965794709450275e-02 	 9.04417552388803863694e-02 	 8.74884841139458191428e-01 
0.52917 	 5.21445108372897286886e-02 	 1.17284483675855713547e-01 	 1.46073283050869284772e+00 
0.53750 	 5.39603713938429790931e-02 	 1.49504989361147894167e-01 	 1.57192752650747458176e+00 
0.54583 	 2.77334145394918102356e-02 	 1.32340941037264459013e-01 	 1.22650335250833086853e+00 
0.55417 	 3.14933583887308937710e-02 	 1.33868634465352548402e-01 	 1.21733067445975007281e+00 
0.56250 	 4.00303251292548276097e-02 	 1.51160059626044063208e-01 	 1.27290770098073102723e+00 
0.57083 	 2.38903273268953261765e-02 	 1.87326313144071276984e-01 	 1.15675569678475520519e+00 
0.57917 	 4.62275736344427354285e-02 	 2.21268502429424557265e-01 	 1.38324238999636328629e+00 
0.58750 	 1.09706127763124824254e-02 	 1.43897290610424249957e-01 	 1.09923719931718966158e+00 
0.59583 	 3.30289539131901621616e-02 	 2.00927717834035346467e-01 	 1.49570148306977612762e+00 
0.60417 	 4.06764765837936970172e-02 	 1.55125394702130908753e-01 	 1.19184515256799472560e+00 
0.61250 	 2.97524473572814071587e-02 	 1.56355976705899984980e-01 	 1.09785274402453025822e+00 
0.62083 	 3.46655997517905170580e-02 	 1.55904571011646286838e-01 	 1.08751998849700060035e+00 
0.62917 	 3.74311863590788967970e-02 	 1.72727379641819528411e-01 	 1.20050607747754645160e+00 
0.63750 	 1.88345895707155326637e-02 	 1.17572531621282880265e-01 	 1.34848694503978161485e+00 
0.64583 	 2.87994169409750352950e-02 	 2.05583294520200771105e-01 	 1.04378954658694045321e+00 
0.65417 	 4.66359431619217459919e-02 	 1.82003249739824707332e-01 	 1.31575034376652366674e+00 
0.66250 	 4.94469919101618374246e-02 	 2.29317285974191070741e-01 	 1.50835519668265005677e+00 
0.67083 	 2.24416672843056747011e-02 	 2.10207279126076396203e-01 	 1.21596361097906902060e+00 
0.67917 	 4.07011319539853227978e-02 	 2.73450010204476456899e-01 	 1.26071646153773953003e+00 
0.68750 	 5.63679097324545630432e-02 	 2.41983349377594497698e-01 	 1.18921421137714156124e+00 
0.69583 	 4.09625657153990310744e-02 	 2.15500067170440123832e-01 	 1.51439397310788503859e+00 
0.70417 	 2.40206794814087284951e-02 	 1.91303359736750361320e-01 	 1.25023296669144934334e+00 
0.71250 	 3.57713923015262752481e-02 	 2.32098725099027014540e-01 	 1.36937032316315643321e+00 
0.72083 	 3.63719561882455272306e-02 	 2.76783013751771556077e-01 	 1.28343504473995118076e+00 
0.72917 	 4.60176053078689001330e-02 	 2.57543476869137200058e-01 	 1.36226306675437891514e+00 
0.73750 	 4.75296881304774140875e-02 	 2.26638630236747629088e-01 	 1.37951883625498838981e+00 
0.74583 	 4.23853170192801526062e-02 	 2.45849017453180163084e-01 	 1.65814417101121436282e+00 
0.75417 	 6.67805327588939373618e-02 	 2.88880049874285782519e-01 	 1.09017056330226114191e+00 
0.76250 	 3.73816534741399156272e-02 	 2.43673316007998408406e-01 	 1.67790104935510586692e+00 
0.77083 	 2.59556217698262842175e-02 	 3.19741853535565445643e-01 	 1.47269655408289223963e+00 
0.77917 	 4.29554425568193370966e-02 	 2.50865498049544055625e-01 	 2.10903993588906502055e+00 
0.78750 	 2.30023974316401723372e-02 	 2.24402532868241411101e-01 	 1.67131753329533871977e+00 
0.79583 	 4.81084381704519337131e-02 	 4.07545258486232131467e-01 	 1.82511826366533491672e+00 
0.80417 	 3.68202409823952941936e-02 	 3.62057975443891566503e-01 	 1.54666991899752637174e+00 
0.81250 	 6.05535567399563684488e-02 	 3.74628731643005974394e-01 	 1.89605535211351394764e+00 
0.82083 	 4.64021585993511578860e-02 	 2.90319263386557557816e-01 	 1.54135701344930597934e+00 
0.82917 	 5.35367031538073467889e-02 	 4.56282975161230786032e-01 	 1.45174429439424468313e+00 
0.83750 	 3.27895708737063265592e-02 	 3.14062884952719112430e-01 	 1.98037431921910522803e+00 
0.84583 	 3.59899688839417919439e-02 	 1.68842525033849361060e-01 	 2.34425899120315373025e+00 
0.85417 	 7.78155094220774334879e-02 	 2.46589785499868041629e-01 	 1.71018361000798946314e+00 
0.86250 	 5.97762604632499014445e-02 	 2.57330243369967959222e-01 	 1.75717530308631864067e+00 
0.87083 	 6.69641564007976697326e-02 	 2.19669550771881383344e-01 	 2.79924277215222705451e+00 
0.87917 	 6.24462386529211349595e-02 	 2.39232080475087899307e-01 	 2.53185136061326776513e+00 
0.88750 	 4.85536370233588740475e-02 	 2.55471692667715077896e-01 	 2.05806102106496879856e+00 
0.89583 	 4.90878831488646208414e-02 	 1.90765211988380367636e-01 	 2.19892990651176889472e+00 
0.90417 	 4.58945262359586186873e-02 	 2.56251098556403156259e-01 	 1.99456690506860501166e+00 
0.91250 	 4.65444369874446761681e-02 	 3.10610737985570040109e-01 	 2.19647958065130310956e+00 
0.92083 	 3.53957985662015570116e-02 	 2.78791576085083148140e-01 	 1.97997816376109536662e+00 
0.92917 	 5.10635380620604109603e-02 	 2.78457688307069683997e-01 	 1.93307944826746846978e+00 
0.93750 	 4.44094194367092576226e-02 	 3.02723316018485066881e-01 	 2.81984181695624380737e+00 
0.94583 	 4.04390239292009012750e-02 	 2.99782677960363119762e-01 	 2.15089014866436878393e+00 
0.95417 	 3.99245124575065557515e-02 	 2.87188823476449639482e-01 	 2.46153129279877092017e+00 
0.96250 	 4.19138234863082673187e-02 	 2.93873963458252174252e-01 	 2.49116680448522176405e+00 
0.97083 	 4.29595170898365436019e-02 	 3.92024316402728112418e-01 	 2.43362798670955848834e+00 
0.97917 	 6.68581799498808027060e-02 	 3.30437166003054616503e-01 	 2.84783473788185625963e+00 
0.98750 	 7.70503837254078310925e-02 	 3.55556841019163738515e-01 	 3.54094405431504810622e+00 
0.99583 	 5.46328533435364513404e-02 	 2.84070510717763236030e-01 	 5.60757612925386617064e+00 
1.00417 	 6.54374831691653530141e-02 	 2.60224476166588281068e-01 	 4.22203750879035943910e+00 
1.01250 	 5.38754839920242839524e-02 	 3.13077141960367233420e-01 	 2.72893512267749116518e+00 
1.02083 	 7.31453217449762882474e-02 	 4.61548766844871616311e-01 	 3.28872295586832308345e+00 
1.02917 	 5.96925844303555983017e-02 	 4.50293063767673140685e-01 	 3.19589876892549051846e+00 
1.03750 	 4.18362256573691915218e-02 	 4.23852749435661868560e-01 	 2.95312067502706199207e+00 
1.04583 	 3.22691016306233466326e-02 	 5.84162763775859295023e-01 	 2.88389115197460910167e+00 
1.05417 	 5.00419531453667257304e-02 	 5.74352611448217809098e-01 	 2.66677048890074619436e+00 
1.06250 	 6.46718955341439027951e-02 	 4.62602438915916236439e-01 	 2.70936935335200779207e+00 
1.07083 	 6.22852427203857555993e-02 	 4.57930434647107365009e-01 	 2.22543935533415560002e+00 
1.07917 	 6.55522751569411615824e-02 	 4.27427655744645917935e-01 	 1.89286243844540180703e+00 
1.08750 	 5.69980966886383597081e-02 	 3.99398206766645558208e-01 	 1.76435281325459314417e+00 
1.09583 	 7.19328539330877925195e-02 	 4.40250300270518202250e-01 	 1.66708149036479613692e+00 
1.10417 	 7.79919943038920454592e-02 	 4.47463210251094589687e-01 	 1.95499536053168920802e+00 
1.11250 	 6.89125255465855152126e-02 	 4.05742743453200660486e-01 	 2.15432439996052060849e+00 
1.12083 	 5.45621526752600449761e-02 	 3.83422263040799959910e-01 	 1.94289557743744234486e+00 
1.12917 	 7.39005398253008288778e-02 	 3.44308553898808211713e-01 	 2.20512345227260198044e+00 
1.13750 	 8.42863694835916804626e-02 	 3.45816598871316216446e-01 	 2.01631597168342446835e+00 
1.14583 	 7.81629267943713956779e-02 	 3.36645729161815843167e-01 	 2.08317595522006149267e+00 
1.15417 	 9.85197455068301669590e-02 	 3.75185342249983511120e-01 	 1.74679236060959586219e+00 
1.16250 	 8.38804511631901089652e-02 	 3.08114267605775205006e-01 	 1.52894730678790291556e+00 
1.17083 	 7.51881643070990007827e-02 	 3.35147763606829129923e-01 	 2.13025578815515759246e+00 
1.17917 	 6.99482864007302668208e-02 	 3.80827516472146521131e-01 	 2.05579511725606822736e+00 
1.18750 	 6.19033202603145940590e-02 	 2.85208004601734954608e-01 	 1.45041196647915437978e+00 
1.19583 	 5.86379695033044379127e-02 	 3.03765461520424884245e-01 	 1.63688084715342485609e+00 
1.20417 	 4.10878909748401618951e-02 	 3.34795953027065773533e-01 	 1.68469336243801559583e+00 
1.21250 	 4.37381434332502899709e-02 	 3.62535780605714397229e-01 	 1.66640557413973189327e+00 
1.22083 	 4.46017123882814017777e-02 	 3.10730824782282921692e-01 	 2.05650960209360222919e+00 
1.22917 	 3.56615288647009892609e-02 	 3.08359975816393905301e-01 	 1.89489439592923791800e+00 
1.23750 	 5.64849717167291431874e-02 	 2.70661989930322921527e-01 	 1.39878453478417652533e+00 
1.24583 	 8.81916300557278320937e-02 	 3.13289332593479241673e-01 	 1.69704260034709841776e+00 
1.25417 	 5.14868691396324074105e-02 	 2.25831281129458993906e-01 	 1.53803221469664208598e+00 
1.26250 	 8.04820823145895591910e-02 	 2.79649942262492012812e-01 	 1.88870232618596811669e+00 
1.27083 	 7.28852386332681789760e-02 	 2.60415960867412699109e-01 	 1.11571393871834478873e+00 
1.27917 	 6.82132159591494757755e-02 	 2.11267584066650276897e-01 	 1.61162472898917674691e+00 
1.28750 	 9.74254162999579759186e-02 	 3.23186406678895199462e-01 	 1.26438358470384160093e+00 
1.29583 	 5.95331523168835877180e-02 	 2.34777461264447484535e-01 	 1.00158507688776365896e+00 
1.30417 	 8.92553968243599699095e-02 	 2.44898675679967314789e-01 	 1.39493514560783915535e+00 
1.31250 	 1.09744593888756569733e-01 	 2.01119379323408370430e-01 	 1.35861072249090941710e+00 
1.32083 	 7.82327883552954572721e-02 	 2.16208096975403052387e-01 	 1.31313193689574125855e+00 
1.32917 	 6.14583394441017213938e-02 	 1.56115419497768470602e-01 	 1.06825191603669789053e+00 
1.33750 	 6.93679914164594124681e-02 	 2.00516459085199882928e-01 	 9.70498529258962183697e-01 
1.34583 	 6.96481361742204291287e-02 	 2.21255058491551526156e-01 	 1.52507711951590585464e+00 
1.35417 	 5.78704184568357843377e-02 	 2.05797180345128866152e-01 	 1.17777912451737010180e+00 
1.36250 	 6.47385759370835422999e-02 	 2.69323566343393328015e-01 	 9.53472645632579052233e-01 
1.37083 	 6.17661866783942442583e-02 	 1.88747346017555189812e-01 	 1.00748469941108398373e+00 
1.37917 	 7.62523500104532181432e-02 	 1.93440392694485097103e-01 	 1.15130509495191968306e+00 
1.38750 	 8.67643122566793406625e-02 	 1.67155813569646538586e-01 	 1.11121638944133138693e+00 
1.39583 	 8.89437484346952689229e-02 	 1.62180294530924279384e-01 	 1.03115464507083975931e+00 
1.40417 	 9.66873788232836400836e-02 	 2.25612171159634999906e-01 	 1.23145115118886061545e+00 
1.41250 	 9.85070296026979846937e-02 	 1.84393092981761569371e-01 	 1.05663495299693832585e+00 
1.42083 	 9.83060764038090478811e-02 	 1.55640403660506743133e-01 	 1.14288274495699271327e+00 
1.42917 	 1.39453626918914413979e-01 	 1.24549676146715790348e-01 	 9.54882224523190714649e-01 
1.43750 	 1.39248088970665290232e-01 	 1.69888450074278607449e-01 	 1.01753779049436943183e+00 
1.44583 	 1.67740412524646331782e-01 	 1.34295000335172803885e-01 	 9.13291501982698927797e-01 
1.45417 	 9.07658332385026106470e-02 	 1.72485548208070410547e-01 	 1.03068181203096775889e+00 
1.46250 	 1.20292699634901301131e-01 	 1.27129867701480381292e-01 	 7.67564419653676832667e-01 
1.47083 	 1.04549784773376647218e-01 	 1.55668982218596402278e-01 	 6.72145306730928981942e-01 
1.47917 	 1.05109494233284916920e-01 	 1.51622940307331199872e-01 	 7.15576736781263211817e-01 
1.48750 	 9.93512902036750022994e-02 	 1.34983921160070907685e-01 	 7.31815728126816278376e-01 
1.49583 	 7.31698722784201310843e-02 	 1.11816056000145505611e-01 	 7.27518522483391660849e-01 
1.50417 	 6.29817445208045723071e-02 	 1.51975705622194118272e-01 	 5.98419973870069954458e-01 
1.51250 	 7.74856647260250691600e-02 	 9.54162145109577058966e-02 	 5.91556537736670828842e-01 
1.52083 	 7.37479431944103452912e-02 	 1.48637021475103853208e-01 	 9.08674906578813557090e-01 
1.52917 	 8.47184938348781585438e-02 	 1.22236355580950653565e-01 	 1.34732392734392925071e+00 
1.53750 	 7.13991878476452901392e-02 	 1.87364313171919372181e-01 	 1.06609328130642322385e+00 
1.54583 	 7.83545260630914425226e-02 	 1.55175683385107815448e-01 	 9.00634666668075012375e-01 
1.55417 	 7.73558151896836521111e-02 	 1.45246014612953500134e-01 	 7.34116926469706942981e-01 
1.56250 	 6.34342490360151195494e-02 	 1.03265100121252520471e-01 	 1.04387767835440037345e+00 
1.57083 	 6.47673502781003773698e-02 	 1.24109215583773219160e-01 	 6.80952718911743026808e-01 
1.57917 	 6.59122075942630697432e-02 	 1.34294199563214478044e-01 	 1.01506093369696759332e+00 
1.58750 	 7.21616394362338819946e-02 	 1.17675136858542986329e-01 	 8.41998991624346104778e-01 
1.59583 	 7.62262444554464846380e-02 	 1.01052433449032932899e-01 	 6.78774124580737603374e-01 
1.60417 	 6.76264094094415207925e-02 	 1.17395258842982089242e-01 	 5.36508219351810589082e-01 
1.61250 	 5.76384730932959707395e-02 	 1.13071043773913540442e-01 	 8.08341635529598145915e-01 
1.62083 	 4.62255065366237102853e-02 	 1.19181651834914914545e-01 	 8.57028050713280808992e-01 
1.62917 	 5.93827156561552715885e-02 	 1.10388638845941897126e-01 	 7.66980939332189692870e-01 
1.63750 	 6.50166248852254574642e-02 	 9.52065857710290008864e-02 	 5.46035716126033965345e-01 
1.64583 	 4.47203298670716745122e-02 	 1.06485732390713225270e-01 	 8.70690978073772714474e-01 
1.65417 	 4.92340723852562403562e-02 	 1.17104401359181334308e-01 	 8.32927415270919402346e-01 
1.66250 	 3.66137092400586824925e-02 	 1.01257414724709129961e-01 	 5.32060073918168341400e-01 
1.67083 	 4.27499215568400217635e-02 	 9.98018054750490629656e-02 	 6.62058390591655054891e-01 
1.67917 	 3.98373344253491259992e-02 	 1.20518112592774007119e-01 	 3.10012784198219204512e-01 
1.68750 	 3.89172378281288158797e-02 	 7.94088054307509338958e-02 	 4.13146030031916799974e-01 
1.69583 	 4.46477767537184350166e-02 	 8.37700619510176464066e-02 	 4.59997098461955244986e-01 
1.70417 	 4.60041124779800164601e-02 	 1.04599911933294514865e-01 	 4.05598193999685718847e-01 
1.71250 	 3.37590260364713234953e-02 	 1.14192235891015028693e-01 	 4.77846485281786415023e-01 
1.72083 	 3.96608870404240518304e-02 	 1.09666501775916733208e-01 	 6.32395687921263660591e-01 
1.72917 	 3.96705721827195698093e-02 	 8.87752804418864421843e-02 	 3.86522807808056367840e-01 
1.73750 	 4.06501577016077503268e-02 	 7.92131593187542087930e-02 	 6.80601208090386600169e-01 
1.74583 	 3.67074618863068719010e-02 	 1.08869704326373453740e-01 	 4.46928004982565629799e-01 
1.75417 	 4.20760660133449038156e-02 	 6.13199559581696640453e-02 	 6.75703798600744476310e-01 
1.76250 	 4.27199043703142197770e-02 	 7.91002461422324609774e-02 	 4.65727600582215461866e-01 
1.77083 	 3.86055499407952917856e-02 	 9.84034193000248164074e-02 	 5.40335586951787627541e-01 
1.77917 	 5.28129810902843235820e-02 	 8.95948110581158557730e-02 	 5.78843717176251604251e-01 
1.78750 	 4.41962526990224563450e-02 	 8.60894165319993631691e-02 	 4.84844786005354966285e-01 
1.79583 	 3.44988161933654988167e-02 	 8.62879760771043113898e-02 	 4.51419349477226894418e-01 
1.80417 	 3.96164447129469660114e-02 	 9.22711393059292422913e-02 	 5.30588377640505259869e-01 
1.81250 	 4.55436296607913404522e-02 	 8.51394388170851612596e-02 	 4.26155060416234687803e-01 
1.82083 	 3.50534404875278704505e-02 	 7.02637033261246518601e-02 	 6.38847953053337747065e-01 
1.82917 	 4.10289686938410044781e-02 	 8.98951864715399201478e-02 	 4.26825525729662091923e-01 
1.83750 	 4.41248068331009449250e-02 	 6.84574731939330827224e-02 	 4.61606426849725859363e-01 
1.84583 	 3.71078141419694251812e-02 	 8.58158344626941266275e-02 	 7.42618337357403679455e-01 
1.85417 	 4.55103670808694252270e-02 	 1.00385774004547317917e-01 	 6.24122526281992273667e-01 
1.86250 	 4.45537233928299108987e-02 	 7.12949772972325257481e-02 	 4.11034593119147029228e-01 
1.87083 	 4.41825355937117483784e-02 	 7.27890283273685129162e-02 	 4.61260714975552932327e-01 
1.87917 	 3.06901472874555811265e-02 	 6.27792526118915589217e-02 	 4.99666514504190695245e-01 
1.88750 	 4.01499106312281986431e-02 	 6.25542628016313023709e-02 	 3.85259912137675575305e-01 
1.89583 	 3.10651333849453516189e-02 	 5.19449946990581390427e-02 	 6.48933509170254274601e-01 
1.90417 	 2.82938754944214408693e-02 	 3.84691587119238495585e-02 	 3.31851231858553696874e-01 
1.91250 	 2.75726747569250210668e-02 	 4.72600888825669418480e-02 	 4.56134415971094442366e-01 
1.92083 	 3.06683275036615035636e-02 	 4.70450355900863259606e-02 	 4.74818033022758323458e-01 
1.92917 	 3.05687807436066036337e-02 	 5.69510760150896827581e-02 	 3.91864252176242211512e-01 
1.93750 	 3.00891498469276069683e-02 	 4.52703990858437307909e-02 	 4.32261282548485115118e-01 
1.94583 	 2.82940135339006110238e-02 	 3.26940520856317945464e-02 	 5.26170446837923466710e-01 
1.95417 	 2.02999461347001079747e-02 	 7.64233608389166679808e-02 	 5.05384064726376425192e-01 
1.96250 	 2.03335343195164899854e-02 	 5.61378472091001584632e-02 	 3.64334068053375093044e-01 
1.97083 	 2.40013286410534730508e-02 	 4.75136059675636129862e-02 	 4.54547897148489199459e-01 
1.97917 	 2.29414952788446063758e-02 	 3.29146830728261549637e-02 	 7.63966533835565453359e-01 
1.98750 	 2.03271197242901636992e-02 	 4.93988914779012119882e-02 	 2.84594660014905465051e-01 
1.99583 	 2.68660569253356511232e-02 	 4.70866793080154666384e-02 	 4.49429592996817950379e-01 
2.00417 	 2.15131763051767599393e+00 	 4.34692676117836018790e+00 	 2.83365484797585409638e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */ /*ID_EDIT_4_1*/
mus         = 23.8888943003376;  /* cm^-1 */ /*ID_EDIT_4_2*/
g           = 0.9;  /*ID_EDIT_5*/
nt          = 1.36;  /*ID_EDIT_4_3*/
Nphotons    = 100; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

b = 20 * SIGN(2*RandomNum-1) * dr;    /* Set photon position to origin. */ /*ID_EDIT_6_FIXED*/
x = x_start + b * sqrt(-log(RandomNum)); /* log is e base */ /*ID_EDIT_6_DEL*/
y = y_start; /*ID_EDIT_6_DEL*/
z = z_start; /*ID_EDIT_6_DEL*/
ux = 0; /*ID_EDIT_6_DEL*/
uy = 0; /*ID_EDIT_6_DEL*/
uz = -1; /*ID_EDIT_6_DEL*/


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

printf("saving cube into file...\n");
double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);
printf("saving cube completed\n");

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);