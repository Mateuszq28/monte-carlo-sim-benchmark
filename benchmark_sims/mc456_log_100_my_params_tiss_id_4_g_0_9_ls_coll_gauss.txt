time elapsed: 10.5280 seconds

=================================

sim results:

number of photons = 100
overflow: 5.25684606208111659953e+01
sum: 4.77797120395946706140e+01
sum: 4.74315393791888340047e+01
avg: 4.77797120395946683935e-01
perc_in: 47.78

number of photons = 100
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.67775699717759396723e-01 
0.01250 	 0.00000000000000000000e+00 	 6.02286950094179859838e-02 	 5.29726322983875674844e-01 
0.02083 	 0.00000000000000000000e+00 	 2.14953785440885926372e-02 	 4.31115339450903078955e-01 
0.02917 	 0.00000000000000000000e+00 	 1.17705322990854774345e-01 	 5.19751971423540681805e-01 
0.03750 	 0.00000000000000000000e+00 	 7.89605853184490724672e-02 	 4.56640708236624670580e-01 
0.04583 	 0.00000000000000000000e+00 	 7.60635186294427723119e-02 	 4.17747053337573170939e-01 
0.05417 	 0.00000000000000000000e+00 	 3.75199421549801473419e-02 	 3.50347889033635784273e-01 
0.06250 	 0.00000000000000000000e+00 	 2.51831996558310788892e-01 	 3.47559766190884744663e-01 
0.07083 	 0.00000000000000000000e+00 	 2.86679594923201053192e-01 	 4.30256390029596202940e-01 
0.07917 	 0.00000000000000000000e+00 	 1.54919293390034601421e-01 	 5.00607352683815620686e-01 
0.08750 	 0.00000000000000000000e+00 	 1.51764936877382905500e-01 	 3.56388681267123030860e-01 
0.09583 	 0.00000000000000000000e+00 	 1.82983551258445620302e-01 	 3.29921802454885226830e-01 
0.10417 	 0.00000000000000000000e+00 	 2.58760096415742157916e-01 	 4.51858364104335441525e-01 
0.11250 	 0.00000000000000000000e+00 	 1.77584214389679556634e-01 	 4.77501325417017785657e-01 
0.12083 	 0.00000000000000000000e+00 	 1.78990666637731665745e-01 	 3.06054678320416106985e-01 
0.12917 	 0.00000000000000000000e+00 	 9.99386606689681572524e-02 	 3.95500829291952349376e-01 
0.13750 	 0.00000000000000000000e+00 	 1.06513217752324237941e-01 	 4.54721858623189645332e-01 
0.14583 	 0.00000000000000000000e+00 	 1.18674319793769036946e-01 	 4.23039223394498176134e-01 
0.15417 	 0.00000000000000000000e+00 	 2.50448325838720398107e-01 	 4.99475300092205476421e-01 
0.16250 	 0.00000000000000000000e+00 	 1.56659654071907988859e-01 	 4.55081453885875342191e-01 
0.17083 	 0.00000000000000000000e+00 	 1.39554676999189691822e-01 	 3.75540083822634984667e-01 
0.17917 	 0.00000000000000000000e+00 	 1.50582754471267510343e-01 	 3.41933373693497133505e-01 
0.18750 	 0.00000000000000000000e+00 	 1.10368967963555622558e-01 	 5.40347593311353957546e-01 
0.19583 	 0.00000000000000000000e+00 	 2.10658683917469113922e-01 	 5.39443057467894448997e-01 
0.20417 	 0.00000000000000000000e+00 	 2.84720686032656988829e-01 	 3.03825447371991685941e-01 
0.21250 	 0.00000000000000000000e+00 	 1.43103416453096626837e-01 	 3.87507535015202575490e-01 
0.22083 	 7.56882239916693757426e-03 	 9.74565356184075720636e-02 	 3.86183643174126511877e-01 
0.22917 	 1.40584022142505645631e-02 	 1.97607218897429270932e-01 	 4.79526180839446980464e-01 
0.23750 	 0.00000000000000000000e+00 	 1.58070838184572431961e-01 	 5.39037808181987654343e-01 
0.24583 	 0.00000000000000000000e+00 	 6.70170808336397333393e-02 	 2.77702386589004368567e-01 
0.25417 	 0.00000000000000000000e+00 	 1.22160132477346625168e-01 	 3.56549663598563715272e-01 
0.26250 	 0.00000000000000000000e+00 	 2.42402003065650378799e-01 	 4.39605205599148396445e-01 
0.27083 	 5.18923390942932147296e-03 	 3.14614117160728290479e-01 	 4.10881619852646595703e-01 
0.27917 	 4.95969886608584910326e-03 	 2.00219126109082545817e-01 	 4.44266253234262997740e-01 
0.28750 	 0.00000000000000000000e+00 	 2.18337797519393139734e-01 	 5.76770854653293030267e-01 
0.29583 	 0.00000000000000000000e+00 	 1.65944862872022369515e-01 	 4.60484537399970417226e-01 
0.30417 	 0.00000000000000000000e+00 	 8.62415975226865361147e-02 	 5.35292590337475782114e-01 
0.31250 	 0.00000000000000000000e+00 	 9.57836402816794746373e-02 	 4.80913882340987752784e-01 
0.32083 	 7.29062988872396580686e-03 	 1.02946216820430050398e-01 	 4.02227121753939209636e-01 
0.32917 	 7.41448403353273197830e-03 	 1.17790051626997918643e-01 	 4.34309661954537629125e-01 
0.33750 	 0.00000000000000000000e+00 	 8.82588058390205293380e-02 	 5.72084292523199922087e-01 
0.34583 	 0.00000000000000000000e+00 	 1.53571226483174949617e-01 	 4.23811578105348474299e-01 
0.35417 	 0.00000000000000000000e+00 	 1.50318281654478552722e-01 	 4.21978345059861370547e-01 
0.36250 	 0.00000000000000000000e+00 	 1.93150127797838466748e-01 	 4.97151561118095886016e-01 
0.37083 	 1.04688842969446627845e-02 	 2.32945578436355132945e-01 	 3.83786340988572727273e-01 
0.37917 	 9.88846075036286555060e-03 	 1.41610320156653507473e-01 	 4.67874571061945521144e-01 
0.38750 	 7.86461694052519033615e-03 	 1.23617214624046373173e-01 	 4.58634724911787750035e-01 
0.39583 	 1.38873522900688213359e-03 	 8.28233454553960329880e-02 	 4.66548281206534853904e-01 
0.40417 	 1.96771413422137768368e-03 	 1.09444439871460033609e-01 	 5.24362233675231159680e-01 
0.41250 	 4.66382139605426258855e-03 	 2.04403430173397043790e-01 	 3.10131035641655394830e-01 
0.42083 	 5.81990878279670781868e-04 	 9.25746852888592181019e-02 	 4.68927549242411256802e-01 
0.42917 	 2.38584145298254175771e-03 	 6.34121657199242239056e-02 	 5.11540462159367104178e-01 
0.43750 	 2.42843093245715107437e-03 	 1.86366383045607847402e-01 	 5.34464130533165771020e-01 
0.44583 	 0.00000000000000000000e+00 	 1.16077514889996305514e-01 	 4.46661915087948391268e-01 
0.45417 	 1.50187923568440603699e-03 	 3.01537055755156713222e-01 	 3.68172770621983391770e-01 
0.46250 	 5.36583904528645000594e-04 	 2.40779962823735704802e-01 	 3.78176453778252097404e-01 
0.47083 	 7.30498945116593318555e-03 	 2.32924745561639834346e-01 	 3.92163958167390858112e-01 
0.47917 	 0.00000000000000000000e+00 	 2.87069453915648642450e-01 	 5.58383548475359980934e-01 
0.48750 	 5.06027528258374409420e-03 	 1.44655644132905575328e-01 	 4.36033025135348195622e-01 
0.49583 	 6.93454697094636734328e-03 	 1.38439169027122804811e-01 	 4.23057634088748746315e-01 
0.50417 	 4.80736822284910797487e-02 	 2.16042595168146861484e-01 	 4.16227621784572954233e-01 
0.51250 	 1.95653177957667012699e-02 	 1.42365774371007502985e-01 	 3.19388236930922664314e-01 
0.52083 	 4.00867913855780036436e-02 	 1.87540848776165725020e-01 	 2.48798165126058012930e-01 
0.52917 	 4.40300246395824157464e-02 	 1.27842405734993308508e-01 	 4.00613692850062930173e-01 
0.53750 	 2.52451792111994706425e-02 	 2.16870076674292006080e-01 	 2.10637196303383206208e-01 
0.54583 	 1.55322287149799714151e-02 	 1.31489290928254592972e-01 	 3.71163914206162459664e-01 
0.55417 	 9.54099277529402850506e-03 	 2.28331414359860207508e-01 	 4.00069076135214696244e-01 
0.56250 	 2.32894875446188719115e-02 	 1.80602325612882808059e-01 	 5.19332871039990817685e-01 
0.57083 	 3.68024656777554415310e-02 	 1.34017489303611125884e-01 	 3.24223171889365890941e-01 
0.57917 	 3.88465416068833682695e-02 	 1.61715329670782420601e-01 	 4.76636437678516877714e-01 
0.58750 	 1.39267495006816528075e-02 	 1.44425779132981491060e-01 	 5.13654423640655499739e-01 
0.59583 	 4.45090277224840305537e-02 	 1.60275875522066874046e-01 	 4.50384068207116017302e-01 
0.60417 	 2.26699608015929754412e-02 	 1.67779658720304231112e-01 	 4.40974252826508317238e-01 
0.61250 	 2.75991501868472627335e-02 	 1.80090024498365364192e-01 	 3.56466115608135458714e-01 
0.62083 	 3.37241746244869369797e-02 	 1.30414094869399116439e-01 	 3.91274703991171313167e-01 
0.62917 	 1.67430829112255805113e-02 	 1.33422566789806712473e-01 	 4.51006529765604013971e-01 
0.63750 	 9.78410042691258037550e-03 	 2.14735654933629116492e-01 	 4.18208974413327605468e-01 
0.64583 	 1.57250485112844090585e-02 	 1.75368660733754344605e-01 	 4.78386947981017329745e-01 
0.65417 	 2.85922022555055756199e-02 	 1.54575709810270162103e-01 	 3.49738630432262942449e-01 
0.66250 	 1.98196832664340287511e-02 	 2.10123886101738738263e-01 	 3.33027608426517574003e-01 
0.67083 	 1.39549071960661068281e-02 	 1.70623595070362843451e-01 	 5.54534437756391551666e-01 
0.67917 	 1.68938098383435049421e-02 	 2.23406115664740639870e-01 	 3.46520458564567590543e-01 
0.68750 	 1.87913513911563169467e-02 	 1.67408317947828844119e-01 	 4.98191106581218234872e-01 
0.69583 	 1.48681338994455236602e-02 	 2.20159417896056447406e-01 	 4.13686360928851470931e-01 
0.70417 	 7.44511626908697047439e-03 	 2.49494786008753299811e-01 	 4.52074584657724487524e-01 
0.71250 	 2.00113451304266241892e-02 	 1.38840209841835454663e-01 	 5.67790578541432444659e-01 
0.72083 	 7.77851190091884310551e-03 	 2.18489324247418958969e-01 	 4.90814184341279269308e-01 
0.72917 	 1.73631743409064266681e-02 	 1.77453774786277607145e-01 	 3.56703345528444626389e-01 
0.73750 	 1.08388485614619948377e-02 	 1.83422675603688162260e-01 	 3.45010223831591578136e-01 
0.74583 	 1.85216216664476178433e-02 	 3.08806016263276583711e-01 	 4.14809606149988019386e-01 
0.75417 	 1.58242684338020453416e-02 	 2.70329727303693589935e-01 	 3.53575237651622076296e-01 
0.76250 	 6.83200643247956155429e-03 	 3.31572026763924387893e-01 	 4.72664947488225961614e-01 
0.77083 	 7.90767772480749364661e-03 	 2.76022111673453141023e-01 	 2.67978638218367093415e-01 
0.77917 	 1.08474122248543823621e-02 	 2.50376815145903763860e-01 	 3.83735916753286387948e-01 
0.78750 	 1.20045431113015264868e-02 	 2.49410889748054531712e-01 	 4.81326979747815797417e-01 
0.79583 	 4.45614463952672887337e-03 	 4.12260037370919985023e-01 	 6.09058142269347291275e-01 
0.80417 	 8.61677590467061632618e-03 	 2.06543674382549946600e-01 	 4.92787469339775519028e-01 
0.81250 	 1.19918432812264486725e-02 	 2.81951006229618605925e-01 	 6.65164173637668443284e-01 
0.82083 	 1.01442739720587777469e-02 	 4.00885797106391328359e-01 	 4.60257912193679119550e-01 
0.82917 	 1.60637251848596805670e-02 	 3.37813052364522692361e-01 	 4.27033882869230718704e-01 
0.83750 	 1.33371656489214684277e-02 	 3.38814725659351723142e-01 	 5.35931655834223641399e-01 
0.84583 	 2.10806560004845322531e-02 	 4.24389125268922584588e-01 	 4.24694425018168786323e-01 
0.85417 	 1.72757021268606647535e-02 	 3.93981370683129716870e-01 	 2.99348772855062839060e-01 
0.86250 	 1.87101144737203822777e-02 	 4.68281673266420728208e-01 	 6.54053381961104740583e-01 
0.87083 	 1.47032539536806634156e-02 	 3.59135133825376762218e-01 	 5.80450620663046978898e-01 
0.87917 	 2.06717290095886734036e-02 	 4.06139392202870208592e-01 	 4.61741192078702400448e-01 
0.88750 	 1.04008557458919372735e-02 	 3.70114171914515066586e-01 	 4.27387192570656437862e-01 
0.89583 	 2.41842723868136467991e-02 	 5.29960474319747909533e-01 	 6.64471052944938245233e-01 
0.90417 	 1.53198218276387847225e-02 	 3.89677156432061799762e-01 	 4.87143276836510319416e-01 
0.91250 	 1.43448533162186947498e-02 	 4.78812572030540617440e-01 	 3.51892075817688942951e-01 
0.92083 	 1.03865856636746519553e-02 	 4.70217966050152813562e-01 	 6.07883103321376960793e-01 
0.92917 	 1.83712935332441609781e-02 	 4.90696291543528950729e-01 	 3.71441819310930343434e-01 
0.93750 	 1.69646602773161209177e-02 	 4.42532546142442195780e-01 	 4.69031147855756114229e-01 
0.94583 	 1.62348771718226550509e-02 	 5.88614340495907439887e-01 	 5.67718221695896696488e-01 
0.95417 	 2.42674000272618331508e-02 	 5.30935959714100014217e-01 	 2.12273657448190739006e-01 
0.96250 	 1.33399716987798785256e-02 	 3.99777527136818300324e-01 	 3.38397505987820090834e-01 
0.97083 	 8.48799667779906105713e-03 	 4.21306339521838935092e-01 	 5.51546023973092602866e-01 
0.97917 	 1.20431586116089145433e-02 	 4.96312149221247056463e-01 	 6.75638539985634722917e-01 
0.98750 	 1.80925535356533211118e-02 	 4.23856716135440070303e-01 	 5.30830247496303364585e-01 
0.99583 	 1.07960933340227500932e-02 	 3.60956164884167485241e-01 	 6.19294849629666410706e-01 
1.00417 	 1.56078135657932923208e-02 	 3.61011420709458630274e-01 	 8.47745251071539418497e-01 
1.01250 	 2.33754709207912858560e-02 	 3.85963741163468432305e-01 	 1.00042999437745816493e+00 
1.02083 	 2.70115791801534589622e-02 	 4.42338801524598368431e-01 	 7.24632190564542200129e-01 
1.02917 	 2.73288865545748965724e-02 	 3.37821325664755700569e-01 	 6.83629871745739858824e-01 
1.03750 	 3.20567846364805814074e-02 	 3.83065929695425355650e-01 	 6.30628986199526786471e-01 
1.04583 	 2.31070981333070905872e-02 	 3.56874278153371304878e-01 	 6.61233308925608054274e-01 
1.05417 	 1.91427375804277821736e-02 	 3.57388246714911705926e-01 	 6.58171548275175433140e-01 
1.06250 	 1.89344140446934296185e-02 	 3.75346066362095220903e-01 	 7.14736175281794339220e-01 
1.07083 	 1.93476215594497284733e-02 	 4.22072804315534289010e-01 	 7.29301123737008949455e-01 
1.07917 	 3.06074988057804600605e-02 	 4.59188131497328733133e-01 	 7.44776816485471004903e-01 
1.08750 	 2.36325740204453814408e-02 	 5.08083060496671956585e-01 	 8.79944113542264760852e-01 
1.09583 	 1.46028202842498882469e-02 	 4.21070791611122818843e-01 	 6.58584726440618717369e-01 
1.10417 	 2.10855426380558014232e-02 	 5.20932620896194409355e-01 	 6.74887869393231198956e-01 
1.11250 	 1.75619972626009576699e-02 	 4.21829842598069715276e-01 	 8.61800241395280108847e-01 
1.12083 	 1.17007578869742223660e-02 	 4.83405269212443533533e-01 	 5.54686287404256628264e-01 
1.12917 	 1.34551824311283287766e-02 	 4.23181638225787470908e-01 	 8.98165771329956896807e-01 
1.13750 	 1.53302254593859401538e-02 	 3.96682985286622935561e-01 	 1.11949342399444673468e+00 
1.14583 	 3.28201606530577894016e-02 	 3.73271757507597945480e-01 	 8.22732554044691366535e-01 
1.15417 	 2.89955225872375772778e-02 	 3.54061135313595454210e-01 	 1.02060924566951305437e+00 
1.16250 	 4.17917525362756225871e-02 	 3.10879220211837614674e-01 	 9.32139363890359340381e-01 
1.17083 	 2.98653372895920574126e-02 	 3.43539250070532764525e-01 	 8.52344080659979796977e-01 
1.17917 	 2.67436597947678586507e-02 	 3.91368079981517846822e-01 	 1.13894603025319751666e+00 
1.18750 	 2.25961713324558249871e-02 	 3.64593482569619486977e-01 	 7.00876852143725526112e-01 
1.19583 	 2.50364870428387946422e-02 	 4.14026059745623620234e-01 	 4.35383365176416126108e-01 
1.20417 	 1.98020305932874556010e-02 	 3.39152243432069677720e-01 	 8.27315980089264102482e-01 
1.21250 	 2.17116112951730964864e-02 	 2.67623246013772464469e-01 	 7.36453789807508085730e-01 
1.22083 	 2.27117114165319919361e-02 	 2.13569300814524964949e-01 	 1.03741965200543528880e+00 
1.22917 	 2.51821611884797992575e-02 	 2.81839985587363672792e-01 	 8.33189356502003874994e-01 
1.23750 	 1.87127230707516897801e-02 	 3.58588293077776065765e-01 	 8.81272663162035674311e-01 
1.24583 	 1.49897227773868480655e-02 	 3.21399131403933724371e-01 	 9.27343581213000534014e-01 
1.25417 	 1.44914026106106319514e-02 	 2.03559512979415602185e-01 	 1.00291989217167731852e+00 
1.26250 	 1.46476991717052300312e-02 	 2.55669353516304209695e-01 	 9.87012338575496639415e-01 
1.27083 	 1.92626207477476010799e-02 	 2.34903359083424467801e-01 	 1.07473978949966708640e+00 
1.27917 	 1.56372561441059654275e-02 	 2.64530830967538432841e-01 	 9.85365080276745186616e-01 
1.28750 	 1.26207660672026135418e-02 	 1.67741417478264459584e-01 	 7.41002586292649589872e-01 
1.29583 	 1.60621294160870134449e-02 	 1.84103270264267981915e-01 	 8.62265728199195335968e-01 
1.30417 	 1.87430673473146340580e-02 	 2.33261013601531119743e-01 	 7.64715126437224390621e-01 
1.31250 	 1.67054637804015908287e-02 	 1.81978637616984351144e-01 	 1.13045901098117851369e+00 
1.32083 	 2.49062384459722632735e-02 	 2.20505170744408424133e-01 	 1.04963141932080561425e+00 
1.32917 	 3.06186817573768643719e-02 	 1.90703227978846145962e-01 	 1.17555744600261680155e+00 
1.33750 	 1.64670899583079025086e-02 	 1.80663154893850624871e-01 	 9.51759789392273347630e-01 
1.34583 	 3.36993152381109550841e-02 	 2.11252639454438478905e-01 	 1.15385188247320402688e+00 
1.35417 	 8.65960994980290686696e-03 	 1.83573598791549580378e-01 	 1.37461529215895383871e+00 
1.36250 	 1.43514411640643362728e-02 	 2.11015666025052062160e-01 	 9.87169610579382128535e-01 
1.37083 	 2.48395941457529544072e-02 	 1.81057024075495148763e-01 	 7.60312109709460615115e-01 
1.37917 	 1.14241345768312033138e-02 	 1.55462615896521799685e-01 	 8.19672039305321176172e-01 
1.38750 	 1.84646583121031021557e-02 	 1.65440627271299628420e-01 	 1.28052286786405233876e+00 
1.39583 	 1.38069004589789351423e-02 	 1.22424165812593757630e-01 	 1.30628483337937106867e+00 
1.40417 	 2.77930717137474837808e-02 	 1.23061613327250324312e-01 	 1.51114865303362266857e+00 
1.41250 	 2.10660415353524400894e-02 	 1.34203073093575486752e-01 	 1.55101618912528516070e+00 
1.42083 	 1.76214067225472469091e-02 	 1.06112304960285216970e-01 	 1.46663669272538466082e+00 
1.42917 	 1.69848672608946364704e-02 	 1.10026663165600252503e-01 	 1.58828842034745076894e+00 
1.43750 	 1.79946476563057206066e-02 	 1.29077301630834584412e-01 	 1.47870150957794521673e+00 
1.44583 	 1.56327269340526021912e-02 	 1.43425573387665400427e-01 	 1.17664693919121132737e+00 
1.45417 	 1.95626197936075094108e-02 	 1.25407669467463012136e-01 	 1.26634574779127651034e+00 
1.46250 	 1.91780869805976798836e-02 	 1.20900709440463341449e-01 	 1.51192954629926146204e+00 
1.47083 	 1.65279199192933795581e-02 	 1.49806494550834695678e-01 	 1.78768689709367056828e+00 
1.47917 	 2.50967524694266259921e-02 	 9.64685436680830787903e-02 	 1.16136707563496033302e+00 
1.48750 	 2.35822481540939425659e-02 	 1.04586163928452005600e-01 	 1.04570914771060330395e+00 
1.49583 	 2.41789975007599515500e-02 	 1.37282868994423268294e-01 	 1.27837363812893278769e+00 
1.50417 	 2.31754003102193212316e-02 	 1.13367956897673344274e-01 	 1.61188001286650561816e+00 
1.51250 	 2.39984472647391290645e-02 	 1.14997712964881038111e-01 	 1.69640932650532572090e+00 
1.52083 	 1.84619725412255575314e-02 	 1.39173824628859299501e-01 	 1.61827354614805130062e+00 
1.52917 	 2.20245235493317856323e-02 	 1.17599407535068881114e-01 	 1.72395774359526354758e+00 
1.53750 	 2.79250359006128837103e-02 	 1.08586885081105560813e-01 	 1.53003077647632457214e+00 
1.54583 	 2.20452915698682826162e-02 	 1.50977148513334519242e-01 	 1.32256876390637789775e+00 
1.55417 	 2.37407407295992280150e-02 	 1.07844210632690173934e-01 	 1.64158287614674014421e+00 
1.56250 	 1.36085990164040021577e-02 	 1.39323073887106463342e-01 	 1.35037886264151341109e+00 
1.57083 	 2.43812546782619446462e-02 	 1.07360457901747322063e-01 	 1.58339352448754300262e+00 
1.57917 	 2.89016211896157733385e-02 	 1.14357712350398280088e-01 	 1.43165987520327298022e+00 
1.58750 	 3.00354808366971003097e-02 	 1.29145483244978792614e-01 	 1.85440568068392885870e+00 
1.59583 	 4.00690524232240885549e-02 	 1.12607763500415111735e-01 	 1.94718901968406488123e+00 
1.60417 	 3.98003728642637513713e-02 	 1.12261066171188472751e-01 	 1.76703997410127655598e+00 
1.61250 	 3.94173905526107593023e-02 	 9.75858899110553096312e-02 	 1.75183617890439613518e+00 
1.62083 	 2.10819019074766460242e-02 	 7.53906559586740437906e-02 	 2.67741634104904946412e+00 
1.62917 	 3.08749388850532296980e-02 	 8.51911650668753517301e-02 	 1.94042560212531123298e+00 
1.63750 	 3.22567069980365314641e-02 	 8.07592115034682367369e-02 	 1.65753343133849906366e+00 
1.64583 	 2.67427479392071294761e-02 	 9.81522351715015811680e-02 	 1.84424415445378730993e+00 
1.65417 	 2.60903031256235103108e-02 	 8.94174973671467837599e-02 	 1.95125198471965388691e+00 
1.66250 	 3.16139582325890150516e-02 	 8.00602630809865573047e-02 	 2.66506501595597367071e+00 
1.67083 	 3.67823873996230704675e-02 	 9.64772080311756125015e-02 	 1.91891580438612452397e+00 
1.67917 	 3.92276307067828192143e-02 	 9.53138558624606890834e-02 	 1.98101322535699941874e+00 
1.68750 	 3.99971045106208428210e-02 	 8.77052721876455804173e-02 	 2.26642091896873809631e+00 
1.69583 	 3.80708734276751295522e-02 	 9.68213662328132468327e-02 	 1.65633833500183724752e+00 
1.70417 	 3.35477615901306966406e-02 	 1.11647755281541999350e-01 	 1.79791051176310845428e+00 
1.71250 	 4.30245721279569823259e-02 	 6.69503753959712483157e-02 	 2.30223039876282076222e+00 
1.72083 	 3.80987091473931546726e-02 	 9.20059792669479098448e-02 	 2.25153078270656825666e+00 
1.72917 	 3.69331960285771421226e-02 	 7.31934099926970227479e-02 	 1.97012792982041240464e+00 
1.73750 	 3.09419589800529748480e-02 	 6.85781807293511097567e-02 	 1.65940497193837033230e+00 
1.74583 	 3.14383603436462627512e-02 	 7.01011179796242056561e-02 	 2.33861686074742580743e+00 
1.75417 	 3.96718299022053161318e-02 	 8.17950128898318612469e-02 	 2.17134092538984813103e+00 
1.76250 	 4.15093090703546052644e-02 	 8.97219280170378358230e-02 	 2.30036593293913549374e+00 
1.77083 	 3.35475361916078573810e-02 	 5.46016650498408681602e-02 	 2.45545168613711695116e+00 
1.77917 	 4.09226440420566994760e-02 	 6.21241969441710950584e-02 	 2.37344551073801346419e+00 
1.78750 	 3.67719525044768319466e-02 	 6.16183926581925778265e-02 	 2.77909440244011074483e+00 
1.79583 	 2.82362437869764296150e-02 	 6.56697583606012935675e-02 	 2.76114868826970605298e+00 
1.80417 	 3.53157245203671102396e-02 	 4.59482396828600828109e-02 	 2.91171591236927218560e+00 
1.81250 	 4.07556136709664521001e-02 	 6.15522945466914703228e-02 	 2.26735021629090338635e+00 
1.82083 	 4.57694274142293813790e-02 	 6.48752960343357554240e-02 	 2.70442132939532875469e+00 
1.82917 	 3.71175453200456931246e-02 	 5.37232703288809884667e-02 	 1.82737068141582881253e+00 
1.83750 	 4.47814818495594138548e-02 	 5.19796955223158843595e-02 	 2.80159636682746038261e+00 
1.84583 	 4.18820287038497648946e-02 	 5.65001290497096006482e-02 	 2.49489710920490148638e+00 
1.85417 	 4.27247257090271614910e-02 	 6.17758496247681754276e-02 	 2.38424152454187598948e+00 
1.86250 	 4.05632200104230969395e-02 	 5.64101850783795752409e-02 	 2.94517435768166047083e+00 
1.87083 	 3.44639141732476714242e-02 	 6.01813226915874355250e-02 	 3.20930180574938050952e+00 
1.87917 	 2.97836894496227751195e-02 	 4.36253903167813233965e-02 	 2.28133503901843992523e+00 
1.88750 	 4.00870790885856850827e-02 	 4.79172469482000290553e-02 	 2.24165519782956890182e+00 
1.89583 	 3.96688663090472640183e-02 	 4.04923509715880147741e-02 	 2.66039435731669327012e+00 
1.90417 	 3.21400530356776778507e-02 	 5.21484207404472877023e-02 	 2.51381044554897359333e+00 
1.91250 	 3.78498520737358817856e-02 	 5.87289560069014227039e-02 	 2.48067019020343293434e+00 
1.92083 	 4.64891073425481582415e-02 	 3.26944264975443030230e-02 	 2.84456521530205952430e+00 
1.92917 	 4.15886352562392161425e-02 	 4.23803253034637228414e-02 	 2.24392671939604948506e+00 
1.93750 	 5.66968849348471609639e-02 	 7.02433255463350003645e-02 	 2.89445590168675481735e+00 
1.94583 	 4.05949895027643628542e-02 	 4.55029682272640109697e-02 	 2.40102124922732773626e+00 
1.95417 	 4.55967632863704327995e-02 	 5.58065695510064005425e-02 	 2.72829936784314908138e+00 
1.96250 	 3.36224929613054834832e-02 	 6.17536336649462114234e-02 	 2.50385373158380364345e+00 
1.97083 	 3.05469458500058181627e-02 	 5.22173888491009180468e-02 	 2.39313664819379479098e+00 
1.97917 	 5.39622805178554265648e-02 	 4.82640750758930175968e-02 	 1.75421165615718988029e+00 
1.98750 	 3.61417435758020905157e-02 	 5.20607586934079408225e-02 	 2.21923523277305045909e+00 
1.99583 	 6.01428023704842565356e-02 	 3.99604066399913832042e-02 	 1.58088985081811506106e+00 
2.00417 	 4.13565894427226865560e+00 	 3.91210043301900789459e+00 	 8.30830572445865698228e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */
double z_focus, x_focus, b_rad, w_rad;


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */ /*ID_EDIT_4_1*/
mus         = 23.8888943003376;  /* cm^-1 */ /*ID_EDIT_4_2*/
g           = 0.9;  /*ID_EDIT_5*/
nt          = 1.36;  /*ID_EDIT_4_3*/
Nphotons    = 100; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

b_rad = 20 * SIGN(2*RandomNum-1) * dr;    /* Set photon position to origin. */ /*ID_EDIT_6_FIXED*/
x = x_start + b_rad * sqrt(-log(RandomNum)); /* log is e base */ /*ID_EDIT_6_DEL*/
y = y_start; /*ID_EDIT_6_DEL*/
z = z_start; /*ID_EDIT_6_DEL*/
ux = 0; /*ID_EDIT_6_DEL*/
uy = 0; /*ID_EDIT_6_DEL*/
uz = -1; /*ID_EDIT_6_DEL*/


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

printf("saving cube into file...\n");
double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);
printf("saving cube completed\n");

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);