time elapsed: 1.9157 seconds

=================================

sim results:

[                                                  ] 1%
[#                                                 ] 2%
[#                                                 ] 3%
[##                                                ] 4%
[##                                                ] 5%
[###                                               ] 6%
[###                                               ] 7%
[####                                              ] 8%
[####                                              ] 9%
[#####                                             ] 10%
[#####                                             ] 11%
[######                                            ] 12%
[######                                            ] 13%
[#######                                           ] 14%
[#######                                           ] 15%
[########                                          ] 16%
[########                                          ] 17%
[#########                                         ] 18%
[#########                                         ] 19%
[##########                                        ] 20%
[##########                                        ] 21%
[###########                                       ] 22%
[###########                                       ] 23%
[############                                      ] 24%
[############                                      ] 25%
[#############                                     ] 26%
[#############                                     ] 27%
[##############                                    ] 28%
[##############                                    ] 29%
[###############                                   ] 30%
[###############                                   ] 31%
[################                                  ] 32%
[################                                  ] 33%
[#################                                 ] 34%
[#################                                 ] 35%
[##################                                ] 36%
[##################                                ] 37%
[###################                               ] 38%
[###################                               ] 39%
[####################                              ] 40%
[####################                              ] 41%
[#####################                             ] 42%
[#####################                             ] 43%
[######################                            ] 44%
[######################                            ] 45%
[#######################                           ] 46%
[#######################                           ] 47%
[########################                          ] 48%
[########################                          ] 49%
[#########################                         ] 50%
[#########################                         ] 51%
[##########################                        ] 52%
[##########################                        ] 53%
[###########################                       ] 54%
[###########################                       ] 55%
[############################                      ] 56%
[############################                      ] 57%
[#############################                     ] 58%
[#############################                     ] 59%
[##############################                    ] 60%
[##############################                    ] 61%
[###############################                   ] 62%
[###############################                   ] 63%
[################################                  ] 64%
[################################                  ] 65%
[#################################                 ] 66%
[#################################                 ] 67%
[##################################                ] 68%
[##################################                ] 69%
[###################################               ] 70%
[###################################               ] 71%
[####################################              ] 72%
[####################################              ] 73%
[#####################################             ] 74%
[#####################################             ] 75%
[######################################            ] 76%
[######################################            ] 77%
[#######################################           ] 78%
[#######################################           ] 79%
[########################################          ] 80%
[########################################          ] 81%
[#########################################         ] 82%
[#########################################         ] 83%
[##########################################        ] 84%
[##########################################        ] 85%
[###########################################       ] 86%
[###########################################       ] 87%
[############################################      ] 88%
[############################################      ] 89%
[#############################################     ] 90%
[#############################################     ] 91%
[##############################################    ] 92%
[##############################################    ] 93%
[###############################################   ] 94%
[###############################################   ] 95%
[################################################  ] 96%
[################################################  ] 97%
[################################################# ] 98%
[################################################# ] 99%
[##################################################] 100%
Small Monte Carlo by Scott Prahl (https://omlc.org)
1 W/cm^2 Uniform Illumination of Semi-Infinite Medium

Scattering =   23.889/cm
Absorption =    0.370/cm
Anisotropy =    0.900
Refr Index =    1.360
Photons    =    10000

Specular Refl      =    0.02327
Backscattered Refl =    0.20406

 Depth         Heat
[microns]     [W/cm^3]
     0     9.40055e-01 
    83     9.51348e-01 
   167     9.70861e-01 
   250     9.42876e-01 
   333     9.47491e-01 
   417     9.41816e-01 
   500     9.69715e-01 
   583     9.49658e-01 
   667     9.43019e-01 
   750     9.55367e-01 
   833     9.49972e-01 
   917     9.38820e-01 
  1000     9.40562e-01 
  1083     9.46573e-01 
  1167     9.51308e-01 
  1250     9.29538e-01 
  1333     9.36763e-01 
  1417     9.22713e-01 
  1500     9.57136e-01 
  1583     9.17920e-01 
  1667     8.98990e-01 
  1750     9.27890e-01 
  1833     9.01151e-01 
  1917     8.74262e-01 
  2000     8.95127e-01 
  2083     8.76644e-01 
  2167     8.72809e-01 
  2250     8.57784e-01 
  2333     8.60301e-01 
  2417     8.40327e-01 
  2500     8.15974e-01 
  2583     8.13391e-01 
  2667     8.32895e-01 
  2750     8.28340e-01 
  2833     8.10546e-01 
  2917     8.01179e-01 
  3000     7.93442e-01 
  3083     7.79105e-01 
  3167     7.57770e-01 
  3250     7.87037e-01 
  3333     7.60946e-01 
  3417     7.57697e-01 
  3500     7.45357e-01 
  3583     7.10282e-01 
  3667     7.19918e-01 
  3750     7.15084e-01 
  3833     6.96481e-01 
  3917     7.01338e-01 
  4000     6.90897e-01 
  4083     6.83222e-01 
  4167     6.80660e-01 
  4250     6.82471e-01 
  4333     6.45301e-01 
  4417     6.66027e-01 
  4500     6.46725e-01 
  4583     6.43961e-01 
  4667     6.36806e-01 
  4750     6.28397e-01 
  4833     6.23630e-01 
  4917     6.16743e-01 
  5000     6.00650e-01 
  5083     5.93409e-01 
  5167     5.83108e-01 
  5250     5.89394e-01 
  5333     5.64046e-01 
  5417     5.51927e-01 
  5500     5.73200e-01 
  5583     5.40914e-01 
  5667     5.33465e-01 
  5750     5.31262e-01 
  5833     5.20019e-01 
  5917     5.09031e-01 
  6000     5.04418e-01 
  6083     5.07324e-01 
  6167     5.02070e-01 
  6250     4.96304e-01 
  6333     4.73382e-01 
  6417     4.87894e-01 
  6500     4.69063e-01 
  6583     4.60569e-01 
  6667     4.57519e-01 
  6750     4.44895e-01 
  6833     4.41903e-01 
  6917     4.37996e-01 
  7000     4.29361e-01 
  7083     4.19260e-01 
  7167     4.16297e-01 
  7250     4.08899e-01 
  7333     4.05201e-01 
  7417     3.99752e-01 
  7500     4.00373e-01 
  7583     3.94537e-01 
  7667     3.82041e-01 
  7750     3.89569e-01 
  7833     3.86144e-01 
  7917     3.82792e-01 
  8000     3.64442e-01 
  8083     3.49155e-01 
  8167     3.40415e-01 
  8250     3.43419e-01 
  8333     3.33881e-01 
  8417     3.41596e-01 
  8500     3.31279e-01 
  8583     3.27807e-01 
  8667     3.16989e-01 
  8750     3.16668e-01 
  8833     3.12180e-01 
  8917     3.01821e-01 
  9000     2.91982e-01 
  9083     2.98114e-01 
  9167     2.94676e-01 
  9250     2.89710e-01 
  9333     2.88087e-01 
  9417     2.82364e-01 
  9500     2.83735e-01 
  9583     2.72864e-01 
  9667     2.59302e-01 
  9750     2.66268e-01 
  9833     2.53704e-01 
  9917     2.59003e-01 
 10000     2.56069e-01 
 10083     2.52251e-01 
 10167     2.50678e-01 
 10250     2.49977e-01 
 10333     2.48020e-01 
 10417     2.41570e-01 
 10500     2.36738e-01 
 10583     2.45664e-01 
 10667     2.39659e-01 
 10750     2.26786e-01 
 10833     2.30482e-01 
 10917     2.23949e-01 
 11000     2.18683e-01 
 11083     2.18814e-01 
 11167     2.15750e-01 
 11250     2.10003e-01 
 11333     2.08405e-01 
 11417     2.15920e-01 
 11500     2.08879e-01 
 11583     1.99755e-01 
 11667     2.01009e-01 
 11750     1.95896e-01 
 11833     1.91463e-01 
 11917     1.94564e-01 
 12000     1.85164e-01 
 12083     1.80531e-01 
 12167     1.86137e-01 
 12250     1.86349e-01 
 12333     1.80539e-01 
 12417     1.77276e-01 
 12500     1.74851e-01 
 12583     1.72773e-01 
 12667     1.74838e-01 
 12750     1.74752e-01 
 12833     1.72207e-01 
 12917     1.61908e-01 
 13000     1.59347e-01 
 13083     1.57894e-01 
 13167     1.54351e-01 
 13250     1.55041e-01 
 13333     1.43200e-01 
 13417     1.52768e-01 
 13500     1.44184e-01 
 13583     1.45864e-01 
 13667     1.37562e-01 
 13750     1.38368e-01 
 13833     1.39886e-01 
 13917     1.34503e-01 
 14000     1.33550e-01 
 14083     1.35108e-01 
 14167     1.33826e-01 
 14250     1.28000e-01 
 14333     1.29063e-01 
 14417     1.28186e-01 
 14500     1.24675e-01 
 14583     1.26501e-01 
 14667     1.23993e-01 
 14750     1.19370e-01 
 14833     1.22027e-01 
 14917     1.15212e-01 
 15000     1.14845e-01 
 15083     1.10332e-01 
 15167     1.10869e-01 
 15250     1.08495e-01 
 15333     1.04928e-01 
 15417     1.04754e-01 
 15500     1.08591e-01 
 15583     1.04934e-01 
 15667     1.05273e-01 
 15750     1.07376e-01 
 15833     1.09048e-01 
 15917     9.66146e-02 
 16000     9.27646e-02 
 16083     9.13329e-02 
 16167     9.12240e-02 
 16250     8.95514e-02 
 16333     8.80187e-02 
 16417     9.07250e-02 
 16500     8.63912e-02 
 16583     8.61248e-02 
 16667     8.85379e-02 
 16750     8.40137e-02 
 16833     8.57164e-02 
 16917     7.89463e-02 
 17000     8.40728e-02 
 17083     7.84799e-02 
 17167     8.16031e-02 
 17250     7.91276e-02 
 17333     7.97737e-02 
 17417     7.62895e-02 
 17500     7.37502e-02 
 17583     7.32450e-02 
 17667     7.14245e-02 
 17750     7.14400e-02 
 17833     7.08470e-02 
 17917     6.92725e-02 
 18000     6.52784e-02 
 18083     6.82762e-02 
 18167     6.76716e-02 
 18250     6.94199e-02 
 18333     6.63514e-02 
 18417     6.63694e-02 
 18500     6.36161e-02 
 18583     6.17963e-02 
 18667     6.23684e-02 
 18750     5.75427e-02 
 18833     5.92713e-02 
 18917     5.72155e-02 
 19000     5.94806e-02 
 19083     5.56568e-02 
 19167     5.32943e-02 
 19250     5.64400e-02 
 19333     5.51811e-02 
 19417     5.38634e-02 
 19500     5.32398e-02 
 19583     4.95956e-02 
 19667     4.89232e-02 
 19750     5.14927e-02 
 19833     5.16789e-02 
 19917     5.24525e-02 
 extra         0.02822


=================================

code that generated this simulation:

char   t1[80] = "Small Monte Carlo by Scott Prahl (https://omlc.org)";
char   t2[80] = "1 W/cm^2 Uniform Illumination of Semi-Infinite Medium";

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define BINS 241

double mu_a = 0.37;			/* Absorption Coefficient in 1/cm */
double mu_s = 23.88889;			/* Scattering Coefficient in 1/cm */
double g = 0.9;				/* Scattering Anisotropy -1<=g<=1 */
double n = 1.36;				/* Index of refraction of medium */
double microns_per_bin = 83.3333333;/* Thickness of one bin layer */
long   i, photons = 10000; /*ID_EDIT_1_2*/
double x,y,z,u,v,w,weight;
double rs, rd, bit, albedo, crit_angle, bins_per_mfp, heat[BINS];


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


void launch() /* Start the photon */
{
	x = 0.0; y = 0.0; z = 0.0;		  
	u = 0.0; v = 0.0; w = 1.0;		
	weight = 1.0 - rs;
}

void bounce () /* Interact with top surface */
{
double t, temp, temp1,rf;
	w = -w;
	z = -z;
	if (w <= crit_angle) return;  			/* total internal reflection */	

	t       = sqrt(1.0-n*n*(1.0-w*w));    	/* cos of exit angle */
	temp1   = (w - n*t)/(w + n*t);
	temp    = (t - n*w)/(t + n*w);
	rf      = (temp1*temp1+temp*temp)/2.0;	/* Fresnel reflection */
	rd     += (1.0-rf) * weight;
	weight -= (1.0-rf) * weight;
}

void move() /* move to next scattering or absorption event */
{
double d = -log((rand()+1.0)/(RAND_MAX+1.0));
	x += d * u;
	y += d * v;
	z += d * w;  
	if ( z<=0 ) bounce();
}

void absorb () /* Absorb light in the medium */
{
int bin=z*bins_per_mfp;

	if (bin >= BINS) bin = BINS-1;	
	heat[bin] += (1.0-albedo)*weight;
	weight *= albedo;
	if (weight < 0.001){ /* Roulette */
		bit -= weight;
		if (rand() > 0.1*RAND_MAX) weight = 0; else weight /= 0.1;
		bit += weight;
	}
}

void scatter() /* Scatter photon and establish new direction */
{
double x1, x2, x3, t, mu;

	for(;;) {								/*new direction*/
		x1=2.0*rand()/RAND_MAX - 1.0; 
		x2=2.0*rand()/RAND_MAX - 1.0; 
		if ((x3=x1*x1+x2*x2)<=1) break;
	}	
	if (g==0) {  /* isotropic */
		u = 2.0 * x3 -1.0;
		v = x1 * sqrt((1-u*u)/x3);
		w = x2 * sqrt((1-u*u)/x3);
		return;
	} 

	mu = (1-g*g)/(1-g+2.0*g*rand()/RAND_MAX);
	mu = (1 + g*g-mu*mu)/2.0/g;
	if ( fabs(w) < 0.9 ) {	
		t = mu * u + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*u*w-x2*v);
		v = mu * v + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*v*w+x2*u);
		w = mu * w - sqrt((1-mu*mu)*(1-w*w)/x3) * x1;
	} else {
		t = mu * u + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*u*v + x2*w);
		w = mu * w + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*v*w - x2*u);
		v = mu * v - sqrt((1-mu*mu)*(1-v*v)/x3) * x1;
	}
	u = t;
}

void print_results() /* Print the results */
{
int i;
	printf("%s\n%s\n\nScattering = %8.3f/cm\nAbsorption = %8.3f/cm\n",t1,t2,mu_s,mu_a);
	printf("Anisotropy = %8.3f\nRefr Index = %8.3f\nPhotons    = %8ld",g,n,photons);
	printf("\n\nSpecular Refl      = %10.5f\nBackscattered Refl = %10.5f",rs,rd/(bit+photons));
	printf("\n\n Depth         Heat\n[microns]     [W/cm^3]\n");

	for (i=0;i<BINS-1;i++){
		printf("%6.0f    %12.5e \n",i*microns_per_bin, heat[i]/microns_per_bin*1e4/(bit+photons));
	}
	printf(" extra    %12.5f\n",heat[BINS-1]/(bit+photons));
}

int main ()
{
	long progressBarStep = photons / 100;
	albedo = mu_s / (mu_s + mu_a);
	rs = (n-1.0)*(n-1.0)/(n+1.0)/(n+1.0);	/* specular reflection */
	crit_angle = sqrt(1.0-1.0/n/n);			/* cos of critical angle */
	bins_per_mfp = 1e4/microns_per_bin/(mu_a+mu_s);
	
	for (i = 1; i <= photons; i++){
		displayProgressBar(i, photons, progressBarStep);
		launch ();
		while (weight > 0) {
			move ();
			absorb ();
			scatter ();
		}
	}	
	print_results();
	return 0;
}
