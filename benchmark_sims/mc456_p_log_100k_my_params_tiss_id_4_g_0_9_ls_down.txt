time elapsed: 241.2404 seconds

=================================

sim results:

number of photons = 100000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.95110845797313292582e-02 	 1.46244349389149042029e-01 	 2.68413978700515643006e-01 
0.01250 	 2.20656615002800399195e-02 	 1.61432532066950906735e-01 	 2.68023527505941050464e-01 
0.02083 	 2.13386604506537215509e-02 	 1.57709606100389088112e-01 	 2.69038865728546128242e-01 
0.02917 	 8.83461665327029029016e-03 	 1.64490164624106011138e-01 	 2.68040509286108341591e-01 
0.03750 	 1.33429827838905615961e-02 	 1.62849048078662156369e-01 	 2.68906094775679949116e-01 
0.04583 	 1.00832305853006919116e-02 	 1.63453480116360877483e-01 	 2.67894840053099381194e-01 
0.05417 	 1.16143007905082345371e-02 	 1.63300953335598714178e-01 	 2.67916897417217303445e-01 
0.06250 	 1.12487150527647780662e-02 	 1.62765728875288867572e-01 	 2.70845541525780497683e-01 
0.07083 	 1.09685829307449474179e-02 	 1.65965854848867805371e-01 	 2.67294767122545295912e-01 
0.07917 	 1.13097235875498566826e-02 	 1.64524615544168639758e-01 	 2.74185557699274273791e-01 
0.08750 	 9.82077274428828222996e-03 	 1.64570092033343412519e-01 	 2.69748932126805118781e-01 
0.09583 	 1.07359277845226613879e-02 	 1.62956120244721613943e-01 	 2.72153170828163648576e-01 
0.10417 	 1.08693152634540546320e-02 	 1.64719434424521415927e-01 	 2.71528320569556391728e-01 
0.11250 	 1.05378517123062859923e-02 	 1.64667004883020134942e-01 	 2.74782904849077358467e-01 
0.12083 	 1.22026829571932667745e-02 	 1.64193226101405825856e-01 	 2.71103012000700527295e-01 
0.12917 	 1.15822887291633733892e-02 	 1.63153721186091921203e-01 	 2.75203529541751534815e-01 
0.13750 	 1.32253272002023063852e-02 	 1.65576662500157151259e-01 	 2.76759185375355432068e-01 
0.14583 	 9.85828311906799745201e-03 	 1.66825379909600085560e-01 	 2.74094269236863252726e-01 
0.15417 	 1.07527861295633533900e-02 	 1.65023386544091876793e-01 	 2.76981617487769282704e-01 
0.16250 	 1.07143416367426157210e-02 	 1.65183682033735068639e-01 	 2.80045625946707121834e-01 
0.17083 	 1.08736531556192245890e-02 	 1.66275393764529322294e-01 	 2.79701613005798432887e-01 
0.17917 	 1.11894688186597295737e-02 	 1.66152351027546330009e-01 	 2.79503577264124281054e-01 
0.18750 	 1.15324526034457780499e-02 	 1.63738505888519958464e-01 	 2.81330118542081342170e-01 
0.19583 	 1.13699229737671391599e-02 	 1.64332011350263207383e-01 	 2.82170251268466398820e-01 
0.20417 	 1.14159172771812322117e-02 	 1.68299525290450391335e-01 	 2.82332366199505802040e-01 
0.21250 	 1.02481137356886485568e-02 	 1.70189540675936890057e-01 	 2.82553436765058396674e-01 
0.22083 	 1.18511906304039314752e-02 	 1.68131577004219961990e-01 	 2.85017002692735721414e-01 
0.22917 	 1.08600406676254198496e-02 	 1.67904534027615931491e-01 	 2.88052228567343748811e-01 
0.23750 	 1.11543060909206920989e-02 	 1.66614034583932785205e-01 	 2.88206459351247612499e-01 
0.24583 	 1.05581809360191410108e-02 	 1.71950000072902453585e-01 	 2.88393981060581061637e-01 
0.25417 	 1.04421634992666462205e-02 	 1.70033734006790893112e-01 	 2.88581950224697958429e-01 
0.26250 	 1.12142063356270565294e-02 	 1.75368626983126385532e-01 	 2.92526379177437012569e-01 
0.27083 	 1.06100522338759134522e-02 	 1.75996510656518501126e-01 	 2.95023826614159601078e-01 
0.27917 	 1.21858080722827451237e-02 	 1.74941470266198689787e-01 	 2.96113882929850080750e-01 
0.28750 	 1.19157410098856102187e-02 	 1.74218760511928361101e-01 	 3.00371712340581131784e-01 
0.29583 	 1.17620015496879577049e-02 	 1.73084383654747986370e-01 	 3.00609853243179236948e-01 
0.30417 	 1.07483008464142621580e-02 	 1.77770241174478621504e-01 	 3.00784123273157344425e-01 
0.31250 	 1.19642283068226284309e-02 	 1.76772989505993821657e-01 	 3.08238413833770485972e-01 
0.32083 	 1.17197501615515699974e-02 	 1.76991569859035968726e-01 	 3.10645601493908851687e-01 
0.32917 	 1.13188499187487443681e-02 	 1.77328732089248708448e-01 	 3.12655322646585687174e-01 
0.33750 	 1.15984083358624395776e-02 	 1.79040165363384240482e-01 	 3.13816132907867861856e-01 
0.34583 	 1.12735755872896727114e-02 	 1.78498521516838343226e-01 	 3.16605835130849055936e-01 
0.35417 	 1.23626902787065447858e-02 	 1.78956197473180839141e-01 	 3.15539133490013168348e-01 
0.36250 	 1.17418699951517633423e-02 	 1.77786596172350153111e-01 	 3.19859864236181290487e-01 
0.37083 	 1.09126251044297326726e-02 	 1.80101122406783886731e-01 	 3.17718959014851309863e-01 
0.37917 	 1.13292327980040723884e-02 	 1.82273155302131201205e-01 	 3.22853369338512496967e-01 
0.38750 	 1.11376688251246230149e-02 	 1.82944818730843145049e-01 	 3.28763535302429577012e-01 
0.39583 	 1.19034461124943730104e-02 	 1.85605223153636506028e-01 	 3.31976465330696968170e-01 
0.40417 	 1.20053384351629013199e-02 	 1.83505609589297374873e-01 	 3.35140777975383774567e-01 
0.41250 	 1.18516694808597083943e-02 	 1.81115189167712353768e-01 	 3.35270644863205957709e-01 
0.42083 	 1.25258697565740033386e-02 	 1.84685862029401182127e-01 	 3.39322259519230673419e-01 
0.42917 	 1.22023810352336996299e-02 	 1.85116104039947410032e-01 	 3.42229918713383429729e-01 
0.43750 	 1.19896103986962421911e-02 	 1.84482164411126359216e-01 	 3.47578811225614792146e-01 
0.44583 	 1.23085114412840243570e-02 	 1.87459167343617366663e-01 	 3.52009847346872517537e-01 
0.45417 	 1.24976702924369797998e-02 	 1.87322781093867407609e-01 	 3.50589520796055542640e-01 
0.46250 	 1.26648566448421782960e-02 	 1.90864399037686566230e-01 	 3.62457527844205318335e-01 
0.47083 	 1.21624369131854131315e-02 	 1.90755707777347044418e-01 	 3.61878601109013986470e-01 
0.47917 	 1.27410591174764598749e-02 	 1.90645174182050042289e-01 	 3.66856153707641241546e-01 
0.48750 	 1.24543691260151079270e-02 	 1.89903136352762402783e-01 	 3.70932048825663829295e-01 
0.49583 	 1.29325742117296152434e-02 	 1.93903199105198237318e-01 	 3.72976470712196916946e-01 
0.50417 	 1.27739773688134161667e-02 	 1.95206458124934117970e-01 	 3.78897950708905251194e-01 
0.51250 	 1.29384003245993639553e-02 	 1.94629786224273154671e-01 	 3.78215002090066476637e-01 
0.52083 	 1.22653580092062577944e-02 	 1.96427874960407172766e-01 	 3.81155947609642831164e-01 
0.52917 	 1.27204430480630931166e-02 	 1.98137571929974803941e-01 	 3.91380027587774681486e-01 
0.53750 	 1.28205423841765246695e-02 	 1.99191893061787361763e-01 	 3.95236811269974286365e-01 
0.54583 	 1.30556564146194539061e-02 	 2.01787276746196536648e-01 	 4.02327492455168300722e-01 
0.55417 	 1.29554464811955215992e-02 	 2.00966065963045031895e-01 	 4.02276073374732867638e-01 
0.56250 	 1.29027834701157528841e-02 	 2.00793845147804406182e-01 	 4.01391910987701439062e-01 
0.57083 	 1.30387858278381146837e-02 	 2.01096944069113769960e-01 	 4.06486563183604432403e-01 
0.57917 	 1.30267497941251152865e-02 	 2.04198396866839770869e-01 	 4.11084274132186788808e-01 
0.58750 	 1.28370515169500386959e-02 	 2.07394714240962230178e-01 	 4.15122048334765514355e-01 
0.59583 	 1.29306301712835587658e-02 	 2.08436297781179641353e-01 	 4.19512668944965527729e-01 
0.60417 	 1.29440221551945910256e-02 	 2.09013853104805191752e-01 	 4.21752148792500725083e-01 
0.61250 	 1.31181903709949813225e-02 	 2.11326252417081777990e-01 	 4.31465531530218660006e-01 
0.62083 	 1.33261334854000348255e-02 	 2.13622562627938328284e-01 	 4.35220766893457344793e-01 
0.62917 	 1.37622315014630115099e-02 	 2.15653111832973726214e-01 	 4.36470074638444227588e-01 
0.63750 	 1.35049170802037116906e-02 	 2.15744099505974618047e-01 	 4.41996065394997139641e-01 
0.64583 	 1.36541834826850762286e-02 	 2.16792924285394733586e-01 	 4.47510463206963027272e-01 
0.65417 	 1.35893840331565048107e-02 	 2.16971662876537657594e-01 	 4.52634833041757334016e-01 
0.66250 	 1.33249070595598349126e-02 	 2.19017063550115465009e-01 	 4.63225811256395614279e-01 
0.67083 	 1.34681480334845598418e-02 	 2.21092110822889070798e-01 	 4.70095481974096618405e-01 
0.67917 	 1.35544773730644912968e-02 	 2.21265546270046770116e-01 	 4.75206121635856515439e-01 
0.68750 	 1.39631098553136233364e-02 	 2.24616279529025908435e-01 	 4.84032695291501946500e-01 
0.69583 	 1.39435770835094185321e-02 	 2.27540543545711460016e-01 	 4.83890331382066551935e-01 
0.70417 	 1.41707393233983566100e-02 	 2.27543870742283521613e-01 	 4.94575871719565351992e-01 
0.71250 	 1.41332927422410659091e-02 	 2.27650625335432760243e-01 	 4.97486897958668961017e-01 
0.72083 	 1.43324012436039059659e-02 	 2.31043869612367225308e-01 	 5.01902156180270231367e-01 
0.72917 	 1.44272864108247658027e-02 	 2.31967702456877311601e-01 	 5.15600269498964980386e-01 
0.73750 	 1.41856678100962443206e-02 	 2.34444300323689069909e-01 	 5.19878613364035735422e-01 
0.74583 	 1.44154547323145556387e-02 	 2.39687464749052947521e-01 	 5.20714061691511020946e-01 
0.75417 	 1.45099862375373638013e-02 	 2.39377615488529815746e-01 	 5.22301504405868310954e-01 
0.76250 	 1.47956267631745661678e-02 	 2.45342782348542259863e-01 	 5.36781684797056124481e-01 
0.77083 	 1.46778359143294196559e-02 	 2.46377897471513923611e-01 	 5.39807796314871413124e-01 
0.77917 	 1.44430017845128440268e-02 	 2.47950048215353352488e-01 	 5.47314659448397522468e-01 
0.78750 	 1.48119917872108295548e-02 	 2.49238520229536186790e-01 	 5.59430856279452326518e-01 
0.79583 	 1.46765429870760206327e-02 	 2.54554833412359737821e-01 	 5.62015811463243530888e-01 
0.80417 	 1.49961064191676089752e-02 	 2.57489589445201949580e-01 	 5.66755850901666691222e-01 
0.81250 	 1.48070151752277556767e-02 	 2.63906139729614852563e-01 	 5.80929352537664867029e-01 
0.82083 	 1.53571707300243481126e-02 	 2.61679424165460638996e-01 	 5.77331194379694712104e-01 
0.82917 	 1.53786849443096288598e-02 	 2.62911380980980435851e-01 	 5.85101261531812188998e-01 
0.83750 	 1.55395212872727409015e-02 	 2.65606996247310933601e-01 	 5.96180744201907364399e-01 
0.84583 	 1.60236130971403573087e-02 	 2.69184180829933117352e-01 	 5.99289122013938913014e-01 
0.85417 	 1.59427337008879281555e-02 	 2.73696644948102307815e-01 	 6.08754837650955282768e-01 
0.86250 	 1.58856001880552134831e-02 	 2.81871438957571829320e-01 	 6.19079694998818541585e-01 
0.87083 	 1.61101781989536237127e-02 	 2.83612709545605079509e-01 	 6.25835873352828420124e-01 
0.87917 	 1.62807852686953982713e-02 	 2.83925941513041846243e-01 	 6.34975445618071843157e-01 
0.88750 	 1.65654242733967449475e-02 	 2.93668176684272363985e-01 	 6.48175814826119633949e-01 
0.89583 	 1.62540617100813064577e-02 	 2.98366032138671521956e-01 	 6.49356090465898816433e-01 
0.90417 	 1.64907883056681185685e-02 	 3.03050574021638152722e-01 	 6.59620556439751148936e-01 
0.91250 	 1.66983662403028358667e-02 	 3.04551532282516634886e-01 	 6.68357190911656018351e-01 
0.92083 	 1.64244050248051783047e-02 	 3.11516438622234270728e-01 	 6.78916233714889072459e-01 
0.92917 	 1.65296971559404336227e-02 	 3.21773013169923016719e-01 	 6.85455310225100866717e-01 
0.93750 	 1.69850705663944848145e-02 	 3.26012204985471620855e-01 	 6.93964095144984360886e-01 
0.94583 	 1.69918252348714472755e-02 	 3.36589090392794942908e-01 	 6.98485233217247869497e-01 
0.95417 	 1.67447198068447246355e-02 	 3.45101876970507814857e-01 	 7.12689806687120230855e-01 
0.96250 	 1.69268000014134618880e-02 	 3.54165262880972553372e-01 	 7.18153968097326567133e-01 
0.97083 	 1.69539397151560813914e-02 	 3.65452740481095605940e-01 	 7.29371103723040925537e-01 
0.97917 	 1.70393630835231728315e-02 	 3.74766519485759785901e-01 	 7.41529742338168373905e-01 
0.98750 	 1.73556300592621302881e-02 	 3.93072895885978101926e-01 	 7.40486437405817543578e-01 
0.99583 	 1.76758761418755946937e-02 	 4.08288113638737515387e-01 	 7.53255212346696012560e-01 
1.00417 	 1.80047799555535480154e-02 	 4.34664058089296811982e-01 	 7.65192066424496553090e-01 
1.01250 	 1.76847795097403552578e-02 	 4.59898493231744087684e-01 	 7.70438851125756274385e-01 
1.02083 	 1.77842433305151377543e-02 	 5.02704599699667742385e-01 	 7.82382012101803581139e-01 
1.02917 	 1.79693333069048874484e-02 	 5.63283316863021021881e-01 	 7.99505708949526217033e-01 
1.03750 	 1.80466122637109281646e-02 	 6.85460201777429389836e-01 	 7.97822427572080328240e-01 
1.04583 	 1.82628461269795476507e-02 	 1.98540435915031809877e+00 	 8.10215212822947727922e-01 
1.05417 	 1.83313115051691490065e-02 	 9.22969459159257876735e-01 	 8.19073514077198416850e-01 
1.06250 	 1.88519218759972684296e-02 	 6.28891851851368643977e-01 	 8.25015308257950552573e-01 
1.07083 	 1.87568991150870757745e-02 	 5.33337767963806719251e-01 	 8.42669134655515628118e-01 
1.07917 	 1.88752224766759561791e-02 	 4.75040265765105218509e-01 	 8.56788703030682552431e-01 
1.08750 	 1.88291212230569035557e-02 	 4.38007579914285072320e-01 	 8.69007312147726751483e-01 
1.09583 	 1.87388353291505181664e-02 	 4.06524579389460904988e-01 	 8.87901328050669125247e-01 
1.10417 	 1.88607213131822236407e-02 	 3.83538073647012589529e-01 	 9.02301319986511418669e-01 
1.11250 	 1.91471715212939951056e-02 	 3.66248808723810548305e-01 	 9.14919311295364190428e-01 
1.12083 	 1.97155645398925279121e-02 	 3.47084721316953170867e-01 	 9.12518259021006139520e-01 
1.12917 	 1.96923986392354248565e-02 	 3.35624912767870930974e-01 	 9.33947308702208434106e-01 
1.13750 	 1.97449882349928912406e-02 	 3.21953351468538429003e-01 	 9.51685351992174743962e-01 
1.14583 	 1.95837773770386504302e-02 	 3.09282100380040225751e-01 	 9.55596561507662034529e-01 
1.15417 	 2.01392232902566949149e-02 	 3.02049227430423394836e-01 	 9.77146719658996465441e-01 
1.16250 	 2.02596524157929031018e-02 	 2.91202026436186034442e-01 	 9.94599164233338273178e-01 
1.17083 	 2.02974907781443246468e-02 	 2.84748091098292577250e-01 	 1.00620017977540232579e+00 
1.17917 	 2.02094592108299879463e-02 	 2.75935899563471365159e-01 	 1.00856132372906381889e+00 
1.18750 	 2.05712027307053263447e-02 	 2.69004731358402748853e-01 	 1.02930361195407771291e+00 
1.19583 	 2.05532609915959445235e-02 	 2.62046529883291745566e-01 	 1.03785395648982059491e+00 
1.20417 	 2.07149955859768815369e-02 	 2.53489541286505193352e-01 	 1.05183679408171593117e+00 
1.21250 	 2.09680307738992453837e-02 	 2.47499477924620125968e-01 	 1.07014024161287357728e+00 
1.22083 	 2.11176050740372218961e-02 	 2.40867590102407130859e-01 	 1.07914158002931648284e+00 
1.22917 	 2.14903995895153084039e-02 	 2.37029481315477963399e-01 	 1.09780492587913824920e+00 
1.23750 	 2.16418351782087584056e-02 	 2.29957324273224933409e-01 	 1.11747862750177606728e+00 
1.24583 	 2.19443142412561915944e-02 	 2.24405737908606101039e-01 	 1.13897331309403471167e+00 
1.25417 	 2.16160941788301440292e-02 	 2.20642284634312096925e-01 	 1.14519643572837659384e+00 
1.26250 	 2.17823073657841259632e-02 	 2.15279865398391972997e-01 	 1.14704964553501009838e+00 
1.27083 	 2.21791010389703370509e-02 	 2.10063064308986385820e-01 	 1.18337806351683227923e+00 
1.27917 	 2.23521118051713610364e-02 	 2.06650937360264408404e-01 	 1.17661211577510571580e+00 
1.28750 	 2.26834029438932986700e-02 	 2.02539952595599398455e-01 	 1.19918225529651989447e+00 
1.29583 	 2.23465334709298697746e-02 	 1.97459578571516053414e-01 	 1.21496986741479573446e+00 
1.30417 	 2.28784530457416222793e-02 	 1.95488453081656327059e-01 	 1.24713852119750390202e+00 
1.31250 	 2.30706644596552386262e-02 	 1.93165749916105855544e-01 	 1.24946709658883214900e+00 
1.32083 	 2.29621554370707664505e-02 	 1.86706054783810776465e-01 	 1.27342895162217861760e+00 
1.32917 	 2.36779662186294564963e-02 	 1.84534555162105123882e-01 	 1.28392521098226253251e+00 
1.33750 	 2.37650568207522817910e-02 	 1.78578129686116748864e-01 	 1.30744366594008365468e+00 
1.34583 	 2.40383728399194800118e-02 	 1.78613683690054536601e-01 	 1.32887934629245751950e+00 
1.35417 	 2.41315284535082649753e-02 	 1.73781591564896087387e-01 	 1.34222889399473643834e+00 
1.36250 	 2.46490063070408695067e-02 	 1.70813790179816016312e-01 	 1.35317370617356158569e+00 
1.37083 	 2.45660348056747149248e-02 	 1.66279366320409710545e-01 	 1.38125285980352163762e+00 
1.37917 	 2.48653603495127030476e-02 	 1.64061530233629071507e-01 	 1.39074601962736266181e+00 
1.38750 	 2.53326013458662901989e-02 	 1.61417906852336479062e-01 	 1.41695743809480911857e+00 
1.39583 	 2.55329213887562668506e-02 	 1.59485179975028396049e-01 	 1.42445885321260345968e+00 
1.40417 	 2.53855931178458248121e-02 	 1.54329098994314933835e-01 	 1.46262930041847538654e+00 
1.41250 	 2.58038170527559555800e-02 	 1.53331605768012219082e-01 	 1.46154071517025396787e+00 
1.42083 	 2.58625343936717266846e-02 	 1.48812548916868597759e-01 	 1.50391090749408284921e+00 
1.42917 	 2.59455407874950583214e-02 	 1.46202317614320953520e-01 	 1.50197918840919086847e+00 
1.43750 	 2.60549835221191607160e-02 	 1.44514089822518648765e-01 	 1.52907526265260096388e+00 
1.44583 	 2.63491178424783666079e-02 	 1.42866254822297311655e-01 	 1.56139942116569052644e+00 
1.45417 	 2.72066791877870958749e-02 	 1.39559615265446607113e-01 	 1.56655131440862716019e+00 
1.46250 	 2.68413174706790234880e-02 	 1.36368262876366080905e-01 	 1.60755263868184261611e+00 
1.47083 	 2.67729227594416703540e-02 	 1.33291945031704772706e-01 	 1.61331633784907624296e+00 
1.47917 	 2.71869207668614353002e-02 	 1.30664680827252605022e-01 	 1.62397176508045637533e+00 
1.48750 	 2.73450832053740364169e-02 	 1.30545950966510615476e-01 	 1.64241259843294917786e+00 
1.49583 	 2.77206696402712560179e-02 	 1.27449322768203587852e-01 	 1.67017026837457982502e+00 
1.50417 	 2.79887857371285755925e-02 	 1.26228810922103584780e-01 	 1.68854345964625851551e+00 
1.51250 	 2.79437354715676294914e-02 	 1.23523032263034071576e-01 	 1.70284986882273958742e+00 
1.52083 	 2.81236477473876637923e-02 	 1.21573867323918227701e-01 	 1.73704214935623557636e+00 
1.52917 	 2.88619359712294597242e-02 	 1.19517375326494090793e-01 	 1.75562410718626482620e+00 
1.53750 	 2.92973149904294585810e-02 	 1.15580053624647391408e-01 	 1.79265632860800150361e+00 
1.54583 	 2.90812602477874757034e-02 	 1.15428494920187529882e-01 	 1.82574952899173692522e+00 
1.55417 	 2.96399910184033596461e-02 	 1.13029747025027813012e-01 	 1.84047134312307880677e+00 
1.56250 	 2.97410306810510713382e-02 	 1.11649383102744817475e-01 	 1.86249690847983839781e+00 
1.57083 	 2.98596259313258054202e-02 	 1.09532975065118234892e-01 	 1.86915138335241448608e+00 
1.57917 	 3.04220380349785150809e-02 	 1.08068392697734522168e-01 	 1.89721608747186620825e+00 
1.58750 	 3.06646598921293568607e-02 	 1.05885780281249883283e-01 	 1.91171970935745050291e+00 
1.59583 	 3.10609383911299753722e-02 	 1.04191563259535130426e-01 	 1.93142521836732972140e+00 
1.60417 	 3.08828039789813685312e-02 	 1.02296335010696792800e-01 	 1.96521730300368213662e+00 
1.61250 	 3.15167426422394009178e-02 	 1.00422545247928443612e-01 	 1.97443143351403804786e+00 
1.62083 	 3.19776215505963301577e-02 	 9.81109817206622103480e-02 	 1.97388677309703264307e+00 
1.62917 	 3.22165496233408274462e-02 	 9.64879240450565167642e-02 	 2.02822539252772715557e+00 
1.63750 	 3.24701332513332788232e-02 	 9.57312255501894526777e-02 	 2.04385797998709284329e+00 
1.64583 	 3.24380955299924320090e-02 	 9.36682006093523672474e-02 	 2.05522806396399548845e+00 
1.65417 	 3.30061339212186152792e-02 	 9.15180569454792369744e-02 	 2.08591078906807370075e+00 
1.66250 	 3.30081392765606967954e-02 	 9.00361293371158000198e-02 	 2.09838672684642713051e+00 
1.67083 	 3.37897750907290780886e-02 	 8.83506504063958503226e-02 	 2.14439251436771805004e+00 
1.67917 	 3.38618048693827070061e-02 	 8.76402795428350145368e-02 	 2.14454778309012805693e+00 
1.68750 	 3.41044602698172272248e-02 	 8.61109526157866067564e-02 	 2.18429282094389165536e+00 
1.69583 	 3.45320089717774461602e-02 	 8.53064355079922037595e-02 	 2.18923800416752367681e+00 
1.70417 	 3.50128883277794622497e-02 	 8.35475381162553570880e-02 	 2.22399921437535841306e+00 
1.71250 	 3.52217984452866811340e-02 	 8.27597912102832344861e-02 	 2.24385534161009614351e+00 
1.72083 	 3.55006420297522828911e-02 	 8.07558357503488644102e-02 	 2.24759648762983399450e+00 
1.72917 	 3.54741099729314335320e-02 	 7.98097302868694402633e-02 	 2.25554207612670776228e+00 
1.73750 	 3.63790305640614569649e-02 	 7.79269733292515670575e-02 	 2.27037461842800780687e+00 
1.74583 	 3.65965694524456597314e-02 	 7.63397858607993418101e-02 	 2.28209218331990282280e+00 
1.75417 	 3.66902621374793000419e-02 	 7.53655263484851872802e-02 	 2.31956714919839779299e+00 
1.76250 	 3.70096127127442289795e-02 	 7.37747986873621280912e-02 	 2.33897791059182313944e+00 
1.77083 	 3.75964408823481407995e-02 	 7.30516416933489204366e-02 	 2.33724390804508974639e+00 
1.77917 	 3.76274455215880251902e-02 	 7.17558852717077727545e-02 	 2.36764631904493816350e+00 
1.78750 	 3.80859928666256800089e-02 	 6.99538861872127382124e-02 	 2.37162592915723680065e+00 
1.79583 	 3.86756383315986010385e-02 	 6.92148794285732393838e-02 	 2.39671484928615408094e+00 
1.80417 	 3.87864094468221079492e-02 	 6.81817599243446786916e-02 	 2.40065389720655586459e+00 
1.81250 	 3.94515108989612825474e-02 	 6.63159912100507592525e-02 	 2.39065986112160366872e+00 
1.82083 	 3.97593074360033452153e-02 	 6.56057250101567124290e-02 	 2.41084820012240053089e+00 
1.82917 	 3.98644095683876181768e-02 	 6.44799023894371409193e-02 	 2.44308346595944714252e+00 
1.83750 	 3.96818688089157697862e-02 	 6.46262201659197899062e-02 	 2.41663053329946908576e+00 
1.84583 	 4.02283317144444402258e-02 	 6.29401330910120820894e-02 	 2.43919769752418647002e+00 
1.85417 	 4.08467597478559540924e-02 	 6.12025438848189662355e-02 	 2.45093620354747843137e+00 
1.86250 	 4.11084152816167738842e-02 	 6.07169490696146396669e-02 	 2.44236815008974117447e+00 
1.87083 	 4.19396378070990422104e-02 	 6.01060684805611242232e-02 	 2.44880729667269170235e+00 
1.87917 	 4.16871997462169574522e-02 	 5.89434835795417250148e-02 	 2.45103713524977528948e+00 
1.88750 	 4.24430513553451516096e-02 	 5.75023954959465524728e-02 	 2.45472892467548353679e+00 
1.89583 	 4.29359037051429276444e-02 	 5.65178846341908638906e-02 	 2.43397836224744423816e+00 
1.90417 	 4.28829783609355266738e-02 	 5.54691037588871740938e-02 	 2.42789004911493488947e+00 
1.91250 	 4.33875722554276158083e-02 	 5.48520445753298488412e-02 	 2.41486856033046937142e+00 
1.92083 	 4.38351658085114684327e-02 	 5.43031435012282723274e-02 	 2.40597552864780483972e+00 
1.92917 	 4.43437993435821173338e-02 	 5.30924832811874164440e-02 	 2.37886642078704024783e+00 
1.93750 	 4.43185236084507466758e-02 	 5.23856482709988274804e-02 	 2.36069478535218646442e+00 
1.94583 	 4.49178885934152227755e-02 	 5.12786713603289104335e-02 	 2.34192580868903821312e+00 
1.95417 	 4.54057167579964074400e-02 	 5.07513217568094157639e-02 	 2.31763569620803178140e+00 
1.96250 	 4.57629342222776527849e-02 	 4.99115384700638126114e-02 	 2.30862658909693463372e+00 
1.97083 	 4.60027307306443769552e-02 	 4.91493519397338887722e-02 	 2.28768044533424053100e+00 
1.97917 	 4.66762900666803787209e-02 	 4.88249201182052103287e-02 	 2.23499433199914632198e+00 
1.98750 	 4.66201490850870897686e-02 	 4.77829682442053663149e-02 	 2.20035171361746328955e+00 
1.99583 	 4.74020462284841515022e-02 	 4.69768797760361997429e-02 	 1.14644197368726885600e+00 
2.00417 	 3.99322887864403108793e+00 	 3.73245319301789546529e+00 	 7.37223907183022504341e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math
import json
from tqdm import tqdm

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 0.01 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = 100000 # set number of photons in simulation ID_EDIT_1_3
    z_size = 2.0 # cm, total range over which bins extend
    xy_size = 1.5 # cm
    NR_z          = 240 # set number of bins.
    NR_xy = 180
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = z_size/NR_z  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    InitRandomGen()
    Csph = [0 for _ in range(0,NR_z+1)]
    Ccyl = [0 for _ in range(0,NR_z+1)]
    Cpla = [0 for _ in range(0,NR_z+1)]

    # [x][y][z]
    # it could be done in numpy array, but list is easier to save
    Cube = [[[0 for _ in range(0,NR_z+1)] for _ in range(0,NR_xy+1)] for _ in range(0,NR_xy+1)]
    cube_overflow = 0

    # start pos
    x_start = 89 * dr
    y_start = 89 * dr
    z_start = 239 * dr

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    print("(1 iter = 1 photon) Simulation progerss:")
    for i_photon in tqdm(range(0,Nphotons)):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements a point source [0,0,-1].
        # *****
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = x_start                     # Set photon position to origin.
        y = y_start
        z = z_start

        # source - vartical down [0,0,-1]
        # psi - berween x-y axis
        # theta between z and R
        ux = 0
        uy = 0
        uz = -1


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Cpla[ir] += absorb # DROP absorbed weight into bin

            # --- cube ---
            ix = int(x/dr)
            iy = int(y/dr)
            iz = int(z/dr)
            ix_is_in = (0 <= ix < NR_xy)
            iy_is_in = (0 <= iy < NR_xy)
            iz_is_in = (0 <= iz < NR_z)
            is_in = ix_is_in and iy_is_in and iz_is_in
            if (not is_in):
                cube_overflow += absorb
            else:
                Cube[ix][iy][iz] += absorb
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz)
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    print("saving data...")
    file = open("mc456_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR_z+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:.20e} \t {Fcyl:.20e} \t {Fpla:.20e} \n")

    file.close()


    with open('mc456_p_cube.json', 'w') as f:
        data = {
            "n_photons": Nphotons,
            "overflow": cube_overflow,
            "bins_per_1_cm": NR_z/z_size,
            "mu_a": mua,
            "name": f"my_{ Nphotons // 1_000_000 }mln_cube",
            "photon_weight": W,
            "normalized_already": False,
            "cube": Cube
        }
        json.dump(data, f)

    print("done")
    # end of main


main()
