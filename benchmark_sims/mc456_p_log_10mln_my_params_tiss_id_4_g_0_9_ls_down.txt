time elapsed: 21958.1426 seconds

=================================

sim results:

number of photons = 10000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 2.19357418873454730612e-02 	 1.60500355278527823133e-01 	 2.70029960156256632064e-01 
0.01250 	 1.23247888219227847567e-02 	 1.62556598577333177857e-01 	 2.69872787132057923021e-01 
0.02083 	 1.20711392630172952706e-02 	 1.61187844225918391894e-01 	 2.69977337668357908473e-01 
0.02917 	 1.14395797031741856126e-02 	 1.61234464857361536883e-01 	 2.70386073683960503899e-01 
0.03750 	 1.09303908936663127238e-02 	 1.61657275837032182730e-01 	 2.70278213315823023777e-01 
0.04583 	 1.14914223835916907979e-02 	 1.61591258722650454871e-01 	 2.70909596486734238763e-01 
0.05417 	 1.15273046100820859144e-02 	 1.60626470901943096958e-01 	 2.71004007780364764013e-01 
0.06250 	 1.15874971219012603413e-02 	 1.61328051386899040676e-01 	 2.71616772805992445772e-01 
0.07083 	 1.14066040879489370707e-02 	 1.61915686467459102316e-01 	 2.71873374055459360310e-01 
0.07917 	 1.12539075426977795702e-02 	 1.61842424027793641006e-01 	 2.72391699637513695631e-01 
0.08750 	 1.09323362623729349735e-02 	 1.61821836372574773266e-01 	 2.72914081789913554044e-01 
0.09583 	 1.13022336466620885315e-02 	 1.61832089293056868851e-01 	 2.73468007872734675257e-01 
0.10417 	 1.12295074897472597908e-02 	 1.61979226083593580432e-01 	 2.74419898188693334173e-01 
0.11250 	 1.12166245661637527242e-02 	 1.62598710629343556899e-01 	 2.75106288571427382017e-01 
0.12083 	 1.12701757652290922296e-02 	 1.62621536684652845395e-01 	 2.75478169936719585742e-01 
0.12917 	 1.13943660855286982292e-02 	 1.62888923385444028824e-01 	 2.76337059140910445976e-01 
0.13750 	 1.14443946785743860123e-02 	 1.63046304228960742266e-01 	 2.76930760291762889658e-01 
0.14583 	 1.14263164039043081666e-02 	 1.63599573157569289084e-01 	 2.78502670061227974863e-01 
0.15417 	 1.13112231731781528316e-02 	 1.63554132415451469740e-01 	 2.78965748401551694169e-01 
0.16250 	 1.13077985944651255440e-02 	 1.63983919372477471299e-01 	 2.80330798238449585558e-01 
0.17083 	 1.14051803783218504151e-02 	 1.64409744422257975138e-01 	 2.81102676313250587903e-01 
0.17917 	 1.13893951184548432309e-02 	 1.64708945346845520019e-01 	 2.82263079831373886464e-01 
0.18750 	 1.14493273526409134605e-02 	 1.64994710432006058687e-01 	 2.83556559388536744137e-01 
0.19583 	 1.14912949469787046414e-02 	 1.65330138065157478122e-01 	 2.84783736552958299804e-01 
0.20417 	 1.14580050618031670240e-02 	 1.65657055283611159835e-01 	 2.86196717380718612667e-01 
0.21250 	 1.14696748261970335458e-02 	 1.66020215489148997845e-01 	 2.87426577502993663149e-01 
0.22083 	 1.14650879992945781832e-02 	 1.66223525462062593494e-01 	 2.89304255500503981757e-01 
0.22917 	 1.15414410539624572721e-02 	 1.66797751732947391323e-01 	 2.90740135331954585585e-01 
0.23750 	 1.15053945155775948911e-02 	 1.67201971883122774143e-01 	 2.92286531106759173149e-01 
0.24583 	 1.16123544810052912318e-02 	 1.68280501720157682488e-01 	 2.93532887046168811107e-01 
0.25417 	 1.15864155907917966426e-02 	 1.68606823714648801360e-01 	 2.94939048771140632788e-01 
0.26250 	 1.16461869157650811657e-02 	 1.69286583137142093713e-01 	 2.96931285818288592804e-01 
0.27083 	 1.16450463633523369766e-02 	 1.69783133712260198012e-01 	 2.98451786670514251920e-01 
0.27917 	 1.17637352235915159521e-02 	 1.70204219412047996762e-01 	 3.00914768181696268279e-01 
0.28750 	 1.17526785894059813964e-02 	 1.70609908433583062903e-01 	 3.02191409288062373673e-01 
0.29583 	 1.17698505137926370118e-02 	 1.71275203053097846428e-01 	 3.04285195331598978807e-01 
0.30417 	 1.17560651635983271640e-02 	 1.71869770738035054780e-01 	 3.06664122473912670319e-01 
0.31250 	 1.18345425297847039320e-02 	 1.72543068150651263126e-01 	 3.08740819046504466616e-01 
0.32083 	 1.17986202592563448055e-02 	 1.73388343804024430694e-01 	 3.10689761554255927667e-01 
0.32917 	 1.18240624411724611770e-02 	 1.74003455217090402529e-01 	 3.12644780053139559328e-01 
0.33750 	 1.18228214169631262037e-02 	 1.74649371341919629197e-01 	 3.15120949678281359052e-01 
0.34583 	 1.18707206432304736288e-02 	 1.75338399243401582561e-01 	 3.18010513510528225467e-01 
0.35417 	 1.18878955009199590437e-02 	 1.75923883084071086547e-01 	 3.19689243446283632988e-01 
0.36250 	 1.19748086573827020734e-02 	 1.76663569985534896212e-01 	 3.22534328970674799564e-01 
0.37083 	 1.19787137976181939231e-02 	 1.77675275912399982525e-01 	 3.24977260727894401438e-01 
0.37917 	 1.20568915187733594757e-02 	 1.78394882270591415008e-01 	 3.27777443472415441761e-01 
0.38750 	 1.20258482809102798528e-02 	 1.79206402721731800076e-01 	 3.30403645596799466766e-01 
0.39583 	 1.21116792135457802121e-02 	 1.80083179434468859670e-01 	 3.32921266279160577017e-01 
0.40417 	 1.21233125788937860096e-02 	 1.80904442231574091871e-01 	 3.35803338982144317093e-01 
0.41250 	 1.21836101257106078216e-02 	 1.81657062931021018315e-01 	 3.38586313385041803858e-01 
0.42083 	 1.21984701020721886949e-02 	 1.82860564220065580088e-01 	 3.41718099980516387681e-01 
0.42917 	 1.22701579195545005391e-02 	 1.83503738826722440081e-01 	 3.44715724929450184622e-01 
0.43750 	 1.22755213945630863720e-02 	 1.84775673784143584788e-01 	 3.47161963563968278823e-01 
0.44583 	 1.23518888766520201772e-02 	 1.85342225998014864530e-01 	 3.51009853122169701578e-01 
0.45417 	 1.23577464713353641496e-02 	 1.86494640868085564955e-01 	 3.53663061523121768914e-01 
0.46250 	 1.24475928223656290977e-02 	 1.87730314166523970520e-01 	 3.57572289182546687591e-01 
0.47083 	 1.24501010673284742691e-02 	 1.88627554565780480855e-01 	 3.60916486749737253081e-01 
0.47917 	 1.25257830043341619047e-02 	 1.89636127395656078898e-01 	 3.64397109357858683953e-01 
0.48750 	 1.25506340761534374711e-02 	 1.90628920158273595931e-01 	 3.67800666684362509429e-01 
0.49583 	 1.26142276845247081757e-02 	 1.91786190008386564498e-01 	 3.71444710693918489497e-01 
0.50417 	 1.26867093623409515207e-02 	 1.93018299571358964428e-01 	 3.74540165204625019602e-01 
0.51250 	 1.27180766779526818744e-02 	 1.94218290732338400018e-01 	 3.78666856538709795110e-01 
0.52083 	 1.27820522176577532764e-02 	 1.95110564502463862402e-01 	 3.82309393980747924680e-01 
0.52917 	 1.27918604442877198446e-02 	 1.96478774213713125452e-01 	 3.85974959172503462312e-01 
0.53750 	 1.28385739519750394222e-02 	 1.98040556897338654307e-01 	 3.90133322376343294469e-01 
0.54583 	 1.29090731868547296812e-02 	 1.98896174282557403057e-01 	 3.94340045977285058587e-01 
0.55417 	 1.28939097222440304802e-02 	 2.00268835272010753412e-01 	 3.98461029341625028177e-01 
0.56250 	 1.29941228956913443215e-02 	 2.01532230573840481780e-01 	 4.02368607623874163792e-01 
0.57083 	 1.30604237543191278176e-02 	 2.02852175011993540732e-01 	 4.06505357631722186174e-01 
0.57917 	 1.31157160984965021067e-02 	 2.04434297830019401365e-01 	 4.11029012086466305487e-01 
0.58750 	 1.31945458302482922230e-02 	 2.05524613783926363153e-01 	 4.15459375297799027305e-01 
0.59583 	 1.32167483450181602600e-02 	 2.06958234379760824817e-01 	 4.20204506770959607120e-01 
0.60417 	 1.33125247045773210247e-02 	 2.08534414415875751780e-01 	 4.24862169853374105344e-01 
0.61250 	 1.33467429606360307726e-02 	 2.10003987743406783650e-01 	 4.29197298687938599837e-01 
0.62083 	 1.34282170825137468079e-02 	 2.11596568642601040589e-01 	 4.34009494719723665224e-01 
0.62917 	 1.34750228160828294799e-02 	 2.13125737012521743186e-01 	 4.39124395887545593276e-01 
0.63750 	 1.35647533349711434114e-02 	 2.14299136508343784913e-01 	 4.43991869260940141828e-01 
0.64583 	 1.35794351810085492382e-02 	 2.16173421299546669738e-01 	 4.48921876426057964160e-01 
0.65417 	 1.36635557521087910166e-02 	 2.17978694309348242086e-01 	 4.53859714421345761259e-01 
0.66250 	 1.37603277729835497128e-02 	 2.19683495300963815833e-01 	 4.58833019275887821209e-01 
0.67083 	 1.38186374458113114122e-02 	 2.21349244203934258923e-01 	 4.64736655305339918520e-01 
0.67917 	 1.38833962968799469462e-02 	 2.23323168212707506841e-01 	 4.69538640389763894945e-01 
0.68750 	 1.39397527188857787289e-02 	 2.24855434530216724553e-01 	 4.75306121874118026049e-01 
0.69583 	 1.40150638729187350384e-02 	 2.26746754240821607462e-01 	 4.80389262680115780579e-01 
0.70417 	 1.40847144911397416378e-02 	 2.28872716213144922204e-01 	 4.86236919257290289842e-01 
0.71250 	 1.41274000055894109057e-02 	 2.30794742058529039896e-01 	 4.92202770690791990837e-01 
0.72083 	 1.42392022460933256878e-02 	 2.33152820173932684433e-01 	 4.98242439634878464538e-01 
0.72917 	 1.43311228250565855097e-02 	 2.35081281715106393815e-01 	 5.03775584251285546422e-01 
0.73750 	 1.43978786967097326793e-02 	 2.37184024940759491384e-01 	 5.10228507181587631614e-01 
0.74583 	 1.45037499121525529505e-02 	 2.39550635150480639712e-01 	 5.15992626826032640963e-01 
0.75417 	 1.45964735091095570291e-02 	 2.41629892822452757573e-01 	 5.23097443372390280558e-01 
0.76250 	 1.46739034604405037265e-02 	 2.44299265180146135679e-01 	 5.29005248915211501171e-01 
0.77083 	 1.47158158594014338433e-02 	 2.46630467528016678047e-01 	 5.35877855180570628058e-01 
0.77917 	 1.48342519799032519778e-02 	 2.49261186599875811387e-01 	 5.42262501577564282051e-01 
0.78750 	 1.49283996799875508243e-02 	 2.51644952837399960011e-01 	 5.48957536972793813668e-01 
0.79583 	 1.49947235346826988900e-02 	 2.54358101116502532957e-01 	 5.55959847255126482501e-01 
0.80417 	 1.50628894982967678762e-02 	 2.57431342939918150758e-01 	 5.62589834918796549701e-01 
0.81250 	 1.51467125850554169830e-02 	 2.60382837512208031860e-01 	 5.70202525197327392270e-01 
0.82083 	 1.52461310380298479400e-02 	 2.63357902888300021704e-01 	 5.76907551372549121105e-01 
0.82917 	 1.53197051259356883945e-02 	 2.66402189118321530703e-01 	 5.84594844181923423143e-01 
0.83750 	 1.54013331811512759612e-02 	 2.69897947428630768929e-01 	 5.91405691264470290136e-01 
0.84583 	 1.55274398408559739099e-02 	 2.73342795858263709619e-01 	 5.98619908710844805810e-01 
0.85417 	 1.56099802112566101581e-02 	 2.76756716375530953389e-01 	 6.06424792547478608284e-01 
0.86250 	 1.57193905578935783085e-02 	 2.80532994624196896361e-01 	 6.14482615998434011928e-01 
0.87083 	 1.58374537486386003649e-02 	 2.84475945173424338286e-01 	 6.21836096360969370345e-01 
0.87917 	 1.58909080418559861547e-02 	 2.88874974408059315145e-01 	 6.30132352360814218528e-01 
0.88750 	 1.60061628690200651037e-02 	 2.93120664474399050814e-01 	 6.37541575512041380769e-01 
0.89583 	 1.60618372903822796693e-02 	 2.97824460231660148590e-01 	 6.46624455135121456451e-01 
0.90417 	 1.61870583070645723822e-02 	 3.03205692831602036108e-01 	 6.54300262617493633144e-01 
0.91250 	 1.62708103148201006782e-02 	 3.08489055906758069536e-01 	 6.63138594085842414394e-01 
0.92083 	 1.63736861220505729164e-02 	 3.14624891572759024516e-01 	 6.72090290620379171571e-01 
0.92917 	 1.64926881462989227689e-02 	 3.21076725761167081075e-01 	 6.80288773936472801473e-01 
0.93750 	 1.66125105449155333059e-02 	 3.27831291677730007894e-01 	 6.89165527736385841173e-01 
0.94583 	 1.67133172667857307636e-02 	 3.35869708155364377067e-01 	 6.97792553998025311124e-01 
0.95417 	 1.68351492530079312193e-02 	 3.44505903774404043105e-01 	 7.07664887827864741432e-01 
0.96250 	 1.69430410386054094984e-02 	 3.54292959712739052858e-01 	 7.16853841277126035969e-01 
0.97083 	 1.70658799033125765932e-02 	 3.65134153652142967594e-01 	 7.25618958683252102126e-01 
0.97917 	 1.71613332196160171816e-02 	 3.78029426731410544971e-01 	 7.35965133500065538108e-01 
0.98750 	 1.72509824468366768091e-02 	 3.92677907013015414783e-01 	 7.45505552393543546863e-01 
0.99583 	 1.73845139110725029064e-02 	 4.10804897348307274108e-01 	 7.55528486525276488095e-01 
1.00417 	 1.75109385766162618803e-02 	 4.33208487691628896243e-01 	 7.64748277511910989901e-01 
1.01250 	 1.76262293610798467802e-02 	 4.62289810356327879326e-01 	 7.75772102464041601877e-01 
1.02083 	 1.77381836906327187975e-02 	 5.03158908583528297065e-01 	 7.85569005699057076875e-01 
1.02917 	 1.78751575965714060157e-02 	 5.65037987868781343970e-01 	 7.96705807116938724555e-01 
1.03750 	 1.79933603885523880905e-02 	 6.83932071042973932506e-01 	 8.08103296077175792256e-01 
1.04583 	 1.81013882920059154813e-02 	 1.98735888516872005738e+00 	 8.18519467451419457937e-01 
1.05417 	 1.82312410223330056969e-02 	 9.26099867716148716923e-01 	 8.28936167946224045089e-01 
1.06250 	 1.83585681288338867234e-02 	 6.32776218962311287619e-01 	 8.39997471874971979311e-01 
1.07083 	 1.85220639139572589016e-02 	 5.33333585901941908958e-01 	 8.51946601825671279151e-01 
1.07917 	 1.86717439148602684651e-02 	 4.76206289296039364523e-01 	 8.63123854711707494403e-01 
1.08750 	 1.87356687786952059993e-02 	 4.36591478937319921183e-01 	 8.74984185756026322522e-01 
1.09583 	 1.89336334920953384964e-02 	 4.07103496341485515675e-01 	 8.86100817912072846738e-01 
1.10417 	 1.90584684559388442548e-02 	 3.83720691450566697700e-01 	 8.97563700815437681690e-01 
1.11250 	 1.92110560640751833195e-02 	 3.64560932506736601333e-01 	 9.11036125692502696261e-01 
1.12083 	 1.93289955896527344825e-02 	 3.48301690301976496489e-01 	 9.22510367375270146084e-01 
1.12917 	 1.94884449312467469828e-02 	 3.34178273901311106986e-01 	 9.34545455287763449093e-01 
1.13750 	 1.96339840835400500363e-02 	 3.21639161696698039350e-01 	 9.48516671816604928225e-01 
1.14583 	 1.97594420011335224208e-02 	 3.10164081314953710145e-01 	 9.60872533120933347561e-01 
1.15417 	 1.99403798297014198115e-02 	 3.00015601460462077998e-01 	 9.74278265826808098637e-01 
1.16250 	 2.00787579329368692793e-02 	 2.90742616110244822547e-01 	 9.87540362239183067139e-01 
1.17083 	 2.02274912845851646825e-02 	 2.82197001155381543835e-01 	 1.00012300144860666329e+00 
1.17917 	 2.03835957549354310214e-02 	 2.74311072371703490447e-01 	 1.01310517105697650564e+00 
1.18750 	 2.05593232609286545587e-02 	 2.66746571368711493655e-01 	 1.02745293995054365332e+00 
1.19583 	 2.07110365699791597327e-02 	 2.59807391901307971338e-01 	 1.04042048070547399341e+00 
1.20417 	 2.08564695703667389581e-02 	 2.53093259749029686478e-01 	 1.05556602750186567796e+00 
1.21250 	 2.10082665167588694688e-02 	 2.46825482271499196951e-01 	 1.06861299783099550353e+00 
1.22083 	 2.11721940786489745689e-02 	 2.41253111578840773177e-01 	 1.08361102459421765332e+00 
1.22917 	 2.13364447435160850541e-02 	 2.35545128583092400198e-01 	 1.09859856755450713273e+00 
1.23750 	 2.14832737276403513971e-02 	 2.30181927529062996252e-01 	 1.11400554349505553908e+00 
1.24583 	 2.16497474487140975641e-02 	 2.25058084083903514605e-01 	 1.12889180334325978095e+00 
1.25417 	 2.18232199166220469655e-02 	 2.20295386607645332644e-01 	 1.14361101336216064439e+00 
1.26250 	 2.20164870886739930111e-02 	 2.15592923875634279174e-01 	 1.15787990510081906237e+00 
1.27083 	 2.21837301776486618687e-02 	 2.10936595145187422151e-01 	 1.17471873095639023354e+00 
1.27917 	 2.23719430113531216053e-02 	 2.06416718632593643168e-01 	 1.18994689827513244751e+00 
1.28750 	 2.25190643127617627639e-02 	 2.02421363880231436339e-01 	 1.20425229703880010135e+00 
1.29583 	 2.27068515975329884848e-02 	 1.98306986270104984582e-01 	 1.22288768582675344554e+00 
1.30417 	 2.29034707540934079351e-02 	 1.94351336656844231321e-01 	 1.23915037773125802367e+00 
1.31250 	 2.30887380204969662467e-02 	 1.90465064345599482953e-01 	 1.25624201993812678602e+00 
1.32083 	 2.32782614261718250048e-02 	 1.86776939756311793905e-01 	 1.27331629880855268233e+00 
1.32917 	 2.34755484995464239195e-02 	 1.83124580634732164741e-01 	 1.29056599412036421270e+00 
1.33750 	 2.36905886912299988578e-02 	 1.79606031403744370589e-01 	 1.30819666455769501034e+00 
1.34583 	 2.38795783424697281860e-02 	 1.76322215749140059904e-01 	 1.32409146799317234411e+00 
1.35417 	 2.40591908392180156562e-02 	 1.72945437202012358702e-01 	 1.34447193955511434815e+00 
1.36250 	 2.42782940552404152834e-02 	 1.69749507667098120667e-01 	 1.36144022902713257572e+00 
1.37083 	 2.44790203555901517141e-02 	 1.66500679552262109695e-01 	 1.37889050579852634471e+00 
1.37917 	 2.46674674291619058786e-02 	 1.63515277656856417021e-01 	 1.39811614625092350828e+00 
1.38750 	 2.48803570445431943003e-02 	 1.60616873318430608553e-01 	 1.41501371379179974319e+00 
1.39583 	 2.50946983445867501106e-02 	 1.57618043300447652211e-01 	 1.43513755016143917942e+00 
1.40417 	 2.53291136931593531545e-02 	 1.54828980830133022817e-01 	 1.45266310646516316751e+00 
1.41250 	 2.55259323367097550050e-02 	 1.51994852629296989255e-01 	 1.47332219887965298888e+00 
1.42083 	 2.57211060846219731479e-02 	 1.49106233518016689787e-01 	 1.49334947839487930388e+00 
1.42917 	 2.59730303857155196690e-02 	 1.46699690246694741669e-01 	 1.51130945368610336565e+00 
1.43750 	 2.61824276336835720658e-02 	 1.43987898217118409638e-01 	 1.53220498689592576902e+00 
1.44583 	 2.64171115432419549574e-02 	 1.41550682332343302772e-01 	 1.55229112014390402408e+00 
1.45417 	 2.66395920128396079818e-02 	 1.39009551366889444468e-01 	 1.57234864154715059392e+00 
1.46250 	 2.68584635546119908367e-02 	 1.36530910039503711184e-01 	 1.59083137470143731740e+00 
1.47083 	 2.70879853405498714769e-02 	 1.34301901053883204762e-01 	 1.61145618650466349031e+00 
1.47917 	 2.73394951320382745275e-02 	 1.32010501279012149034e-01 	 1.63150793120000225933e+00 
1.48750 	 2.75391134673913517972e-02 	 1.29720793878006362965e-01 	 1.65299782794111327355e+00 
1.49583 	 2.77823500348437467389e-02 	 1.27486544940596968623e-01 	 1.67484993771541001983e+00 
1.50417 	 2.80540136831504000048e-02 	 1.25160602859298031309e-01 	 1.69723567506858441511e+00 
1.51250 	 2.83248117543946735519e-02 	 1.23014227742792581211e-01 	 1.71685277336032404705e+00 
1.52083 	 2.85747691944740200842e-02 	 1.20986433363855561129e-01 	 1.73746699248063651844e+00 
1.52917 	 2.87943345005155990068e-02 	 1.18991039019824773604e-01 	 1.76006798755548898860e+00 
1.53750 	 2.90668708578139742271e-02 	 1.16933588182017295098e-01 	 1.78231194381682755967e+00 
1.54583 	 2.93483152835117798440e-02 	 1.14818446132858562048e-01 	 1.80458237473114646576e+00 
1.55417 	 2.95691879906420998503e-02 	 1.12897193034050283278e-01 	 1.82521704874532342266e+00 
1.56250 	 2.98689170360579604735e-02 	 1.11093358409831477474e-01 	 1.84738250921498958768e+00 
1.57083 	 3.01146009662967804876e-02 	 1.09035196211986526449e-01 	 1.86856103755824820567e+00 
1.57917 	 3.03986986072000524295e-02 	 1.07382519209449786568e-01 	 1.89075230047765385777e+00 
1.58750 	 3.06646093079632579836e-02 	 1.05541474590409814494e-01 	 1.91452313254656747432e+00 
1.59583 	 3.08956636027362813168e-02 	 1.03760101873277388318e-01 	 1.93593881725875038846e+00 
1.60417 	 3.12047785145345632496e-02 	 1.01848209632054972906e-01 	 1.95698374296866939304e+00 
1.61250 	 3.14792023653264821381e-02 	 1.00180900004022799266e-01 	 1.97742329065087307782e+00 
1.62083 	 3.17703729943775298183e-02 	 9.85026027425261740955e-02 	 2.00004659588275401916e+00 
1.62917 	 3.21044401044433061476e-02 	 9.68776925259495214071e-02 	 2.02205234752452867042e+00 
1.63750 	 3.23696476411176672916e-02 	 9.53829903790391897545e-02 	 2.04389800214626493613e+00 
1.64583 	 3.26568389044921275621e-02 	 9.37224766350228249978e-02 	 2.06559955794364125126e+00 
1.65417 	 3.29210647876658699107e-02 	 9.21458764451654754879e-02 	 2.08597876720470098988e+00 
1.66250 	 3.32495834931692893499e-02 	 9.05913002774248327098e-02 	 2.10787186386346636624e+00 
1.67083 	 3.35582789624136665352e-02 	 8.90981603451576342767e-02 	 2.12784095802021644417e+00 
1.67917 	 3.38411500640815668395e-02 	 8.76552243878845477321e-02 	 2.14909179390748938943e+00 
1.68750 	 3.41736525683417335930e-02 	 8.61335702846430517621e-02 	 2.17019737037865212415e+00 
1.69583 	 3.44290383500731600463e-02 	 8.46670896748964868506e-02 	 2.18946603186953892006e+00 
1.70417 	 3.47518832056831414312e-02 	 8.34116344129450099087e-02 	 2.21066680987903119160e+00 
1.71250 	 3.51131718508429085945e-02 	 8.20029449643519814384e-02 	 2.23180722458863467494e+00 
1.72083 	 3.54456441530387814098e-02 	 8.06559121307108967125e-02 	 2.24884508226696988586e+00 
1.72917 	 3.57543981678429129145e-02 	 7.93399806759200049155e-02 	 2.26847581117857233224e+00 
1.73750 	 3.60955242042247381740e-02 	 7.79746006339801650542e-02 	 2.28496656965944344719e+00 
1.74583 	 3.63892988181174145690e-02 	 7.67542779418351334142e-02 	 2.30186651188457913619e+00 
1.75417 	 3.67204543313653236636e-02 	 7.54427558823029947854e-02 	 2.31841557323203506513e+00 
1.76250 	 3.70364276728737187860e-02 	 7.42197416835786855094e-02 	 2.33350143224857164981e+00 
1.77083 	 3.74145953038542838920e-02 	 7.30426219511039753751e-02 	 2.34877586995476450582e+00 
1.77917 	 3.77829257400575865833e-02 	 7.18837739741099712720e-02 	 2.36464268790257747810e+00 
1.78750 	 3.80904784463549223039e-02 	 7.06984451726424822926e-02 	 2.37702590288563486709e+00 
1.79583 	 3.84260085319275204729e-02 	 6.94551379555032183388e-02 	 2.38718357854663532081e+00 
1.80417 	 3.87749780816803099603e-02 	 6.83621619768566834985e-02 	 2.40224700701477855702e+00 
1.81250 	 3.91258914678217634142e-02 	 6.72393144790008889800e-02 	 2.41043537756711634401e+00 
1.82083 	 3.94787792341288190645e-02 	 6.61600276523564845288e-02 	 2.41972601552234500843e+00 
1.82917 	 3.98356360615689103488e-02 	 6.50877819549377512054e-02 	 2.42722781855525804318e+00 
1.83750 	 4.02356134929096054265e-02 	 6.40526005997368585998e-02 	 2.43359102049852094041e+00 
1.84583 	 4.05197295765345050222e-02 	 6.29519551284905554134e-02 	 2.44060629109985693930e+00 
1.85417 	 4.09025695138171552223e-02 	 6.19173916797742321383e-02 	 2.44259373450290784291e+00 
1.86250 	 4.12932197891869995354e-02 	 6.09756530884661834824e-02 	 2.44692532121189376682e+00 
1.87083 	 4.16654434966778619565e-02 	 5.99953779056191169317e-02 	 2.44653802547145593493e+00 
1.87917 	 4.20037159412492977495e-02 	 5.89871353647536886267e-02 	 2.44531035169015042996e+00 
1.88750 	 4.23729067445376486600e-02 	 5.80648880880224663170e-02 	 2.44065475887780580777e+00 
1.89583 	 4.27662918397441263463e-02 	 5.71423068766177058575e-02 	 2.43764638429228641670e+00 
1.90417 	 4.31161637445263701274e-02 	 5.62371145310836054176e-02 	 2.42815338367688093868e+00 
1.91250 	 4.34277910553054480314e-02 	 5.52964499001793938215e-02 	 2.41946968580510191060e+00 
1.92083 	 4.38249206605782204438e-02 	 5.44580963699121817223e-02 	 2.40879686059895492534e+00 
1.92917 	 4.42049708978840480422e-02 	 5.35163927206776662837e-02 	 2.39282392326437065577e+00 
1.93750 	 4.45536824385212235078e-02 	 5.27000813596207942635e-02 	 2.37808028844989127748e+00 
1.94583 	 4.49081467632536576740e-02 	 5.18254046889084704630e-02 	 2.35697891431866723977e+00 
1.95417 	 4.52290528953761122866e-02 	 5.10437786349737035452e-02 	 2.33433119383643328248e+00 
1.96250 	 4.55758437354350648407e-02 	 5.02367850873852578308e-02 	 2.30933870387451856132e+00 
1.97083 	 4.59248867458088294580e-02 	 4.94114668772244192141e-02 	 2.28246011102820212102e+00 
1.97917 	 4.62525335689797992278e-02 	 4.86105124912173530705e-02 	 2.24696635416637668925e+00 
1.98750 	 4.66038388704515527117e-02 	 4.77988764658723100376e-02 	 2.20658245270095809687e+00 
1.99583 	 4.69212714321385060412e-02 	 4.70499696457020721851e-02 	 1.15766206363222146081e+00 
2.00417 	 3.99596758760618442352e+00 	 3.74152591561814684695e+00 	 7.36079269732206000754e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math
import json
from tqdm import tqdm

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 0.01 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = 10000000 # set number of photons in simulation ID_EDIT_1_3
    z_size = 2.0 # cm, total range over which bins extend
    xy_size = 1.5 # cm
    NR_z          = 240 # set number of bins.
    NR_xy = 180
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = z_size/NR_z  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    InitRandomGen()
    Csph = [0 for _ in range(0,NR_z+1)]
    Ccyl = [0 for _ in range(0,NR_z+1)]
    Cpla = [0 for _ in range(0,NR_z+1)]

    # [x][y][z]
    # it could be done in numpy array, but list is easier to save
    Cube = [[[0 for _ in range(0,NR_z+1)] for _ in range(0,NR_xy+1)] for _ in range(0,NR_xy+1)]
    cube_overflow = 0

    # start pos
    x_start = 89 * dr
    y_start = 89 * dr
    z_start = 239 * dr

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    print("(1 iter = 1 photon) Simulation progerss:")
    for i_photon in tqdm(range(0,Nphotons)):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements a point source [0,0,-1].
        # *****
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = x_start                     # Set photon position to origin.
        y = y_start
        z = z_start

        # source - vartical down [0,0,-1]
        # psi - berween x-y axis
        # theta between z and R
        ux = 0
        uy = 0
        uz = -1


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Cpla[ir] += absorb # DROP absorbed weight into bin

            # --- cube ---
            ix = int(x/dr)
            iy = int(y/dr)
            iz = int(z/dr)
            ix_is_in = (0 <= ix < NR_xy)
            iy_is_in = (0 <= iy < NR_xy)
            iz_is_in = (0 <= iz < NR_z)
            is_in = ix_is_in and iy_is_in and iz_is_in
            if (not is_in):
                cube_overflow += absorb
            else:
                Cube[ix][iy][iz] += absorb
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz)
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    print("saving data...")
    file = open("mc456_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR_z+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:.20e} \t {Fcyl:.20e} \t {Fpla:.20e} \n")

    file.close()


    with open('mc456_p_cube.json', 'w') as f:
        data = {
            "n_photons": Nphotons,
            "overflow": cube_overflow,
            "bins_per_1_cm": NR_z/z_size,
            "mu_a": mua,
            "name": f"my_{ Nphotons // 1_000_000 }mln_cube",
            "photon_weight": W,
            "normalized_already": False,
            "cube": Cube
        }
        json.dump(data, f)

    print("done")
    # end of main


main()
