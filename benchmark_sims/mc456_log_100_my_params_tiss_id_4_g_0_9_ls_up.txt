time elapsed: 10.3261 seconds

=================================

sim results:

number of photons = 100
overflow: 9.15996431298026578816e+01
sum: 8.56924428077570254914e+00
sum: 8.40035687019734211844e+00
avg: 8.56924428077570216056e-02
perc_in: 8.57

number of photons = 100
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.06996759474866751094e-02 
0.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.50585180458009690319e-02 
0.02083 	 0.00000000000000000000e+00 	 9.59686944157836924196e-02 	 2.21356489139928232224e-02 
0.02917 	 0.00000000000000000000e+00 	 9.61122416399135849618e-03 	 2.44557738958051627820e-02 
0.03750 	 0.00000000000000000000e+00 	 3.72513782565567566629e-02 	 3.48491793780240366463e-02 
0.04583 	 0.00000000000000000000e+00 	 1.01551331568102781722e-01 	 5.06847566718075306924e-02 
0.05417 	 0.00000000000000000000e+00 	 1.79446728682642331343e-01 	 4.29160928080960027420e-02 
0.06250 	 0.00000000000000000000e+00 	 1.00691552887033786839e-02 	 3.52532579316555613747e-02 
0.07083 	 0.00000000000000000000e+00 	 6.37462665617458679179e-02 	 2.26627699272077230697e-02 
0.07917 	 0.00000000000000000000e+00 	 1.04351454276703975443e-01 	 4.09119376212091281908e-02 
0.08750 	 0.00000000000000000000e+00 	 2.83245480779178264441e-02 	 2.00010330597596638902e-02 
0.09583 	 0.00000000000000000000e+00 	 2.23893648966578096005e-01 	 3.35311862297463861293e-02 
0.10417 	 0.00000000000000000000e+00 	 4.70096400940045039407e-02 	 3.83725524251497390749e-02 
0.11250 	 0.00000000000000000000e+00 	 9.43130774112821007593e-02 	 6.24612588392615131205e-02 
0.12083 	 0.00000000000000000000e+00 	 2.04986263916424577003e-01 	 4.23298575375897420670e-02 
0.12917 	 0.00000000000000000000e+00 	 1.49203693137349130415e-01 	 4.96799159942759374631e-02 
0.13750 	 0.00000000000000000000e+00 	 1.30851291851291517965e-01 	 8.58826513691403475859e-02 
0.14583 	 0.00000000000000000000e+00 	 1.03742715335601837223e-01 	 7.53043820023221177618e-02 
0.15417 	 0.00000000000000000000e+00 	 1.88140917509040023203e-01 	 5.09254061973216654025e-02 
0.16250 	 0.00000000000000000000e+00 	 5.46831925072628205475e-02 	 2.82041668043658787235e-02 
0.17083 	 0.00000000000000000000e+00 	 6.56375508429713344638e-02 	 3.95942812053469220257e-02 
0.17917 	 0.00000000000000000000e+00 	 7.35826734784260361177e-02 	 3.16788538673939273904e-02 
0.18750 	 0.00000000000000000000e+00 	 8.69104913858530364612e-02 	 7.62491489147210516064e-02 
0.19583 	 0.00000000000000000000e+00 	 9.08508080836942649716e-02 	 8.67894684067983118725e-02 
0.20417 	 0.00000000000000000000e+00 	 1.00953999281967798929e-01 	 4.90763017454020067376e-02 
0.21250 	 0.00000000000000000000e+00 	 1.26978837995566445906e-01 	 5.56183465373130681009e-02 
0.22083 	 0.00000000000000000000e+00 	 1.59454992444415272201e-01 	 7.57497702056140198579e-02 
0.22917 	 0.00000000000000000000e+00 	 8.00795264474014611977e-02 	 3.01883857762568451333e-02 
0.23750 	 0.00000000000000000000e+00 	 6.18632473685402778374e-02 	 3.87528602722966644678e-02 
0.24583 	 0.00000000000000000000e+00 	 6.96725037250550544021e-02 	 3.23090005142578351460e-02 
0.25417 	 0.00000000000000000000e+00 	 1.23863006665134445239e-01 	 2.12453672937706720958e-02 
0.26250 	 0.00000000000000000000e+00 	 1.72858450590022666438e-01 	 5.59534694740438653948e-02 
0.27083 	 0.00000000000000000000e+00 	 1.61100518518601187878e-01 	 4.27660662996372578637e-02 
0.27917 	 0.00000000000000000000e+00 	 1.51772293037362976387e-01 	 2.79495362548627807042e-02 
0.28750 	 0.00000000000000000000e+00 	 8.16746701564093902093e-02 	 7.41770989566539612481e-02 
0.29583 	 0.00000000000000000000e+00 	 2.37018155290933257850e-01 	 1.25836425567443944279e-02 
0.30417 	 0.00000000000000000000e+00 	 2.58101328893801329478e-01 	 4.05685463685344707696e-02 
0.31250 	 0.00000000000000000000e+00 	 2.52162108317919297917e-01 	 4.89570996531966604048e-02 
0.32083 	 0.00000000000000000000e+00 	 1.47765117633615383763e-01 	 2.57652328781800658841e-02 
0.32917 	 4.42384679657740684244e-03 	 2.19382699338761588681e-01 	 3.56157085609831863815e-02 
0.33750 	 4.27325861222821370283e-03 	 1.76818460984364850264e-01 	 4.74697642476807207812e-02 
0.34583 	 0.00000000000000000000e+00 	 1.83592385915639894067e-01 	 1.04502603964279974780e-01 
0.35417 	 0.00000000000000000000e+00 	 2.09335299171870437007e-01 	 1.06928495279978663657e-01 
0.36250 	 0.00000000000000000000e+00 	 1.83041419350389672482e-01 	 6.53740701803751794730e-02 
0.37083 	 0.00000000000000000000e+00 	 1.73559248673988475442e-01 	 1.19036187103299592738e-01 
0.37917 	 0.00000000000000000000e+00 	 1.37294964466385754909e-01 	 2.62492282357998062137e-02 
0.38750 	 3.14349960783643104720e-03 	 1.92520752301092640257e-01 	 4.28100530865729370089e-02 
0.39583 	 0.00000000000000000000e+00 	 1.26159172206114528203e-01 	 3.95536222480104213139e-02 
0.40417 	 0.00000000000000000000e+00 	 1.91738207540930211126e-01 	 4.94021557566666075223e-02 
0.41250 	 2.73170605349863215155e-03 	 1.79612686853228703532e-01 	 5.22496668358855484438e-02 
0.42083 	 7.61419768301591234037e-04 	 1.83284994190200389852e-01 	 5.10329233644788646251e-02 
0.42917 	 0.00000000000000000000e+00 	 1.36792956197077292257e-01 	 4.54524728476941308752e-02 
0.43750 	 4.69859479056505011194e-04 	 1.71113502144674495264e-01 	 6.35307346634899211546e-02 
0.44583 	 2.15933005109448177645e-04 	 1.35457121268124119906e-01 	 5.04253269843505033676e-02 
0.45417 	 1.07460527857031768600e-02 	 1.58329359983826051250e-01 	 3.63507924884943767196e-02 
0.46250 	 8.09910122744205221434e-03 	 2.16872776889670465517e-01 	 4.26209846693591035138e-02 
0.47083 	 4.34957818100118517174e-03 	 1.54195869980705585478e-01 	 4.86105363011229488213e-02 
0.47917 	 4.25656034618242078149e-03 	 1.02873877203534649927e-01 	 1.07287600909049526954e-01 
0.48750 	 2.10602922852563329741e-04 	 1.10573121744346719586e-01 	 1.16570864260296433446e-01 
0.49583 	 3.28782544540176090847e-03 	 1.23558903826288229988e-01 	 5.22974865897869456433e-02 
0.50417 	 0.00000000000000000000e+00 	 1.03638405651252180073e-01 	 8.42634566782115290717e-02 
0.51250 	 1.88188874464806712994e-03 	 1.30873157681956786558e-01 	 7.18506962176881647242e-02 
0.52083 	 4.78469369975175178727e-03 	 1.97138258938628768702e-01 	 3.34201793901881191728e-02 
0.52917 	 3.53083981543506671835e-03 	 1.32105904238422527941e-01 	 1.01587153539055660700e-01 
0.53750 	 1.76430901732551269866e-03 	 1.66875042441800763848e-01 	 4.63216704065635281884e-02 
0.54583 	 7.38951856472037840046e-03 	 1.93204628287396984465e-01 	 8.18587025404511198223e-02 
0.55417 	 5.48992772347055638105e-03 	 2.07153145511981467974e-01 	 5.49291115817272038169e-02 
0.56250 	 8.60822645187274242129e-03 	 1.80196285736560157797e-01 	 1.04044571061716870086e-01 
0.57083 	 4.63958944948645105044e-03 	 1.94787528889221489559e-01 	 1.01907647412927668262e-01 
0.57917 	 3.08195476639308877861e-03 	 1.82443199875742922966e-01 	 1.32784262564026367404e-01 
0.58750 	 5.93841157083976282222e-03 	 1.99989598927543366091e-01 	 8.86434535778618110102e-02 
0.59583 	 1.86747828243281595653e-03 	 2.82397901337168355518e-01 	 1.63000039157594589501e-01 
0.60417 	 1.45814236001154000138e-04 	 2.08470083425806418376e-01 	 1.26081223039212986237e-01 
0.61250 	 8.65535904923844107151e-03 	 1.71791529208774218507e-01 	 1.20667269165782992113e-01 
0.62083 	 3.89405215173563735293e-03 	 1.96083651915268053489e-01 	 4.74562847284126301806e-02 
0.62917 	 3.99219840116238431499e-03 	 2.95846171253435430426e-01 	 1.16167878135504443193e-01 
0.63750 	 1.48523679445271782583e-03 	 1.02068255208909747234e-01 	 8.29815987963079121359e-02 
0.64583 	 3.61492351635919490632e-03 	 2.16570910253050502581e-01 	 8.52629645056707935469e-02 
0.65417 	 2.27144806006751402705e-03 	 1.86213791730671318625e-01 	 1.76003992995316715930e-01 
0.66250 	 0.00000000000000000000e+00 	 1.71132098054891768069e-01 	 1.27035994939062119036e-01 
0.67083 	 1.07844895860180391839e-03 	 2.15251624705714572627e-01 	 8.15188820706167494023e-02 
0.67917 	 1.20833006757233485298e-04 	 2.83541442534029852762e-01 	 1.43687225970547560738e-01 
0.68750 	 5.84501970725628903353e-03 	 2.44249967848958776662e-01 	 1.46137787742745856034e-01 
0.69583 	 0.00000000000000000000e+00 	 2.05725687802918943969e-01 	 1.02306547073977766038e-01 
0.70417 	 1.64526803836592921786e-03 	 2.63848106689198225183e-01 	 1.43801066271941446750e-01 
0.71250 	 1.98895775131794228657e-03 	 2.87172843431521662705e-01 	 1.15679676645107976096e-01 
0.72083 	 7.67118779143969730001e-04 	 2.14755231025312576243e-01 	 1.01609463730235924372e-01 
0.72917 	 1.80583599491148196793e-03 	 2.12625683383463437437e-01 	 9.52698173388444730092e-02 
0.73750 	 7.30744044675450535927e-05 	 2.94342497578254813639e-01 	 1.11330467714501168963e-01 
0.74583 	 1.01748890587731561047e-04 	 1.67928708245924207532e-01 	 1.50985742708418774205e-01 
0.75417 	 0.00000000000000000000e+00 	 2.58816043076200097417e-01 	 6.68151239083023817944e-02 
0.76250 	 7.63444225815883194958e-04 	 2.17684910096418465786e-01 	 8.09463416725990508871e-02 
0.77083 	 7.35632798212776102369e-04 	 2.63157106024640652375e-01 	 7.43414424172928328671e-02 
0.77917 	 1.65844670606893774406e-03 	 3.52418914035590058464e-01 	 9.17329564016166332241e-02 
0.78750 	 0.00000000000000000000e+00 	 2.49545302388678558181e-01 	 1.89321111225867921846e-01 
0.79583 	 1.55851265898085335378e-03 	 3.09035116165389089904e-01 	 1.42485045178087882389e-01 
0.80417 	 5.67893959030259416754e-03 	 3.21519791942322774592e-01 	 1.46534054810673414204e-01 
0.81250 	 1.11656428505999731973e-03 	 3.70979765252085369465e-01 	 8.75499524074830198783e-02 
0.82083 	 7.02539551762415646202e-03 	 2.65592944684475085193e-01 	 5.43089006724998338282e-02 
0.82917 	 6.55711202039973000549e-03 	 3.84137827079698290778e-01 	 9.64212797799142151689e-02 
0.83750 	 4.07262403617649967891e-03 	 4.46173234979235999731e-01 	 1.06196576931441452607e-01 
0.84583 	 1.97730339439947387951e-04 	 4.10075910147829847396e-01 	 5.38212173260910614614e-02 
0.85417 	 3.21427558152459708421e-03 	 4.50053995824245933743e-01 	 1.43355305759282070088e-01 
0.86250 	 1.76746811448445849228e-03 	 3.55502458158695078261e-01 	 1.05363836173326716472e-01 
0.87083 	 2.76053121763090948335e-03 	 3.97024694289597412933e-01 	 2.84801890580280436804e-01 
0.87917 	 1.83113494265030839203e-03 	 4.47782474002103914046e-01 	 1.64225981497342132798e-01 
0.88750 	 5.64395433146037094063e-03 	 4.14253810152749923912e-01 	 1.32139808415956766519e-01 
0.89583 	 4.71998687766450163855e-03 	 2.78405308341042156961e-01 	 2.21334795989007127037e-01 
0.90417 	 1.00706073999642514716e-02 	 3.29241936470887230914e-01 	 1.66531289469741133891e-01 
0.91250 	 8.84046818401415632378e-04 	 4.09679366771736608310e-01 	 1.18072294365740917965e-01 
0.92083 	 3.06252216613544722690e-03 	 4.07763301829397684095e-01 	 8.23377973780622385291e-02 
0.92917 	 9.39819477237247187518e-03 	 3.60407247537829988904e-01 	 1.11228841230412822672e-01 
0.93750 	 2.32658801203802605151e-03 	 3.94281567729426851709e-01 	 1.01978629577877885626e-01 
0.94583 	 4.42084055561353141128e-03 	 3.18454436172600718891e-01 	 1.37896007369514905783e-01 
0.95417 	 7.83364132796748185994e-03 	 3.41979148207850469632e-01 	 1.62480070213247257405e-01 
0.96250 	 4.04850092462483678035e-03 	 4.78767504541319832700e-01 	 7.99359955622463563829e-02 
0.97083 	 1.69033444834366282372e-02 	 3.61617917091726193135e-01 	 1.24635492366831787669e-01 
0.97917 	 2.90952910644811301930e-03 	 3.30343381750125897334e-01 	 1.26332550819834049660e-01 
0.98750 	 3.11129793054071073985e-03 	 4.03257601794726527888e-01 	 2.05152600876006868669e-01 
0.99583 	 9.23145044840784296039e-04 	 3.94567646177463871027e-01 	 1.63233571995607007477e-01 
1.00417 	 7.22241431804455935595e-03 	 5.01715368847741483016e-01 	 2.11399563050863575908e-01 
1.01250 	 7.27692839886285615381e-03 	 5.14108549079974164187e-01 	 1.44905063872831335603e-01 
1.02083 	 7.48789746532086547548e-03 	 4.81259197637277313930e-01 	 1.51882422062818073227e-01 
1.02917 	 7.27436031840694372064e-03 	 5.16803136342391944424e-01 	 1.01660315091296429846e-01 
1.03750 	 2.50465180424982829244e-03 	 7.14287447424777233174e-01 	 1.50126635121681450968e-01 
1.04583 	 3.15993141540283489777e-03 	 2.08118136875790371576e+00 	 2.01318523623168099679e-01 
1.05417 	 5.60579074331203890819e-03 	 1.05720412938900465427e+00 	 1.78308145891056812893e-01 
1.06250 	 7.42533416258676394472e-03 	 7.86826406073530493224e-01 	 1.35185413667358728107e-01 
1.07083 	 5.16823374567373927668e-03 	 6.62368288168600938270e-01 	 1.03124325243106121364e-01 
1.07917 	 5.83713294864267318030e-03 	 4.98546467122175041009e-01 	 4.97599765352002121332e-01 
1.08750 	 7.88377340682704270958e-03 	 5.36123994014291671562e-01 	 1.64472990078152137006e-01 
1.09583 	 1.13977840144030844079e-03 	 4.63428589714973693248e-01 	 2.30910921073460673192e-01 
1.10417 	 3.99547246933227521298e-03 	 4.72178663408956866832e-01 	 1.98143742803221056814e-01 
1.11250 	 5.29717418524587764506e-03 	 2.91014914388788903388e-01 	 1.23540985355607438323e-01 
1.12083 	 6.80529291130784353553e-03 	 4.89597769846113639591e-01 	 1.38170174702188203186e-01 
1.12917 	 3.66118145488964364526e-03 	 4.07261158882375795542e-01 	 1.50917139146307971442e-01 
1.13750 	 4.44708260751731834087e-03 	 3.34266813035073218074e-01 	 2.30700940199888071547e-01 
1.14583 	 7.33232194594923749470e-03 	 3.70085579373425066496e-01 	 1.40893455503605269374e-01 
1.15417 	 4.54536755274701810559e-03 	 3.45791223143123660488e-01 	 2.47869842682208740836e-01 
1.16250 	 5.09479485681876582276e-03 	 2.68694740733959769319e-01 	 1.86993482865364796242e-01 
1.17083 	 2.70823054959544538139e-03 	 3.18589077808207221665e-01 	 2.44189889610711918788e-01 
1.17917 	 7.84846568697913395118e-03 	 2.38908758417712696609e-01 	 1.78095516424361832719e-01 
1.18750 	 4.09351811857146773155e-03 	 2.43865052383257840951e-01 	 2.10208352791085989475e-01 
1.19583 	 4.67507506195627246803e-03 	 2.57160094773617509123e-01 	 2.10712486436303247928e-01 
1.20417 	 1.23568342113171570490e-02 	 2.95748716929950139498e-01 	 3.05329999670047147475e-01 
1.21250 	 6.68942537580887331555e-03 	 2.24010807408236367610e-01 	 1.45628871325464204212e-01 
1.22083 	 7.13065499715536191272e-03 	 2.43393110165261883360e-01 	 3.01114680409278523410e-01 
1.22917 	 3.61016137296579818841e-03 	 2.03137383617227551547e-01 	 2.48902289983112423588e-01 
1.23750 	 6.39640295448460488581e-03 	 2.23204888611789081798e-01 	 1.45838346730605472601e-01 
1.24583 	 8.00438525509142989600e-03 	 2.13769768069119042719e-01 	 3.26193791299520752247e-01 
1.25417 	 5.89541657182302523965e-03 	 2.33702876857087321616e-01 	 2.91356311349032559566e-01 
1.26250 	 2.82185831030592202198e-03 	 2.39763215259855944073e-01 	 3.02457533742527762133e-01 
1.27083 	 5.56039795190014195236e-03 	 2.39683794634982877403e-01 	 2.94380820783852970024e-01 
1.27917 	 6.63591403718176431337e-03 	 1.68213718491950964262e-01 	 2.95493217844352118462e-01 
1.28750 	 4.91697272198699658619e-03 	 2.26006036134268367688e-01 	 3.07599434952705363955e-01 
1.29583 	 4.12992935660718221702e-03 	 1.71152758863306414527e-01 	 2.44735242474159619963e-01 
1.30417 	 7.14669033458884776083e-03 	 1.73555413746434850086e-01 	 2.52936242866743821178e-01 
1.31250 	 6.67117801930553790124e-03 	 1.56097821947550979838e-01 	 3.20686093590726528646e-01 
1.32083 	 7.43146842017647878131e-03 	 1.54514870475342180889e-01 	 3.70440808175427072069e-01 
1.32917 	 3.78107769523503998640e-03 	 1.34642731473672006004e-01 	 4.11828154863289053189e-01 
1.33750 	 5.69650204103606082329e-03 	 1.58946954718922117689e-01 	 2.67491382648816999890e-01 
1.34583 	 4.98355700289550111737e-03 	 1.58996536914345398817e-01 	 1.80054194541704737365e-01 
1.35417 	 6.10434228288605617435e-03 	 1.18127857626526375223e-01 	 2.70665855702691970919e-01 
1.36250 	 7.86295618823653480467e-03 	 1.35051233119785757397e-01 	 3.71114396490455633604e-01 
1.37083 	 5.90197689597736323275e-03 	 1.32273825631934932590e-01 	 3.65231439893472120684e-01 
1.37917 	 1.06298834952631843231e-02 	 1.17756374328799012785e-01 	 3.01548692924596350995e-01 
1.38750 	 9.69231825186400372529e-03 	 1.11766544883770940766e-01 	 4.24214870002253441328e-01 
1.39583 	 7.71907353897711197982e-03 	 1.18942115449823596074e-01 	 2.81094619791654787289e-01 
1.40417 	 7.59180583232247664649e-03 	 1.14686050604519529372e-01 	 3.34813062751038226228e-01 
1.41250 	 6.87790406846919971651e-03 	 1.14428054840436568829e-01 	 3.10064303991236578373e-01 
1.42083 	 7.08672557575774474808e-03 	 9.57293971871489152159e-02 	 3.90598266609134658900e-01 
1.42917 	 5.79648799871389491106e-03 	 1.69656600943670410331e-01 	 2.36044350933431235084e-01 
1.43750 	 7.27242002591539735828e-03 	 1.54890501048827622377e-01 	 2.75720381174890893927e-01 
1.44583 	 6.41056531048081728458e-03 	 1.27945085858145068958e-01 	 3.27423243725144252902e-01 
1.45417 	 6.49419997174712198412e-03 	 8.90305634966518794071e-02 	 3.26639306989806643688e-01 
1.46250 	 4.68255151767555354014e-03 	 1.15807460346655233252e-01 	 2.75417117507665398790e-01 
1.47083 	 6.56114930484929907706e-03 	 1.08530561176430631609e-01 	 4.04916428017468299494e-01 
1.47917 	 8.82366758932322768627e-03 	 1.18894830502163831309e-01 	 2.89838930593357413379e-01 
1.48750 	 5.15946917811133977383e-03 	 1.31770015738116141879e-01 	 3.14510274006840728767e-01 
1.49583 	 1.05301391155606174910e-02 	 1.43399041427755863376e-01 	 3.61129683426245684519e-01 
1.50417 	 5.15612588532407718767e-03 	 1.59006069631244639773e-01 	 4.59165023142077632912e-01 
1.51250 	 6.90264626400904825893e-03 	 1.35769810498556908751e-01 	 2.07543383667579517393e-01 
1.52083 	 5.57364142821191888705e-03 	 1.02471504101644655949e-01 	 4.23458418379951073707e-01 
1.52917 	 7.60124322028833156184e-03 	 1.04253499172120595029e-01 	 1.93563800844019390235e-01 
1.53750 	 6.41160374848943111908e-03 	 9.62858186742259619662e-02 	 2.55412208440645271956e-01 
1.54583 	 7.60461034757629623232e-03 	 1.06764240776493518625e-01 	 2.27658397288654251733e-01 
1.55417 	 7.94918159949265824837e-03 	 1.37388570620007033352e-01 	 4.56004257227364817595e-01 
1.56250 	 7.24488217922027600421e-03 	 1.43796353539005189459e-01 	 2.75168567689608956073e-01 
1.57083 	 9.44634796950723568121e-03 	 1.16063352219456530912e-01 	 4.44222684880481610836e-01 
1.57917 	 4.66918360666784566099e-03 	 1.06696580644729033249e-01 	 2.59660407762390688102e-01 
1.58750 	 8.28012571180141571103e-03 	 7.72704126501455174081e-02 	 3.44838724473021607242e-01 
1.59583 	 4.30663017192840259784e-03 	 8.71371766302349165523e-02 	 3.54198357318190770737e-01 
1.60417 	 7.40422445795377737882e-03 	 8.98997345478460274659e-02 	 4.66597718207875877816e-01 
1.61250 	 4.36423515105036508716e-03 	 6.79603436382148762274e-02 	 4.28290289464568874056e-01 
1.62083 	 2.67065602547821067184e-03 	 8.24058849720811920081e-02 	 4.67283871107167070313e-01 
1.62917 	 5.05313510698439209701e-03 	 7.43632295424259265326e-02 	 3.92989013829284639101e-01 
1.63750 	 3.49944393876398199966e-03 	 7.16910977413711403283e-02 	 6.87124590125083978265e-01 
1.64583 	 7.93740699846599666312e-03 	 8.05043326317243373991e-02 	 5.56806034764250834534e-01 
1.65417 	 9.45182443978775585491e-03 	 7.44171786486533121119e-02 	 4.77762350808277391767e-01 
1.66250 	 5.36576353325485515960e-03 	 7.28080046523471441366e-02 	 3.46761899611961466050e-01 
1.67083 	 5.06320331528665665277e-03 	 6.90166221973217697272e-02 	 5.39220591386714853677e-01 
1.67917 	 5.17831170120680497199e-03 	 9.80656679666524477845e-02 	 4.19660527590837162393e-01 
1.68750 	 6.22049546569384322753e-03 	 6.39581057987284318234e-02 	 4.74993752276040681615e-01 
1.69583 	 2.54502600838290562665e-03 	 8.70886461869589401097e-02 	 5.92763352555254252607e-01 
1.70417 	 7.03657387306838057184e-03 	 7.82444368733687251050e-02 	 3.38563645029149151711e-01 
1.71250 	 3.53124007330231012847e-03 	 6.19945756274616621706e-02 	 6.71404979096751786116e-01 
1.72083 	 3.68047733351517091654e-03 	 7.35574113564658599307e-02 	 5.10047949437517744720e-01 
1.72917 	 4.59260958605750991418e-03 	 5.94030450974221205240e-02 	 3.60897524929096769064e-01 
1.73750 	 6.11442500087521021573e-03 	 6.70278865753038965991e-02 	 4.85047652448049260165e-01 
1.74583 	 7.03427650276390765971e-03 	 6.46565200854597038616e-02 	 4.53827644014397013628e-01 
1.75417 	 6.66508031982711388747e-03 	 5.88903158371388776859e-02 	 5.75016826075971376753e-01 
1.76250 	 7.08219986666358113786e-03 	 7.32600585638719797865e-02 	 4.00161764540879538732e-01 
1.77083 	 6.41145111509705371844e-03 	 7.78756307096781091870e-02 	 3.33942724093432619092e-01 
1.77917 	 7.55942308212649571875e-03 	 8.46870550007999545183e-02 	 2.97924811646524512199e-01 
1.78750 	 5.34140463543851702621e-03 	 6.28338396452468445075e-02 	 5.14397401067444692835e-01 
1.79583 	 4.01992557514936187796e-03 	 5.90332860451149438186e-02 	 4.64472623703529652328e-01 
1.80417 	 7.29303130174876503011e-03 	 5.15353017549979447454e-02 	 3.03478459015726509396e-01 
1.81250 	 1.00660078843759475536e-02 	 6.67409476952521840687e-02 	 4.97160801848312794426e-01 
1.82083 	 9.93992812273772168019e-03 	 6.36871441384503078620e-02 	 8.49087744926916854205e-01 
1.82917 	 8.55722030627708088457e-03 	 5.07759368084381504382e-02 	 5.33307731920229399769e-01 
1.83750 	 7.46691938559798738112e-03 	 6.08463045635663640764e-02 	 6.79372789182385417028e-01 
1.84583 	 7.93071097953288416116e-03 	 4.85342285195530659392e-02 	 5.84667933934349681735e-01 
1.85417 	 7.49176844031728544904e-03 	 3.46111467922700158373e-02 	 4.93684801707543363669e-01 
1.86250 	 9.70853102557274645623e-03 	 5.15579569186949138171e-02 	 6.78832827680006634097e-01 
1.87083 	 1.10644591908543952347e-02 	 4.36184112054493131061e-02 	 6.21331836783959090553e-01 
1.87917 	 8.52634480996228294458e-03 	 4.60393500249015250048e-02 	 6.18084118318344311049e-01 
1.88750 	 7.16378205469267101413e-03 	 3.90062756565042884072e-02 	 6.57270674748246186425e-01 
1.89583 	 1.52645469023668586828e-02 	 4.63247896627773311784e-02 	 7.01297917565051220912e-01 
1.90417 	 7.19821624107086933259e-03 	 5.36646853221004194179e-02 	 6.07173998066708464627e-01 
1.91250 	 7.82294993741116523323e-03 	 5.51444612419717677954e-02 	 8.32813542301225617770e-01 
1.92083 	 1.07664406610002844067e-02 	 6.20643268512007031945e-02 	 6.91686353602945391827e-01 
1.92917 	 9.93812298309282131370e-03 	 5.14822144088688885000e-02 	 7.23002597218405318458e-01 
1.93750 	 9.17077078840234163892e-03 	 5.63676759056963017080e-02 	 6.23209683536496084066e-01 
1.94583 	 7.44332856320730276711e-03 	 5.04107981681571060140e-02 	 7.27975118689625610990e-01 
1.95417 	 8.72296456926053946634e-03 	 4.38226184029311335855e-02 	 1.12732517322279179872e+00 
1.96250 	 7.59128879408558880637e-03 	 4.41891791190857641247e-02 	 1.04328848327367951221e+00 
1.97083 	 6.78981476673561068491e-03 	 8.20563726954902095123e-02 	 9.53717744528532085369e-01 
1.97917 	 1.34854420447545440831e-02 	 5.59797980978418915909e-02 	 8.87490996978103630077e-01 
1.98750 	 9.21502940370255881064e-03 	 5.34795635164076188506e-02 	 7.96842371029817586603e-01 
1.99583 	 7.76931127382600363734e-03 	 3.42924391306564310677e-02 	 1.83334200803892111153e+00 
2.00417 	 5.91397703168406341234e+00 	 3.51305813395427790624e+00 	 2.66299215698647003592e+02 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */ /*ID_EDIT_4_1*/
mus         = 23.8888943003376;  /* cm^-1 */ /*ID_EDIT_4_2*/
g           = 0.9;  /*ID_EDIT_5*/
nt          = 1.36;  /*ID_EDIT_4_3*/
Nphotons    = 100; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */ /*ID_EDIT_6_FIXED*/
y = y_start; /*ID_EDIT_6_DEL*/
z = z_start; /*ID_EDIT_6_DEL*/
/*ID_EDIT_6_DEL*/
/* source - vartical up [0,0,1] */ /*ID_EDIT_6_DEL*/
ux = 0; /*ID_EDIT_6_DEL*/
uy = 0; /*ID_EDIT_6_DEL*/
uz = 1; /*ID_EDIT_6_DEL*/


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

printf("saving cube into file...\n");
double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);
printf("saving cube completed\n");

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);