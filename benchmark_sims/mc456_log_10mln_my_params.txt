time elapsed: 1356.2483 seconds

=================================

sim results:

number of photons = 10000000.000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 1.688e-02 	 1.621e-01 	 2.696e-01 
0.01250 	 1.225e-02 	 1.607e-01 	 2.692e-01 
0.02083 	 1.162e-02 	 1.608e-01 	 2.694e-01 
0.02917 	 1.219e-02 	 1.610e-01 	 2.699e-01 
0.03750 	 1.178e-02 	 1.611e-01 	 2.701e-01 
0.04583 	 1.173e-02 	 1.612e-01 	 2.705e-01 
0.05417 	 1.145e-02 	 1.614e-01 	 2.707e-01 
0.06250 	 1.145e-02 	 1.616e-01 	 2.712e-01 
0.07083 	 1.152e-02 	 1.615e-01 	 2.715e-01 
0.07917 	 1.130e-02 	 1.621e-01 	 2.724e-01 
0.08750 	 1.123e-02 	 1.621e-01 	 2.727e-01 
0.09583 	 1.148e-02 	 1.621e-01 	 2.729e-01 
0.10417 	 1.148e-02 	 1.621e-01 	 2.735e-01 
0.11250 	 1.149e-02 	 1.627e-01 	 2.741e-01 
0.12083 	 1.141e-02 	 1.629e-01 	 2.747e-01 
0.12917 	 1.137e-02 	 1.631e-01 	 2.758e-01 
0.13750 	 1.163e-02 	 1.629e-01 	 2.768e-01 
0.14583 	 1.147e-02 	 1.635e-01 	 2.779e-01 
0.15417 	 1.153e-02 	 1.639e-01 	 2.787e-01 
0.16250 	 1.154e-02 	 1.638e-01 	 2.800e-01 
0.17083 	 1.146e-02 	 1.648e-01 	 2.810e-01 
0.17917 	 1.141e-02 	 1.647e-01 	 2.825e-01 
0.18750 	 1.158e-02 	 1.651e-01 	 2.835e-01 
0.19583 	 1.149e-02 	 1.656e-01 	 2.850e-01 
0.20417 	 1.159e-02 	 1.658e-01 	 2.863e-01 
0.21250 	 1.148e-02 	 1.658e-01 	 2.872e-01 
0.22083 	 1.144e-02 	 1.670e-01 	 2.886e-01 
0.22917 	 1.145e-02 	 1.671e-01 	 2.905e-01 
0.23750 	 1.158e-02 	 1.677e-01 	 2.917e-01 
0.24583 	 1.158e-02 	 1.679e-01 	 2.932e-01 
0.25417 	 1.161e-02 	 1.687e-01 	 2.954e-01 
0.26250 	 1.152e-02 	 1.692e-01 	 2.969e-01 
0.27083 	 1.168e-02 	 1.699e-01 	 2.987e-01 
0.27917 	 1.164e-02 	 1.704e-01 	 3.007e-01 
0.28750 	 1.160e-02 	 1.709e-01 	 3.025e-01 
0.29583 	 1.176e-02 	 1.718e-01 	 3.047e-01 
0.30417 	 1.174e-02 	 1.720e-01 	 3.066e-01 
0.31250 	 1.178e-02 	 1.729e-01 	 3.088e-01 
0.32083 	 1.179e-02 	 1.740e-01 	 3.106e-01 
0.32917 	 1.184e-02 	 1.742e-01 	 3.131e-01 
0.33750 	 1.180e-02 	 1.751e-01 	 3.155e-01 
0.34583 	 1.189e-02 	 1.753e-01 	 3.175e-01 
0.35417 	 1.193e-02 	 1.764e-01 	 3.201e-01 
0.36250 	 1.196e-02 	 1.772e-01 	 3.226e-01 
0.37083 	 1.199e-02 	 1.782e-01 	 3.250e-01 
0.37917 	 1.208e-02 	 1.788e-01 	 3.271e-01 
0.38750 	 1.210e-02 	 1.793e-01 	 3.305e-01 
0.39583 	 1.214e-02 	 1.805e-01 	 3.332e-01 
0.40417 	 1.217e-02 	 1.812e-01 	 3.362e-01 
0.41250 	 1.219e-02 	 1.822e-01 	 3.392e-01 
0.42083 	 1.222e-02 	 1.830e-01 	 3.415e-01 
0.42917 	 1.231e-02 	 1.837e-01 	 3.447e-01 
0.43750 	 1.238e-02 	 1.849e-01 	 3.480e-01 
0.44583 	 1.240e-02 	 1.859e-01 	 3.511e-01 
0.45417 	 1.241e-02 	 1.865e-01 	 3.542e-01 
0.46250 	 1.248e-02 	 1.877e-01 	 3.574e-01 
0.47083 	 1.248e-02 	 1.891e-01 	 3.607e-01 
0.47917 	 1.253e-02 	 1.901e-01 	 3.642e-01 
0.48750 	 1.260e-02 	 1.909e-01 	 3.683e-01 
0.49583 	 1.260e-02 	 1.920e-01 	 3.713e-01 
0.50417 	 1.268e-02 	 1.930e-01 	 3.750e-01 
0.51250 	 1.272e-02 	 1.943e-01 	 3.789e-01 
0.52083 	 1.280e-02 	 1.955e-01 	 3.822e-01 
0.52917 	 1.278e-02 	 1.965e-01 	 3.860e-01 
0.53750 	 1.291e-02 	 1.978e-01 	 3.896e-01 
0.54583 	 1.293e-02 	 1.991e-01 	 3.937e-01 
0.55417 	 1.303e-02 	 2.001e-01 	 3.976e-01 
0.56250 	 1.306e-02 	 2.017e-01 	 4.027e-01 
0.57083 	 1.308e-02 	 2.029e-01 	 4.072e-01 
0.57917 	 1.315e-02 	 2.044e-01 	 4.107e-01 
0.58750 	 1.322e-02 	 2.060e-01 	 4.149e-01 
0.59583 	 1.325e-02 	 2.073e-01 	 4.198e-01 
0.60417 	 1.335e-02 	 2.088e-01 	 4.247e-01 
0.61250 	 1.337e-02 	 2.104e-01 	 4.288e-01 
0.62083 	 1.345e-02 	 2.118e-01 	 4.338e-01 
0.62917 	 1.351e-02 	 2.134e-01 	 4.383e-01 
0.63750 	 1.354e-02 	 2.149e-01 	 4.435e-01 
0.64583 	 1.365e-02 	 2.164e-01 	 4.488e-01 
0.65417 	 1.374e-02 	 2.182e-01 	 4.537e-01 
0.66250 	 1.382e-02 	 2.201e-01 	 4.595e-01 
0.67083 	 1.382e-02 	 2.217e-01 	 4.646e-01 
0.67917 	 1.388e-02 	 2.235e-01 	 4.704e-01 
0.68750 	 1.398e-02 	 2.255e-01 	 4.752e-01 
0.69583 	 1.405e-02 	 2.273e-01 	 4.811e-01 
0.70417 	 1.411e-02 	 2.291e-01 	 4.866e-01 
0.71250 	 1.421e-02 	 2.312e-01 	 4.924e-01 
0.72083 	 1.427e-02 	 2.332e-01 	 4.983e-01 
0.72917 	 1.435e-02 	 2.355e-01 	 5.047e-01 
0.73750 	 1.444e-02 	 2.375e-01 	 5.105e-01 
0.74583 	 1.450e-02 	 2.395e-01 	 5.160e-01 
0.75417 	 1.455e-02 	 2.417e-01 	 5.231e-01 
0.76250 	 1.465e-02 	 2.443e-01 	 5.293e-01 
0.77083 	 1.472e-02 	 2.467e-01 	 5.357e-01 
0.77917 	 1.484e-02 	 2.492e-01 	 5.419e-01 
0.78750 	 1.492e-02 	 2.519e-01 	 5.490e-01 
0.79583 	 1.499e-02 	 2.546e-01 	 5.561e-01 
0.80417 	 1.507e-02 	 2.571e-01 	 5.632e-01 
0.81250 	 1.518e-02 	 2.603e-01 	 5.703e-01 
0.82083 	 1.527e-02 	 2.632e-01 	 5.767e-01 
0.82917 	 1.536e-02 	 2.666e-01 	 5.844e-01 
0.83750 	 1.543e-02 	 2.700e-01 	 5.916e-01 
0.84583 	 1.556e-02 	 2.732e-01 	 5.990e-01 
0.85417 	 1.564e-02 	 2.770e-01 	 6.064e-01 
0.86250 	 1.571e-02 	 2.805e-01 	 6.143e-01 
0.87083 	 1.579e-02 	 2.850e-01 	 6.221e-01 
0.87917 	 1.591e-02 	 2.892e-01 	 6.303e-01 
0.88750 	 1.603e-02 	 2.935e-01 	 6.386e-01 
0.89583 	 1.612e-02 	 2.982e-01 	 6.465e-01 
0.90417 	 1.624e-02 	 3.036e-01 	 6.556e-01 
0.91250 	 1.634e-02 	 3.089e-01 	 6.631e-01 
0.92083 	 1.644e-02 	 3.149e-01 	 6.712e-01 
0.92917 	 1.654e-02 	 3.209e-01 	 6.806e-01 
0.93750 	 1.662e-02 	 3.279e-01 	 6.897e-01 
0.94583 	 1.677e-02 	 3.361e-01 	 6.994e-01 
0.95417 	 1.686e-02 	 3.445e-01 	 7.081e-01 
0.96250 	 1.697e-02 	 3.543e-01 	 7.176e-01 
0.97083 	 1.708e-02 	 3.653e-01 	 7.267e-01 
0.97917 	 1.716e-02 	 3.778e-01 	 7.356e-01 
0.98750 	 1.727e-02 	 3.930e-01 	 7.461e-01 
0.99583 	 1.742e-02 	 4.113e-01 	 7.565e-01 
1.00417 	 1.751e-02 	 4.337e-01 	 7.658e-01 
1.01250 	 1.760e-02 	 4.626e-01 	 7.752e-01 
1.02083 	 1.777e-02 	 5.033e-01 	 7.860e-01 
1.02917 	 1.788e-02 	 5.650e-01 	 7.959e-01 
1.03750 	 1.802e-02 	 6.842e-01 	 8.073e-01 
1.04583 	 1.811e-02 	 1.987e+00 	 8.186e-01 
1.05417 	 1.821e-02 	 9.260e-01 	 8.300e-01 
1.06250 	 1.835e-02 	 6.326e-01 	 8.402e-01 
1.07083 	 1.851e-02 	 5.331e-01 	 8.521e-01 
1.07917 	 1.865e-02 	 4.761e-01 	 8.629e-01 
1.08750 	 1.878e-02 	 4.365e-01 	 8.754e-01 
1.09583 	 1.891e-02 	 4.071e-01 	 8.873e-01 
1.10417 	 1.908e-02 	 3.838e-01 	 8.997e-01 
1.11250 	 1.919e-02 	 3.647e-01 	 9.108e-01 
1.12083 	 1.933e-02 	 3.485e-01 	 9.240e-01 
1.12917 	 1.948e-02 	 3.341e-01 	 9.371e-01 
1.13750 	 1.965e-02 	 3.215e-01 	 9.484e-01 
1.14583 	 1.978e-02 	 3.103e-01 	 9.608e-01 
1.15417 	 1.993e-02 	 3.000e-01 	 9.730e-01 
1.16250 	 2.010e-02 	 2.908e-01 	 9.860e-01 
1.17083 	 2.025e-02 	 2.819e-01 	 1.000e+00 
1.17917 	 2.039e-02 	 2.741e-01 	 1.013e+00 
1.18750 	 2.054e-02 	 2.666e-01 	 1.028e+00 
1.19583 	 2.071e-02 	 2.596e-01 	 1.042e+00 
1.20417 	 2.087e-02 	 2.532e-01 	 1.055e+00 
1.21250 	 2.100e-02 	 2.469e-01 	 1.071e+00 
1.22083 	 2.118e-02 	 2.409e-01 	 1.085e+00 
1.22917 	 2.133e-02 	 2.354e-01 	 1.099e+00 
1.23750 	 2.149e-02 	 2.301e-01 	 1.114e+00 
1.24583 	 2.169e-02 	 2.249e-01 	 1.129e+00 
1.25417 	 2.188e-02 	 2.203e-01 	 1.144e+00 
1.26250 	 2.203e-02 	 2.156e-01 	 1.160e+00 
1.27083 	 2.222e-02 	 2.107e-01 	 1.175e+00 
1.27917 	 2.239e-02 	 2.066e-01 	 1.191e+00 
1.28750 	 2.258e-02 	 2.023e-01 	 1.207e+00 
1.29583 	 2.278e-02 	 1.981e-01 	 1.224e+00 
1.30417 	 2.293e-02 	 1.941e-01 	 1.241e+00 
1.31250 	 2.313e-02 	 1.904e-01 	 1.257e+00 
1.32083 	 2.331e-02 	 1.867e-01 	 1.275e+00 
1.32917 	 2.354e-02 	 1.831e-01 	 1.292e+00 
1.33750 	 2.371e-02 	 1.797e-01 	 1.308e+00 
1.34583 	 2.388e-02 	 1.762e-01 	 1.325e+00 
1.35417 	 2.409e-02 	 1.730e-01 	 1.344e+00 
1.36250 	 2.432e-02 	 1.698e-01 	 1.362e+00 
1.37083 	 2.451e-02 	 1.666e-01 	 1.379e+00 
1.37917 	 2.473e-02 	 1.636e-01 	 1.397e+00 
1.38750 	 2.491e-02 	 1.606e-01 	 1.416e+00 
1.39583 	 2.514e-02 	 1.575e-01 	 1.435e+00 
1.40417 	 2.536e-02 	 1.549e-01 	 1.455e+00 
1.41250 	 2.558e-02 	 1.521e-01 	 1.475e+00 
1.42083 	 2.575e-02 	 1.494e-01 	 1.494e+00 
1.42917 	 2.599e-02 	 1.465e-01 	 1.513e+00 
1.43750 	 2.620e-02 	 1.439e-01 	 1.533e+00 
1.44583 	 2.645e-02 	 1.415e-01 	 1.552e+00 
1.45417 	 2.667e-02 	 1.389e-01 	 1.573e+00 
1.46250 	 2.690e-02 	 1.365e-01 	 1.593e+00 
1.47083 	 2.711e-02 	 1.342e-01 	 1.615e+00 
1.47917 	 2.736e-02 	 1.318e-01 	 1.633e+00 
1.48750 	 2.760e-02 	 1.295e-01 	 1.654e+00 
1.49583 	 2.784e-02 	 1.274e-01 	 1.677e+00 
1.50417 	 2.807e-02 	 1.252e-01 	 1.697e+00 
1.51250 	 2.832e-02 	 1.230e-01 	 1.718e+00 
1.52083 	 2.857e-02 	 1.210e-01 	 1.738e+00 
1.52917 	 2.885e-02 	 1.188e-01 	 1.761e+00 
1.53750 	 2.909e-02 	 1.167e-01 	 1.783e+00 
1.54583 	 2.934e-02 	 1.148e-01 	 1.804e+00 
1.55417 	 2.960e-02 	 1.129e-01 	 1.825e+00 
1.56250 	 2.988e-02 	 1.110e-01 	 1.847e+00 
1.57083 	 3.015e-02 	 1.090e-01 	 1.869e+00 
1.57917 	 3.038e-02 	 1.070e-01 	 1.891e+00 
1.58750 	 3.065e-02 	 1.054e-01 	 1.914e+00 
1.59583 	 3.093e-02 	 1.037e-01 	 1.936e+00 
1.60417 	 3.123e-02 	 1.018e-01 	 1.956e+00 
1.61250 	 3.150e-02 	 1.001e-01 	 1.978e+00 
1.62083 	 3.176e-02 	 9.843e-02 	 2.000e+00 
1.62917 	 3.207e-02 	 9.692e-02 	 2.022e+00 
1.63750 	 3.234e-02 	 9.531e-02 	 2.045e+00 
1.64583 	 3.268e-02 	 9.365e-02 	 2.066e+00 
1.65417 	 3.297e-02 	 9.208e-02 	 2.087e+00 
1.66250 	 3.323e-02 	 9.054e-02 	 2.110e+00 
1.67083 	 3.356e-02 	 8.902e-02 	 2.129e+00 
1.67917 	 3.390e-02 	 8.768e-02 	 2.151e+00 
1.68750 	 3.419e-02 	 8.614e-02 	 2.171e+00 
1.69583 	 3.451e-02 	 8.474e-02 	 2.193e+00 
1.70417 	 3.482e-02 	 8.333e-02 	 2.210e+00 
1.71250 	 3.514e-02 	 8.192e-02 	 2.230e+00 
1.72083 	 3.544e-02 	 8.072e-02 	 2.249e+00 
1.72917 	 3.577e-02 	 7.930e-02 	 2.267e+00 
1.73750 	 3.607e-02 	 7.799e-02 	 2.286e+00 
1.74583 	 3.641e-02 	 7.674e-02 	 2.302e+00 
1.75417 	 3.680e-02 	 7.543e-02 	 2.317e+00 
1.76250 	 3.711e-02 	 7.414e-02 	 2.334e+00 
1.77083 	 3.746e-02 	 7.296e-02 	 2.349e+00 
1.77917 	 3.778e-02 	 7.179e-02 	 2.363e+00 
1.78750 	 3.815e-02 	 7.065e-02 	 2.375e+00 
1.79583 	 3.847e-02 	 6.950e-02 	 2.387e+00 
1.80417 	 3.883e-02 	 6.832e-02 	 2.398e+00 
1.81250 	 3.919e-02 	 6.722e-02 	 2.408e+00 
1.82083 	 3.953e-02 	 6.610e-02 	 2.416e+00 
1.82917 	 3.989e-02 	 6.509e-02 	 2.425e+00 
1.83750 	 4.023e-02 	 6.396e-02 	 2.433e+00 
1.84583 	 4.062e-02 	 6.294e-02 	 2.437e+00 
1.85417 	 4.096e-02 	 6.191e-02 	 2.442e+00 
1.86250 	 4.130e-02 	 6.095e-02 	 2.442e+00 
1.87083 	 4.171e-02 	 5.997e-02 	 2.446e+00 
1.87917 	 4.205e-02 	 5.901e-02 	 2.442e+00 
1.88750 	 4.240e-02 	 5.798e-02 	 2.438e+00 
1.89583 	 4.275e-02 	 5.710e-02 	 2.434e+00 
1.90417 	 4.313e-02 	 5.620e-02 	 2.426e+00 
1.91250 	 4.347e-02 	 5.528e-02 	 2.418e+00 
1.92083 	 4.386e-02 	 5.438e-02 	 2.407e+00 
1.92917 	 4.420e-02 	 5.350e-02 	 2.394e+00 
1.93750 	 4.460e-02 	 5.258e-02 	 2.376e+00 
1.94583 	 4.490e-02 	 5.178e-02 	 2.358e+00 
1.95417 	 4.527e-02 	 5.098e-02 	 2.334e+00 
1.96250 	 4.560e-02 	 5.012e-02 	 2.310e+00 
1.97083 	 4.591e-02 	 4.933e-02 	 2.280e+00 
1.97917 	 4.630e-02 	 4.857e-02 	 2.249e+00 
1.98750 	 4.658e-02 	 4.780e-02 	 2.206e+00 
1.99583 	 4.691e-02 	 4.697e-02 	 1.157e+00 
2.00417 	 3.994e+00 	 3.740e+00 	 7.360e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   1.0E-4		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, double Nphotons, double cube_overflow);

void displayProgressBar(int progress, int total, int min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
double	W;          /* photon weight */
double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
double (*Cube)[MAX_XY][MAX_Z] = (double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

double cube_overflow;
double	Fsph;       /* fluence in spherical shell */
double	Fcyl;       /* fluence in cylindrical shell */
double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
double	Nphotons;   /* number of photons in simulation */
long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
double  rnd;        /* assigned random value 0-1 */
double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1e7; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (unsigned long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

/* print header */
fprintf(target, "number of photons = %f\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %4.3e \t %4.3e \t %4.3e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);

fclose(target);



save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, double arr[180][180][240], int x, int y, int z, double Nphotons, double cube_overflow) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %f,\n", Nphotons);
    fprintf(file, "\"overflow\": %4.3e,\n", cube_overflow);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%4.3e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(int progress, int total, int min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %d%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);