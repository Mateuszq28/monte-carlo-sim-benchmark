time elapsed: 410.2528 seconds

=================================

sim results:

number of photons = 10000000
overflow: 4.90737611564029194415e+06
sum: 5.09248900056061148643e+06
sum: 5.09262388435970805585e+06
avg: 5.09248900056061160058e-01
perc_in: 50.92

number of photons = 10000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 2.19357422615288968903e-02 	 1.60503145577104905373e-01 	 2.70029910145949514355e-01 
0.01250 	 1.23247890321610195641e-02 	 1.62554848422420378240e-01 	 2.69872142119073010758e-01 
0.02083 	 1.20711394689287359466e-02 	 1.61187130336668815733e-01 	 2.69978790740680152371e-01 
0.02917 	 1.14395798983123811454e-02 	 1.61232713658523790778e-01 	 2.70384741706830189489e-01 
0.03750 	 1.09303910801186836277e-02 	 1.61655577129199756747e-01 	 2.70279742589785709761e-01 
0.04583 	 1.14914225796142258074e-02 	 1.61597523125015352097e-01 	 2.70909199974641523578e-01 
0.05417 	 1.15279341266541698885e-02 	 1.60623961168838896851e-01 	 2.71002993623980448223e-01 
0.06250 	 1.15875435190517812184e-02 	 1.61328872462324135473e-01 	 2.71615884998019474494e-01 
0.07083 	 1.14062003034433659399e-02 	 1.61914623563979231946e-01 	 2.71874491626304504166e-01 
0.07917 	 1.12542516482576245018e-02 	 1.61843619521293530239e-01 	 2.72392004796714326531e-01 
0.08750 	 1.09320549232222435226e-02 	 1.61820033857048989345e-01 	 2.72913576009928271482e-01 
0.09583 	 1.13013781776427641584e-02 	 1.61831170944657848354e-01 	 2.73467741093973926159e-01 
0.10417 	 1.12311322412157361950e-02 	 1.61980460156988220755e-01 	 2.74419870158569445540e-01 
0.11250 	 1.12158528715644127682e-02 	 1.62598043303433054119e-01 	 2.75107151423407136903e-01 
0.12083 	 1.12698322845700190514e-02 	 1.62622283546656337672e-01 	 2.75478215183067975946e-01 
0.12917 	 1.13947226079635123563e-02 	 1.62890433281582924785e-01 	 2.76335813652906436833e-01 
0.13750 	 1.14443458358167663574e-02 	 1.63043409043395065572e-01 	 2.76931849289657694424e-01 
0.14583 	 1.14260690864646727305e-02 	 1.63601266532597100500e-01 	 2.78502131525030394155e-01 
0.15417 	 1.13111924335944670494e-02 	 1.63553382019045262519e-01 	 2.78964861128139729463e-01 
0.16250 	 1.13078482038075061461e-02 	 1.63984488477602136092e-01 	 2.80331472866790443188e-01 
0.17083 	 1.14050814449037536680e-02 	 1.64410307904393315770e-01 	 2.81102868992539667303e-01 
0.17917 	 1.13893935679002192979e-02 	 1.64709187365553538784e-01 	 2.82262493876707432072e-01 
0.18750 	 1.14498897937799042068e-02 	 1.64993366530845148032e-01 	 2.83556577767145823188e-01 
0.19583 	 1.14909835421458071669e-02 	 1.65331435196629017437e-01 	 2.84782946377212853317e-01 
0.20417 	 1.14571726678821175088e-02 	 1.65655922237056107971e-01 	 2.86196953391556707658e-01 
0.21250 	 1.14706773621534967311e-02 	 1.66020385957882460337e-01 	 2.87426771428125615859e-01 
0.22083 	 1.14649872151081060750e-02 	 1.66224021316396131098e-01 	 2.89303853578047998063e-01 
0.22917 	 1.15412708055977614174e-02 	 1.66797203147747041818e-01 	 2.90740131567546744584e-01 
0.23750 	 1.15055705303972275605e-02 	 1.67201824015681149715e-01 	 2.92286744436519640988e-01 
0.24583 	 1.16122907429174904853e-02 	 1.68281541019366209788e-01 	 2.93532822176442831363e-01 
0.25417 	 1.15863462503788192115e-02 	 1.68607238166527173551e-01 	 2.94938670287006154958e-01 
0.26250 	 1.16467917003828386191e-02 	 1.69285413873224183101e-01 	 2.96932119857921894557e-01 
0.27083 	 1.16445042107723110286e-02 	 1.69782744197560314658e-01 	 2.98450814852153190060e-01 
0.27917 	 1.17639414184448672790e-02 	 1.70204611147728529508e-01 	 3.00915515949971901222e-01 
0.28750 	 1.17521835461822012764e-02 	 1.70610029553153685900e-01 	 3.02190521703121106611e-01 
0.29583 	 1.17700496001199497037e-02 	 1.71275426216757731268e-01 	 3.04284897494618455926e-01 
0.30417 	 1.17559347113239173049e-02 	 1.71869323466774942544e-01 	 3.06664673844581237017e-01 
0.31250 	 1.18348558389893554477e-02 	 1.72544031604265818425e-01 	 3.08740997766908498168e-01 
0.32083 	 1.17983650028108833646e-02 	 1.73387100437494917626e-01 	 3.10690264805576599194e-01 
0.32917 	 1.18240514151993925812e-02 	 1.74003276375983867430e-01 	 3.12644274338953254144e-01 
0.33750 	 1.18230579881935093239e-02 	 1.74650203160015393689e-01 	 3.15120081419592856786e-01 
0.34583 	 1.18706046536387541113e-02 	 1.75338196866089118808e-01 	 3.18010179472804688228e-01 
0.35417 	 1.18877683288787817928e-02 	 1.75924535049154312505e-01 	 3.19690036373225072719e-01 
0.36250 	 1.19746868419744884049e-02 	 1.76662798455058195346e-01 	 3.22534281351110563296e-01 
0.37083 	 1.19791911385070653367e-02 	 1.77675598562088643551e-01 	 3.24978123268183094474e-01 
0.37917 	 1.20564825853233716785e-02 	 1.78395098064056650822e-01 	 3.27775839426557691336e-01 
0.38750 	 1.20261933681505370913e-02 	 1.79206255315110529747e-01 	 3.30404464065687575314e-01 
0.39583 	 1.21114405004411080508e-02 	 1.80082802910653622108e-01 	 3.32921668602528308956e-01 
0.40417 	 1.21234054671292973415e-02 	 1.80904786597806760406e-01 	 3.35802295103848180702e-01 
0.41250 	 1.21836995492624576565e-02 	 1.81657419979417589229e-01 	 3.38586458658542643896e-01 
0.42083 	 1.21984361172137196344e-02 	 1.82860556634513365948e-01 	 3.41717784829193627072e-01 
0.42917 	 1.22699963005307808445e-02 	 1.83503662580624338219e-01 	 3.44715466985735519145e-01 
0.43750 	 1.22755048964869398209e-02 	 1.84774548655632586680e-01 	 3.47161657118353395024e-01 
0.44583 	 1.23518764645587052209e-02 	 1.85343176298707862371e-01 	 3.51009280081673036289e-01 
0.45417 	 1.23577958202534862048e-02 	 1.86495160574841362111e-01 	 3.53662771016601928942e-01 
0.46250 	 1.24478457042246394570e-02 	 1.87729818350566318719e-01 	 3.57574733405436162581e-01 
0.47083 	 1.24500113952074210194e-02 	 1.88627371569927537731e-01 	 3.60914580510739935182e-01 
0.47917 	 1.25254281079975639257e-02 	 1.89635020421527883405e-01 	 3.64397635557191124089e-01 
0.48750 	 1.25507077338780081988e-02 	 1.90629999354191559391e-01 	 3.67801106176075254250e-01 
0.49583 	 1.26143236807267130478e-02 	 1.91786501246318075165e-01 	 3.71445216147190282463e-01 
0.50417 	 1.26866113008140615759e-02 	 1.93017954068181757377e-01 	 3.74539492364769910360e-01 
0.51250 	 1.27182570977337327384e-02 	 1.94218260286711352780e-01 	 3.78665338169927478962e-01 
0.52083 	 1.27820712849007096790e-02 	 1.95110928627307972372e-01 	 3.82310585010366799086e-01 
0.52917 	 1.27917666749208010918e-02 	 1.96478840122296133375e-01 	 3.85975264399066819720e-01 
0.53750 	 1.28385979150924967734e-02 	 1.98040054061476011871e-01 	 3.90133299318188631055e-01 
0.54583 	 1.29089536082471426776e-02 	 1.98895972672644888446e-01 	 3.94339469085986049635e-01 
0.55417 	 1.28939852717814273930e-02 	 2.00269999952185473457e-01 	 3.98461381117084900705e-01 
0.56250 	 1.29942439998196219986e-02 	 2.01531523576006010856e-01 	 4.02367806345425071957e-01 
0.57083 	 1.30602664127896731655e-02 	 2.02852078494007465048e-01 	 4.06505768949361467879e-01 
0.57917 	 1.31157496366682679162e-02 	 2.04433867816251529925e-01 	 4.11030578314114214411e-01 
0.58750 	 1.31945900768205889170e-02 	 2.05524898535914768427e-01 	 4.15455830208819931748e-01 
0.59583 	 1.32167631408564838907e-02 	 2.06958566557806145081e-01 	 4.20206894305306666304e-01 
0.60417 	 1.33122101552403827168e-02 	 2.08534600332745317930e-01 	 4.24862683938857621513e-01 
0.61250 	 1.33470687898916227226e-02 	 2.10004303911007966787e-01 	 4.29195477619021659166e-01 
0.62083 	 1.34281414167623652789e-02 	 2.11595568558711311091e-01 	 4.34009905006325524823e-01 
0.62917 	 1.34750124847278409529e-02 	 2.13125863902694723251e-01 	 4.39124444087614806964e-01 
0.63750 	 1.35647924844151251955e-02 	 2.14299412742266492948e-01 	 4.43991755564196788342e-01 
0.64583 	 1.35793947901568321651e-02 	 2.16173906154269540592e-01 	 4.48921713467173411072e-01 
0.65417 	 1.36635843175663233839e-02 	 2.17978207733713208460e-01 	 4.53860190969616328349e-01 
0.66250 	 1.37601563570848850482e-02 	 2.19683982721920717518e-01 	 4.58831882389294842817e-01 
0.67083 	 1.38186883872856262900e-02 	 2.21348590122446176043e-01 	 4.64736218879966522799e-01 
0.67917 	 1.38834496439210457880e-02 	 2.23323310466650937212e-01 	 4.69539978913817879214e-01 
0.68750 	 1.39397620479792989923e-02 	 2.24855600638621921927e-01 	 4.75305331585200108169e-01 
0.69583 	 1.40151697822997727688e-02 	 2.26746001410570025003e-01 	 4.80389645005565912861e-01 
0.70417 	 1.40845149269686747973e-02 	 2.28873388479198219825e-01 	 4.86236203532983968234e-01 
0.71250 	 1.41275337991764726731e-02 	 2.30795061266431955627e-01 	 4.92203593194895150376e-01 
0.72083 	 1.42391230578187335393e-02 	 2.33152776524657212587e-01 	 4.98240771536852367074e-01 
0.72917 	 1.43311502366959813565e-02 	 2.35081329359770357934e-01 	 5.03775793863994625355e-01 
0.73750 	 1.43979674382690592954e-02 	 2.37184150750514632922e-01 	 5.10229193197342945076e-01 
0.74583 	 1.45036165712303325576e-02 	 2.39550288609449102406e-01 	 5.15992625900659085403e-01 
0.75417 	 1.45965864182169089563e-02 	 2.41630488897092737810e-01 	 5.23097193073759347826e-01 
0.76250 	 1.46738461495908162346e-02 	 2.44298299669894053432e-01 	 5.29004815295583297186e-01 
0.77083 	 1.47158444803000623691e-02 	 2.46630909175383411513e-01 	 5.35879159142216288103e-01 
0.77917 	 1.48342151960438230901e-02 	 2.49261614154910160490e-01 	 5.42262502544895941270e-01 
0.78750 	 1.49283850756544676786e-02 	 2.51644438883881826907e-01 	 5.48956720265687758697e-01 
0.79583 	 1.49946840954742581509e-02 	 2.54358283626094083818e-01 	 5.55960433886648286439e-01 
0.80417 	 1.50629509020512048628e-02 	 2.57431127752306865286e-01 	 5.62590196111592333317e-01 
0.81250 	 1.51468327030219139517e-02 	 2.60382565338607763206e-01 	 5.70201087303269682494e-01 
0.82083 	 1.52460106892464298395e-02 	 2.63358086465768082007e-01 	 5.76907171992624090429e-01 
0.82917 	 1.53196967431520770370e-02 	 2.66402607078943032271e-01 	 5.84596000056414433210e-01 
0.83750 	 1.54013310231232783409e-02 	 2.69897329035491961857e-01 	 5.91405336272938009223e-01 
0.84583 	 1.55274136934796923998e-02 	 2.73343861716182801036e-01 	 5.98620289090236568086e-01 
0.85417 	 1.56100250555584844914e-02 	 2.76756264162291487629e-01 	 6.06424262526232271675e-01 
0.86250 	 1.57192163459142324189e-02 	 2.80532945443778269912e-01 	 6.14481317333022136751e-01 
0.87083 	 1.58376308396128741285e-02 	 2.84475613827602946682e-01 	 6.21837512414649684622e-01 
0.87917 	 1.58909287806476874627e-02 	 2.88875296407008375077e-01 	 6.30133253709592833225e-01 
0.88750 	 1.60061350130352685051e-02 	 2.93121004076154767493e-01 	 6.37540156843352190386e-01 
0.89583 	 1.60618079317246045812e-02 	 2.97824311480559711374e-01 	 6.46623889745744251378e-01 
0.90417 	 1.61871078252842671985e-02 	 3.03205769023939641915e-01 	 6.54301476455592889714e-01 
0.91250 	 1.62706728422106934595e-02 	 3.08488582669094790756e-01 	 6.63139320129602638509e-01 
0.92083 	 1.63737440835634989744e-02 	 3.14625325920644460798e-01 	 6.72085892014994135124e-01 
0.92917 	 1.64926999284053105166e-02 	 3.21076581999521770694e-01 	 6.80292542058343774336e-01 
0.93750 	 1.66124315350976783923e-02 	 3.27831485824372492743e-01 	 6.89163764401134137927e-01 
0.94583 	 1.67134063386335275647e-02 	 3.35869815105062030636e-01 	 6.97791969384547239308e-01 
0.95417 	 1.68352154801839834497e-02 	 3.44506040723370154932e-01 	 7.07666521942321269378e-01 
0.96250 	 1.69429882874126518100e-02 	 3.54292170993144861502e-01 	 7.16853347279720831686e-01 
0.97083 	 1.70659193868179411002e-02 	 3.65134264164525990104e-01 	 7.25618122673689636137e-01 
0.97917 	 1.71612457205905545587e-02 	 3.78029414005573827229e-01 	 7.35965959631237787164e-01 
0.98750 	 1.72510215693999942321e-02 	 3.92677295482884602951e-01 	 7.45506167047599199726e-01 
0.99583 	 1.73845689702217046091e-02 	 4.10805220640290680301e-01 	 7.55525804028253089584e-01 
1.00417 	 1.75108420801786401899e-02 	 4.33208475765573863825e-01 	 7.64750718000617446535e-01 
1.01250 	 1.76262572246020411681e-02 	 4.62290634515462983689e-01 	 7.75770711709328653072e-01 
1.02083 	 1.77381157390108096239e-02 	 5.03158831703414466396e-01 	 7.85567546478298184276e-01 
1.02917 	 1.78751398577405573587e-02 	 5.65037452785416727252e-01 	 7.96709148793140364830e-01 
1.03750 	 1.79934771801552768900e-02 	 6.83932399737330221079e-01 	 8.08102819618943035707e-01 
1.04583 	 1.81012881404005072927e-02 	 1.98735856421749201850e+00 	 8.18519549528240464298e-01 
1.05417 	 1.82313161488711038272e-02 	 9.26100155911945388532e-01 	 8.28933879460672762285e-01 
1.06250 	 1.83585250555825668650e-02 	 6.32776186187335998312e-01 	 8.39998289250556640084e-01 
1.07083 	 1.85220654557414869668e-02 	 5.33333514247562257005e-01 	 8.51945881328826315482e-01 
1.07917 	 1.86717851636175567742e-02 	 4.76206612773607262934e-01 	 8.63123802785859095543e-01 
1.08750 	 1.87356842000319830099e-02 	 4.36591472491687948576e-01 	 8.74985316745397367910e-01 
1.09583 	 1.89336539542356886712e-02 	 4.07103163547669566480e-01 	 8.86100779122137693911e-01 
1.10417 	 1.90583399918822435359e-02 	 3.83720706054803684104e-01 	 8.97562169206407300948e-01 
1.11250 	 1.92111159863093752809e-02 	 3.64560744247158063924e-01 	 9.11037975958565504619e-01 
1.12083 	 1.93290305880593586696e-02 	 3.48301620168843695247e-01 	 9.22508839097252564265e-01 
1.12917 	 1.94882923169347535564e-02 	 3.34178461172540186563e-01 	 9.34543361335195665873e-01 
1.13750 	 1.96342141578404842661e-02 	 3.21639551151104541304e-01 	 9.48519093890215381215e-01 
1.14583 	 1.97592998521909264664e-02 	 3.10164022031215846908e-01 	 9.60873043032597573543e-01 
1.15417 	 1.99402657643451136638e-02 	 3.00015858175225247351e-01 	 9.74276568262157471878e-01 
1.16250 	 2.00787954138217338007e-02 	 2.90742257570123840971e-01 	 9.87542138643339728610e-01 
1.17083 	 2.02274643928851936836e-02 	 2.82197229558805939842e-01 	 1.00012292551350467917e+00 
1.17917 	 2.03836959703920447828e-02 	 2.74311141314058204443e-01 	 1.01310474458442922874e+00 
1.18750 	 2.05593227858557395238e-02 	 2.66746280062337248751e-01 	 1.02745247039448162063e+00 
1.19583 	 2.07110275850018975274e-02 	 2.59807490687084918779e-01 	 1.04042118627893298566e+00 
1.20417 	 2.08564081544746933450e-02 	 2.53093312151335292359e-01 	 1.05556508082228828194e+00 
1.21250 	 2.10083967702610098505e-02 	 2.46824905785537451752e-01 	 1.06861498915795416487e+00 
1.22083 	 2.11721533938411324294e-02 	 2.41253210509741050638e-01 	 1.08360823125052774252e+00 
1.22917 	 2.13364609820991812938e-02 	 2.35545613808734843886e-01 	 1.09860067765009139507e+00 
1.23750 	 2.14831810551488616712e-02 	 2.30181496194231977048e-01 	 1.11400225095859539692e+00 
1.24583 	 2.16497607799361405090e-02 	 2.25057987112844776201e-01 	 1.12889276209368771831e+00 
1.25417 	 2.18232917260635581047e-02 	 2.20295494803974617470e-01 	 1.14361161824998291969e+00 
1.26250 	 2.20165103744225758298e-02 	 2.15593037892798405908e-01 	 1.15788132547970867847e+00 
1.27083 	 2.21836916860256652684e-02 	 2.10937045668413453159e-01 	 1.17471816315913568651e+00 
1.27917 	 2.23718842045079885361e-02 	 2.06416338771577223543e-01 	 1.18994880275580561246e+00 
1.28750 	 2.25191669707788949539e-02 	 2.02421146615586744488e-01 	 1.20424898953504788679e+00 
1.29583 	 2.27067775809121560893e-02 	 1.98307409340000184717e-01 	 1.22288578467224584578e+00 
1.30417 	 2.29034350821996739167e-02 	 1.94351462091630816653e-01 	 1.23915490838479414037e+00 
1.31250 	 2.30887496025969779501e-02 	 1.90464692405791613528e-01 	 1.25623922141816302123e+00 
1.32083 	 2.32782978782738771140e-02 	 1.86777233644480067376e-01 	 1.27331739068623894795e+00 
1.32917 	 2.34755395760937839167e-02 	 1.83124635545731967445e-01 	 1.29056676576398343670e+00 
1.33750 	 2.36905398837818290114e-02 	 1.79605789484940214784e-01 	 1.30819604743992590201e+00 
1.34583 	 2.38796771818706801693e-02 	 1.76322253998872496839e-01 	 1.32409234270035991443e+00 
1.35417 	 2.40591087544817609778e-02 	 1.72945687081336757496e-01 	 1.34447092231154630149e+00 
1.36250 	 2.42782453766396816297e-02 	 1.69749117876584004749e-01 	 1.36143813942056479682e+00 
1.37083 	 2.44791452738980230830e-02 	 1.66501082341804801379e-01 	 1.37889151801713083501e+00 
1.37917 	 2.46673900150679199783e-02 	 1.63515159199667248213e-01 	 1.39811624455706762227e+00 
1.38750 	 2.48804536510934572180e-02 	 1.60616939854692719614e-01 	 1.41501337826536688347e+00 
1.39583 	 2.50946371213968781599e-02 	 1.57617841399410485437e-01 	 1.43513736692212368062e+00 
1.40417 	 2.53290458330286266664e-02 	 1.54829016443470829367e-01 	 1.45266466142619266044e+00 
1.41250 	 2.55259197378246149857e-02 	 1.51994774832901913264e-01 	 1.47332309058044907957e+00 
1.42083 	 2.57210602254182886528e-02 	 1.49106203703009199124e-01 	 1.49334923504172056852e+00 
1.42917 	 2.59729811198075241641e-02 	 1.46699787370739853642e-01 	 1.51130606510707043988e+00 
1.43750 	 2.61826377932155400508e-02 	 1.43988135449235526986e-01 	 1.53220660004366160400e+00 
1.44583 	 2.64170584271022149125e-02 	 1.41550486139944725617e-01 	 1.55229024651329639006e+00 
1.45417 	 2.66395593815479080069e-02 	 1.39009823241443564168e-01 	 1.57235162931501792904e+00 
1.46250 	 2.68584416630356509481e-02 	 1.36530349645268833658e-01 	 1.59083059823902672747e+00 
1.47083 	 2.70880015980538638165e-02 	 1.34301852825438855499e-01 	 1.61145311557824788551e+00 
1.47917 	 2.73395101347362542987e-02 	 1.32010856465193254783e-01 	 1.63151118287213181546e+00 
1.48750 	 2.75390652713522858519e-02 	 1.29720888437322323661e-01 	 1.65299541025258744931e+00 
1.49583 	 2.77823749162160911486e-02 	 1.27486025389060481094e-01 	 1.67485204369891316212e+00 
1.50417 	 2.80539997401917408359e-02 	 1.25161187273355567484e-01 	 1.69723386204345949579e+00 
1.51250 	 2.83248330969196188134e-02 	 1.23014037368474840606e-01 	 1.71685355854910182138e+00 
1.52083 	 2.85747393659704952695e-02 	 1.20986394577530159689e-01 	 1.73746785597670450052e+00 
1.52917 	 2.87943156313342010777e-02 	 1.18990946128665966985e-01 	 1.76006724643119771834e+00 
1.53750 	 2.90669132654200468302e-02 	 1.16933590294412054211e-01 	 1.78231281519004380876e+00 
1.54583 	 2.93482980123865692945e-02 	 1.14818705120154365695e-01 	 1.80458219067443059735e+00 
1.55417 	 2.95691893584315024235e-02 	 1.12897191993464554582e-01 	 1.82521492011694674851e+00 
1.56250 	 2.98689112843973959832e-02 	 1.11093092023666559220e-01 	 1.84738336305075789845e+00 
1.57083 	 3.01146046428084970814e-02 	 1.09035458147821867625e-01 	 1.86856089192722629733e+00 
1.57917 	 3.03987858765929347404e-02 	 1.07382419858586070083e-01 	 1.89075184722658384828e+00 
1.58750 	 3.06645077853261519008e-02 	 1.05541485689788494540e-01 	 1.91452478112926138820e+00 
1.59583 	 3.08956266306757224016e-02 	 1.03760174708373675845e-01 	 1.93593720221142562288e+00 
1.60417 	 3.12048040180540747768e-02 	 1.01848145231030098867e-01 	 1.95698270571530574813e+00 
1.61250 	 3.14793273717420135638e-02 	 1.00180691195065410537e-01 	 1.97742601780467985861e+00 
1.62083 	 3.17702520608720978545e-02 	 9.85025297806077365648e-02 	 2.00004513630669711333e+00 
1.62917 	 3.21045244658689915562e-02 	 9.68777654559235673615e-02 	 2.02205358673511392809e+00 
1.63750 	 3.23696366835148768848e-02 	 9.53829755755767755288e-02 	 2.04389820343310102402e+00 
1.64583 	 3.26567909643298362465e-02 	 9.37228030268459771923e-02 	 2.06559990205255772366e+00 
1.65417 	 3.29210777376027705077e-02 	 9.21458755704378656981e-02 	 2.08597593140122627986e+00 
1.66250 	 3.32495021267430398981e-02 	 9.05911898690823086389e-02 	 2.10787503354834582225e+00 
1.67083 	 3.35583586570038366892e-02 	 8.90981894714337058216e-02 	 2.12784046180770447521e+00 
1.67917 	 3.38411540539269375949e-02 	 8.76549688264847137731e-02 	 2.14909028295948845155e+00 
1.68750 	 3.41735267697744829474e-02 	 8.61336703867926628542e-02 	 2.17019748102704967962e+00 
1.69583 	 3.44292046178518509891e-02 	 8.46671352421861089788e-02 	 2.18946738751194036610e+00 
1.70417 	 3.47518255634914965957e-02 	 8.34116449375361113105e-02 	 2.21066498486317319916e+00 
1.71250 	 3.51130868017823921656e-02 	 8.20031331588180478764e-02 	 2.23180818950124493227e+00 
1.72083 	 3.54456867228260738556e-02 	 8.06558272768531231423e-02 	 2.24884445592237325329e+00 
1.72917 	 3.57544745365649743740e-02 	 7.93399674336919130679e-02 	 2.26847513421190116745e+00 
1.73750 	 3.60954345456878170073e-02 	 7.79745301705983273610e-02 	 2.28496696696571222063e+00 
1.74583 	 3.63894506799385536455e-02 	 7.67543534648974096202e-02 	 2.30186513072895193588e+00 
1.75417 	 3.67203288276671119261e-02 	 7.54426075732426287823e-02 	 2.31841796008848310962e+00 
1.76250 	 3.70364051432662960694e-02 	 7.42197503892907950451e-02 	 2.33350153838085372371e+00 
1.77083 	 3.74146570800946640101e-02 	 7.30428264726710324561e-02 	 2.34877558557145338369e+00 
1.77917 	 3.77828746227799883162e-02 	 7.18835863638913885598e-02 	 2.36464129676328127516e+00 
1.78750 	 3.80905075534884798860e-02 	 7.06986559213863552387e-02 	 2.37702639549151140130e+00 
1.79583 	 3.84259306289178523275e-02 	 6.94550016313255497158e-02 	 2.38718527526285884122e+00 
1.80417 	 3.87749828378384370220e-02 	 6.83621809326765278447e-02 	 2.40224503819983414843e+00 
1.81250 	 3.91258964305882875334e-02 	 6.72393060699764816279e-02 	 2.41043755057088437965e+00 
1.82083 	 3.94788445868777329584e-02 	 6.61601795415481669371e-02 	 2.41972397527482430135e+00 
1.82917 	 3.98356367499492769468e-02 	 6.50876355369014031327e-02 	 2.42723121329166069415e+00 
1.83750 	 4.02356540718001032264e-02 	 6.40525975435814742820e-02 	 2.43358950272857210706e+00 
1.84583 	 4.05196614153919415502e-02 	 6.29519813970478014920e-02 	 2.44060432244601299701e+00 
1.85417 	 4.09025450582175820191e-02 	 6.19172867609129873312e-02 	 2.44259742796464474068e+00 
1.86250 	 4.12932289981963324133e-02 	 6.09758454880726594172e-02 	 2.44692202264417302260e+00 
1.87083 	 4.16655345276205693605e-02 	 5.99954476895712546236e-02 	 2.44653872539778749484e+00 
1.87917 	 4.20037015964635496168e-02 	 5.89869378206885203175e-02 	 2.44531292136098965528e+00 
1.88750 	 4.23728090702692045122e-02 	 5.80650711766623750520e-02 	 2.44065277296081184488e+00 
1.89583 	 4.27663191298159536813e-02 	 5.71422415895430912958e-02 	 2.43764706825496135778e+00 
1.90417 	 4.31162200300367268180e-02 	 5.62370525502406126694e-02 	 2.42815145355795447557e+00 
1.91250 	 4.34277881290581063700e-02 	 5.52965832331897347296e-02 	 2.41947167107023375365e+00 
1.92083 	 4.38248813772806056210e-02 	 5.44579969397280747034e-02 	 2.40879608708253423188e+00 
1.92917 	 4.42049505415962745714e-02 	 5.35163256942769727242e-02 	 2.39282492342402264285e+00 
1.93750 	 4.45537249175205971041e-02 	 5.27000843585577055661e-02 	 2.37807999199099873167e+00 
1.94583 	 4.49081414839679685103e-02 	 5.18253796212692491308e-02 	 2.35697906517937383342e+00 
1.95417 	 4.52289911567091695854e-02 	 5.10437310319610398901e-02 	 2.33432756971795463130e+00 
1.96250 	 4.55759171561693487984e-02 	 5.02367837980042808432e-02 	 2.30934448742960540812e+00 
1.97083 	 4.59248974862650483075e-02 	 4.94116564341228817203e-02 	 2.28245820886942896166e+00 
1.97917 	 4.62525594889381455599e-02 	 4.86103710252222959154e-02 	 2.24696698950597406608e+00 
1.98750 	 4.66038478821701462884e-02 	 4.77988639880586735353e-02 	 2.20658124483537809724e+00 
1.99583 	 4.69212391815944374063e-02 	 4.70500106323623462634e-02 	 1.15766205493550189409e+00 
2.00417 	 3.99596776795061048304e+00 	 3.74152602474802353782e+00 	 7.36079359232632697285e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 10000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);