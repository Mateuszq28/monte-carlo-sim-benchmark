time elapsed: 38.7502 seconds

=================================

sim results:

number of photons = 100000
overflow: 4.90217360593671328388e+04
sum: 5.09781742456925567240e+04
sum: 5.09782639406328671612e+04
avg: 5.09781742456925535123e-01
perc_in: 50.98

number of photons = 100000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 7.68437440649764880174e-02 	 1.60316606237921072120e-01 	 2.69193983375773049360e-01 
0.01250 	 1.98083812055871895386e-02 	 1.67821201505971573376e-01 	 2.68526403656895062966e-01 
0.02083 	 1.78572519526931892953e-02 	 1.70044425921159064741e-01 	 2.69657991676189479069e-01 
0.02917 	 8.89736848160504502359e-03 	 1.61127318254955326227e-01 	 2.73004373378693265817e-01 
0.03750 	 8.48157380169607504061e-03 	 1.56994478719985119941e-01 	 2.69865061294444097406e-01 
0.04583 	 7.38797373008442601061e-03 	 1.61092645839384679407e-01 	 2.67839111677235619524e-01 
0.05417 	 9.69112611382889725664e-03 	 1.65048753537507308931e-01 	 2.70357642907915030062e-01 
0.06250 	 8.18618447985456840210e-03 	 1.60128611113071389616e-01 	 2.73307327543830025363e-01 
0.07083 	 1.17052402286122632369e-02 	 1.62945405284459832185e-01 	 2.71631272164542414416e-01 
0.07917 	 9.87010812031629582164e-03 	 1.62052285972678011827e-01 	 2.70859571938272258862e-01 
0.08750 	 1.07681676485510881974e-02 	 1.65176925128395463149e-01 	 2.76248356484811330436e-01 
0.09583 	 1.06782199432932795036e-02 	 1.61038481244013598204e-01 	 2.70160921776975593289e-01 
0.10417 	 9.16986500948719501780e-03 	 1.64622047617816708032e-01 	 2.74379693031341576059e-01 
0.11250 	 1.07459779025972385763e-02 	 1.63912422994412998456e-01 	 2.76663994391568468512e-01 
0.12083 	 1.05541580034389428228e-02 	 1.59989256230618881460e-01 	 2.71934367264728138469e-01 
0.12917 	 9.62647331760675337153e-03 	 1.62358867990151700678e-01 	 2.74668892238254414018e-01 
0.13750 	 9.90609564730239415542e-03 	 1.66199053977762079004e-01 	 2.75034354796473146099e-01 
0.14583 	 1.09504035870562760335e-02 	 1.67887812220418181086e-01 	 2.73372538930102271237e-01 
0.15417 	 1.08714096890925315808e-02 	 1.65352713294105613251e-01 	 2.76855037835585904293e-01 
0.16250 	 9.90744419631380685010e-03 	 1.66616245682221469915e-01 	 2.78178469544532458446e-01 
0.17083 	 9.30991482241627643646e-03 	 1.67184753204848324248e-01 	 2.80217359513266983662e-01 
0.17917 	 1.03862420597379805781e-02 	 1.63269340093008585857e-01 	 2.80762807847581563614e-01 
0.18750 	 1.04452639805579453741e-02 	 1.67408260754231402734e-01 	 2.84441782158607714415e-01 
0.19583 	 1.08606345390055234607e-02 	 1.62553806554882579460e-01 	 2.83115610855653176969e-01 
0.20417 	 1.10321738875518403356e-02 	 1.66760140388474448203e-01 	 2.87068077712422708991e-01 
0.21250 	 1.03417463920542230388e-02 	 1.67854298333512563790e-01 	 2.87475012397868767700e-01 
0.22083 	 1.07232338544512254691e-02 	 1.70807178759221356401e-01 	 2.90473338733689301350e-01 
0.22917 	 1.16760092772729331262e-02 	 1.67099251284203970114e-01 	 2.87972212373002300900e-01 
0.23750 	 1.12682518502874202959e-02 	 1.67287314552606036777e-01 	 2.92136707288147834394e-01 
0.24583 	 1.14184634364355320352e-02 	 1.69002159116341643674e-01 	 2.88935112054156395534e-01 
0.25417 	 1.19653075968175291038e-02 	 1.70843196896037302634e-01 	 2.90090526130437953434e-01 
0.26250 	 1.11641289786254625099e-02 	 1.67309978345472648575e-01 	 3.00301419339218111926e-01 
0.27083 	 1.17422560562211349133e-02 	 1.66633614727467821437e-01 	 3.00242232080564275254e-01 
0.27917 	 1.17308831387446521610e-02 	 1.72221329504640502384e-01 	 2.99779715765900234281e-01 
0.28750 	 1.15373514789335052111e-02 	 1.70270297535024928148e-01 	 3.00659867811242931257e-01 
0.29583 	 1.13587487491214698260e-02 	 1.72729235974130063136e-01 	 3.08385754159463065793e-01 
0.30417 	 1.16806859574884840114e-02 	 1.75206727396374273287e-01 	 3.05635735754768878003e-01 
0.31250 	 1.15996943768844080341e-02 	 1.74731936251626557288e-01 	 3.10835993725940340493e-01 
0.32083 	 1.08493709591031585460e-02 	 1.73482760826858067871e-01 	 3.13677247463051589449e-01 
0.32917 	 1.13557508917874888654e-02 	 1.75573621864049234098e-01 	 3.14479257796254907387e-01 
0.33750 	 1.22293377153989135664e-02 	 1.77455942283637951862e-01 	 3.18232409085562939488e-01 
0.34583 	 1.18333357932218687786e-02 	 1.76333770358867991668e-01 	 3.23193054563725212791e-01 
0.35417 	 1.20805729245053519727e-02 	 1.75851329168375203338e-01 	 3.20392831888143381214e-01 
0.36250 	 1.16440843409560523120e-02 	 1.77272697210500845832e-01 	 3.25980743299759623266e-01 
0.37083 	 1.20065693034049295745e-02 	 1.76201211270210683635e-01 	 3.27378480112154757187e-01 
0.37917 	 1.18370779689293340042e-02 	 1.78971697529586720732e-01 	 3.30739557636615721936e-01 
0.38750 	 1.22902739248743533146e-02 	 1.79207666044247648784e-01 	 3.32595758446334710534e-01 
0.39583 	 1.22769129942988056842e-02 	 1.79470318502249537307e-01 	 3.39248791671108884671e-01 
0.40417 	 1.20324640755942596781e-02 	 1.78522234274175906066e-01 	 3.41558870175948658954e-01 
0.41250 	 1.20879585085305850389e-02 	 1.81115300014790869820e-01 	 3.41922420572024654550e-01 
0.42083 	 1.18724551746481592901e-02 	 1.83784987285649376032e-01 	 3.43824971584771432731e-01 
0.42917 	 1.21718968685718253314e-02 	 1.84814292954837366967e-01 	 3.49390778184481831659e-01 
0.43750 	 1.22678116435907293147e-02 	 1.86609461286262018342e-01 	 3.51278887862859490188e-01 
0.44583 	 1.25215373927577231644e-02 	 1.85479053857379311276e-01 	 3.56042967488930550690e-01 
0.45417 	 1.24651902834132157633e-02 	 1.86167256856164448076e-01 	 3.62016589758366591489e-01 
0.46250 	 1.25285179560297530582e-02 	 1.87465456034097643911e-01 	 3.60314132341626569556e-01 
0.47083 	 1.26776566741792287574e-02 	 1.87707551959965218691e-01 	 3.66266270954392847425e-01 
0.47917 	 1.26804332479974971731e-02 	 1.89359004299992500497e-01 	 3.67400603050405727412e-01 
0.48750 	 1.29675636677301711619e-02 	 1.89310881555019766553e-01 	 3.71908071793597472254e-01 
0.49583 	 1.28362701698791457916e-02 	 1.93186546611856191369e-01 	 3.76296560444173866511e-01 
0.50417 	 1.27975608452099466616e-02 	 1.91128272323131787047e-01 	 3.77545785931787614143e-01 
0.51250 	 1.29194152765597369825e-02 	 1.93685592791541461022e-01 	 3.85821861198467674914e-01 
0.52083 	 1.33163937032785822251e-02 	 1.95268413493622811083e-01 	 3.84335896097001250560e-01 
0.52917 	 1.26909771386623862477e-02 	 1.98197882925467944171e-01 	 3.87694799870288930865e-01 
0.53750 	 1.30342187101846803537e-02 	 1.96716208037582468426e-01 	 3.93570152928398253600e-01 
0.54583 	 1.26667372872930547589e-02 	 1.96203500506624106681e-01 	 3.95636859990292633071e-01 
0.55417 	 1.31359274758923918330e-02 	 2.01556397219658789410e-01 	 3.95700680693804873744e-01 
0.56250 	 1.28047979099036278450e-02 	 2.02405681305902251932e-01 	 4.03379463763168522039e-01 
0.57083 	 1.27288099397719674938e-02 	 2.01546449693322166086e-01 	 4.07541879990095501363e-01 
0.57917 	 1.29891328105289031308e-02 	 2.06662572460599408553e-01 	 4.09881716896756509438e-01 
0.58750 	 1.30858068875243441220e-02 	 2.05951089221765387682e-01 	 4.15653251474665530463e-01 
0.59583 	 1.31959181148688670798e-02 	 2.07620679623047144080e-01 	 4.21992361082002165329e-01 
0.60417 	 1.30381591413365922894e-02 	 2.08982198939750923872e-01 	 4.25031788166584545419e-01 
0.61250 	 1.35408602111271609419e-02 	 2.09226542971909734714e-01 	 4.30275336990660450809e-01 
0.62083 	 1.33769595902887786926e-02 	 2.12495205167734124707e-01 	 4.38216799736455664416e-01 
0.62917 	 1.36713332608376231248e-02 	 2.12154621316823416288e-01 	 4.36868692554243931436e-01 
0.63750 	 1.35300946809935075665e-02 	 2.12423884724474071328e-01 	 4.48181241297200605445e-01 
0.64583 	 1.38063437426696120069e-02 	 2.13582039300153625483e-01 	 4.55510415740526586337e-01 
0.65417 	 1.38236755967824885560e-02 	 2.16532918808722080195e-01 	 4.54547467887065848036e-01 
0.66250 	 1.39831613503106598484e-02 	 2.18838669093905507923e-01 	 4.60983115398274356789e-01 
0.67083 	 1.36361002635923284770e-02 	 2.22839390568834755380e-01 	 4.65838219467551384323e-01 
0.67917 	 1.37284149574208192562e-02 	 2.22696163640306254994e-01 	 4.70505608978758482763e-01 
0.68750 	 1.39785637752456309846e-02 	 2.25668387239848639014e-01 	 4.81088554351484121163e-01 
0.69583 	 1.38639309575629959131e-02 	 2.24970644381964984815e-01 	 4.77948274499844616425e-01 
0.70417 	 1.40664474369637144957e-02 	 2.27180375540997375738e-01 	 4.84686298373409929496e-01 
0.71250 	 1.40684424040849881399e-02 	 2.29367365571295667159e-01 	 4.89118661169806623334e-01 
0.72083 	 1.40695901543524438948e-02 	 2.32853340933122210377e-01 	 5.05702484006752328582e-01 
0.72917 	 1.43245917609474086168e-02 	 2.33933760435266979716e-01 	 5.00694266497763385004e-01 
0.73750 	 1.42814653440802505346e-02 	 2.38160303229293990324e-01 	 5.13793387346123120452e-01 
0.74583 	 1.44591552346118208672e-02 	 2.37699021091451301313e-01 	 5.14255034058378246442e-01 
0.75417 	 1.40248435177545444780e-02 	 2.39576778380757915432e-01 	 5.25804385517097405689e-01 
0.76250 	 1.44749284197319954409e-02 	 2.45348194104865663379e-01 	 5.29134945240210097239e-01 
0.77083 	 1.43065092099284012911e-02 	 2.47037012011539908185e-01 	 5.37185821809515018366e-01 
0.77917 	 1.50463111687054104659e-02 	 2.50198707980163581599e-01 	 5.39637167528062566824e-01 
0.78750 	 1.48972611059017823187e-02 	 2.50426611953094568896e-01 	 5.54117562977585409456e-01 
0.79583 	 1.49243343150861993568e-02 	 2.56574902537295812532e-01 	 5.58714256370795192552e-01 
0.80417 	 1.51740315306487395103e-02 	 2.55125433139611168532e-01 	 5.66134201680401516477e-01 
0.81250 	 1.51865322961020638576e-02 	 2.58130613823052801337e-01 	 5.73390335462648503828e-01 
0.82083 	 1.45124101582029072649e-02 	 2.63035289916000392108e-01 	 5.79433448292361319432e-01 
0.82917 	 1.52448408828455856528e-02 	 2.66471673186268076527e-01 	 5.87546732348835032411e-01 
0.83750 	 1.50486442942926821470e-02 	 2.65763615647550577314e-01 	 5.94085220273303904470e-01 
0.84583 	 1.52878290193936491881e-02 	 2.74771549445842366843e-01 	 5.98879110881783471854e-01 
0.85417 	 1.55793604074485284722e-02 	 2.74060838311368626385e-01 	 6.03405456973739262594e-01 
0.86250 	 1.57450736960180297241e-02 	 2.82433572572773683440e-01 	 6.10118052826665202559e-01 
0.87083 	 1.60680447917854393736e-02 	 2.83159955754930192651e-01 	 6.17034820043476428530e-01 
0.87917 	 1.56862992511559683206e-02 	 2.87018754775523743383e-01 	 6.27983315649130791058e-01 
0.88750 	 1.61228356370836309330e-02 	 2.92291318433274549538e-01 	 6.39976252007017243351e-01 
0.89583 	 1.60133969233520641329e-02 	 2.98600687893245009263e-01 	 6.46882630254270507564e-01 
0.90417 	 1.63515529631789897913e-02 	 3.03709056969127422221e-01 	 6.62153438356438805990e-01 
0.91250 	 1.66145503719499106066e-02 	 3.07183469927279351186e-01 	 6.68888087809336173706e-01 
0.92083 	 1.65226495799136487153e-02 	 3.15522344849780755904e-01 	 6.67913482487413001643e-01 
0.92917 	 1.66815080086322349573e-02 	 3.20301151998552857680e-01 	 6.80176160356092296411e-01 
0.93750 	 1.67503711268656672873e-02 	 3.30788101112975130302e-01 	 6.90111092146325266761e-01 
0.94583 	 1.66946525315517027566e-02 	 3.37691733494687951200e-01 	 7.06077478195892616064e-01 
0.95417 	 1.70452050900688524548e-02 	 3.45214374625988473788e-01 	 7.09225479875386533024e-01 
0.96250 	 1.72828517567236161767e-02 	 3.54337475957851422148e-01 	 7.23676698117184491466e-01 
0.97083 	 1.70082417158073893881e-02 	 3.64742222230892587653e-01 	 7.32919272237843588691e-01 
0.97917 	 1.68674929963175818104e-02 	 3.76472790078192065533e-01 	 7.40680158353583584230e-01 
0.98750 	 1.73762380904254852554e-02 	 3.92960478222593501130e-01 	 7.42885521968687956296e-01 
0.99583 	 1.77213933465119183319e-02 	 4.10129582255047697714e-01 	 7.58505057337739985179e-01 
1.00417 	 1.74990824094535639410e-02 	 4.33222776380685847819e-01 	 7.66162305301578028249e-01 
1.01250 	 1.75191416499572219512e-02 	 4.62388353785639971694e-01 	 7.73969701142907084979e-01 
1.02083 	 1.81056196450313303115e-02 	 5.07972061031168431455e-01 	 7.83141344012815987519e-01 
1.02917 	 1.79467242188036668615e-02 	 5.67553009091189331059e-01 	 7.92198154169578283579e-01 
1.03750 	 1.81801705857838787062e-02 	 6.85788949161293959200e-01 	 8.02073112732246462642e-01 
1.04583 	 1.84079513086239932029e-02 	 1.98932095300698730256e+00 	 8.18419901434595864487e-01 
1.05417 	 1.85680198091795860271e-02 	 9.26974869583638172443e-01 	 8.24452312573758283598e-01 
1.06250 	 1.84489385687881708720e-02 	 6.31848707244023199969e-01 	 8.48942770399671697845e-01 
1.07083 	 1.85422492029514232592e-02 	 5.33486053349224276232e-01 	 8.58496339303097544260e-01 
1.07917 	 1.84580025270145789418e-02 	 4.76571801135018846551e-01 	 8.63516443341552086821e-01 
1.08750 	 1.85672845428017721514e-02 	 4.36879019682503588751e-01 	 8.72378011305979805812e-01 
1.09583 	 1.89031234983096096958e-02 	 4.07020030369228125178e-01 	 8.91931357531347446255e-01 
1.10417 	 1.91865922014277864860e-02 	 3.83934309922083216726e-01 	 8.87754172567841171038e-01 
1.11250 	 1.91166511256893774384e-02 	 3.64040893938169074495e-01 	 9.07750620705877642180e-01 
1.12083 	 1.92563118196482259414e-02 	 3.49299886737990894492e-01 	 9.33129639579203362665e-01 
1.12917 	 1.94546743066755824236e-02 	 3.32890417445323050227e-01 	 9.27965006736956810052e-01 
1.13750 	 1.92444187379040461405e-02 	 3.19628101013954502019e-01 	 9.44654019274918321791e-01 
1.14583 	 1.93912541091518127179e-02 	 3.11932417335087919241e-01 	 9.49421766176721915187e-01 
1.15417 	 1.99316750696159790401e-02 	 3.00111244285087008787e-01 	 9.66339527711481682815e-01 
1.16250 	 2.00020790292236329277e-02 	 2.93519804815624840710e-01 	 9.81145330384216918240e-01 
1.17083 	 2.03354771278403609336e-02 	 2.81212437016220784258e-01 	 1.00405839314329026202e+00 
1.17917 	 2.02890721952723174226e-02 	 2.74285568662066492340e-01 	 1.01911108552381368675e+00 
1.18750 	 2.02825552609313987384e-02 	 2.67352806313024105034e-01 	 1.02486016150736158892e+00 
1.19583 	 2.06818077998794092043e-02 	 2.61526097879174856953e-01 	 1.04035616076460168955e+00 
1.20417 	 2.08858258630577262038e-02 	 2.54852907170820708327e-01 	 1.06153302121158810145e+00 
1.21250 	 2.10894627087101042828e-02 	 2.49087372989067606932e-01 	 1.06593434234153994211e+00 
1.22083 	 2.11778351321255491058e-02 	 2.41102456815392746092e-01 	 1.09239274965491572900e+00 
1.22917 	 2.14720759845481064254e-02 	 2.35589301084232122241e-01 	 1.08911766797041353882e+00 
1.23750 	 2.18101399388170164029e-02 	 2.29124371242879903976e-01 	 1.09966149870925411491e+00 
1.24583 	 2.22674038427825293773e-02 	 2.25527597188673906148e-01 	 1.12022718761457285019e+00 
1.25417 	 2.21934704838404571470e-02 	 2.21087028852200051521e-01 	 1.13572857083424860747e+00 
1.26250 	 2.19850821173441235423e-02 	 2.15691228470429735564e-01 	 1.15201904467410254362e+00 
1.27083 	 2.21201313539582666845e-02 	 2.09532462574822053725e-01 	 1.16574679209231923949e+00 
1.27917 	 2.26659155804103812359e-02 	 2.07786669522600553339e-01 	 1.18791835548460245064e+00 
1.28750 	 2.27096416850450615044e-02 	 2.01695399467265140681e-01 	 1.20275507032670936347e+00 
1.29583 	 2.29604944712245677418e-02 	 1.95654202372174457203e-01 	 1.21655294231481025946e+00 
1.30417 	 2.29280632273760193174e-02 	 1.92774244799704036479e-01 	 1.25224784230688790387e+00 
1.31250 	 2.31456103772439379662e-02 	 1.88564157839531648664e-01 	 1.25080808516777586270e+00 
1.32083 	 2.32203700205396504352e-02 	 1.87820016753607405002e-01 	 1.27749540398238958794e+00 
1.32917 	 2.37433713955828608333e-02 	 1.82525189547636607079e-01 	 1.28919475351258094875e+00 
1.33750 	 2.38573803807551783340e-02 	 1.80284582852793945351e-01 	 1.30460193610608743420e+00 
1.34583 	 2.40530558993381632371e-02 	 1.76929857223310699199e-01 	 1.32806533549069216704e+00 
1.35417 	 2.38255863017079252963e-02 	 1.71894651494667483060e-01 	 1.34884827480211022532e+00 
1.36250 	 2.45607385960043382578e-02 	 1.70096118780055760578e-01 	 1.36810503146012885090e+00 
1.37083 	 2.51619787906172814873e-02 	 1.67921425515947214668e-01 	 1.37807102466268860397e+00 
1.37917 	 2.51618071515981762964e-02 	 1.63034017054413643555e-01 	 1.38851887817669372716e+00 
1.38750 	 2.53610151055868419945e-02 	 1.59305908594972539527e-01 	 1.42270313049544894213e+00 
1.39583 	 2.57662152518404116708e-02 	 1.56656121180891672040e-01 	 1.43562333316733869992e+00 
1.40417 	 2.54722049748508372335e-02 	 1.54227071261403309022e-01 	 1.47031903465260516128e+00 
1.41250 	 2.57050215941076048987e-02 	 1.52747037888892378543e-01 	 1.47681655268956135707e+00 
1.42083 	 2.60177759719417735218e-02 	 1.48716188983204294916e-01 	 1.49818677881308515154e+00 
1.42917 	 2.61005938947588972399e-02 	 1.46711475209685054955e-01 	 1.51781468290776988539e+00 
1.43750 	 2.63740368149947349008e-02 	 1.45196177585776742269e-01 	 1.53240877718967039023e+00 
1.44583 	 2.66574799450706306780e-02 	 1.42540140023570793826e-01 	 1.56081259638841851611e+00 
1.45417 	 2.70338389984400018218e-02 	 1.39476126715181308890e-01 	 1.57784309615815598882e+00 
1.46250 	 2.72019611032586691723e-02 	 1.36783000948848126876e-01 	 1.59711868629312880863e+00 
1.47083 	 2.73257485200309735429e-02 	 1.34146028082263779613e-01 	 1.60904944630263613270e+00 
1.47917 	 2.76905158644278372171e-02 	 1.31325176243777236307e-01 	 1.64819765773823734278e+00 
1.48750 	 2.79816842888525839361e-02 	 1.29912782309230673272e-01 	 1.67594276365032390785e+00 
1.49583 	 2.81349307551040372921e-02 	 1.26587214959279020787e-01 	 1.68274616551271782861e+00 
1.50417 	 2.81858328327351179143e-02 	 1.24687191189145687997e-01 	 1.70469349378021983732e+00 
1.51250 	 2.85833454803113597154e-02 	 1.24022608990202259927e-01 	 1.73277133638163571838e+00 
1.52083 	 2.85320904575206632514e-02 	 1.20408621285956543567e-01 	 1.74051068717357226845e+00 
1.52917 	 2.90535593530452766753e-02 	 1.19482310697609506178e-01 	 1.76242169437566320589e+00 
1.53750 	 2.90545650604095428982e-02 	 1.17342699484882351246e-01 	 1.77734868049888472541e+00 
1.54583 	 2.90958795111953931467e-02 	 1.15163469949607383258e-01 	 1.79159328523062111316e+00 
1.55417 	 2.96131428542046395980e-02 	 1.12420856347175579515e-01 	 1.80980108709690901136e+00 
1.56250 	 2.99630478910918492119e-02 	 1.10291399079572624564e-01 	 1.82805380904061531844e+00 
1.57083 	 3.03187414457814150004e-02 	 1.09566109623356625069e-01 	 1.87662971698088520967e+00 
1.57917 	 3.07041195379737751059e-02 	 1.08004471654876338382e-01 	 1.89397221255662384642e+00 
1.58750 	 3.10056226335168085007e-02 	 1.05642647045066623290e-01 	 1.91217526080631383678e+00 
1.59583 	 3.09453877728588233609e-02 	 1.04940480932903382194e-01 	 1.92999016850060822748e+00 
1.60417 	 3.12528229986029082443e-02 	 1.03582080474090468258e-01 	 1.94762367538801983713e+00 
1.61250 	 3.17795195995951504364e-02 	 1.00391835711275551057e-01 	 1.96587021883402024436e+00 
1.62083 	 3.17412333083135073108e-02 	 9.94014913282070117218e-02 	 1.99116473407735283807e+00 
1.62917 	 3.17751172505463461149e-02 	 9.65872413434821081024e-02 	 2.02729590464542397399e+00 
1.63750 	 3.21614650330925358479e-02 	 9.47994455592355705909e-02 	 2.04168568224903612673e+00 
1.64583 	 3.26504243595088783358e-02 	 9.44035960872054991100e-02 	 2.06602144789190678154e+00 
1.65417 	 3.29091763610795604023e-02 	 9.35287209953930692707e-02 	 2.09941689625487892812e+00 
1.66250 	 3.33656311311768122296e-02 	 9.08249000347613466566e-02 	 2.10673393602967884419e+00 
1.67083 	 3.35384308766905128718e-02 	 8.92317004600414881432e-02 	 2.11584166464055689616e+00 
1.67917 	 3.37605922468321162366e-02 	 8.85315192624364921681e-02 	 2.15919156631511688360e+00 
1.68750 	 3.40839178906565329341e-02 	 8.66533975806905165662e-02 	 2.17676713069190963523e+00 
1.69583 	 3.42580043545914203484e-02 	 8.46152370879203336029e-02 	 2.19789566653968870824e+00 
1.70417 	 3.46530081750493837434e-02 	 8.34368945471412604142e-02 	 2.20259700285946857790e+00 
1.71250 	 3.50623717543255691842e-02 	 8.22127505129615493429e-02 	 2.23361753457794787181e+00 
1.72083 	 3.55485458142239599266e-02 	 8.16096163664647988867e-02 	 2.24193028629452006939e+00 
1.72917 	 3.58673850332685423270e-02 	 7.92935999818942388595e-02 	 2.25850409378007332961e+00 
1.73750 	 3.60477179347684500987e-02 	 7.75050785508313577754e-02 	 2.28153478096408734999e+00 
1.74583 	 3.64414700893959664363e-02 	 7.66217990412966093450e-02 	 2.29543663861770452783e+00 
1.75417 	 3.67166834784511814105e-02 	 7.46689096589228384904e-02 	 2.31871167824040602667e+00 
1.76250 	 3.70695946011937310649e-02 	 7.38034934693099636815e-02 	 2.33416579680437674682e+00 
1.77083 	 3.73991868226453347268e-02 	 7.23179108828259226138e-02 	 2.34777462354384702792e+00 
1.77917 	 3.73560465781614253755e-02 	 7.17039778077697281811e-02 	 2.34905528273667085770e+00 
1.78750 	 3.82179312065245996299e-02 	 7.02267538047898348674e-02 	 2.35924630115796762908e+00 
1.79583 	 3.86090343448287354189e-02 	 6.99194878381892565011e-02 	 2.37330054659348554935e+00 
1.80417 	 3.87110121945607177363e-02 	 6.94318414722725207877e-02 	 2.38064518462499830065e+00 
1.81250 	 3.89431418313080576765e-02 	 6.74935597037639584128e-02 	 2.40938387970147616102e+00 
1.82083 	 4.00407196422174690986e-02 	 6.61976668197881562561e-02 	 2.41951604221062632760e+00 
1.82917 	 4.01205830000595856100e-02 	 6.53727335518818342130e-02 	 2.42072755000622663601e+00 
1.83750 	 3.97034827417438937469e-02 	 6.45974618313205073417e-02 	 2.42089956850165233249e+00 
1.84583 	 4.08325589749657172356e-02 	 6.32093177774169096006e-02 	 2.43441248344015948035e+00 
1.85417 	 4.09570479859120567534e-02 	 6.22672611731446765115e-02 	 2.44433546515275335054e+00 
1.86250 	 4.11808661299100237096e-02 	 6.20398356314314364246e-02 	 2.44027744925854772617e+00 
1.87083 	 4.15785244321533256628e-02 	 5.97770429334502986785e-02 	 2.43997105805596792294e+00 
1.87917 	 4.21739633375336764320e-02 	 5.95478681255665331928e-02 	 2.43716244612576415918e+00 
1.88750 	 4.22799417484679695978e-02 	 5.89582568680047103271e-02 	 2.43888012891651717595e+00 
1.89583 	 4.26596945482215425538e-02 	 5.75783705950286134323e-02 	 2.44009523067689260145e+00 
1.90417 	 4.29241926469934725885e-02 	 5.71964207840586214004e-02 	 2.44096289424756385245e+00 
1.91250 	 4.30725395633788088467e-02 	 5.58867093666834888199e-02 	 2.43318982675158190787e+00 
1.92083 	 4.35612930416818047719e-02 	 5.51476873166094963552e-02 	 2.43180262705785876776e+00 
1.92917 	 4.41687231537973429285e-02 	 5.43431301910382510978e-02 	 2.38536043750278592412e+00 
1.93750 	 4.45360082085877809210e-02 	 5.29519722707290224628e-02 	 2.37014379482325177051e+00 
1.94583 	 4.46023785539466505190e-02 	 5.24562959802902309403e-02 	 2.36873593210295574352e+00 
1.95417 	 4.53388459792432862994e-02 	 5.07714933294287282251e-02 	 2.32377387893492981519e+00 
1.96250 	 4.57578139766770461416e-02 	 5.05603505124771618329e-02 	 2.31108934660902010094e+00 
1.97083 	 4.59838577378804541640e-02 	 4.89642109510742343237e-02 	 2.29138270379839603663e+00 
1.97917 	 4.63260949783282499626e-02 	 4.85843094203522313235e-02 	 2.26831087451721202797e+00 
1.98750 	 4.62842789052430661489e-02 	 4.81530618026335607840e-02 	 2.21510649667222425663e+00 
1.99583 	 4.71577886708561336282e-02 	 4.74598429816530317793e-02 	 1.15234070855301018454e+00 
2.00417 	 3.99245587685010949741e+00 	 3.72441511241724665382e+00 	 7.35217448423712767180e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   1.0E-4		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1e5; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);