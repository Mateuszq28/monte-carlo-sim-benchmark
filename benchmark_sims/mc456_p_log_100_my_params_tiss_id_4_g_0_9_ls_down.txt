time elapsed: 10.6910 seconds

=================================

sim results:

number of photons = 100
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 1.69150412042150699587e-01 
0.01250 	 0.00000000000000000000e+00 	 3.79268644395200416053e-01 	 1.15620088873319051825e-01 
0.02083 	 0.00000000000000000000e+00 	 6.16207604007752776654e-02 	 1.08757099993444156238e-01 
0.02917 	 0.00000000000000000000e+00 	 6.97987514290144828166e-02 	 1.61458060650774448685e-01 
0.03750 	 0.00000000000000000000e+00 	 1.52420854384592713293e-01 	 1.16256778360768475711e-01 
0.04583 	 0.00000000000000000000e+00 	 7.01081120064030727246e-02 	 2.03665794629487389988e-01 
0.05417 	 0.00000000000000000000e+00 	 5.58457889892757658457e-02 	 1.91573980798574405870e-01 
0.06250 	 0.00000000000000000000e+00 	 4.80764780127273416710e-01 	 2.35440381309154678213e-01 
0.07083 	 0.00000000000000000000e+00 	 3.69993000686510142838e-01 	 1.50480911574625259020e-01 
0.07917 	 0.00000000000000000000e+00 	 4.26411636609062005832e-01 	 1.98532799018598715701e-01 
0.08750 	 0.00000000000000000000e+00 	 5.73978908621547878610e-01 	 2.03659835876646183594e-01 
0.09583 	 0.00000000000000000000e+00 	 5.20715381323633486055e-01 	 1.92328225588572016003e-01 
0.10417 	 0.00000000000000000000e+00 	 1.98612765563903614918e-01 	 1.97888287584865901758e-01 
0.11250 	 0.00000000000000000000e+00 	 5.08047231597434478800e-01 	 1.48103233264496592092e-01 
0.12083 	 0.00000000000000000000e+00 	 4.62876137530107867324e-01 	 1.16591231274590839684e-01 
0.12917 	 0.00000000000000000000e+00 	 2.74944367316903248710e-01 	 1.47835739178150543660e-01 
0.13750 	 1.12082446236335231404e-01 	 4.81931785329094253267e-01 	 1.97742547349733815976e-01 
0.14583 	 0.00000000000000000000e+00 	 3.27352078826375292309e-01 	 1.93971684048420411894e-01 
0.15417 	 2.14462091598819001859e-02 	 1.38293799863554917051e-01 	 1.74527861431895997546e-01 
0.16250 	 2.08448869474231086862e-02 	 3.23634707237781149569e-01 	 2.49405324541175116293e-01 
0.17083 	 1.91529643026647454496e-02 	 1.72014144149033959552e-01 	 1.51308707204074549546e-01 
0.17917 	 1.56365925490995968938e-02 	 2.03932111333294419087e-01 	 1.89136478579583017234e-01 
0.18750 	 1.61455795838687972410e-02 	 3.46190760670255226472e-01 	 2.26833017689725191524e-01 
0.19583 	 0.00000000000000000000e+00 	 3.04218483796569405531e-01 	 1.43399783351564863443e-01 
0.20417 	 0.00000000000000000000e+00 	 2.73910623841995770622e-01 	 2.09141375362104586788e-01 
0.21250 	 2.65303803007636840317e-02 	 3.12053981420762294174e-01 	 1.57962397751242933364e-01 
0.22083 	 2.45716697730388039522e-02 	 2.05626959457105379370e-01 	 1.81759102329494603989e-01 
0.22917 	 6.08419361890333160181e-02 	 2.08381816548195736294e-01 	 1.82569425703805382488e-01 
0.23750 	 3.09644114748696686057e-02 	 1.70482094561862695947e-01 	 2.21527469802159565626e-01 
0.24583 	 1.02996951631099051272e-02 	 2.15040394618861152587e-01 	 2.03342024764741197140e-01 
0.25417 	 7.09984631168528723677e-02 	 2.60179896750509509484e-01 	 2.22573906041204194750e-01 
0.26250 	 5.32677690634483086418e-02 	 1.42055603195596541477e-01 	 3.38680351189583617177e-01 
0.27083 	 2.75465133865154532256e-02 	 1.99753644590159373795e-01 	 2.44801131904920893367e-01 
0.27917 	 3.60088683002787526832e-02 	 2.70513534400130817303e-01 	 2.82270054364492040122e-01 
0.28750 	 4.00182293685308956843e-02 	 2.38118844839516896617e-01 	 3.39173546542752391009e-01 
0.29583 	 5.67981237251092216378e-02 	 1.27732387402074654137e-01 	 2.82896983325211293092e-01 
0.30417 	 2.37422701133172160681e-02 	 2.57080219936891674060e-01 	 2.13698816475247743707e-01 
0.31250 	 4.90787708686712051409e-02 	 1.03295147866244343970e-01 	 2.66273936522701148988e-01 
0.32083 	 7.27187489553319642982e-03 	 1.45130264489982396814e-01 	 2.66899029840398760438e-01 
0.32917 	 0.00000000000000000000e+00 	 1.79577416578807880221e-01 	 2.21343986733923636656e-01 
0.33750 	 9.95134044443066016761e-03 	 1.06541719175207522108e-01 	 2.94607555719499147884e-01 
0.34583 	 8.57307176824383468383e-03 	 1.59359350127887849924e-01 	 2.29826509658435818029e-01 
0.35417 	 3.29793987023414558735e-02 	 1.96686377794349526171e-01 	 3.41550146326670134300e-01 
0.36250 	 6.86358459101249224893e-03 	 1.52016973615591438618e-01 	 3.67924516704047743776e-01 
0.37083 	 1.64746703077019440720e-02 	 2.58060945820490605929e-01 	 2.73807821270603657382e-01 
0.37917 	 3.38568334471900118238e-03 	 1.48223768753003415366e-01 	 1.95318482197121390254e-01 
0.38750 	 3.72252664964498091241e-03 	 1.83752392662778957222e-01 	 1.58172238848951179913e-01 
0.39583 	 1.55627961752058917300e-02 	 1.73275594646238872976e-01 	 2.41417406564716996442e-01 
0.40417 	 3.58331599194228233099e-03 	 2.25809339492405253269e-01 	 1.79788054417975434740e-01 
0.41250 	 0.00000000000000000000e+00 	 2.28498917570115117615e-01 	 2.74567849187320300874e-01 
0.42083 	 1.34758834460000868211e-02 	 2.47351805366591182000e-01 	 3.02456979349951249336e-01 
0.42917 	 2.08938530906467787029e-02 	 1.78715513396216274522e-01 	 3.13805878806921512147e-01 
0.43750 	 8.40083089100473676125e-03 	 2.61981567955650307411e-01 	 4.18084931518594715705e-01 
0.44583 	 1.56042234918869066052e-02 	 2.05448893236625462766e-01 	 3.77365236894806832524e-01 
0.45417 	 5.49539135223546526543e-03 	 2.16681710097369695234e-01 	 4.24228858458565949441e-01 
0.46250 	 1.13445404338942019973e-02 	 2.00629830027702904527e-01 	 3.62911303076670965773e-01 
0.47083 	 1.16314278213785291666e-02 	 3.22735266635921447254e-01 	 2.40689426340598588983e-01 
0.47917 	 1.06569149466702716572e-02 	 3.03028321820035806411e-01 	 4.72883561435050780997e-01 
0.48750 	 1.87527978491760782820e-02 	 1.75781850610025824899e-01 	 3.40144781712600929868e-01 
0.49583 	 5.98731250293739816759e-03 	 2.41515960188501715988e-01 	 4.36700355114080340790e-01 
0.50417 	 2.00486901084223935465e-02 	 1.73714931836129293785e-01 	 4.13742359729598885298e-01 
0.51250 	 7.38623599069617928214e-03 	 2.23343226544071626893e-01 	 2.71308840278909557675e-01 
0.52083 	 7.73809602475273358019e-03 	 1.62206543269184766398e-01 	 3.73019154502885197378e-01 
0.52917 	 1.40175565287224104978e-03 	 1.56197692606940746751e-01 	 2.64105329379374198506e-01 
0.53750 	 0.00000000000000000000e+00 	 2.28099449200257597958e-01 	 2.43213540428408037108e-01 
0.54583 	 7.66993898210749456418e-03 	 1.99872445931504938432e-01 	 4.59748831231962029609e-01 
0.55417 	 1.29960907388289234610e-02 	 1.16924909555150099982e-01 	 3.38270830324770455100e-01 
0.56250 	 0.00000000000000000000e+00 	 2.79054572328471528486e-01 	 4.45473339166419179946e-01 
0.57083 	 1.71183321638388973029e-02 	 1.99666259013751928864e-01 	 5.65472417217212974805e-01 
0.57917 	 1.72103227387219621936e-02 	 1.86371184152433394532e-01 	 6.14552527077682708700e-01 
0.58750 	 1.88849149304742922745e-03 	 2.54463431007696194719e-01 	 5.78897853421608044044e-01 
0.59583 	 1.45760561938437626511e-02 	 2.02664905246892373958e-01 	 3.46313038164071884673e-01 
0.60417 	 1.79592929005965330769e-02 	 2.12717439474782110675e-01 	 3.94984243506355192643e-01 
0.61250 	 1.41427549285392546025e-02 	 2.15820270291763760540e-01 	 3.60239318694247523389e-01 
0.62083 	 1.77094708531288277248e-03 	 1.89871147105485277296e-01 	 5.13399007736527357437e-01 
0.62917 	 0.00000000000000000000e+00 	 1.68683781594907211687e-01 	 3.69932914276036695078e-01 
0.63750 	 2.09617874110108043384e-02 	 2.70991551740333347364e-01 	 3.88469008062330312114e-01 
0.64583 	 9.54226567453674012764e-03 	 2.93686727879228282045e-01 	 3.21905762189365063364e-01 
0.65417 	 4.50526130203317710238e-03 	 1.99480812064439905207e-01 	 4.87595129830850848585e-01 
0.66250 	 8.65930749982787850705e-03 	 3.21035872388846788006e-01 	 5.63764684645645552941e-01 
0.67083 	 2.22741035036312000697e-03 	 2.11071293161315787223e-01 	 4.12196789045437161914e-01 
0.67917 	 3.17291911231724638870e-03 	 2.63345800780088235005e-01 	 4.61816019538059563398e-01 
0.68750 	 1.09765545854856143293e-02 	 2.89932109212506394780e-01 	 4.21641164178928107287e-01 
0.69583 	 6.80719466534847154893e-03 	 2.33845055302281668030e-01 	 3.55548910732661260781e-01 
0.70417 	 9.40446211282476053628e-03 	 2.85312655573464246661e-01 	 5.96619342164519173011e-01 
0.71250 	 8.97202848265621355495e-03 	 2.76513727689560284695e-01 	 4.65217659163288443924e-01 
0.72083 	 8.53680055137826833411e-03 	 2.67947970965990878156e-01 	 3.58013864036028972571e-01 
0.72917 	 1.13505941964069084066e-02 	 2.28415940707136638776e-01 	 4.54578938527090303801e-01 
0.73750 	 2.08260760363079971969e-02 	 2.32893221447793924428e-01 	 4.05930077502228647823e-01 
0.74583 	 8.64856366447121216456e-03 	 2.93881101267187083703e-01 	 4.73902113928409585153e-01 
0.75417 	 9.37286471068192288125e-03 	 2.42594985836518894917e-01 	 4.95624515925527531213e-01 
0.76250 	 4.61332729325737884996e-03 	 3.56168349286966723355e-01 	 5.95755815862064275201e-01 
0.77083 	 2.83620715015546389498e-03 	 2.47613579900255065258e-01 	 5.60467558135840482336e-01 
0.77917 	 1.02257037595218404358e-02 	 2.78206821800784487309e-01 	 4.30478246589866442307e-01 
0.78750 	 1.01880913980467655011e-02 	 2.20898228375874361440e-01 	 3.94646357178666751242e-01 
0.79583 	 1.05859588310151988416e-02 	 3.49815855473448400481e-01 	 4.68704870131091577701e-01 
0.80417 	 1.38851029792337789942e-02 	 4.21239830001705506390e-01 	 4.43432948518338587718e-01 
0.81250 	 2.34408008998099291753e-02 	 2.86649573220479236824e-01 	 5.87243380188879893211e-01 
0.82083 	 7.41812247780310966144e-03 	 3.48199443132211627905e-01 	 4.92228155450876336818e-01 
0.82917 	 4.99314461506159771448e-03 	 2.28414147020736535421e-01 	 2.00965953588561674348e-01 
0.83750 	 1.52782070937354762241e-02 	 2.80551378883449109569e-01 	 2.90659036699928541303e-01 
0.84583 	 1.50888448433124013753e-02 	 1.92749704483348299755e-01 	 4.28995634760482191794e-01 
0.85417 	 1.95868987351267009878e-02 	 2.33502880963311232332e-01 	 4.04640654271658517516e-01 
0.86250 	 6.70563803177660032462e-03 	 3.26994221264696571794e-01 	 6.13353006999742378369e-01 
0.87083 	 1.37160910755089286706e-02 	 3.80721153324340755297e-01 	 4.74858144581885965874e-01 
0.87917 	 2.10788208255016894233e-02 	 3.16978122579257726166e-01 	 6.53747963103424867271e-01 
0.88750 	 2.10985910983336362456e-02 	 3.25772346526851275250e-01 	 4.11583970467129856008e-01 
0.89583 	 2.48670041584582342253e-02 	 3.68045680021761356659e-01 	 6.66007272777847658674e-01 
0.90417 	 2.42212733236474367371e-02 	 3.61215773816224383630e-01 	 5.56603311599489281036e-01 
0.91250 	 1.88743247353824611379e-02 	 3.21546433974541523426e-01 	 4.97419146740846807031e-01 
0.92083 	 2.84591376121555439394e-02 	 3.61617339533485737668e-01 	 4.44169313324373538077e-01 
0.92917 	 2.47066051374128861640e-02 	 4.45990842775392581920e-01 	 5.02632763493185308334e-01 
0.93750 	 2.72229993558017434319e-02 	 3.28386316604996064683e-01 	 5.51885504779874080938e-01 
0.94583 	 2.56432852934728276739e-02 	 3.22494608411590888419e-01 	 3.90370112812054637086e-01 
0.95417 	 2.64075772382291809603e-02 	 3.11312714870140061496e-01 	 2.91147449463950935833e-01 
0.96250 	 1.89375902589489532313e-02 	 3.28232743915992941641e-01 	 4.92147749580291615779e-01 
0.97083 	 1.65714399541657363135e-02 	 3.59674576835042503209e-01 	 7.49664649721990095088e-01 
0.97917 	 1.36192365019789148745e-02 	 2.69776082863650790156e-01 	 6.06118886353937291744e-01 
0.98750 	 1.94562123191765259933e-02 	 3.17801117934906784956e-01 	 5.10042590176754240261e-01 
0.99583 	 2.24373765395975144354e-02 	 3.41725171407200545293e-01 	 8.19988347271802475724e-01 
1.00417 	 3.17621327864201705160e-02 	 3.88848960082687489237e-01 	 6.22913432853177018167e-01 
1.01250 	 2.24718613367527256242e-02 	 3.87979235820577250671e-01 	 7.31142724557685919073e-01 
1.02083 	 3.07544431709764719274e-02 	 3.23292277590787491270e-01 	 7.16944535275710115307e-01 
1.02917 	 2.64127306260039176888e-02 	 5.18787071446385916751e-01 	 6.54659978741674919434e-01 
1.03750 	 2.14319772478247967673e-02 	 7.34348170521955889711e-01 	 7.12279603419889384419e-01 
1.04583 	 2.32065592240515497502e-02 	 2.00449173968447524885e+00 	 6.06055953239813094413e-01 
1.05417 	 2.43395005336451385192e-02 	 8.35102167226860925275e-01 	 6.10534860825317160504e-01 
1.06250 	 1.58289191060507691833e-02 	 5.98980825695358598537e-01 	 5.85522487659171586571e-01 
1.07083 	 1.47400023571225800845e-02 	 5.87884994585943121415e-01 	 8.92309531617099582768e-01 
1.07917 	 1.69394335009082318277e-02 	 5.74753072012046506423e-01 	 6.59883743183846571689e-01 
1.08750 	 1.47397276602768446951e-02 	 5.77202757040876868189e-01 	 7.76965928109341841257e-01 
1.09583 	 7.81775794454505311426e-03 	 4.42732290191360233766e-01 	 7.18518230048011297129e-01 
1.10417 	 1.32718361815341249349e-02 	 4.63730581397415186906e-01 	 8.60390195137833435624e-01 
1.11250 	 1.52423796318343698908e-02 	 3.49953684160290212635e-01 	 9.20015225431208061302e-01 
1.12083 	 2.35706459746567939528e-02 	 4.11911371179726149006e-01 	 7.71583262448374607168e-01 
1.12917 	 1.96270451470671111749e-02 	 4.09267171207868651894e-01 	 1.18968265385501825726e+00 
1.13750 	 1.80653677018096162077e-02 	 4.11187632240879619161e-01 	 1.08142298050860796721e+00 
1.14583 	 1.51669483392868099936e-02 	 3.23989703033428277923e-01 	 9.29669022973980796465e-01 
1.15417 	 2.07937091792111047872e-02 	 3.96247256655314739060e-01 	 9.01624023508808658534e-01 
1.16250 	 2.51057888265191313237e-02 	 3.85870505823563858527e-01 	 6.30778175071563973475e-01 
1.17083 	 2.93561169615849763825e-02 	 2.83821647484202133072e-01 	 1.24294783369927963612e+00 
1.17917 	 2.04824283079719643430e-02 	 2.64845307922866257666e-01 	 1.43865206495791997376e+00 
1.18750 	 3.23219013497550583525e-02 	 2.69803216613531737789e-01 	 1.41057993045156582212e+00 
1.19583 	 2.98214637509468839804e-02 	 2.96461216755874557016e-01 	 1.38785075612064057182e+00 
1.20417 	 2.87796337691337798803e-02 	 2.28860496137785363047e-01 	 1.05114245931911387544e+00 
1.21250 	 2.68505775938226234900e-02 	 2.50987822801874815859e-01 	 1.08468497138242025990e+00 
1.22083 	 2.18160223412535922427e-02 	 2.11145427034710370107e-01 	 8.51022194358644679113e-01 
1.22917 	 1.97830463914393586689e-02 	 2.09816548402616293023e-01 	 6.02925128240685004322e-01 
1.23750 	 1.97114532775392072017e-02 	 2.28168731204377334132e-01 	 1.18441062345538550282e+00 
1.24583 	 1.61727768690018251785e-02 	 2.93844578808955259053e-01 	 1.22259334611832559681e+00 
1.25417 	 2.59783501904666813687e-02 	 1.83656135435400630351e-01 	 1.01286950863567626335e+00 
1.26250 	 1.86024301217066131975e-02 	 2.10792240915951611946e-01 	 7.78127562460522281818e-01 
1.27083 	 1.72712240570737501910e-02 	 2.30811771819261130068e-01 	 1.15859549275971174254e+00 
1.27917 	 1.50176374762053636835e-02 	 1.37262821683210134438e-01 	 1.13140993617598817345e+00 
1.28750 	 2.51156951184838515834e-02 	 1.88730545300026447686e-01 	 1.33601436380403648663e+00 
1.29583 	 1.99182316729519248710e-02 	 1.64774694566592605494e-01 	 1.15588114354419291274e+00 
1.30417 	 2.38764623399782757729e-02 	 1.80839477419974470340e-01 	 1.08248822287088164451e+00 
1.31250 	 2.91823921997961463481e-02 	 2.02282817652251839524e-01 	 1.58278731237250669395e+00 
1.32083 	 2.60255580621692635124e-02 	 1.83222697011884594342e-01 	 1.42244199468216292459e+00 
1.32917 	 3.03035431210816851022e-02 	 1.60854190573254646202e-01 	 1.59602694947582501861e+00 
1.33750 	 3.15989697851813272633e-02 	 1.67620466990492988923e-01 	 1.38428528757911850633e+00 
1.34583 	 3.10710955313581761728e-02 	 1.36760154379922532764e-01 	 1.32193209198089389744e+00 
1.35417 	 2.02529703996312503145e-02 	 1.89836748488925510792e-01 	 1.59875251362962922386e+00 
1.36250 	 2.20693822784557222572e-02 	 1.12912764315519040248e-01 	 1.51142846704704281180e+00 
1.37083 	 2.05884344851213103855e-02 	 1.03704753196368335000e-01 	 1.67744781764995121165e+00 
1.37917 	 3.24720483287418634766e-02 	 1.41640387680747131816e-01 	 1.38609122154037711638e+00 
1.38750 	 3.69741686969428245968e-02 	 1.29775901036355140183e-01 	 1.49451615759069755818e+00 
1.39583 	 3.66133790277126947021e-02 	 1.18900800345164703309e-01 	 1.74685451726621754354e+00 
1.40417 	 3.90849708144327609438e-02 	 1.20304185723632564575e-01 	 1.23211015964007741808e+00 
1.41250 	 2.75051625228020617253e-02 	 1.64150409814077802295e-01 	 1.32567226465067289354e+00 
1.42083 	 3.70841212208856407795e-02 	 1.45078609178495049337e-01 	 1.86681714599626369377e+00 
1.42917 	 3.33846410288554454326e-02 	 1.17124555258080700892e-01 	 1.86550567510202958132e+00 
1.43750 	 3.59549860485850539260e-02 	 1.11682601151039576082e-01 	 1.95047777636507380095e+00 
1.44583 	 2.73659942324176799766e-02 	 1.61827670593372108243e-01 	 1.91142332523665792188e+00 
1.45417 	 2.57519774807195463151e-02 	 1.16842363737949206381e-01 	 2.13981912997913648056e+00 
1.46250 	 3.02173596759652586530e-02 	 1.21085151724274489582e-01 	 2.30590965682992532493e+00 
1.47083 	 3.07052382196375470147e-02 	 1.23164510785736008858e-01 	 2.03037898912402647866e+00 
1.47917 	 2.63674978406344892590e-02 	 1.34528393832849035849e-01 	 2.29291595551042126644e+00 
1.48750 	 2.13531031591492614918e-02 	 1.06815651849746659496e-01 	 1.68357709210618788909e+00 
1.49583 	 3.11185619512681851950e-02 	 1.18178043306254434985e-01 	 2.00849215952552517805e+00 
1.50417 	 3.03718751657300334301e-02 	 1.68698242839394274561e-01 	 1.84219916279540618653e+00 
1.51250 	 2.15828664309909365460e-02 	 1.05654046085247213527e-01 	 1.53703693544235164836e+00 
1.52083 	 2.47153628561408503228e-02 	 9.87290648087897626528e-02 	 2.21914132951201592547e+00 
1.52917 	 2.72320899029519884749e-02 	 8.33922970165350690985e-02 	 1.74153588893518684877e+00 
1.53750 	 2.84901214312062514566e-02 	 1.05504029141352803634e-01 	 1.62328350376824448453e+00 
1.54583 	 3.87794427667172980634e-02 	 8.87915121734918211249e-02 	 1.64753541372814660271e+00 
1.55417 	 3.27951943614150989714e-02 	 8.78478764952950741396e-02 	 1.89926269000669112330e+00 
1.56250 	 2.41646703792796069266e-02 	 1.23570360359490774571e-01 	 1.89989209730109065433e+00 
1.57083 	 3.64746101065248073958e-02 	 1.04819982416260573665e-01 	 1.67980315879664798828e+00 
1.57917 	 3.07211031032840579946e-02 	 6.28032395295177320316e-02 	 2.15404789379835293062e+00 
1.58750 	 3.68673239800673957500e-02 	 9.99562571484726991589e-02 	 1.80316078573285509812e+00 
1.59583 	 2.87306684982816147589e-02 	 1.09844416820060325479e-01 	 2.61497429844877959937e+00 
1.60417 	 2.85013496719752588981e-02 	 1.31893833166674495638e-01 	 2.42047871849535889410e+00 
1.61250 	 2.64674634932411771693e-02 	 1.28971261613520710165e-01 	 2.42111332607445017828e+00 
1.62083 	 3.45111422458962355253e-02 	 1.08964313115570671231e-01 	 1.79378595455580591711e+00 
1.62917 	 3.36881034117698582864e-02 	 7.72559190841635157199e-02 	 1.82319239811475464208e+00 
1.63750 	 3.84772495925984475695e-02 	 6.63036180066437774716e-02 	 2.24549482093838070895e+00 
1.64583 	 2.45089265242833843905e-02 	 1.00843355684368918279e-01 	 1.68243486950686604864e+00 
1.65417 	 2.91521707809808336420e-02 	 7.30137116815399306313e-02 	 2.53506745732577609687e+00 
1.66250 	 2.08100899957806076412e-02 	 9.31882873812929224400e-02 	 2.05219102330031821779e+00 
1.67083 	 2.61363419682405853650e-02 	 1.33435615976061683341e-01 	 2.11156475058583259496e+00 
1.67917 	 3.48612765058378890060e-02 	 9.67787998842561530966e-02 	 1.79385701709214506749e+00 
1.68750 	 3.84880702952571165931e-02 	 8.10261348534770525776e-02 	 2.53817653641669993547e+00 
1.69583 	 3.25181848991218241940e-02 	 1.02963553688460676683e-01 	 2.20635713690472723414e+00 
1.70417 	 4.02990992045658136256e-02 	 7.82830450690586987506e-02 	 1.92250763199811935955e+00 
1.71250 	 3.80776302692424906127e-02 	 8.53038394386342740949e-02 	 2.09061493789358499029e+00 
1.72083 	 2.61273736421176773492e-02 	 1.14406361937024261821e-01 	 2.35842637419231104801e+00 
1.72917 	 3.47274442969593352681e-02 	 9.44364897635618510963e-02 	 2.43497053481886549520e+00 
1.73750 	 3.59442427575883058366e-02 	 8.92878191955307765060e-02 	 2.00119210987070372809e+00 
1.74583 	 3.14770569918879083993e-02 	 7.75913405882929091417e-02 	 2.68083309708265726812e+00 
1.75417 	 3.98318778903942322112e-02 	 6.53774248517754175136e-02 	 2.75821601190987086838e+00 
1.76250 	 3.37316756633665240650e-02 	 1.06589344143791300845e-01 	 3.41712964712159239511e+00 
1.77083 	 3.57787822983518244424e-02 	 9.49665332075387003119e-02 	 2.61557163851829832524e+00 
1.77917 	 3.63475877107052938730e-02 	 8.42592913302220442029e-02 	 2.46487136780515303514e+00 
1.78750 	 2.56631778728376377940e-02 	 7.68196959621292446707e-02 	 2.70589226226527834740e+00 
1.79583 	 2.64844130816754147473e-02 	 8.59949082807572595666e-02 	 3.13266840875111673981e+00 
1.80417 	 3.95886337489773365572e-02 	 6.52306299904373554366e-02 	 3.04189387579928194327e+00 
1.81250 	 3.11939036109307524236e-02 	 8.59937547741626701070e-02 	 2.79554973346905111242e+00 
1.82083 	 4.02666424677314213620e-02 	 7.54600555923589932927e-02 	 2.25002704080117155172e+00 
1.82917 	 2.45661793951584342399e-02 	 7.31688200003559885420e-02 	 2.82416631978529997227e+00 
1.83750 	 4.76261595289179801016e-02 	 5.87686369266307295778e-02 	 2.98129778191655026021e+00 
1.84583 	 3.05406408932408710011e-02 	 5.47080237094354215888e-02 	 2.69676488089677324211e+00 
1.85417 	 4.62067764973546554752e-02 	 4.83589988515371049793e-02 	 2.52242368208790335160e+00 
1.86250 	 3.55605837512988562366e-02 	 5.84187011872313033400e-02 	 2.48112548679071087676e+00 
1.87083 	 4.05171564838081380011e-02 	 5.15721311285921163448e-02 	 3.00435634254123007381e+00 
1.87917 	 3.71950015862530999899e-02 	 7.61459395043495579358e-02 	 2.19542639204451761614e+00 
1.88750 	 4.76902979118826869653e-02 	 4.26578253852674255109e-02 	 2.10999612325633822962e+00 
1.89583 	 5.38436479841940332514e-02 	 5.01216072347572400014e-02 	 2.12983565766273885700e+00 
1.90417 	 3.44265623493440336977e-02 	 6.26480826802860712998e-02 	 1.98901494409040990874e+00 
1.91250 	 3.64334797738313370674e-02 	 4.81603557020133868360e-02 	 2.94238972366279627479e+00 
1.92083 	 3.39749819881336942440e-02 	 6.07171519930157152500e-02 	 2.29035305229983565667e+00 
1.92917 	 5.13764526308808644472e-02 	 4.97047283543885359824e-02 	 2.54043466983252663738e+00 
1.93750 	 4.32948632806970795661e-02 	 4.95455650596107813333e-02 	 1.60146386340395041614e+00 
1.94583 	 6.15538045129119526511e-02 	 4.87011834163066648085e-02 	 2.24268994152302880707e+00 
1.95417 	 4.66738721201476677858e-02 	 4.73171881256448656483e-02 	 2.06169881172434132921e+00 
1.96250 	 4.22845006951843363496e-02 	 3.89256339024633413182e-02 	 2.06252121080150674359e+00 
1.97083 	 4.83002381813119885390e-02 	 4.44923270746116067409e-02 	 1.85405129426759862632e+00 
1.97917 	 5.31963935088212089286e-02 	 4.03186613437316807018e-02 	 1.91745231388801862238e+00 
1.98750 	 5.06869129103422813576e-02 	 4.26482115087950738874e-02 	 1.95432720498872614101e+00 
1.99583 	 4.92919475945506821435e-02 	 3.67944652731077154195e-02 	 8.98667478276463982390e-01 
2.00417 	 3.98362072129130107001e+00 	 3.14551687219070874590e+00 	 7.45646119810001550832e+01 


=================================

code that generated this simulation:

# mc321_p.py - my translation of mc321.c to python

import math
import json
from tqdm import tqdm

PI = math.pi
LIGHTSPEED = 2.997925E10 # in vacuo speed of light [cm/s]
ALIVE = 1 # if photon not yet terminated
DEAD = 0 # if photon is to be terminated
THRESHOLD = 0.01 # used in roulette
CHANCE = 0.1 # used in roulette
    # If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad
COS90D = 1.0E-6
ONE_MINUS_COSZERO = 1.0E-12
    # If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad
    # If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad

SIGN = lambda x: 1 if x >= 0 else -1



# SUBROUTINES

# **************************************************************
#	RandomGen
#      A random number generator that generates uniformly
#      distributed random numbers between 0 and 1 inclusive.
#      The algorithm is based on:
#      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
#      Flannery, "Numerical Recipes in C," Cambridge University
#      Press, 2nd edition, (1992).
#      and
#      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
#      of "The Art of Computer Programming", Addison-Wesley, (1981).
#
#      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
#      When Type is 1, returns a random number.
#      When Type is 2, gets the status of the generator.
#      When Type is 3, restores the status of the generator.
#
#      The status of the generator is represented by Status[0..56].
#
#      Make sure you initialize the seed before you get random
#      numbers.
# **************************************************************

MBIG = 1000000000
MSEED = 161803398
MZ = 0
FAC = 1.0E-9

i1 = None
i2 = None
ma = [None for _ in range(56)] # ma[0] is not used
def RandomGen(Type, Seed, Status):
    global i1
    global i2
    global ma
    if (Type == 0): # set seed
        Seed = -Seed if Seed < 0 else Seed
        mj = MSEED - Seed
        mj %= MBIG
        ma[55] = mj
        mk = 1
        for i in range(1,55):
            ii = (21 * i) % 55
            ma[ii] = mk
            mk = mj - mk
            if (mk < MZ):
                mk += MBIG
            mj = ma[ii]
        for ii in range(1,5):
            for i in range(1,56):
                ma[i] -= ma[1 + (i + 30) % 55]
                if (ma[i] < MZ):
                    ma[i] += MBIG
        i1 = 0
        i2 = 31
    elif (Type == 1): # get a number
        i1 += 1
        if (i1 == 56):
            i1 = 1
        i2 += 1
        if (i2 == 56):
            i2 = 1
        mj = ma[i1] - ma[i2]
        if (mj < MZ):
            mj += MBIG
        ma[i1] = mj
        return (mj * FAC)

    elif (Type == 2): # get status
        for i in range(0,55):
            Status[i] = ma[i + 1]
        Status[55] = i1
        Status[56] = i2
    elif (Type == 3): # restore status
        for i in range(0,55):
            ma[i + 1] = Status[i]
        i1 = Status[55]
        i2 = Status[56]
    else:
        print("Wrong parameter to RandomGen().")
    return 0


# Initializes the seed for the random number generator
def InitRandomGen():
    RandomGen(0, 1, None)


# Calls for a random number from the random number generator.
def RandomNum():
    return RandomGen(1, 0, None)



# **************************************************************



def main():

    # Propagation parameters
    # x, y, z           # photon position
    # ux, uy, uz        # photon trajectory as cosines
    # uxx, uyy, uzz     # temporary values used during SPIN
    # s                 # step sizes. s = -log(RND)/mus [cm]
    # costheta          # cos(theta)
    # sintheta          # sin(theta)
    # cospsi            # cos(psi)
    # sinpsi            # sin(psi)
    # psi               # azimuthal angle
    # i_photon          # current photon
    # W                 # photon weight
    # absorb            # weighted deposited in a step due to absorption
    # photon_status    # flag = ALIVE=1 or DEAD=0

    # --- other variables ---
    # Csph = [None for _ in range(241)] # spherical   photon concentration CC[ir=0..100]
    # Ccyl = [None for _ in range(241)] # cylindrical photon concentration CC[ir=0..100]
    # Cpla = [None for _ in range(241)] # planar      photon concentration CC[ir=0..100]
    # Fsph       # fluence in spherical shell
    # Fcyl       # fluence in cylindrical shell
    # Fpla       # fluence in planar shell
    # mua        # absorption coefficient [cm^-1]
    # mus        # scattering coefficient [cm^-1]
    # g          # anisotropy [-]
    # albedo     # albedo of tissue
    # nt         # tissue index of refraction
    # Nphotons   # number of photons in simulation
    # NR         # number of radial positions
    # radial_size  # maximum radial size
    # r          # radial position
    # dr         # radial bin size
    # ir         # index to radial position
    # shellvolume  # volume of shell at radial position r

    # --- dummy variables ---
    # rnd       # assigned random value 0-1
    # temp      # dummy variables
    # target    # point to output file


    # ***** INPUT
    # Input the optical properties
    # Input the bin and array sizes 
    # Input the number of photons
    # *****

    mua         = 0.37     # cm^-1
    mus         = 23.88889  # cm^-1
    g           = 0.9
    nt          = 1.36
    Nphotons    = 100 # set number of photons in simulation ID_EDIT_1_3
    z_size = 2.0 # cm, total range over which bins extend
    xy_size = 1.5 # cm
    NR_z          = 240 # set number of bins.
    NR_xy = 180
    # IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1.
    dr          = z_size/NR_z  # cm
    albedo      = mus/(mus + mua)


    # ***** INITIALIZATIONS 
    # *****
    InitRandomGen()
    Csph = [0 for _ in range(0,NR_z+1)]
    Ccyl = [0 for _ in range(0,NR_z+1)]
    Cpla = [0 for _ in range(0,NR_z+1)]

    # [x][y][z]
    # it could be done in numpy array, but list is easier to save
    Cube = [[[0 for _ in range(0,NR_z+1)] for _ in range(0,NR_xy+1)] for _ in range(0,NR_xy+1)]
    cube_overflow = 0

    # start pos
    x_start = 89 * dr
    y_start = 89 * dr
    z_start = 239 * dr

    
    # ***** RUN
    # Launch N photons, initializing each one before progation.
    # *****
    print("(1 iter = 1 photon) Simulation progerss:")
    for i_photon in tqdm(range(0,Nphotons)):


        # ***** LAUNCH 
        # Initialize photon position and trajectory.
        # Implements a point source [0,0,-1].
        # *****
        W = 1.0                    # set photon weight to one
        photon_status = ALIVE      # Launch an ALIVE photon

        x = x_start                     # Set photon position to origin.
        y = y_start
        z = z_start

        # source - vartical down [0,0,-1]
        # psi - berween x-y axis
        # theta between z and R
        ux = 0
        uy = 0
        uz = -1


        # ***** HOP_DROP_SPIN_CHECK
        # Propagate one photon until it dies as determined by ROULETTE.
        # *****
        while (photon_status == ALIVE):


            # ***** HOP
            # Take step to new position
            # s = stepsize
            # *****
            rnd = RandomNum()
            while (rnd <= 0.0):
                rnd = RandomNum()
                # yields 0 < rnd <= 1
            s = -math.log(rnd)/(mua + mus) # Step size. Note: log() is base e
            x += s * ux # Update positions.
            y += s * uy
            z += s * uz


            # ***** DROP
            # Drop photon weight (W) into local bin.
            # *****
            absorb = W*(1 - albedo) # photon weight absorbed at this step
            W -= absorb # decrement WEIGHT by amount absorbed
            
            # --- spherical ---
            r = math.sqrt(x*x + y*y + z*z) # current spherical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Csph[ir] += absorb # DROP absorbed weight into bin
            
            # --- cylindrical ---
            r = math.sqrt(x*x + y*y) # current cylindrical radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Ccyl[ir] += absorb # DROP absorbed weight into bin
            
            # --- planar ---
            r = abs(z) # current planar radial position
            ir = int(r/dr) # ir = index to spatial bin
            if (ir >= NR_z): # last bin is for overflow
                ir = NR_z
            Cpla[ir] += absorb # DROP absorbed weight into bin

            # --- cube ---
            ix = int(x/dr)
            iy = int(y/dr)
            iz = int(z/dr)
            ix_is_in = (0 <= ix < NR_xy)
            iy_is_in = (0 <= iy < NR_xy)
            iz_is_in = (0 <= iz < NR_z)
            is_in = ix_is_in and iy_is_in and iz_is_in
            if (not is_in):
                cube_overflow += absorb
            else:
                Cube[ix][iy][iz] += absorb
            

            # ***** SPIN 
            # Scatter photon into new trajectory defined by theta and psi.
            # Theta is specified by cos(theta), which is determined 
            # based on the Henyey-Greenstein scattering function.
            # Convert theta and psi into cosines ux, uy, uz. 
            # *****
            # --- Sample for costheta ---
            rnd = RandomNum()
            if (g == 0.0):
                costheta = 2.0*rnd - 1.0
            else:
                temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd)
                costheta = (1.0 + g*g - temp*temp)/(2.0*g)

            sintheta = math.sqrt(1.0 - costheta*costheta) # sqrt() is faster than sin().

            # --- Sample psi. ---
            psi = 2.0*PI*RandomNum()
            cospsi = math.cos(psi)
            if (psi < PI):
                sinpsi = math.sqrt(1.0 - cospsi*cospsi) # sqrt() is faster than sin().
            else:
                sinpsi = -math.sqrt(1.0 - cospsi*cospsi)

            # --- New trajectory. ---
            if (1 - abs(uz) <= ONE_MINUS_COSZERO): # close to perpendicular.
                uxx = sintheta * cospsi
                uyy = sintheta * sinpsi
                uzz = costheta * SIGN(uz) # SIGN() is faster than division.

            else: # usually use this option
                temp = math.sqrt(1.0 - uz * uz)
                uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta
                uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta
                uzz = -sintheta * cospsi * temp + uz * costheta
                
            # --- Update trajectory ---
            ux = uxx;
            uy = uyy;
            uz = uzz;


            # ***** CHECK ROULETTE 
            # If photon weight below THRESHOLD, then terminate photon using Roulette technique.
            # Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
            # and 1-CHANCE probability of terminating.
            # *****
            if (W < THRESHOLD):
                if (RandomNum() <= CHANCE):
                    W /= CHANCE
                else:
                    photon_status = DEAD

            # end STEP_CHECK_HOP_SPIN

        # If photon dead, then launch new photon.
        # end RUN



    # ***** SAVE
    # Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
    # *****
    print("saving data...")
    file = open("mc456_p_out.txt", 'w')

    # --- print header ---
    file.write(f"number of photons = {Nphotons}\n")
    file.write(f"bin size = {dr:5.5f} [cm] \n")
    file.write("last row is overflow. Ignore.\n")

    # --- print column titles ---
    file.write("r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n")

    # print data:  radial position, fluence rates for 3D, 2D, 1D geometries
    for ir in range(0,NR_z+1):
        # r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr
        r = (ir + 0.5)*dr
        shellvolume = 4.0*PI*r*r*dr # per spherical shell
        Fsph = Csph[ir]/Nphotons/shellvolume/mua
        shellvolume = 2.0*PI*r*dr # per cm length of cylinder
        Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua
        shellvolume = dr # per cm2 area of plane
        Fpla =Cpla[ir]/Nphotons/shellvolume/mua
        file.write(f"{r:5.5f} \t {Fsph:.20e} \t {Fcyl:.20e} \t {Fpla:.20e} \n")

    file.close()


    with open('mc456_p_cube.json', 'w') as f:
        data = {
            "n_photons": Nphotons,
            "overflow": cube_overflow,
            "bins_per_1_cm": NR_z/z_size,
            "mu_a": mua,
            "name": f"my_{ Nphotons // 1_000_000 }mln_cube",
            "photon_weight": W,
            "normalized_already": False,
            "cube": Cube
        }
        json.dump(data, f)

    print("done")
    # end of main


main()
