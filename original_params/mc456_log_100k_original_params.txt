time elapsed: 21.5266 seconds

=================================

sim results:

number of photons = 100000
overflow: 2.87973313544668562827e+04
sum: 7.12150249697873223340e+04
sum: 7.12026686455331509933e+04
avg: 7.12150249697873216626e-01
perc_in: 71.22

number of photons = 100000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.04583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.05417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.06250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.07083 	 0.00000000000000000000e+00 	 2.81990793357218957207e-06 	 0.00000000000000000000e+00 
0.07917 	 0.00000000000000000000e+00 	 4.11888316122800165450e-06 	 0.00000000000000000000e+00 
0.08750 	 0.00000000000000000000e+00 	 2.91374547025176331875e-06 	 0.00000000000000000000e+00 
0.09583 	 0.00000000000000000000e+00 	 2.50726744158090118978e-06 	 0.00000000000000000000e+00 
0.10417 	 0.00000000000000000000e+00 	 6.85290243513262980113e-06 	 0.00000000000000000000e+00 
0.11250 	 0.00000000000000000000e+00 	 6.31430471579667863780e-06 	 0.00000000000000000000e+00 
0.12083 	 0.00000000000000000000e+00 	 6.91408786902086871487e-06 	 0.00000000000000000000e+00 
0.12917 	 0.00000000000000000000e+00 	 7.13950064081952109695e-06 	 0.00000000000000000000e+00 
0.13750 	 0.00000000000000000000e+00 	 1.05660596575779060409e-05 	 0.00000000000000000000e+00 
0.14583 	 0.00000000000000000000e+00 	 1.33188990046636527074e-05 	 0.00000000000000000000e+00 
0.15417 	 0.00000000000000000000e+00 	 1.55913042332041100783e-05 	 0.00000000000000000000e+00 
0.16250 	 0.00000000000000000000e+00 	 1.98783541376094233569e-05 	 0.00000000000000000000e+00 
0.17083 	 0.00000000000000000000e+00 	 1.26921249476607280154e-05 	 0.00000000000000000000e+00 
0.17917 	 0.00000000000000000000e+00 	 1.30235685269105897329e-05 	 0.00000000000000000000e+00 
0.18750 	 0.00000000000000000000e+00 	 1.80179959655306938646e-05 	 0.00000000000000000000e+00 
0.19583 	 0.00000000000000000000e+00 	 2.27800905359302597426e-05 	 0.00000000000000000000e+00 
0.20417 	 0.00000000000000000000e+00 	 1.82946728793376043817e-05 	 0.00000000000000000000e+00 
0.21250 	 0.00000000000000000000e+00 	 3.12151383243939567588e-05 	 0.00000000000000000000e+00 
0.22083 	 0.00000000000000000000e+00 	 2.83246188107877390320e-05 	 0.00000000000000000000e+00 
0.22917 	 0.00000000000000000000e+00 	 2.93272996012803849710e-05 	 0.00000000000000000000e+00 
0.23750 	 0.00000000000000000000e+00 	 3.71229237007480460694e-05 	 0.00000000000000000000e+00 
0.24583 	 0.00000000000000000000e+00 	 3.67761743350127157733e-05 	 0.00000000000000000000e+00 
0.25417 	 0.00000000000000000000e+00 	 3.24958231583657227316e-05 	 0.00000000000000000000e+00 
0.26250 	 0.00000000000000000000e+00 	 2.89236220693051629415e-05 	 0.00000000000000000000e+00 
0.27083 	 0.00000000000000000000e+00 	 4.21484072992534439489e-05 	 0.00000000000000000000e+00 
0.27917 	 0.00000000000000000000e+00 	 4.14423474072969817705e-05 	 0.00000000000000000000e+00 
0.28750 	 0.00000000000000000000e+00 	 4.69776752948801286044e-05 	 0.00000000000000000000e+00 
0.29583 	 0.00000000000000000000e+00 	 6.56779114518327513956e-05 	 0.00000000000000000000e+00 
0.30417 	 0.00000000000000000000e+00 	 7.82696991462227600065e-05 	 0.00000000000000000000e+00 
0.31250 	 0.00000000000000000000e+00 	 7.88712947834868297698e-05 	 0.00000000000000000000e+00 
0.32083 	 0.00000000000000000000e+00 	 9.29178068788619074356e-05 	 0.00000000000000000000e+00 
0.32917 	 0.00000000000000000000e+00 	 1.16342845303523512819e-04 	 0.00000000000000000000e+00 
0.33750 	 0.00000000000000000000e+00 	 1.10966212023708141513e-04 	 0.00000000000000000000e+00 
0.34583 	 0.00000000000000000000e+00 	 1.02054317292591813595e-04 	 0.00000000000000000000e+00 
0.35417 	 0.00000000000000000000e+00 	 1.17659161276747442734e-04 	 0.00000000000000000000e+00 
0.36250 	 0.00000000000000000000e+00 	 1.40026913416317237227e-04 	 0.00000000000000000000e+00 
0.37083 	 0.00000000000000000000e+00 	 1.54946779025239814338e-04 	 0.00000000000000000000e+00 
0.37917 	 0.00000000000000000000e+00 	 1.71351008635828956292e-04 	 0.00000000000000000000e+00 
0.38750 	 0.00000000000000000000e+00 	 1.92135830970355150470e-04 	 0.00000000000000000000e+00 
0.39583 	 0.00000000000000000000e+00 	 2.17535344055360031507e-04 	 0.00000000000000000000e+00 
0.40417 	 0.00000000000000000000e+00 	 2.30675476652433732866e-04 	 0.00000000000000000000e+00 
0.41250 	 0.00000000000000000000e+00 	 2.66609064602137883597e-04 	 0.00000000000000000000e+00 
0.42083 	 0.00000000000000000000e+00 	 3.07308721310649778872e-04 	 0.00000000000000000000e+00 
0.42917 	 0.00000000000000000000e+00 	 3.33798570211844597595e-04 	 0.00000000000000000000e+00 
0.43750 	 0.00000000000000000000e+00 	 3.63793214983331705727e-04 	 0.00000000000000000000e+00 
0.44583 	 0.00000000000000000000e+00 	 3.99110670310878247469e-04 	 0.00000000000000000000e+00 
0.45417 	 0.00000000000000000000e+00 	 4.44776960609785752127e-04 	 0.00000000000000000000e+00 
0.46250 	 0.00000000000000000000e+00 	 4.74177937400372599523e-04 	 0.00000000000000000000e+00 
0.47083 	 0.00000000000000000000e+00 	 5.59064605508658688145e-04 	 0.00000000000000000000e+00 
0.47917 	 0.00000000000000000000e+00 	 5.90007995694704669154e-04 	 0.00000000000000000000e+00 
0.48750 	 0.00000000000000000000e+00 	 6.47372677763161249141e-04 	 0.00000000000000000000e+00 
0.49583 	 0.00000000000000000000e+00 	 7.31319083037897002368e-04 	 0.00000000000000000000e+00 
0.50417 	 0.00000000000000000000e+00 	 7.58639213194532095047e-04 	 0.00000000000000000000e+00 
0.51250 	 0.00000000000000000000e+00 	 8.33154829629646027575e-04 	 0.00000000000000000000e+00 
0.52083 	 0.00000000000000000000e+00 	 9.20343827285215383173e-04 	 0.00000000000000000000e+00 
0.52917 	 0.00000000000000000000e+00 	 1.01867816233133529763e-03 	 0.00000000000000000000e+00 
0.53750 	 0.00000000000000000000e+00 	 1.11160221177594806946e-03 	 0.00000000000000000000e+00 
0.54583 	 0.00000000000000000000e+00 	 1.25960507508527936975e-03 	 0.00000000000000000000e+00 
0.55417 	 0.00000000000000000000e+00 	 1.39476370609185494273e-03 	 0.00000000000000000000e+00 
0.56250 	 0.00000000000000000000e+00 	 1.54385508314104093718e-03 	 0.00000000000000000000e+00 
0.57083 	 0.00000000000000000000e+00 	 1.71725238147398592131e-03 	 0.00000000000000000000e+00 
0.57917 	 0.00000000000000000000e+00 	 1.88670866703303749014e-03 	 0.00000000000000000000e+00 
0.58750 	 0.00000000000000000000e+00 	 2.12803087675240889393e-03 	 0.00000000000000000000e+00 
0.59583 	 0.00000000000000000000e+00 	 2.27745920995787824725e-03 	 0.00000000000000000000e+00 
0.60417 	 0.00000000000000000000e+00 	 2.53899660885409123728e-03 	 1.76284029970485237974e-07 
0.61250 	 0.00000000000000000000e+00 	 2.81545178867835185765e-03 	 9.34692606581989976188e-07 
0.62083 	 0.00000000000000000000e+00 	 3.12904878548749638620e-03 	 3.97726655766397837027e-07 
0.62917 	 0.00000000000000000000e+00 	 3.47013449968502571408e-03 	 9.90956851842440744483e-07 
0.63750 	 0.00000000000000000000e+00 	 3.85603892506326817458e-03 	 4.62375294956223981561e-07 
0.64583 	 0.00000000000000000000e+00 	 4.21172241172399885317e-03 	 4.61182137194035581787e-07 
0.65417 	 0.00000000000000000000e+00 	 4.58731730401002076036e-03 	 2.10456835014371216423e-06 
0.66250 	 0.00000000000000000000e+00 	 5.13988655095880698359e-03 	 7.87625404826217665101e-07 
0.67083 	 0.00000000000000000000e+00 	 5.60446019298296068539e-03 	 1.27068692243005107790e-06 
0.67917 	 0.00000000000000000000e+00 	 6.20842073039106802368e-03 	 6.03978787878455625958e-07 
0.68750 	 0.00000000000000000000e+00 	 6.96188707863329859366e-03 	 1.17421829123404312762e-06 
0.69583 	 0.00000000000000000000e+00 	 7.74064299144801206548e-03 	 3.65757057849420712381e-07 
0.70417 	 0.00000000000000000000e+00 	 8.54474668559678310342e-03 	 2.61947367730215739197e-07 
0.71250 	 0.00000000000000000000e+00 	 9.29030774993372734927e-03 	 9.82559624160931168848e-07 
0.72083 	 0.00000000000000000000e+00 	 1.03652447496135301230e-02 	 1.07074481723308315964e-06 
0.72917 	 0.00000000000000000000e+00 	 1.13519351376545132859e-02 	 1.02332038443375948169e-06 
0.73750 	 0.00000000000000000000e+00 	 1.24452170902362591748e-02 	 2.80315160578608617669e-06 
0.74583 	 0.00000000000000000000e+00 	 1.38913265276439813062e-02 	 2.39885691969883534368e-06 
0.75417 	 0.00000000000000000000e+00 	 1.51216560374963088220e-02 	 1.93180951912540554448e-06 
0.76250 	 0.00000000000000000000e+00 	 1.67531120087751166092e-02 	 1.46636648141419070785e-07 
0.77083 	 0.00000000000000000000e+00 	 1.84858552147601079563e-02 	 1.04871041250432795385e-06 
0.77917 	 0.00000000000000000000e+00 	 2.07379797759243041100e-02 	 3.06913289063683437169e-07 
0.78750 	 0.00000000000000000000e+00 	 2.27450376072684742890e-02 	 2.46744572353400581257e-06 
0.79583 	 0.00000000000000000000e+00 	 2.53255871259458406608e-02 	 5.98910314880523521222e-06 
0.80417 	 0.00000000000000000000e+00 	 2.78870337562500889006e-02 	 1.27336900953163650199e-06 
0.81250 	 0.00000000000000000000e+00 	 3.05540605554828273438e-02 	 1.89150937750628688356e-06 
0.82083 	 0.00000000000000000000e+00 	 3.37778975545382428858e-02 	 2.39616624161480474796e-06 
0.82917 	 0.00000000000000000000e+00 	 3.76309705824193624357e-02 	 3.57186954020172988989e-06 
0.83750 	 0.00000000000000000000e+00 	 4.20246962744382709931e-02 	 3.16085434062065455586e-06 
0.84583 	 0.00000000000000000000e+00 	 4.60057597139223312110e-02 	 2.46046635727408612607e-06 
0.85417 	 0.00000000000000000000e+00 	 5.09902739585758324470e-02 	 4.26795553565624619308e-06 
0.86250 	 0.00000000000000000000e+00 	 5.62771288007707787271e-02 	 5.77815412611538519730e-06 
0.87083 	 0.00000000000000000000e+00 	 6.28929079961253190145e-02 	 3.91794692369922428445e-06 
0.87917 	 0.00000000000000000000e+00 	 6.92684901706834832424e-02 	 1.03663075035461219199e-05 
0.88750 	 0.00000000000000000000e+00 	 7.73130660760779075957e-02 	 1.27280662979462715203e-05 
0.89583 	 0.00000000000000000000e+00 	 8.54840746914289351110e-02 	 1.02871637652600790395e-05 
0.90417 	 0.00000000000000000000e+00 	 9.50330841372916540477e-02 	 1.12196565239768325555e-05 
0.91250 	 0.00000000000000000000e+00 	 1.04739324518018525612e-01 	 1.01958429342611791798e-05 
0.92083 	 0.00000000000000000000e+00 	 1.16406461335185992811e-01 	 1.05782581224672660750e-05 
0.92917 	 0.00000000000000000000e+00 	 1.27980669791785794942e-01 	 1.13583159133352596353e-05 
0.93750 	 0.00000000000000000000e+00 	 1.40946815853243728744e-01 	 1.39099585167276373942e-05 
0.94583 	 0.00000000000000000000e+00 	 1.56729331296976720500e-01 	 1.48299122403433926881e-05 
0.95417 	 0.00000000000000000000e+00 	 1.73728212168303308705e-01 	 2.11480811555983054778e-05 
0.96250 	 0.00000000000000000000e+00 	 1.91639425073464514382e-01 	 3.16195478140429448322e-05 
0.97083 	 0.00000000000000000000e+00 	 2.12582143563314757140e-01 	 2.87194376673682867488e-05 
0.97917 	 0.00000000000000000000e+00 	 2.35539693749109407817e-01 	 4.12648543350874395211e-05 
0.98750 	 0.00000000000000000000e+00 	 2.60548334462747777085e-01 	 2.70173685220785240145e-05 
0.99583 	 0.00000000000000000000e+00 	 2.87537764827906716647e-01 	 3.51783716389097176128e-05 
1.00417 	 0.00000000000000000000e+00 	 3.19149538650179975807e-01 	 3.79584454448059170346e-05 
1.01250 	 0.00000000000000000000e+00 	 3.52928777450381869762e-01 	 4.86876851234605039420e-05 
1.02083 	 0.00000000000000000000e+00 	 3.93737460498649716190e-01 	 3.75672724344168783078e-05 
1.02917 	 0.00000000000000000000e+00 	 4.44949090630288590642e-01 	 3.82306848265448695695e-05 
1.03750 	 0.00000000000000000000e+00 	 5.14474880830124159381e-01 	 4.17707686934906571559e-05 
1.04583 	 0.00000000000000000000e+00 	 8.55099910590085721118e-01 	 4.56193644769691388028e-05 
1.05417 	 0.00000000000000000000e+00 	 6.26399134441565141884e-01 	 7.09464276771775077032e-05 
1.06250 	 0.00000000000000000000e+00 	 4.85503656292309404563e-01 	 6.94114036784430253830e-05 
1.07083 	 0.00000000000000000000e+00 	 4.18888584948585773748e-01 	 8.46513418175080816939e-05 
1.07917 	 0.00000000000000000000e+00 	 3.71642883843612104044e-01 	 7.02275331536202687124e-05 
1.08750 	 0.00000000000000000000e+00 	 3.31052527775302141144e-01 	 6.72077588457235315005e-05 
1.09583 	 0.00000000000000000000e+00 	 2.96035377558148293797e-01 	 7.31969824152868927180e-05 
1.10417 	 0.00000000000000000000e+00 	 2.64660259220872329244e-01 	 8.47325766850353246772e-05 
1.11250 	 1.04858105241631112284e-07 	 2.37195645366196528059e-01 	 8.70975450457083107906e-05 
1.12083 	 4.51328869109088280344e-08 	 2.12486937825481725373e-01 	 1.04421622945241785959e-04 
1.12917 	 7.82134459014504597115e-08 	 1.90284928121249752309e-01 	 1.09904886177236894461e-04 
1.13750 	 6.33917913050008402766e-08 	 1.69856826984967151928e-01 	 1.18254042631023233200e-04 
1.14583 	 5.49435541463426124904e-08 	 1.52523456690979664074e-01 	 1.09492371804153235332e-04 
1.15417 	 5.65651168806176592168e-08 	 1.36340765017198134457e-01 	 1.31340486300537327658e-04 
1.16250 	 7.32844004773214934669e-08 	 1.22288625091335284578e-01 	 1.66751124289523392158e-04 
1.17083 	 8.72358663449322554866e-08 	 1.10486768533094248390e-01 	 1.88117370251774648554e-04 
1.17917 	 1.45384092389944841834e-07 	 9.84946607213351699173e-02 	 1.80974951264054729040e-04 
1.18750 	 1.60577202523395992204e-07 	 8.84441757338063627714e-02 	 2.20610832583237071467e-04 
1.19583 	 3.30057034174631743455e-07 	 7.90385745655297622392e-02 	 2.40357264258593431114e-04 
1.20417 	 2.92082930820780477751e-07 	 7.09412891542963580660e-02 	 2.76879177789767123852e-04 
1.21250 	 3.13489820051192837187e-07 	 6.35535859081907544832e-02 	 2.82339346907238173626e-04 
1.22083 	 5.48249900011533263831e-07 	 5.66905545442780642307e-02 	 3.14435003569786184190e-04 
1.22917 	 4.16229369874599690310e-07 	 5.13013985701994412736e-02 	 3.03013302539603592706e-04 
1.23750 	 3.96854730863227597500e-07 	 4.60225755579299067310e-02 	 3.54954334593353664634e-04 
1.24583 	 3.68137316680419784194e-07 	 4.14678501444112126983e-02 	 3.99982921719495764998e-04 
1.25417 	 3.76225279266346282824e-07 	 3.73028514680375650192e-02 	 4.58025369359026037104e-04 
1.26250 	 5.02729550084824008156e-07 	 3.30494724489808835988e-02 	 4.94265753206296078702e-04 
1.27083 	 6.87934864832653247996e-07 	 2.95894204856142067905e-02 	 5.31776628172942237259e-04 
1.27917 	 5.93509683350367013001e-07 	 2.64156339609425173942e-02 	 5.99093164229936702564e-04 
1.28750 	 8.68899824667808771369e-07 	 2.37932175081561440855e-02 	 6.71755291449534328203e-04 
1.29583 	 1.20492677564382585687e-06 	 2.13817902746378310508e-02 	 7.33231873347456515090e-04 
1.30417 	 1.33102402718735994227e-06 	 1.92757424949000742698e-02 	 8.93809341046281568242e-04 
1.31250 	 1.40103119431964258288e-06 	 1.71632152802185938834e-02 	 1.01823308926543196727e-03 
1.32083 	 1.43495310192610394337e-06 	 1.52007892433938356092e-02 	 1.12499478338554679061e-03 
1.32917 	 1.58373067755971807621e-06 	 1.36291091467408576748e-02 	 1.28352584891558364928e-03 
1.33750 	 1.48625966954403908377e-06 	 1.22434633969678036830e-02 	 1.39700524489538868179e-03 
1.34583 	 1.59990197854675521602e-06 	 1.09435050638082009833e-02 	 1.46633877682093047116e-03 
1.35417 	 1.38587627656201383510e-06 	 9.92819162692512753587e-03 	 1.61584864668527761720e-03 
1.36250 	 1.79185648911540334379e-06 	 8.86163165849269442165e-03 	 1.83692173888787540353e-03 
1.37083 	 1.36722144850221567604e-06 	 7.89991684925395870609e-03 	 2.07438373592215260025e-03 
1.37917 	 1.60579762904769676403e-06 	 7.01319187613256688624e-03 	 2.28850492758338359967e-03 
1.38750 	 2.13352655985615282430e-06 	 6.43272574878285974959e-03 	 2.60669434670918794689e-03 
1.39583 	 2.18922900526702185624e-06 	 5.81052705053756134157e-03 	 2.96137341722042162287e-03 
1.40417 	 2.28334407945568692737e-06 	 5.14339578581873239221e-03 	 3.28102487061432065985e-03 
1.41250 	 2.26694425115023988565e-06 	 4.64138413282561956147e-03 	 3.55010310804315751959e-03 
1.42083 	 2.61889805605919507718e-06 	 4.16203342902639068096e-03 	 3.96282693420002031515e-03 
1.42917 	 2.94364594784182495192e-06 	 3.72809629912734504312e-03 	 4.25292095637458400503e-03 
1.43750 	 3.25513635531438753098e-06 	 3.40271453189504519479e-03 	 4.63952506166516107089e-03 
1.44583 	 3.82223907277552714189e-06 	 3.06609536875015759733e-03 	 5.08990652422309629993e-03 
1.45417 	 4.89191373618263425442e-06 	 2.75961799186886548585e-03 	 5.51991848538338752278e-03 
1.46250 	 5.37257144789821099596e-06 	 2.47567940227186268284e-03 	 6.23146428058671177780e-03 
1.47083 	 6.43496687009955655134e-06 	 2.20611557169015379612e-03 	 7.19247901210458197990e-03 
1.47917 	 7.12583041865712778088e-06 	 1.98213116225038916279e-03 	 7.79177396096109812357e-03 
1.48750 	 8.05455377866525096557e-06 	 1.76172770453373781462e-03 	 8.66854381511046601094e-03 
1.49583 	 9.10906351867879501643e-06 	 1.61816419099852131305e-03 	 9.81528088902405317084e-03 
1.50417 	 1.12087763801546339346e-05 	 1.45412924253735323377e-03 	 1.09763505335715074590e-02 
1.51250 	 1.06242039713034927193e-05 	 1.31428481918929667381e-03 	 1.20730446535247896295e-02 
1.52083 	 1.24686918006755117941e-05 	 1.15236703194771515114e-03 	 1.34772723612368739571e-02 
1.52917 	 1.30129936023146287438e-05 	 1.03254237404572300589e-03 	 1.51589941053246642089e-02 
1.53750 	 1.43098693381593814687e-05 	 9.43107102882991834257e-04 	 1.69189388682719488166e-02 
1.54583 	 1.55634042856205449313e-05 	 8.59894256191535586928e-04 	 1.90835530867278363454e-02 
1.55417 	 1.69775171009636315458e-05 	 7.87188926899673522934e-04 	 2.13120298388567233627e-02 
1.56250 	 1.94684748626717645794e-05 	 6.96000121335387487986e-04 	 2.33925728710107048991e-02 
1.57083 	 2.37186700103368868842e-05 	 6.15113005577183819851e-04 	 2.64260818152212313692e-02 
1.57917 	 2.67931627375800297461e-05 	 5.45221376260318613648e-04 	 2.93204189712251185596e-02 
1.58750 	 3.00047829463425918249e-05 	 4.88796545121576025972e-04 	 3.20275650599520442241e-02 
1.59583 	 3.24605243565971143447e-05 	 4.42025530419793344014e-04 	 3.53112750799322722139e-02 
1.60417 	 3.49770257288391174435e-05 	 3.76921772131088726656e-04 	 3.92935001691590429784e-02 
1.61250 	 3.54586947458726528862e-05 	 3.45884290759823740009e-04 	 4.44986149509999720508e-02 
1.62083 	 3.88019726646164761150e-05 	 3.10362943019692452597e-04 	 4.90534861654007212084e-02 
1.62917 	 4.27501326540489484510e-05 	 2.70499727581526439989e-04 	 5.54833450073018222271e-02 
1.63750 	 4.48250057217308811824e-05 	 2.39385355491966646431e-04 	 6.13710960799875929195e-02 
1.64583 	 4.93118909750035833909e-05 	 2.18766672523836871143e-04 	 6.74141215202265775552e-02 
1.65417 	 5.57848990636776321107e-05 	 1.92362533380903801602e-04 	 7.59061213123666672642e-02 
1.66250 	 5.93697146454667530439e-05 	 1.81654509255546890755e-04 	 8.37911996909475181861e-02 
1.67083 	 6.42235197879869153725e-05 	 1.60081882692203009101e-04 	 9.21659455513987452280e-02 
1.67917 	 7.29266626663199827576e-05 	 1.46992749672871474273e-04 	 1.02851537608467810681e-01 
1.68750 	 8.11685229462394863993e-05 	 1.32887792354539392443e-04 	 1.14019468633135209745e-01 
1.69583 	 8.84233294735562564380e-05 	 1.24284791045483299348e-04 	 1.27171982155384138968e-01 
1.70417 	 9.59843945120008072095e-05 	 1.12575607988211275241e-04 	 1.41342305895675868221e-01 
1.71250 	 1.05906159554413665949e-04 	 1.02871586889492338396e-04 	 1.57157298561728692166e-01 
1.72083 	 1.20961164804102367840e-04 	 9.29083740210170374533e-05 	 1.74282712803583594852e-01 
1.72917 	 1.32220999748501897913e-04 	 8.30068371386159532246e-05 	 1.93123470920380402305e-01 
1.73750 	 1.47894606428919020815e-04 	 7.00243099553235932029e-05 	 2.14024016489625767967e-01 
1.74583 	 1.67018931669008521791e-04 	 6.18938275465292803840e-05 	 2.39097247297906045915e-01 
1.75417 	 1.88286603773958746352e-04 	 5.57984335299305115111e-05 	 2.66573981491039391223e-01 
1.76250 	 2.09754694426149542949e-04 	 5.58591011659716993624e-05 	 2.97085177098315056377e-01 
1.77083 	 2.29452289410227145252e-04 	 4.85198043866817146246e-05 	 3.31327728931693432646e-01 
1.77917 	 2.55646874643290951401e-04 	 4.19920339318237073405e-05 	 3.67896845446794684698e-01 
1.78750 	 2.83842264494620620009e-04 	 3.94737739332523573151e-05 	 4.08201181533113133248e-01 
1.79583 	 3.15725349503599933641e-04 	 3.54334016362033851701e-05 	 4.51396029353930083872e-01 
1.80417 	 3.53612049042089781215e-04 	 3.04464490471067356081e-05 	 5.02942711408340792367e-01 
1.81250 	 3.77970425670576520155e-04 	 3.02541336635459283833e-05 	 5.64279152454728927246e-01 
1.82083 	 4.19739215210401448147e-04 	 2.89460237547581943443e-05 	 6.24735387862256130731e-01 
1.82917 	 4.67629230623948762349e-04 	 2.34655915296455953119e-05 	 6.95600645330963662794e-01 
1.83750 	 5.19498636464443071421e-04 	 1.97576782807799281787e-05 	 7.75075880884851131647e-01 
1.84583 	 5.76694521109196475521e-04 	 1.75047064223979920757e-05 	 8.58641080695250247246e-01 
1.85417 	 6.30489709899965011970e-04 	 1.54486234501619644857e-05 	 9.51754057344148418629e-01 
1.86250 	 7.09828712287468286714e-04 	 1.26475222134048136000e-05 	 1.05989516649935100467e+00 
1.87083 	 8.04899982721621397135e-04 	 1.49666162724228436520e-05 	 1.17128559718466562778e+00 
1.87917 	 8.81942743095523408112e-04 	 1.32653703620625101152e-05 	 1.30283840535113326631e+00 
1.88750 	 9.66167518344111212088e-04 	 1.22028653684014667583e-05 	 1.44326036745462360500e+00 
1.89583 	 1.07953971344515843936e-03 	 1.14431488981030151931e-05 	 1.61454111151580215200e+00 
1.90417 	 1.19245831336296835914e-03 	 9.86525960338960499255e-06 	 1.78607025366828198187e+00 
1.91250 	 1.30718946522511390851e-03 	 1.01795986747055419947e-05 	 1.98674090912742129511e+00 
1.92083 	 1.46342047830627891396e-03 	 8.80463849482624382956e-06 	 2.20423159383008782086e+00 
1.92917 	 1.62345129630368421002e-03 	 7.58971946845065058442e-06 	 2.45000028012664872179e+00 
1.93750 	 1.78358977947174358186e-03 	 7.85993677587894153677e-06 	 2.71419261531712097124e+00 
1.94583 	 1.96888381958034916486e-03 	 7.66047560591986093439e-06 	 3.00197393600417505866e+00 
1.95417 	 2.17062684057184752257e-03 	 6.79724053840629989027e-06 	 3.28569516675823170004e+00 
1.96250 	 2.43455104924320594323e-03 	 5.08511363576056468918e-06 	 3.59025387541718021822e+00 
1.97083 	 2.69846810881762752543e-03 	 3.40800092211232501921e-06 	 3.84156504815557209298e+00 
1.97917 	 2.99310102972022776258e-03 	 3.40280577814569501298e-06 	 3.96160990614607300131e+00 
1.98750 	 3.30170214633328327342e-03 	 2.39544149034930359588e-06 	 3.81194502706588433938e+00 
1.99583 	 3.65871216587316389068e-03 	 1.91306171006847304663e-06 	 2.37854996182587319353e+00 
2.00417 	 1.38669411424414978917e+00 	 1.52862836821276736651e-05 	 2.06498539840074819551e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.673;     /* cm^-1 */
mus         = 312.0;  /* cm^-1 */
g           = 0.9;  
nt          = 1.33;
Nphotons    = 100000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz.
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);