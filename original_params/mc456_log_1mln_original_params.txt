time elapsed: 117.1551 seconds

=================================

sim results:

number of photons = 1000000
overflow: 2.89133608163770521060e+05
sum: 7.10870769557172781788e+05
sum: 7.10866391836229478940e+05
avg: 7.10870769557172765829e-01
perc_in: 71.09

number of photons = 1000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 5.69034172685670555989e-06 	 0.00000000000000000000e+00 
0.01250 	 0.00000000000000000000e+00 	 5.38851438024473515656e-06 	 0.00000000000000000000e+00 
0.02083 	 0.00000000000000000000e+00 	 6.95395382847723238961e-06 	 0.00000000000000000000e+00 
0.02917 	 0.00000000000000000000e+00 	 4.68253664715823180299e-06 	 0.00000000000000000000e+00 
0.03750 	 0.00000000000000000000e+00 	 6.39768480735151889649e-06 	 0.00000000000000000000e+00 
0.04583 	 0.00000000000000000000e+00 	 4.97528140561392590767e-06 	 0.00000000000000000000e+00 
0.05417 	 0.00000000000000000000e+00 	 4.94218797305505224955e-06 	 0.00000000000000000000e+00 
0.06250 	 0.00000000000000000000e+00 	 5.82366216114514088985e-06 	 0.00000000000000000000e+00 
0.07083 	 0.00000000000000000000e+00 	 8.58901024877199023512e-06 	 0.00000000000000000000e+00 
0.07917 	 0.00000000000000000000e+00 	 9.04368714203154399798e-06 	 0.00000000000000000000e+00 
0.08750 	 0.00000000000000000000e+00 	 8.56021250444491448245e-06 	 0.00000000000000000000e+00 
0.09583 	 0.00000000000000000000e+00 	 8.46181434379301179716e-06 	 0.00000000000000000000e+00 
0.10417 	 0.00000000000000000000e+00 	 8.80382332608130458568e-06 	 0.00000000000000000000e+00 
0.11250 	 0.00000000000000000000e+00 	 9.15796875174180526633e-06 	 0.00000000000000000000e+00 
0.12083 	 0.00000000000000000000e+00 	 1.06336165996687722170e-05 	 0.00000000000000000000e+00 
0.12917 	 0.00000000000000000000e+00 	 1.45654718122781202548e-05 	 0.00000000000000000000e+00 
0.13750 	 0.00000000000000000000e+00 	 1.72316967346431190028e-05 	 0.00000000000000000000e+00 
0.14583 	 0.00000000000000000000e+00 	 1.55697227045667975693e-05 	 0.00000000000000000000e+00 
0.15417 	 0.00000000000000000000e+00 	 1.89681329824793902853e-05 	 0.00000000000000000000e+00 
0.16250 	 0.00000000000000000000e+00 	 2.15807130482951052314e-05 	 0.00000000000000000000e+00 
0.17083 	 0.00000000000000000000e+00 	 2.04112229887443499821e-05 	 0.00000000000000000000e+00 
0.17917 	 0.00000000000000000000e+00 	 2.20540020254577155657e-05 	 0.00000000000000000000e+00 
0.18750 	 0.00000000000000000000e+00 	 2.44637627363120026963e-05 	 0.00000000000000000000e+00 
0.19583 	 0.00000000000000000000e+00 	 2.65785639820538094032e-05 	 0.00000000000000000000e+00 
0.20417 	 0.00000000000000000000e+00 	 3.00246500988216133855e-05 	 0.00000000000000000000e+00 
0.21250 	 0.00000000000000000000e+00 	 3.30897927503981848125e-05 	 0.00000000000000000000e+00 
0.22083 	 0.00000000000000000000e+00 	 3.52874574884468679599e-05 	 0.00000000000000000000e+00 
0.22917 	 0.00000000000000000000e+00 	 3.63780281976581668221e-05 	 0.00000000000000000000e+00 
0.23750 	 0.00000000000000000000e+00 	 3.70123531067170470979e-05 	 0.00000000000000000000e+00 
0.24583 	 0.00000000000000000000e+00 	 4.18261251453102818419e-05 	 0.00000000000000000000e+00 
0.25417 	 0.00000000000000000000e+00 	 4.58623482112482223037e-05 	 0.00000000000000000000e+00 
0.26250 	 0.00000000000000000000e+00 	 5.17971540733977835473e-05 	 0.00000000000000000000e+00 
0.27083 	 0.00000000000000000000e+00 	 5.54763855139521572745e-05 	 0.00000000000000000000e+00 
0.27917 	 0.00000000000000000000e+00 	 6.23445259537127498620e-05 	 0.00000000000000000000e+00 
0.28750 	 0.00000000000000000000e+00 	 6.78813942998146915841e-05 	 0.00000000000000000000e+00 
0.29583 	 0.00000000000000000000e+00 	 8.33539850553423350031e-05 	 0.00000000000000000000e+00 
0.30417 	 0.00000000000000000000e+00 	 8.87347290686414988782e-05 	 0.00000000000000000000e+00 
0.31250 	 0.00000000000000000000e+00 	 8.98481706210381154531e-05 	 0.00000000000000000000e+00 
0.32083 	 0.00000000000000000000e+00 	 1.02012203808535991388e-04 	 0.00000000000000000000e+00 
0.32917 	 0.00000000000000000000e+00 	 1.10639868947812652954e-04 	 0.00000000000000000000e+00 
0.33750 	 0.00000000000000000000e+00 	 1.16516279480743866425e-04 	 0.00000000000000000000e+00 
0.34583 	 0.00000000000000000000e+00 	 1.25995429737615693500e-04 	 0.00000000000000000000e+00 
0.35417 	 0.00000000000000000000e+00 	 1.40177842015668056028e-04 	 0.00000000000000000000e+00 
0.36250 	 0.00000000000000000000e+00 	 1.49531728927442713380e-04 	 0.00000000000000000000e+00 
0.37083 	 0.00000000000000000000e+00 	 1.65945448710901738692e-04 	 0.00000000000000000000e+00 
0.37917 	 0.00000000000000000000e+00 	 1.85819361721017577193e-04 	 0.00000000000000000000e+00 
0.38750 	 0.00000000000000000000e+00 	 1.98248689779944632389e-04 	 0.00000000000000000000e+00 
0.39583 	 0.00000000000000000000e+00 	 2.22450518170589050778e-04 	 0.00000000000000000000e+00 
0.40417 	 0.00000000000000000000e+00 	 2.41081832285133150842e-04 	 0.00000000000000000000e+00 
0.41250 	 0.00000000000000000000e+00 	 2.75330481163929129563e-04 	 0.00000000000000000000e+00 
0.42083 	 0.00000000000000000000e+00 	 2.96283361821850254377e-04 	 0.00000000000000000000e+00 
0.42917 	 0.00000000000000000000e+00 	 3.30026741740231275776e-04 	 0.00000000000000000000e+00 
0.43750 	 0.00000000000000000000e+00 	 3.56967473226979222292e-04 	 0.00000000000000000000e+00 
0.44583 	 0.00000000000000000000e+00 	 3.97214515282254319959e-04 	 0.00000000000000000000e+00 
0.45417 	 0.00000000000000000000e+00 	 4.37277174542977369476e-04 	 0.00000000000000000000e+00 
0.46250 	 0.00000000000000000000e+00 	 4.81348168372751057751e-04 	 0.00000000000000000000e+00 
0.47083 	 0.00000000000000000000e+00 	 5.38568931846968739809e-04 	 0.00000000000000000000e+00 
0.47917 	 0.00000000000000000000e+00 	 5.80569940538432690408e-04 	 0.00000000000000000000e+00 
0.48750 	 0.00000000000000000000e+00 	 6.38018121018394811401e-04 	 0.00000000000000000000e+00 
0.49583 	 0.00000000000000000000e+00 	 7.13580812547292045976e-04 	 0.00000000000000000000e+00 
0.50417 	 0.00000000000000000000e+00 	 7.80616826063678542237e-04 	 0.00000000000000000000e+00 
0.51250 	 0.00000000000000000000e+00 	 8.56049334824248407683e-04 	 0.00000000000000000000e+00 
0.52083 	 0.00000000000000000000e+00 	 9.31151711556817986669e-04 	 0.00000000000000000000e+00 
0.52917 	 0.00000000000000000000e+00 	 1.03283357826998607731e-03 	 0.00000000000000000000e+00 
0.53750 	 0.00000000000000000000e+00 	 1.13859062080743571148e-03 	 0.00000000000000000000e+00 
0.54583 	 0.00000000000000000000e+00 	 1.25952936749200027251e-03 	 0.00000000000000000000e+00 
0.55417 	 0.00000000000000000000e+00 	 1.40047828931845431619e-03 	 0.00000000000000000000e+00 
0.56250 	 0.00000000000000000000e+00 	 1.54906168628063476561e-03 	 0.00000000000000000000e+00 
0.57083 	 0.00000000000000000000e+00 	 1.72457850613282970623e-03 	 0.00000000000000000000e+00 
0.57917 	 0.00000000000000000000e+00 	 1.90744210539803304462e-03 	 0.00000000000000000000e+00 
0.58750 	 0.00000000000000000000e+00 	 2.10754094415485865657e-03 	 0.00000000000000000000e+00 
0.59583 	 0.00000000000000000000e+00 	 2.32633174259388965030e-03 	 0.00000000000000000000e+00 
0.60417 	 0.00000000000000000000e+00 	 2.57712088007262200146e-03 	 1.76284029970485237974e-08 
0.61250 	 0.00000000000000000000e+00 	 2.83909313146724984547e-03 	 9.34692606581989870309e-08 
0.62083 	 0.00000000000000000000e+00 	 3.11504423738470431413e-03 	 3.97726655766397850262e-08 
0.62917 	 0.00000000000000000000e+00 	 3.44749891831088502853e-03 	 1.73567105408246685190e-07 
0.63750 	 0.00000000000000000000e+00 	 3.79313360482953516178e-03 	 5.57232950259635650699e-08 
0.64583 	 0.00000000000000000000e+00 	 4.19315158427074983344e-03 	 1.20570708713604612666e-07 
0.65417 	 0.00000000000000000000e+00 	 4.63434893581611377644e-03 	 2.91585985040376392738e-07 
0.66250 	 0.00000000000000000000e+00 	 5.13551718071526049764e-03 	 1.19159577428737469347e-07 
0.67083 	 0.00000000000000000000e+00 	 5.65491132121598554655e-03 	 2.20323114947302666295e-07 
0.67917 	 0.00000000000000000000e+00 	 6.24349368816171004098e-03 	 1.33339138740141146080e-07 
0.68750 	 0.00000000000000000000e+00 	 6.90444133855267882377e-03 	 1.63381251459907189105e-07 
0.69583 	 0.00000000000000000000e+00 	 7.62753145808125945088e-03 	 4.18817790741805691325e-07 
0.70417 	 0.00000000000000000000e+00 	 8.41841391483309602062e-03 	 3.06970595411773992630e-07 
0.71250 	 0.00000000000000000000e+00 	 9.29521490329895949678e-03 	 3.06625287242032084318e-07 
0.72083 	 0.00000000000000000000e+00 	 1.02587563920456276839e-02 	 4.54094837224346451780e-07 
0.72917 	 0.00000000000000000000e+00 	 1.13649306908553560796e-02 	 4.11472378061361622601e-07 
0.73750 	 4.58099348804366411924e-08 	 1.25704221278124701755e-02 	 9.77401537138322300876e-07 
0.74583 	 2.71508973083088751493e-08 	 1.39265444010785756357e-02 	 1.69414623879678591877e-06 
0.75417 	 3.05901517672253207665e-08 	 1.53611561415466883751e-02 	 9.76733632067751761545e-07 
0.76250 	 1.19184789228375319660e-08 	 1.70267320830864432590e-02 	 4.79836210469326665911e-07 
0.77083 	 2.35165611916792947598e-08 	 1.88027337966404362035e-02 	 1.16727548787360727733e-06 
0.77917 	 1.65763088065254506725e-08 	 2.07361751820686127101e-02 	 1.17675988394504986224e-06 
0.78750 	 1.81446190204119644053e-08 	 2.29258750459849676429e-02 	 1.40585121561240176937e-06 
0.79583 	 6.01587437795509543662e-08 	 2.53736404664993246694e-02 	 2.19216937244757032342e-06 
0.80417 	 5.51119242943406401468e-08 	 2.80495814154021298747e-02 	 2.49180036884090135208e-06 
0.81250 	 2.07123373389298960742e-08 	 3.10573416911708484467e-02 	 2.45011304363646695021e-06 
0.82083 	 4.82630677712051333788e-09 	 3.43009211248651926796e-02 	 2.76813810103695208075e-06 
0.82917 	 2.52360548603464779077e-08 	 3.80456708458758938174e-02 	 2.74807120386081230675e-06 
0.83750 	 1.71898195289163192317e-08 	 4.19765252656487466987e-02 	 2.14999209489908150360e-06 
0.84583 	 3.16645207027124414265e-08 	 4.64037649858535933278e-02 	 2.53546629616765856739e-06 
0.85417 	 3.24083213545627121661e-08 	 5.14664280488554629067e-02 	 2.91229382515243246513e-06 
0.86250 	 2.62548698753912368849e-08 	 5.68863923830146001048e-02 	 3.17809004892413371154e-06 
0.87083 	 2.46849388512580095753e-08 	 6.29068601017841733114e-02 	 4.27913935679608674209e-06 
0.87917 	 1.75436319482797976162e-08 	 6.95478864898515514170e-02 	 5.52449573773676566672e-06 
0.88750 	 4.29349532644348272531e-08 	 7.69612397205769044328e-02 	 4.96852732834264259243e-06 
0.89583 	 4.57481640079840926215e-08 	 8.51514939859194935901e-02 	 4.86688182616797836112e-06 
0.90417 	 2.31610430551914246292e-08 	 9.42226011730236123753e-02 	 4.72729448634476543284e-06 
0.91250 	 3.44155807486618366345e-08 	 1.04401487480483765036e-01 	 5.95700604848918165813e-06 
0.92083 	 3.57092427752867585862e-08 	 1.15179646559808987472e-01 	 5.76415236004627657974e-06 
0.92917 	 2.82082461196084893672e-08 	 1.27886966832043647013e-01 	 6.87792917189827238307e-06 
0.93750 	 3.66052938343547764536e-08 	 1.41502375320078060961e-01 	 9.64279404627145545436e-06 
0.94583 	 2.46211749782702552594e-08 	 1.56229294178415384353e-01 	 9.97812919656517918309e-06 
0.95417 	 2.00713774015542982398e-08 	 1.72783240198928683684e-01 	 1.04675889331285913920e-05 
0.96250 	 1.44115086899399824197e-08 	 1.90835055643324535968e-01 	 1.34332398556972443070e-05 
0.97083 	 8.98297719852976532224e-09 	 2.11656188201868877830e-01 	 1.44323319024768293361e-05 
0.97917 	 0.00000000000000000000e+00 	 2.34492775935983860380e-01 	 1.85084255854949896022e-05 
0.98750 	 2.69663336681775175096e-09 	 2.59905391522084083800e-01 	 1.96800365146789906510e-05 
0.99583 	 1.58715229456020940112e-09 	 2.87752000387320849839e-01 	 1.99437626294637355268e-05 
1.00417 	 5.46680915159542440286e-09 	 3.18671207683526191978e-01 	 2.22204059782521254763e-05 
1.01250 	 9.71287263543457922298e-09 	 3.54156256141838876594e-01 	 2.59639244767387821194e-05 
1.02083 	 3.11536669732568449505e-09 	 3.94059228774787495553e-01 	 2.84657062093331855138e-05 
1.02917 	 1.71936262871690605070e-09 	 4.43249128584666807207e-01 	 2.99058910503657341914e-05 
1.03750 	 1.38241868352423937721e-09 	 5.13148009025088280843e-01 	 3.16766742637570168661e-05 
1.04583 	 3.20071889922544352947e-09 	 8.52483724257249497747e-01 	 3.32963639686773078450e-05 
1.05417 	 8.46709366515408437019e-09 	 6.26135069852539860591e-01 	 4.41157930218571460185e-05 
1.06250 	 1.12748997893448097890e-08 	 4.84020191422262269221e-01 	 4.34836266309638643218e-05 
1.07083 	 9.08508607016195676648e-09 	 4.20120048000433843338e-01 	 4.87348541116581538920e-05 
1.07917 	 4.46489129298952192321e-08 	 3.71183153328732418075e-01 	 5.05475834569399232795e-05 
1.08750 	 4.63634977055290120069e-08 	 3.31294060321924654922e-01 	 5.76121090353136724484e-05 
1.09583 	 2.91767045659281251168e-08 	 2.96208500551882414342e-01 	 6.21081908268112167911e-05 
1.10417 	 4.29109482469198941752e-08 	 2.64839636558276858569e-01 	 6.94943406386464495672e-05 
1.11250 	 4.82915608087527807484e-08 	 2.37361915449322335991e-01 	 7.22378975655383118431e-05 
1.12083 	 6.50624501634305023902e-08 	 2.13238655739461407945e-01 	 8.39277941241919266070e-05 
1.12917 	 8.75561117639570400192e-08 	 1.90792981149779800054e-01 	 9.14929282458003311027e-05 
1.13750 	 1.10954016297061674826e-07 	 1.70929931130120810190e-01 	 1.06179396648703317624e-04 
1.14583 	 1.13889619656457459664e-07 	 1.52969970570820790190e-01 	 1.16822027540500100241e-04 
1.15417 	 1.41797902064442768328e-07 	 1.36973749381798737268e-01 	 1.25039185145946988176e-04 
1.16250 	 1.46619832929054163158e-07 	 1.22781229478542322497e-01 	 1.38242563762582090954e-04 
1.17083 	 1.68043124628150545765e-07 	 1.10261924159265875534e-01 	 1.66029247010729110118e-04 
1.17917 	 2.12550278614458250454e-07 	 9.87997164450510334532e-02 	 1.77474449443290962797e-04 
1.18750 	 2.09273824806190813741e-07 	 8.87440177038249788932e-02 	 1.97564481653705046379e-04 
1.19583 	 2.80064101661217087739e-07 	 7.94944855604862582465e-02 	 2.29319786819936886251e-04 
1.20417 	 2.50227953570248332506e-07 	 7.11994769596269727607e-02 	 2.62973882575038013683e-04 
1.21250 	 2.85957747191474584466e-07 	 6.37177828216397429406e-02 	 2.77595002009768600411e-04 
1.22083 	 3.44160572248158885184e-07 	 5.72438932699112432156e-02 	 3.21223344858965857707e-04 
1.22917 	 3.14670341671044293905e-07 	 5.12627870609836527871e-02 	 3.49578162107731446606e-04 
1.23750 	 3.00575212953434848367e-07 	 4.59680811277566048201e-02 	 3.87224399732194804729e-04 
1.24583 	 3.96088891790408366924e-07 	 4.11656732319069171289e-02 	 4.26732874351702022413e-04 
1.25417 	 4.22456946641437164588e-07 	 3.70090550492427200480e-02 	 4.74970358443071950707e-04 
1.26250 	 5.40550296702075190976e-07 	 3.32355823853204696006e-02 	 5.26241922932769046889e-04 
1.27083 	 5.84907094826250366506e-07 	 2.97389196141553541208e-02 	 5.92515667548371453496e-04 
1.27917 	 5.55726986146023701677e-07 	 2.65149817739598961386e-02 	 6.63045182350185642942e-04 
1.28750 	 6.97617081854498717360e-07 	 2.38514357867934262414e-02 	 7.27645122652610036422e-04 
1.29583 	 6.27093909331426235380e-07 	 2.14072815956266870874e-02 	 7.99864195279423881649e-04 
1.30417 	 7.79732298416296344261e-07 	 1.92270074219723467734e-02 	 8.93251446972482968448e-04 
1.31250 	 9.46822981885566929108e-07 	 1.72418471574100999610e-02 	 9.80033105833236651422e-04 
1.32083 	 9.99861488863227375806e-07 	 1.54213488961135077038e-02 	 1.09128174959448125646e-03 
1.32917 	 1.26079865457205264922e-06 	 1.38215825068550603183e-02 	 1.22693475927163997245e-03 
1.33750 	 1.36403109187496704107e-06 	 1.24064891441286635765e-02 	 1.35045765788885103846e-03 
1.34583 	 1.54891762004405214337e-06 	 1.11308833822664592084e-02 	 1.49308922749620738048e-03 
1.35417 	 1.66170135343562210456e-06 	 9.94615944267202359286e-03 	 1.65665447971992353324e-03 
1.36250 	 1.99359591322877953122e-06 	 8.95497112924345702034e-03 	 1.83736650433847592892e-03 
1.37083 	 1.83657004676567489859e-06 	 7.98808021755959864196e-03 	 2.04384988307581812531e-03 
1.37917 	 2.10309950903689553547e-06 	 7.18125732494667885775e-03 	 2.25466336026789587743e-03 
1.38750 	 2.35339336882221135519e-06 	 6.41050471527620201184e-03 	 2.53151606029583054261e-03 
1.39583 	 2.63945436213096286905e-06 	 5.77658873541660265044e-03 	 2.80591942206282959904e-03 
1.40417 	 2.92072453907050958187e-06 	 5.16488861989722151946e-03 	 3.16428780855224816085e-03 
1.41250 	 2.98851404498736848876e-06 	 4.64799971228538680301e-03 	 3.50752731176899113300e-03 
1.42083 	 3.23405024465871339883e-06 	 4.16549001795680964161e-03 	 3.88207359041206623296e-03 
1.42917 	 3.56118329442309174701e-06 	 3.73106581431834017845e-03 	 4.27240110306598228768e-03 
1.43750 	 4.14993690961724626890e-06 	 3.34774388597651982591e-03 	 4.77136941841344464771e-03 
1.44583 	 4.52005110561755321012e-06 	 3.01104513302473354372e-03 	 5.29869318324149764926e-03 
1.45417 	 4.95723842665395856270e-06 	 2.70064562485457671653e-03 	 5.86301194703897545629e-03 
1.46250 	 5.65492412392471963632e-06 	 2.42219976481955435663e-03 	 6.54496522215194075078e-03 
1.47083 	 6.63420548498088779915e-06 	 2.16815834808495701627e-03 	 7.28169178528197732353e-03 
1.47917 	 7.06429114195540934306e-06 	 1.95525946533747340544e-03 	 8.09145423356748966226e-03 
1.48750 	 8.08289200831166318873e-06 	 1.75032196908594841860e-03 	 8.90308402104482421446e-03 
1.49583 	 8.89951941494495800053e-06 	 1.57658139815668543217e-03 	 9.98240911206084435836e-03 
1.50417 	 9.65314383311244535223e-06 	 1.42539782327290548251e-03 	 1.10992214803893769759e-02 
1.51250 	 1.04319245509028595432e-05 	 1.27471681048230058714e-03 	 1.23650724191593959500e-02 
1.52083 	 1.15368308890554238514e-05 	 1.13633087436569579776e-03 	 1.36584272383708203724e-02 
1.52917 	 1.27025783764707602194e-05 	 1.02549896608927987654e-03 	 1.51681669651763488538e-02 
1.53750 	 1.39789362130821182272e-05 	 9.16467232107996037163e-04 	 1.68494002476932865087e-02 
1.54583 	 1.54658001090331101836e-05 	 8.23663577449788050604e-04 	 1.88881078110650323099e-02 
1.55417 	 1.68055865106318425982e-05 	 7.38205462490051488728e-04 	 2.10033387478896840794e-02 
1.56250 	 1.94909100347641946053e-05 	 6.62062132602899192611e-04 	 2.31064968471571992314e-02 
1.57083 	 2.13525526741036746937e-05 	 5.93426239892222710977e-04 	 2.59096726232516880173e-02 
1.57917 	 2.38084812253743478643e-05 	 5.30119882898203343032e-04 	 2.88926208629185533872e-02 
1.58750 	 2.67405120331568120127e-05 	 4.75902921063505466096e-04 	 3.21013714775672046042e-02 
1.59583 	 2.93554207538703530137e-05 	 4.29323258028379379711e-04 	 3.53855315113508137048e-02 
1.60417 	 3.19072826731972794697e-05 	 3.78682156647957874219e-04 	 3.92094653337246301650e-02 
1.61250 	 3.55394393080900273738e-05 	 3.41388951523610261873e-04 	 4.38575191204201228490e-02 
1.62083 	 3.90417522217771846040e-05 	 3.05194486090432505303e-04 	 4.87417698430224408113e-02 
1.62917 	 4.29513653038858034868e-05 	 2.74249363217558795539e-04 	 5.44066953220960977666e-02 
1.63750 	 4.68660047829411277901e-05 	 2.44644189702950529998e-04 	 6.03300752782537988428e-02 
1.64583 	 5.14289145310153322896e-05 	 2.21759530186583115339e-04 	 6.69903770012343913187e-02 
1.65417 	 5.68830109000439398405e-05 	 1.99190870885137952858e-04 	 7.46555777285748956018e-02 
1.66250 	 6.25885736886349996035e-05 	 1.78431417900391158047e-04 	 8.28704134971390005138e-02 
1.67083 	 6.82809232293924209516e-05 	 1.61894771786205601523e-04 	 9.17085273763015018655e-02 
1.67917 	 7.56320403977230732145e-05 	 1.42382048115817597686e-04 	 1.01456434948323542811e-01 
1.68750 	 8.37028227343817541597e-05 	 1.30429745547421780142e-04 	 1.13178133207247261227e-01 
1.69583 	 9.31751155507441183650e-05 	 1.17048676516592483027e-04 	 1.26315926740461270672e-01 
1.70417 	 1.03195990069167143721e-04 	 1.03744661089912618103e-04 	 1.40220986351143467319e-01 
1.71250 	 1.13690269741422277246e-04 	 9.31128433651462185340e-05 	 1.55577892969651326860e-01 
1.72083 	 1.25984904978785261162e-04 	 8.26316472048417371239e-05 	 1.73074901517753704239e-01 
1.72917 	 1.39898112130059694164e-04 	 7.55963469321985583917e-05 	 1.92886243820218183931e-01 
1.73750 	 1.55278353090360673842e-04 	 6.73878322237151094207e-05 	 2.14264386768734799160e-01 
1.74583 	 1.72443361297117104224e-04 	 6.05162387100399631066e-05 	 2.38398034047854673334e-01 
1.75417 	 1.90000659933912757153e-04 	 5.35373941448125714162e-05 	 2.65076344923083073724e-01 
1.76250 	 2.11245197365304127448e-04 	 4.88738037938480341890e-05 	 2.94925551077667380540e-01 
1.77083 	 2.32727280652827837491e-04 	 4.28311447485732522977e-05 	 3.27815693385720585695e-01 
1.77917 	 2.57682441363236503298e-04 	 3.77961505907391603714e-05 	 3.63767670241715246338e-01 
1.78750 	 2.87271376005749723773e-04 	 3.46584248651350906954e-05 	 4.04561242045271551859e-01 
1.79583 	 3.15651894026867040847e-04 	 3.09257719316998892886e-05 	 4.49168267762784012564e-01 
1.80417 	 3.48856473663130780584e-04 	 2.70725700375673547829e-05 	 5.00124830708120415856e-01 
1.81250 	 3.85712203547331140049e-04 	 2.45597485501896267744e-05 	 5.57352297243568717278e-01 
1.82083 	 4.27397340986708311993e-04 	 2.32408490440333264390e-05 	 6.19135676331052153820e-01 
1.82917 	 4.74105733363369274014e-04 	 1.96440361234835958264e-05 	 6.87404217703133868511e-01 
1.83750 	 5.23224892618817378868e-04 	 1.72503331402403584885e-05 	 7.63899832773866305224e-01 
1.84583 	 5.82607021452825803859e-04 	 1.58510596145645982658e-05 	 8.50075507984962785990e-01 
1.85417 	 6.45810321835058086595e-04 	 1.38589822223758029891e-05 	 9.46597367625757191156e-01 
1.86250 	 7.16131965097852496611e-04 	 1.24948638503315189032e-05 	 1.05086429657360369561e+00 
1.87083 	 7.93408782202271707987e-04 	 1.20781709131188036573e-05 	 1.16763303657258799007e+00 
1.87917 	 8.81737574771834353021e-04 	 1.09811342380723862610e-05 	 1.29843925939049364970e+00 
1.88750 	 9.72460685660019941504e-04 	 1.05871516882192757796e-05 	 1.44081020966629602675e+00 
1.89583 	 1.07549006307565615283e-03 	 8.75207946978075048501e-06 	 1.60338004252508481429e+00 
1.90417 	 1.18815047662091982823e-03 	 7.95932016510454626637e-06 	 1.78508502685617820305e+00 
1.91250 	 1.31468412046114647464e-03 	 7.02568989576701353718e-06 	 1.98208659932725472785e+00 
1.92083 	 1.45667744007288847523e-03 	 5.98090725076881753029e-06 	 2.20217312964932343533e+00 
1.92917 	 1.60920363881529235317e-03 	 5.42189258102698880449e-06 	 2.44433914067297441974e+00 
1.93750 	 1.77936637099118883168e-03 	 4.74359833212001956920e-06 	 2.70797060790297150490e+00 
1.94583 	 1.97100063316020014670e-03 	 4.03490517840974630733e-06 	 2.99785420770078081532e+00 
1.95417 	 2.17270024530869312884e-03 	 3.64811120527234539001e-06 	 3.29977766033290098591e+00 
1.96250 	 2.40434911941640912236e-03 	 3.38945145439706849199e-06 	 3.59728947819706945666e+00 
1.97083 	 2.66165263386590727340e-03 	 2.75683135737273192113e-06 	 3.85109397707751011097e+00 
1.97917 	 2.95089028033813927099e-03 	 2.50465950720149907409e-06 	 3.96987784571687374324e+00 
1.98750 	 3.27671867339830377719e-03 	 2.31417755657220009980e-06 	 3.81645010850752974818e+00 
1.99583 	 3.63211041866533202935e-03 	 2.11621525962281711966e-06 	 2.37673606526557978924e+00 
2.00417 	 1.38661896899852798981e+00 	 2.41437687034419195902e-05 	 2.07336305314339170991e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.673;     /* cm^-1 */
mus         = 312.0;  /* cm^-1 */
g           = 0.9;  
nt          = 1.33;
Nphotons    = 1000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz.
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);