time elapsed: 12.0787 seconds

=================================

sim results:

number of photons = 1000000
overflow: 1.35194000000000000000e+05
sum: 8.64806000000000000000e+05
sum: 8.64806000000000000000e+05
avg: 8.64805999999999963634e-01
perc_in: 86.48

number of photons = 1000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75280000000000024674e-01 
0.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77320000000000010942e-01 
0.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.63160000000000005027e-01 
0.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.69999999999999962252e-01 
0.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.65919999999999989715e-01 
0.04583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73359999999999991882e-01 
0.05417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75160000000000015685e-01 
0.06250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72880000000000011440e-01 
0.07083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.76840000000000030500e-01 
0.07917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.79360000000000052722e-01 
0.08750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72160000000000013021e-01 
0.09583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.76359999999999994547e-01 
0.10417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75760000000000005116e-01 
0.11250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72760000000000002451e-01 
0.12083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72040000000000004032e-01 
0.12917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.67600000000000004530e-01 
0.13750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.82359999999999999876e-01 
0.14583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.87999999999999978240e-01 
0.15417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72519999999999984475e-01 
0.16250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.81160000000000021014e-01 
0.17083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72640000000000048974e-01 
0.17917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77079999999999992966e-01 
0.18750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.81880000000000019433e-01 
0.19583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73840000000000027836e-01 
0.20417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.84640000000000004121e-01 
0.21250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75280000000000024674e-01 
0.22083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73000000000000020428e-01 
0.22917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80799999999999994049e-01 
0.23750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80440000000000022595e-01 
0.24583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77079999999999992966e-01 
0.25417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80200000000000004619e-01 
0.26250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.78520000000000045315e-01 
0.27083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.85240000000000049063e-01 
0.27917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77680000000000037907e-01 
0.28750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.86679999999999990390e-01 
0.29583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.90759999999999962927e-01 
0.30417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.78279999999999971827e-01 
0.31250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.92439999999999977742e-01 
0.32083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.89800000000000002043e-01 
0.32917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.90759999999999962927e-01 
0.33750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.85839999999999982983e-01 
0.34583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.85240000000000049063e-01 
0.35417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.85719999999999973994e-01 
0.36250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.91239999999999998881e-01 
0.37083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.98080000000000011617e-01 
0.37917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.87760000000000015774e-01 
0.38750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.93999999999999983569e-01 
0.39583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.85960000000000047482e-01 
0.40417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.93879999999999974580e-01 
0.41250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.08159999999999989484e-01 
0.42083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.05160000000000042331e-01 
0.42917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.03480000000000027516e-01 
0.43750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.95080000000000008953e-01 
0.44583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.95080000000000008953e-01 
0.45417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.85960000000000047482e-01 
0.46250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.04680000000000006377e-01 
0.47083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.99280000000000045990e-01 
0.47917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.09599999999999986322e-01 
0.48750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.98319999999999974083e-01 
0.49583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.07200000000000028599e-01 
0.50417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.07319999999999982077e-01 
0.51250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.16560000000000008047e-01 
0.52083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.05759999999999976250e-01 
0.52917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.08760000000000034426e-01 
0.53750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.10439999999999993729e-01 
0.54583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.05039999999999977831e-01 
0.55417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.21720000000000005969e-01 
0.56250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.14879999999999993232e-01 
0.57083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.22440000000000004388e-01 
0.57917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.18840000000000012292e-01 
0.58750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.20400000000000018119e-01 
0.59583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.19799999999999973177e-01 
0.60417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.23759999999999992237e-01 
0.61250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.34320000000000006057e-01 
0.62083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.25560000000000016041e-01 
0.62917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.36359999999999992326e-01 
0.63750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.34320000000000006057e-01 
0.64583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.27840000000000020286e-01 
0.65417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.36960000000000037268e-01 
0.66250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.39240000000000041513e-01 
0.67083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.38040000000000007141e-01 
0.67917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.33720000000000016627e-01 
0.68750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.47160000000000024123e-01 
0.69583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.38520000000000043094e-01 
0.70417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.38400000000000034106e-01 
0.71250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.42359999999999997655e-01 
0.72083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.31199999999999994404e-01 
0.72917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.51599999999999968114e-01 
0.73750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.60120000000000051177e-01 
0.74583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.52680000000000049010e-01 
0.75417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.57600000000000028955e-01 
0.76250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.53400000000000047429e-01 
0.77083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.59520000000000006235e-01 
0.77917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.51239999999999996660e-01 
0.78750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.51599999999999968114e-01 
0.79583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.62640000000000017888e-01 
0.80417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.70920000000000027462e-01 
0.81250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.70560000000000000497e-01 
0.82083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.53999999999999981348e-01 
0.82917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.57119999999999993001e-01 
0.83750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.65880000000000038529e-01 
0.84583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.78000000000000002665e-01 
0.85417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.83039999999999991598e-01 
0.86250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.85200000000000042366e-01 
0.87083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.81720000000000003748e-01 
0.87917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.91440000000000010161e-01 
0.88750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.84599999999999997424e-01 
0.89583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.79439999999999999503e-01 
0.90417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.98760000000000003340e-01 
0.91250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.05000000000000026645e-01 
0.92083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.93479999999999996430e-01 
0.92917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.94679999999999975291e-01 
0.93750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.96239999999999981117e-01 
0.94583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.92399999999999971045e-01 
0.95417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.07399999999999984368e-01 
0.96250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.04879999999999962146e-01 
0.97083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.23360000000000014087e-01 
0.97917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.06079999999999996518e-01 
0.98750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.34759999999999979803e-01 
0.99583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.15920000000000011919e-01 
1.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.19640000000000013003e-01 
1.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.21920000000000017248e-01 
1.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.28640000000000020997e-01 
1.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.25279999999999991367e-01 
1.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.38599999999999989875e-01 
1.04583 	 1.14886584094663485311e-01 	 1.82616033435674793850e+01 	 4.23960000000000003517e-01 
1.05417 	 2.18687294754367600458e-01 	 0.00000000000000000000e+00 	 4.36439999999999994618e-01 
1.06250 	 1.24464146031668221326e-01 	 0.00000000000000000000e+00 	 4.48799999999999976730e-01 
1.07083 	 9.60605845416235282208e-02 	 0.00000000000000000000e+00 	 4.41840000000000010516e-01 
1.07917 	 8.10943573125716271610e-02 	 0.00000000000000000000e+00 	 4.47120000000000017426e-01 
1.08750 	 7.33563628140290746593e-02 	 0.00000000000000000000e+00 	 4.65840000000000031832e-01 
1.09583 	 6.57241886861702068190e-02 	 0.00000000000000000000e+00 	 4.68119999999999980567e-01 
1.10417 	 5.98405371917557632466e-02 	 0.00000000000000000000e+00 	 4.49759999999999993125e-01 
1.11250 	 5.64321122426764062996e-02 	 0.00000000000000000000e+00 	 4.66320000000000012275e-01 
1.12083 	 5.23731306195306806073e-02 	 0.00000000000000000000e+00 	 4.67279999999999973159e-01 
1.12917 	 5.13108558508767326201e-02 	 0.00000000000000000000e+00 	 4.67160000000000019682e-01 
1.13750 	 4.73735526264175421662e-02 	 0.00000000000000000000e+00 	 4.67279999999999973159e-01 
1.14583 	 4.47013913677344887354e-02 	 0.00000000000000000000e+00 	 4.73279999999999978488e-01 
1.15417 	 4.30617788932277714697e-02 	 0.00000000000000000000e+00 	 4.85520000000000007123e-01 
1.16250 	 4.20650441296004234948e-02 	 0.00000000000000000000e+00 	 4.72079999999999999627e-01 
1.17083 	 4.06464006275585806871e-02 	 0.00000000000000000000e+00 	 4.82279999999999986482e-01 
1.17917 	 3.88445775419580183185e-02 	 0.00000000000000000000e+00 	 4.82279999999999986482e-01 
1.18750 	 3.78137337923408131668e-02 	 0.00000000000000000000e+00 	 4.95359999999999967013e-01 
1.19583 	 3.70347949660669514826e-02 	 0.00000000000000000000e+00 	 4.99199999999999977085e-01 
1.20417 	 3.59049258778677618520e-02 	 0.00000000000000000000e+00 	 5.03879999999999994564e-01 
1.21250 	 3.55300011232052223575e-02 	 0.00000000000000000000e+00 	 4.96199999999999974420e-01 
1.22083 	 3.45724831116696815214e-02 	 0.00000000000000000000e+00 	 4.93079999999999962768e-01 
1.22917 	 3.33973993619121611864e-02 	 0.00000000000000000000e+00 	 5.10240000000000026859e-01 
1.23750 	 3.28306400606394946373e-02 	 0.00000000000000000000e+00 	 5.08440000000000003055e-01 
1.24583 	 3.23805980931257259003e-02 	 0.00000000000000000000e+00 	 5.19959999999999977760e-01 
1.25417 	 3.13021227624833003889e-02 	 0.00000000000000000000e+00 	 4.93799999999999961187e-01 
1.26250 	 3.04169580812316681095e-02 	 0.00000000000000000000e+00 	 5.13359999999999927489e-01 
1.27083 	 2.94162480647520187260e-02 	 0.00000000000000000000e+00 	 5.25000000000000022204e-01 
1.27917 	 2.99154626534234129032e-02 	 0.00000000000000000000e+00 	 5.21639999999999992575e-01 
1.28750 	 2.96101108337828121397e-02 	 0.00000000000000000000e+00 	 5.17920000000000047002e-01 
1.29583 	 2.86220031513387436484e-02 	 0.00000000000000000000e+00 	 5.14319999999999999396e-01 
1.30417 	 2.81170347710288787146e-02 	 0.00000000000000000000e+00 	 5.40119999999999933493e-01 
1.31250 	 2.72788545590053957413e-02 	 0.00000000000000000000e+00 	 5.58720000000000105445e-01 
1.32083 	 2.76035104511709455943e-02 	 0.00000000000000000000e+00 	 5.39040000000000074643e-01 
1.32917 	 2.64963354650195465068e-02 	 0.00000000000000000000e+00 	 5.37480000000000068816e-01 
1.33750 	 2.58308935784322193929e-02 	 0.00000000000000000000e+00 	 5.62799999999999966960e-01 
1.34583 	 2.61235676213650222510e-02 	 0.00000000000000000000e+00 	 5.60520000000000018225e-01 
1.35417 	 2.64123105989704752561e-02 	 0.00000000000000000000e+00 	 5.48159999999999980602e-01 
1.36250 	 2.58844534907080973951e-02 	 0.00000000000000000000e+00 	 5.79720000000000013074e-01 
1.37083 	 2.52505634580917279197e-02 	 0.00000000000000000000e+00 	 5.66400000000000014566e-01 
1.37917 	 2.49262609988634038782e-02 	 0.00000000000000000000e+00 	 5.56920000000000081641e-01 
1.38750 	 2.50741699865650903567e-02 	 0.00000000000000000000e+00 	 5.85360000000000102460e-01 
1.39583 	 2.45404120293180698364e-02 	 0.00000000000000000000e+00 	 5.87879999999999958149e-01 
1.40417 	 2.42354658534643767342e-02 	 0.00000000000000000000e+00 	 5.88840000000000030056e-01 
1.41250 	 2.36535983237544343571e-02 	 0.00000000000000000000e+00 	 5.96399999999999930189e-01 
1.42083 	 2.35945424414028409599e-02 	 0.00000000000000000000e+00 	 5.92320000000000068674e-01 
1.42917 	 2.38578443615348363693e-02 	 0.00000000000000000000e+00 	 5.98319999999999962981e-01 
1.43750 	 2.37068061129454762948e-02 	 0.00000000000000000000e+00 	 6.17639999999999966818e-01 
1.44583 	 2.33246821231663514773e-02 	 0.00000000000000000000e+00 	 6.14040000000000030234e-01 
1.45417 	 2.25116942484104298750e-02 	 0.00000000000000000000e+00 	 6.25800000000000022915e-01 
1.46250 	 2.30862916436909912377e-02 	 0.00000000000000000000e+00 	 6.22920000000000029239e-01 
1.47083 	 2.24855441890701203411e-02 	 0.00000000000000000000e+00 	 6.19800000000000017586e-01 
1.47917 	 2.21281509861602047884e-02 	 0.00000000000000000000e+00 	 6.15360000000000018083e-01 
1.48750 	 2.22952241236167546246e-02 	 0.00000000000000000000e+00 	 6.40079999999999982307e-01 
1.49583 	 2.21627321764569992779e-02 	 0.00000000000000000000e+00 	 6.37920000000000042562e-01 
1.50417 	 2.19769311049782534173e-02 	 0.00000000000000000000e+00 	 6.47880000000000011440e-01 
1.51250 	 2.24742741368700663096e-02 	 0.00000000000000000000e+00 	 6.47399999999999975486e-01 
1.52083 	 2.15102702721711065703e-02 	 0.00000000000000000000e+00 	 6.70680000000000053895e-01 
1.52917 	 2.19012822086017307222e-02 	 0.00000000000000000000e+00 	 6.67080000000000006288e-01 
1.53750 	 2.15594830574389363653e-02 	 0.00000000000000000000e+00 	 6.60600000000000076028e-01 
1.54583 	 2.11238566884563647164e-02 	 0.00000000000000000000e+00 	 6.61679999999999934879e-01 
1.55417 	 2.10521192466807394172e-02 	 0.00000000000000000000e+00 	 6.83760000000000034426e-01 
1.56250 	 2.11215165199968926690e-02 	 0.00000000000000000000e+00 	 6.85799999999999965183e-01 
1.57083 	 2.09173599904882573375e-02 	 0.00000000000000000000e+00 	 6.86520000000000019114e-01 
1.57917 	 2.07124958476962543752e-02 	 0.00000000000000000000e+00 	 7.10879999999999956373e-01 
1.58750 	 2.09768369715893805705e-02 	 0.00000000000000000000e+00 	 7.03560000000000074216e-01 
1.59583 	 2.07733285359073885368e-02 	 0.00000000000000000000e+00 	 7.07640000000000046754e-01 
1.60417 	 2.04096286719203136306e-02 	 0.00000000000000000000e+00 	 7.09080000000000043592e-01 
1.61250 	 1.97878919316551819818e-02 	 0.00000000000000000000e+00 	 6.99000000000000065725e-01 
1.62083 	 2.06245272078999265786e-02 	 0.00000000000000000000e+00 	 7.14359999999999994991e-01 
1.62917 	 2.01190523559143900900e-02 	 0.00000000000000000000e+00 	 7.22879999999999967031e-01 
1.63750 	 1.92737650262356056963e-02 	 0.00000000000000000000e+00 	 7.44480000000000030624e-01 
1.64583 	 1.98793315134230749730e-02 	 0.00000000000000000000e+00 	 7.42680000000000006821e-01 
1.65417 	 1.95992728273737294720e-02 	 0.00000000000000000000e+00 	 7.36680000000000001492e-01 
1.66250 	 1.91337913117273321351e-02 	 0.00000000000000000000e+00 	 7.46519999999999961382e-01 
1.67083 	 1.93778255495441614764e-02 	 0.00000000000000000000e+00 	 7.44360000000000021636e-01 
1.67917 	 2.00800703918331442666e-02 	 0.00000000000000000000e+00 	 7.43640000000000078728e-01 
1.68750 	 1.90707184577462753039e-02 	 0.00000000000000000000e+00 	 7.57319999999999993179e-01 
1.69583 	 1.94449182868567105320e-02 	 0.00000000000000000000e+00 	 7.65240000000000031299e-01 
1.70417 	 1.96497869359013692392e-02 	 0.00000000000000000000e+00 	 7.77000000000000023981e-01 
1.71250 	 1.88110308924028073185e-02 	 0.00000000000000000000e+00 	 7.63680000000000025473e-01 
1.72083 	 1.95934780510839713641e-02 	 0.00000000000000000000e+00 	 7.89959999999999995524e-01 
1.72917 	 1.88557594132647554641e-02 	 0.00000000000000000000e+00 	 7.95120000000000048956e-01 
1.73750 	 1.89378652062195257377e-02 	 0.00000000000000000000e+00 	 7.95960000000000000853e-01 
1.74583 	 1.93245857053930027158e-02 	 0.00000000000000000000e+00 	 8.01839999999999997193e-01 
1.75417 	 1.89769381684314793202e-02 	 0.00000000000000000000e+00 	 8.07479999999999975557e-01 
1.76250 	 1.90069479146204659004e-02 	 0.00000000000000000000e+00 	 8.32439999999999957758e-01 
1.77083 	 1.87066718544320852169e-02 	 0.00000000000000000000e+00 	 8.49119999999999985896e-01 
1.77917 	 1.90658073807027719782e-02 	 0.00000000000000000000e+00 	 8.23799999999999976730e-01 
1.78750 	 1.90438633105502845566e-02 	 0.00000000000000000000e+00 	 8.37840000000000029168e-01 
1.79583 	 1.88112730722569745923e-02 	 0.00000000000000000000e+00 	 8.48520000000000051976e-01 
1.80417 	 1.89400709637604219848e-02 	 0.00000000000000000000e+00 	 8.48520000000000051976e-01 
1.81250 	 1.82256447048790778953e-02 	 0.00000000000000000000e+00 	 8.58240000000000002878e-01 
1.82083 	 1.88743136096286741321e-02 	 0.00000000000000000000e+00 	 8.63760000000000083276e-01 
1.82917 	 1.85086529761313914322e-02 	 0.00000000000000000000e+00 	 8.90160000000000062315e-01 
1.83750 	 1.85532729272583768454e-02 	 0.00000000000000000000e+00 	 8.90519999999999978257e-01 
1.84583 	 1.88625969351514655159e-02 	 0.00000000000000000000e+00 	 9.02040000000000063984e-01 
1.85417 	 1.87684224326709336861e-02 	 0.00000000000000000000e+00 	 9.03119999999999922835e-01 
1.86250 	 1.82539919430477204365e-02 	 0.00000000000000000000e+00 	 9.02999999999999913847e-01 
1.87083 	 1.86292213640405941721e-02 	 0.00000000000000000000e+00 	 8.87160000000000059650e-01 
1.87917 	 1.84454323221763423490e-02 	 0.00000000000000000000e+00 	 9.22320000000000028706e-01 
1.88750 	 1.83954945370658033699e-02 	 0.00000000000000000000e+00 	 9.32039999999999979607e-01 
1.89583 	 1.88903793897146517200e-02 	 0.00000000000000000000e+00 	 9.40440000000000053682e-01 
1.90417 	 1.84804673248797346474e-02 	 0.00000000000000000000e+00 	 9.25919999999999965290e-01 
1.91250 	 1.86200068444485160313e-02 	 0.00000000000000000000e+00 	 9.35400000000000009237e-01 
1.92083 	 1.78919872064038330828e-02 	 0.00000000000000000000e+00 	 9.46680000000000076987e-01 
1.92917 	 1.82355222755041547489e-02 	 0.00000000000000000000e+00 	 9.54479999999999884075e-01 
1.93750 	 1.82189055233044454318e-02 	 0.00000000000000000000e+00 	 9.67320000000000068674e-01 
1.94583 	 1.85045543700069654858e-02 	 0.00000000000000000000e+00 	 9.65280000000000137916e-01 
1.95417 	 1.84120857097888404597e-02 	 0.00000000000000000000e+00 	 1.00151999999999996582e+00 
1.96250 	 1.80155469638982983216e-02 	 0.00000000000000000000e+00 	 9.96119999999999894413e-01 
1.97083 	 1.79913601171014583824e-02 	 0.00000000000000000000e+00 	 9.95160000000000044551e-01 
1.97917 	 1.78913676985523115159e-02 	 0.00000000000000000000e+00 	 1.01483999999999996433e+00 
1.98750 	 1.78697745346720719695e-02 	 0.00000000000000000000e+00 	 1.02923999999999993271e+00 
1.99583 	 1.82482669553184415068e-02 	 0.00000000000000000000e+00 	 2.02799999999999994160e-02 
2.00417 	 6.57141723190083126838e-01 	 0.00000000000000000000e+00 	 2.22780000000000022453e+00 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.0;     /* cm^-1 */
mus         = 0.0;  /* cm^-1 */
g           = 0.9;  
nt          = 1.33;
Nphotons    = 1e6; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);