time elapsed: 14.1013 seconds

=================================

sim results:

number of photons = 10000000
overflow: 1.35513600000000000000e+06
sum: 8.64486400000000000000e+06
sum: 8.64486400000000000000e+06
avg: 8.64486399999999988175e-01
perc_in: 86.45

number of photons = 10000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74620000000000030749e-01 
0.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75519999999999987139e-01 
0.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74247999999999991783e-01 
0.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75123999999999979682e-01 
0.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.68259999999999998455e-01 
0.04583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75280000000000024674e-01 
0.05417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75364000000000053170e-01 
0.06250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73936000000000012822e-01 
0.07083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73467999999999988869e-01 
0.07917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74704000000000003734e-01 
0.08750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75123999999999979682e-01 
0.09583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73948000000000024823e-01 
0.10417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.76071999999999984077e-01 
0.11250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74631999999999987239e-01 
0.12083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75687999999999988621e-01 
0.12917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.71391999999999966597e-01 
0.13750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75903999999999982595e-01 
0.14583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.78051999999999965851e-01 
0.15417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77463999999999988422e-01 
0.16250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74691999999999991733e-01 
0.17083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74187999999999987288e-01 
0.17917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80896000000000034547e-01 
0.18750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.76492000000000015536e-01 
0.19583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77248000000000049958e-01 
0.20417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80476000000000003087e-01 
0.21250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.76204000000000005066e-01 
0.22083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77355999999999991434e-01 
0.22917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.78988000000000013756e-01 
0.23750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80739999999999989555e-01 
0.24583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.81808000000000002938e-01 
0.25417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80320000000000013607e-01 
0.26250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.82347999999999987875e-01 
0.27083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.81783999999999978936e-01 
0.27917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.83332000000000028272e-01 
0.28750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.86499999999999976907e-01 
0.29583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.84963999999999995083e-01 
0.30417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.84304000000000001158e-01 
0.31250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.89451999999999987079e-01 
0.32083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.89356000000000002093e-01 
0.32917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.88935999999999970633e-01 
0.33750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.89872000000000018538e-01 
0.34583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.89295999999999997598e-01 
0.35417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.87795999999999996266e-01 
0.36250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.92536000000000018240e-01 
0.37083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.93076000000000003176e-01 
0.37917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.92824000000000028709e-01 
0.38750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.90928000000000019920e-01 
0.39583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.90976000000000012413e-01 
0.40417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.96940000000000037250e-01 
0.41250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.98644000000000020556e-01 
0.42083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.95787999999999995371e-01 
0.42917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.98487999999999975564e-01 
0.43750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.99832000000000042927e-01 
0.44583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.00695999999999963315e-01 
0.45417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.02148000000000027665e-01 
0.46250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.04068000000000004945e-01 
0.47083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.00216000000000038384e-01 
0.47917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.05484000000000033292e-01 
0.48750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.08412000000000019462e-01 
0.49583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.09611999999999998323e-01 
0.50417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.09252000000000026869e-01 
0.51250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.11280000000000001137e-01 
0.52083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.10991999999999990667e-01 
0.52917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.10752000000000028201e-01 
0.53750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.10140000000000026770e-01 
0.54583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.13512000000000012889e-01 
0.55417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.17796000000000022911e-01 
0.56250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.16308000000000033580e-01 
0.57083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.20892000000000010562e-01 
0.57917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.17052000000000000490e-01 
0.58750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.21072000000000024045e-01 
0.59583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.23531999999999986262e-01 
0.60417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.26843999999999967887e-01 
0.61250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.28631999999999979689e-01 
0.62083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.24035999999999990706e-01 
0.62917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.32004000000000021320e-01 
0.63750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.29027999999999987146e-01 
0.64583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.31619999999999970353e-01 
0.65417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.34739999999999982006e-01 
0.66250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.33516000000000034653e-01 
0.67083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.37944000000000022155e-01 
0.67917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.40488000000000012868e-01 
0.68750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.40380000000000015881e-01 
0.69583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.42156000000000015682e-01 
0.70417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.44040000000000012470e-01 
0.71250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.46584000000000003183e-01 
0.72083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.44507999999999980911e-01 
0.72917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.49212000000000022393e-01 
0.73750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.51000000000000034195e-01 
0.74583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.51515999999999995129e-01 
0.75417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.55548000000000030685e-01 
0.76250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.53316000000000018932e-01 
0.77083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.57696000000000013941e-01 
0.77917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.55787999999999993150e-01 
0.78750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.61800000000000010481e-01 
0.79583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.66599999999999981437e-01 
0.80417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.66240000000000009983e-01 
0.81250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.66492000000000039961e-01 
0.82083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.72012000000000009337e-01 
0.82917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.67835999999999996302e-01 
0.83750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.71723999999999998867e-01 
0.84583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.77399999999999957723e-01 
0.85417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.79535999999999984489e-01 
0.86250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.83328000000000002068e-01 
0.87083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.81732000000000015749e-01 
0.87917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.81432000000000048789e-01 
0.88750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.86844000000000021178e-01 
0.89583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.89976000000000044832e-01 
0.90417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.92951999999999967983e-01 
0.91250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.95843999999999973660e-01 
0.92083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.94692000000000042803e-01 
0.92917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.96936000000000011045e-01 
0.93750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.04808000000000001162e-01 
0.94583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.08252000000000003777e-01 
0.95417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.07292000000000042892e-01 
0.96250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.11420000000000007923e-01 
0.97083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.12392000000000036319e-01 
0.97917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.15595999999999965446e-01 
0.98750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.20132000000000005446e-01 
0.99583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.15847999999999995424e-01 
1.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.20648000000000021892e-01 
1.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.26240000000000007763e-01 
1.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.29491999999999984894e-01 
1.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.30524000000000017785e-01 
1.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.33572000000000012943e-01 
1.04583 	 1.16211023247118863666e-01 	 1.82616033435674793850e+01 	 4.36860000000000026077e-01 
1.05417 	 2.18338412512746049554e-01 	 0.00000000000000000000e+00 	 4.39404000000000016790e-01 
1.06250 	 1.23882174219314092345e-01 	 0.00000000000000000000e+00 	 4.39968000000000025729e-01 
1.07083 	 9.61996579496725151559e-02 	 0.00000000000000000000e+00 	 4.46844000000000018957e-01 
1.07917 	 8.18979212171855874836e-02 	 0.00000000000000000000e+00 	 4.48403999999999969273e-01 
1.08750 	 7.25860604461195102477e-02 	 0.00000000000000000000e+00 	 4.53635999999999983689e-01 
1.09583 	 6.61130468624259587385e-02 	 0.00000000000000000000e+00 	 4.54583999999999988084e-01 
1.10417 	 6.03574842407944914258e-02 	 0.00000000000000000000e+00 	 4.54031999999999991147e-01 
1.11250 	 5.64930657136522226813e-02 	 0.00000000000000000000e+00 	 4.63932000000000011042e-01 
1.12083 	 5.26399371340075319936e-02 	 0.00000000000000000000e+00 	 4.62324000000000012722e-01 
1.12917 	 5.01020436870566326926e-02 	 0.00000000000000000000e+00 	 4.64387999999999967482e-01 
1.13750 	 4.76975437403448984663e-02 	 0.00000000000000000000e+00 	 4.68564000000000036028e-01 
1.14583 	 4.55196319353996514678e-02 	 0.00000000000000000000e+00 	 4.77407999999999999030e-01 
1.15417 	 4.38245179100813439521e-02 	 0.00000000000000000000e+00 	 4.71419999999999950191e-01 
1.16250 	 4.22247400807727671368e-02 	 0.00000000000000000000e+00 	 4.77563999999999988511e-01 
1.17083 	 4.06380414706171769201e-02 	 0.00000000000000000000e+00 	 4.79639999999999955271e-01 
1.17917 	 3.90423717133173558969e-02 	 0.00000000000000000000e+00 	 4.83635999999999954824e-01 
1.18750 	 3.81651902364350953389e-02 	 0.00000000000000000000e+00 	 4.85783999999999993591e-01 
1.19583 	 3.69212732360952311517e-02 	 0.00000000000000000000e+00 	 4.91544000000000036454e-01 
1.20417 	 3.59872464159222971158e-02 	 0.00000000000000000000e+00 	 4.93535999999999974719e-01 
1.21250 	 3.53767089794195452312e-02 	 0.00000000000000000000e+00 	 4.96991999999999933824e-01 
1.22083 	 3.42072808252788101990e-02 	 0.00000000000000000000e+00 	 5.01599999999999934808e-01 
1.22917 	 3.33910788851214945794e-02 	 0.00000000000000000000e+00 	 5.02728000000000063707e-01 
1.23750 	 3.26678898791423061310e-02 	 0.00000000000000000000e+00 	 5.11260000000000047748e-01 
1.24583 	 3.22397058840562661386e-02 	 0.00000000000000000000e+00 	 5.10804000000000035797e-01 
1.25417 	 3.14004731094096461996e-02 	 0.00000000000000000000e+00 	 5.15411999999999981270e-01 
1.26250 	 3.08003902886767773339e-02 	 0.00000000000000000000e+00 	 5.24328000000000016279e-01 
1.27083 	 3.01452979916633570512e-02 	 0.00000000000000000000e+00 	 5.23548000000000013365e-01 
1.27917 	 2.96715168206272521256e-02 	 0.00000000000000000000e+00 	 5.29428000000000009706e-01 
1.28750 	 2.92362399790916660525e-02 	 0.00000000000000000000e+00 	 5.31371999999999955477e-01 
1.29583 	 2.86129041636490680234e-02 	 0.00000000000000000000e+00 	 5.33495999999999970242e-01 
1.30417 	 2.81456683327965008490e-02 	 0.00000000000000000000e+00 	 5.39519999999999999574e-01 
1.31250 	 2.77566918406526759455e-02 	 0.00000000000000000000e+00 	 5.46108000000000037844e-01 
1.32083 	 2.75318059128187089812e-02 	 0.00000000000000000000e+00 	 5.48124000000000055621e-01 
1.32917 	 2.70417210726124623843e-02 	 0.00000000000000000000e+00 	 5.52864000000000022084e-01 
1.33750 	 2.64741303373082458028e-02 	 0.00000000000000000000e+00 	 5.55467999999999961780e-01 
1.34583 	 2.63608149559687414409e-02 	 0.00000000000000000000e+00 	 5.60184000000000015262e-01 
1.35417 	 2.61300654817653889295e-02 	 0.00000000000000000000e+00 	 5.57460000000000066578e-01 
1.36250 	 2.56673779864736231748e-02 	 0.00000000000000000000e+00 	 5.73011999999999965816e-01 
1.37083 	 2.52378594112724029264e-02 	 0.00000000000000000000e+00 	 5.75640000000000040536e-01 
1.37917 	 2.52184479857987253748e-02 	 0.00000000000000000000e+00 	 5.79624000000000028088e-01 
1.38750 	 2.47750656442921220191e-02 	 0.00000000000000000000e+00 	 5.82192000000000042803e-01 
1.39583 	 2.44845381133735467971e-02 	 0.00000000000000000000e+00 	 5.83380000000000009663e-01 
1.40417 	 2.44088530791945965137e-02 	 0.00000000000000000000e+00 	 5.90423999999999948862e-01 
1.41250 	 2.42595363139987280077e-02 	 0.00000000000000000000e+00 	 5.94419999999999948415e-01 
1.42083 	 2.38509225938334790129e-02 	 0.00000000000000000000e+00 	 5.99208000000000073904e-01 
1.42917 	 2.37213268119842168868e-02 	 0.00000000000000000000e+00 	 6.00816000000000016712e-01 
1.43750 	 2.34489426078572961443e-02 	 0.00000000000000000000e+00 	 6.10404000000000057646e-01 
1.44583 	 2.31415015996373728269e-02 	 0.00000000000000000000e+00 	 6.13824000000000036259e-01 
1.45417 	 2.29348328143233817777e-02 	 0.00000000000000000000e+00 	 6.11063999999999940549e-01 
1.46250 	 2.29206560954448232414e-02 	 0.00000000000000000000e+00 	 6.23016000000000014225e-01 
1.47083 	 2.26020770447025245997e-02 	 0.00000000000000000000e+00 	 6.24731999999999954021e-01 
1.47917 	 2.25000086713714186892e-02 	 0.00000000000000000000e+00 	 6.28860000000000085585e-01 
1.48750 	 2.23250028782534144789e-02 	 0.00000000000000000000e+00 	 6.33767999999999998018e-01 
1.49583 	 2.20274426309161400206e-02 	 0.00000000000000000000e+00 	 6.34739999999999970903e-01 
1.50417 	 2.20545910881416104554e-02 	 0.00000000000000000000e+00 	 6.42360000000000042064e-01 
1.51250 	 2.19124172834483169070e-02 	 0.00000000000000000000e+00 	 6.48480000000000056382e-01 
1.52083 	 2.15214176291259745577e-02 	 0.00000000000000000000e+00 	 6.53484000000000064823e-01 
1.52917 	 2.16987269974239123382e-02 	 0.00000000000000000000e+00 	 6.55116000000000031633e-01 
1.53750 	 2.13167015450252093911e-02 	 0.00000000000000000000e+00 	 6.62640000000000006786e-01 
1.54583 	 2.11622201058247298711e-02 	 0.00000000000000000000e+00 	 6.70788000000000050882e-01 
1.55417 	 2.11987922277233412083e-02 	 0.00000000000000000000e+00 	 6.78780000000000049987e-01 
1.56250 	 2.09318140105117372896e-02 	 0.00000000000000000000e+00 	 6.81792000000000064652e-01 
1.57083 	 2.07315999017660644588e-02 	 0.00000000000000000000e+00 	 6.85224000000000055266e-01 
1.57917 	 2.05792374162856762931e-02 	 0.00000000000000000000e+00 	 6.92711999999999994415e-01 
1.58750 	 2.06718089050769264492e-02 	 0.00000000000000000000e+00 	 6.99000000000000065725e-01 
1.59583 	 2.04216068361478021720e-02 	 0.00000000000000000000e+00 	 7.07088000000000049816e-01 
1.60417 	 2.03984961471901787844e-02 	 0.00000000000000000000e+00 	 6.99612000000000011646e-01 
1.61250 	 2.01602921250237446249e-02 	 0.00000000000000000000e+00 	 7.07832000000000016726e-01 
1.62083 	 2.02730305951040294665e-02 	 0.00000000000000000000e+00 	 7.17563999999999979629e-01 
1.62917 	 2.00006838254226902707e-02 	 0.00000000000000000000e+00 	 7.25663999999999975721e-01 
1.63750 	 2.00907276457881651954e-02 	 0.00000000000000000000e+00 	 7.34052000000000037794e-01 
1.64583 	 1.99480754333577724180e-02 	 0.00000000000000000000e+00 	 7.32948000000000043919e-01 
1.65417 	 1.98721829297776840517e-02 	 0.00000000000000000000e+00 	 7.40592000000000028059e-01 
1.66250 	 1.97736573555936899493e-02 	 0.00000000000000000000e+00 	 7.41983999999999976893e-01 
1.67083 	 1.96326619137879437860e-02 	 0.00000000000000000000e+00 	 7.49832000000000054030e-01 
1.67917 	 1.97254771433890661869e-02 	 0.00000000000000000000e+00 	 7.52796000000000020691e-01 
1.68750 	 1.96065898854845994947e-02 	 0.00000000000000000000e+00 	 7.59696000000000037922e-01 
1.69583 	 1.94977144276970507097e-02 	 0.00000000000000000000e+00 	 7.73495999999999961361e-01 
1.70417 	 1.94304695348597664117e-02 	 0.00000000000000000000e+00 	 7.77143999999999945949e-01 
1.71250 	 1.91613973324274849963e-02 	 0.00000000000000000000e+00 	 7.78943999999999969752e-01 
1.72083 	 1.94438504372639771323e-02 	 0.00000000000000000000e+00 	 7.85460000000000047038e-01 
1.72917 	 1.92380484379544199058e-02 	 0.00000000000000000000e+00 	 7.91507999999999989349e-01 
1.73750 	 1.92959354152297257734e-02 	 0.00000000000000000000e+00 	 7.99932000000000087425e-01 
1.74583 	 1.90952472369048768808e-02 	 0.00000000000000000000e+00 	 8.04564000000000056900e-01 
1.75417 	 1.90886584912546251880e-02 	 0.00000000000000000000e+00 	 8.08883999999999936392e-01 
1.76250 	 1.90598218438023311871e-02 	 0.00000000000000000000e+00 	 8.21616000000000012982e-01 
1.77083 	 1.88604545222896165246e-02 	 0.00000000000000000000e+00 	 8.26007999999999964480e-01 
1.77917 	 1.89740984338082549487e-02 	 0.00000000000000000000e+00 	 8.31960000000000032827e-01 
1.78750 	 1.88128384150848849965e-02 	 0.00000000000000000000e+00 	 8.38355999999999990102e-01 
1.79583 	 1.87526451473662633673e-02 	 0.00000000000000000000e+00 	 8.46227999999999980218e-01 
1.80417 	 1.87760762353102635125e-02 	 0.00000000000000000000e+00 	 8.52887999999999979472e-01 
1.81250 	 1.86549792699365959980e-02 	 0.00000000000000000000e+00 	 8.58036000000000020904e-01 
1.82083 	 1.85632460268665977488e-02 	 0.00000000000000000000e+00 	 8.62403999999999948400e-01 
1.82917 	 1.84841079621615028694e-02 	 0.00000000000000000000e+00 	 8.74596000000000040053e-01 
1.83750 	 1.85815553555011524212e-02 	 0.00000000000000000000e+00 	 8.83284000000000069086e-01 
1.84583 	 1.85122515240230961497e-02 	 0.00000000000000000000e+00 	 8.84411999999999975941e-01 
1.85417 	 1.84051088831380972588e-02 	 0.00000000000000000000e+00 	 8.95140000000000046754e-01 
1.86250 	 1.84100772006515235601e-02 	 0.00000000000000000000e+00 	 8.96904000000000034554e-01 
1.87083 	 1.85727443748438109106e-02 	 0.00000000000000000000e+00 	 9.05760000000000009557e-01 
1.87917 	 1.84262324146133096847e-02 	 0.00000000000000000000e+00 	 9.09540000000000015135e-01 
1.88750 	 1.84228344823197873192e-02 	 0.00000000000000000000e+00 	 9.21636000000000010779e-01 
1.89583 	 1.84015144378570569272e-02 	 0.00000000000000000000e+00 	 9.31620000000000003659e-01 
1.90417 	 1.84217364681967081530e-02 	 0.00000000000000000000e+00 	 9.36024000000000078181e-01 
1.91250 	 1.83411766802607546778e-02 	 0.00000000000000000000e+00 	 9.42648000000000041432e-01 
1.92083 	 1.80951581879896412908e-02 	 0.00000000000000000000e+00 	 9.55968000000000039940e-01 
1.92917 	 1.82280812997620764171e-02 	 0.00000000000000000000e+00 	 9.56543999999999949857e-01 
1.93750 	 1.83051413369375130802e-02 	 0.00000000000000000000e+00 	 9.68064000000000035584e-01 
1.94583 	 1.83254861731594123619e-02 	 0.00000000000000000000e+00 	 9.70355999999999885297e-01 
1.95417 	 1.81972822108793091944e-02 	 0.00000000000000000000e+00 	 9.85991999999999868542e-01 
1.96250 	 1.80884422406308344178e-02 	 0.00000000000000000000e+00 	 9.93288000000000059764e-01 
1.97083 	 1.80901921308630683760e-02 	 0.00000000000000000000e+00 	 9.98927999999999927105e-01 
1.97917 	 1.80388575126635558599e-02 	 0.00000000000000000000e+00 	 1.01272800000000007259e+00 
1.98750 	 1.80269086451636424695e-02 	 0.00000000000000000000e+00 	 1.01559599999999994324e+00 
1.99583 	 1.81900125035299176091e-02 	 0.00000000000000000000e+00 	 1.82760000000000005782e-02 
2.00417 	 6.55468265697604413056e-01 	 0.00000000000000000000e+00 	 2.21235599999999976717e+00 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.0;     /* cm^-1 */
mus         = 0.0;  /* cm^-1 */
g           = 0.9;  
nt          = 1.33;
Nphotons    = 1e7; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);