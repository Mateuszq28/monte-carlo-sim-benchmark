time elapsed: 1073.3080 seconds

=================================

sim results:

number of photons = 10000000
overflow: 2.89070362137590255588e+06
sum: 7.10916297948357556015e+06
sum: 7.10929637862409744412e+06
avg: 7.10916297948357533976e-01
perc_in: 71.09

number of photons = 10000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 9.34902488233720130372e-06 	 0.00000000000000000000e+00 
0.01250 	 0.00000000000000000000e+00 	 8.05168450205627795886e-06 	 0.00000000000000000000e+00 
0.02083 	 0.00000000000000000000e+00 	 7.31474833658215688642e-06 	 0.00000000000000000000e+00 
0.02917 	 0.00000000000000000000e+00 	 7.00645117097161398880e-06 	 0.00000000000000000000e+00 
0.03750 	 0.00000000000000000000e+00 	 7.81577050840159943902e-06 	 0.00000000000000000000e+00 
0.04583 	 0.00000000000000000000e+00 	 8.81883143466509329092e-06 	 0.00000000000000000000e+00 
0.05417 	 0.00000000000000000000e+00 	 8.13794384906750489729e-06 	 0.00000000000000000000e+00 
0.06250 	 0.00000000000000000000e+00 	 8.74254356839387223785e-06 	 0.00000000000000000000e+00 
0.07083 	 0.00000000000000000000e+00 	 9.71549828656242173803e-06 	 0.00000000000000000000e+00 
0.07917 	 0.00000000000000000000e+00 	 9.50991143026412473211e-06 	 0.00000000000000000000e+00 
0.08750 	 0.00000000000000000000e+00 	 9.23191538882220216658e-06 	 0.00000000000000000000e+00 
0.09583 	 0.00000000000000000000e+00 	 9.94883041426472991987e-06 	 0.00000000000000000000e+00 
0.10417 	 0.00000000000000000000e+00 	 1.08974996571073158786e-05 	 0.00000000000000000000e+00 
0.11250 	 0.00000000000000000000e+00 	 1.13278823024143074914e-05 	 0.00000000000000000000e+00 
0.12083 	 0.00000000000000000000e+00 	 1.17414232148067392410e-05 	 0.00000000000000000000e+00 
0.12917 	 0.00000000000000000000e+00 	 1.33836051908696119286e-05 	 0.00000000000000000000e+00 
0.13750 	 0.00000000000000000000e+00 	 1.45635247601055771677e-05 	 0.00000000000000000000e+00 
0.14583 	 0.00000000000000000000e+00 	 1.57190798677158376099e-05 	 0.00000000000000000000e+00 
0.15417 	 0.00000000000000000000e+00 	 1.65219102326518926544e-05 	 0.00000000000000000000e+00 
0.16250 	 0.00000000000000000000e+00 	 1.79269809936336912157e-05 	 0.00000000000000000000e+00 
0.17083 	 0.00000000000000000000e+00 	 1.92618177561510509597e-05 	 0.00000000000000000000e+00 
0.17917 	 0.00000000000000000000e+00 	 2.03539421339647725467e-05 	 0.00000000000000000000e+00 
0.18750 	 0.00000000000000000000e+00 	 2.33530478788415519012e-05 	 0.00000000000000000000e+00 
0.19583 	 0.00000000000000000000e+00 	 2.58166458000819813430e-05 	 0.00000000000000000000e+00 
0.20417 	 0.00000000000000000000e+00 	 2.80064340454306355717e-05 	 0.00000000000000000000e+00 
0.21250 	 0.00000000000000000000e+00 	 3.09175851049874189105e-05 	 0.00000000000000000000e+00 
0.22083 	 0.00000000000000000000e+00 	 3.37176242935169565300e-05 	 0.00000000000000000000e+00 
0.22917 	 0.00000000000000000000e+00 	 3.67787327064823460552e-05 	 0.00000000000000000000e+00 
0.23750 	 0.00000000000000000000e+00 	 4.04927698691310490489e-05 	 0.00000000000000000000e+00 
0.24583 	 0.00000000000000000000e+00 	 4.36154337490061489889e-05 	 0.00000000000000000000e+00 
0.25417 	 0.00000000000000000000e+00 	 4.71646528747892221237e-05 	 0.00000000000000000000e+00 
0.26250 	 0.00000000000000000000e+00 	 5.13762449798054005533e-05 	 0.00000000000000000000e+00 
0.27083 	 0.00000000000000000000e+00 	 5.61653895660423768416e-05 	 0.00000000000000000000e+00 
0.27917 	 0.00000000000000000000e+00 	 6.24610949331435780230e-05 	 0.00000000000000000000e+00 
0.28750 	 0.00000000000000000000e+00 	 6.81957016368791647028e-05 	 0.00000000000000000000e+00 
0.29583 	 0.00000000000000000000e+00 	 7.47873691140512280142e-05 	 0.00000000000000000000e+00 
0.30417 	 0.00000000000000000000e+00 	 8.09441134261069294075e-05 	 0.00000000000000000000e+00 
0.31250 	 0.00000000000000000000e+00 	 8.78636294464392886977e-05 	 0.00000000000000000000e+00 
0.32083 	 0.00000000000000000000e+00 	 9.69278048272922157459e-05 	 0.00000000000000000000e+00 
0.32917 	 0.00000000000000000000e+00 	 1.05780470946077430621e-04 	 0.00000000000000000000e+00 
0.33750 	 0.00000000000000000000e+00 	 1.18976040289704360141e-04 	 0.00000000000000000000e+00 
0.34583 	 0.00000000000000000000e+00 	 1.29888459857642620497e-04 	 0.00000000000000000000e+00 
0.35417 	 0.00000000000000000000e+00 	 1.40608411791822991276e-04 	 0.00000000000000000000e+00 
0.36250 	 0.00000000000000000000e+00 	 1.54967448385934686598e-04 	 0.00000000000000000000e+00 
0.37083 	 0.00000000000000000000e+00 	 1.70204667323051064658e-04 	 0.00000000000000000000e+00 
0.37917 	 0.00000000000000000000e+00 	 1.87711925065241062079e-04 	 0.00000000000000000000e+00 
0.38750 	 0.00000000000000000000e+00 	 2.06906889197444870000e-04 	 0.00000000000000000000e+00 
0.39583 	 0.00000000000000000000e+00 	 2.25519670658584609575e-04 	 0.00000000000000000000e+00 
0.40417 	 0.00000000000000000000e+00 	 2.47425343463302188987e-04 	 0.00000000000000000000e+00 
0.41250 	 0.00000000000000000000e+00 	 2.73970388005972574023e-04 	 0.00000000000000000000e+00 
0.42083 	 0.00000000000000000000e+00 	 2.97907116306452891298e-04 	 0.00000000000000000000e+00 
0.42917 	 0.00000000000000000000e+00 	 3.27060518955326088794e-04 	 0.00000000000000000000e+00 
0.43750 	 0.00000000000000000000e+00 	 3.60615585057572920168e-04 	 0.00000000000000000000e+00 
0.44583 	 0.00000000000000000000e+00 	 3.98216935778034986440e-04 	 0.00000000000000000000e+00 
0.45417 	 0.00000000000000000000e+00 	 4.39115382180449897922e-04 	 0.00000000000000000000e+00 
0.46250 	 0.00000000000000000000e+00 	 4.84826664743308788277e-04 	 0.00000000000000000000e+00 
0.47083 	 0.00000000000000000000e+00 	 5.35396236017085047978e-04 	 0.00000000000000000000e+00 
0.47917 	 0.00000000000000000000e+00 	 5.87849341911290393034e-04 	 0.00000000000000000000e+00 
0.48750 	 0.00000000000000000000e+00 	 6.45291055396467129641e-04 	 0.00000000000000000000e+00 
0.49583 	 0.00000000000000000000e+00 	 7.13032176278250080272e-04 	 0.00000000000000000000e+00 
0.50417 	 0.00000000000000000000e+00 	 7.85213662061395823930e-04 	 0.00000000000000000000e+00 
0.51250 	 0.00000000000000000000e+00 	 8.65096354504525221624e-04 	 0.00000000000000000000e+00 
0.52083 	 0.00000000000000000000e+00 	 9.54809291810051422728e-04 	 1.41920464402070349108e-08 
0.52917 	 0.00000000000000000000e+00 	 1.05182982418351657523e-03 	 4.98471158214059686165e-08 
0.53750 	 0.00000000000000000000e+00 	 1.16395582297963619961e-03 	 5.90231168140539799523e-08 
0.54583 	 0.00000000000000000000e+00 	 1.28124960805101506707e-03 	 1.97461238127577058699e-08 
0.55417 	 0.00000000000000000000e+00 	 1.41530952279610502953e-03 	 2.69639562555128106002e-08 
0.56250 	 0.00000000000000000000e+00 	 1.56595804173387492635e-03 	 3.96679854479110027527e-08 
0.57083 	 0.00000000000000000000e+00 	 1.73464073846806465969e-03 	 6.56437123766586667939e-08 
0.57917 	 0.00000000000000000000e+00 	 1.90610570429487627755e-03 	 6.19241151991699237426e-08 
0.58750 	 0.00000000000000000000e+00 	 2.10348919890993198145e-03 	 7.70784215818571754364e-08 
0.59583 	 0.00000000000000000000e+00 	 2.31983192980200238209e-03 	 6.50110308977318547388e-08 
0.60417 	 0.00000000000000000000e+00 	 2.56378415223181086585e-03 	 1.00612627528480358957e-07 
0.61250 	 0.00000000000000000000e+00 	 2.82858954576793112518e-03 	 1.29717731091130343370e-07 
0.62083 	 0.00000000000000000000e+00 	 3.12656240709218141011e-03 	 1.06560607768162084055e-07 
0.62917 	 0.00000000000000000000e+00 	 3.44165162598521938778e-03 	 2.13038750673898644308e-07 
0.63750 	 0.00000000000000000000e+00 	 3.79462281761273976383e-03 	 2.26223518916235883014e-07 
0.64583 	 0.00000000000000000000e+00 	 4.18480750544042868350e-03 	 2.46927416880254160202e-07 
0.65417 	 0.00000000000000000000e+00 	 4.62071548893250479140e-03 	 2.25578248964965883491e-07 
0.66250 	 0.00000000000000000000e+00 	 5.10776284804735723061e-03 	 2.57860962465103835665e-07 
0.67083 	 0.00000000000000000000e+00 	 5.64066141423932507215e-03 	 3.73798169912149082259e-07 
0.67917 	 0.00000000000000000000e+00 	 6.22787390580391720524e-03 	 4.19881524050810589395e-07 
0.68750 	 0.00000000000000000000e+00 	 6.87480267123763682385e-03 	 4.84252429668423326811e-07 
0.69583 	 0.00000000000000000000e+00 	 7.59387235613873286255e-03 	 5.42008340745252231927e-07 
0.70417 	 0.00000000000000000000e+00 	 8.39315307466689461413e-03 	 4.55173974459486715396e-07 
0.71250 	 0.00000000000000000000e+00 	 9.28497181715190293694e-03 	 5.17187233877716565894e-07 
0.72083 	 0.00000000000000000000e+00 	 1.02480576893487374673e-02 	 4.80747316398842422009e-07 
0.72917 	 0.00000000000000000000e+00 	 1.13316818974557240174e-02 	 4.96593638645645401436e-07 
0.73750 	 4.58099348804366445011e-09 	 1.25339462863850725771e-02 	 7.97714232238365831269e-07 
0.74583 	 2.71508973083088743221e-09 	 1.38657584749138796526e-02 	 7.26198932428510124730e-07 
0.75417 	 3.05901517672253224209e-09 	 1.53336921084590710462e-02 	 7.16434086034905925828e-07 
0.76250 	 1.19184789228375311388e-09 	 1.69708393889597096427e-02 	 8.11333345911610220305e-07 
0.77083 	 2.35165611916792972413e-09 	 1.87491755791567224487e-02 	 9.42923274985410966464e-07 
0.77917 	 1.65763088065254498453e-09 	 2.07401755441788578083e-02 	 1.27839859513577281496e-06 
0.78750 	 1.81446190204119610966e-09 	 2.29114162823145887937e-02 	 1.23666830159321682450e-06 
0.79583 	 6.01587437795509609837e-09 	 2.53340212461647673603e-02 	 1.48768232286528650413e-06 
0.80417 	 5.51119242943406302207e-09 	 2.80196555248184361875e-02 	 1.78008644809538891278e-06 
0.81250 	 2.07123373389298902840e-09 	 3.10212120799879635669e-02 	 1.72244195104695129449e-06 
0.82083 	 4.82630677712051354468e-10 	 3.42825450127521441646e-02 	 2.21653917294533374957e-06 
0.82917 	 3.68888176283820326491e-09 	 3.79251431944510122851e-02 	 2.33705067905522989073e-06 
0.83750 	 2.34933150777218350919e-09 	 4.19135638519097866728e-02 	 2.45282289152809007091e-06 
0.84583 	 3.57424436938949322998e-09 	 4.63364678885674688424e-02 	 2.44564659771242191828e-06 
0.85417 	 3.66768518209195611815e-09 	 5.12887002464979258054e-02 	 3.13599331518200633020e-06 
0.86250 	 3.82632222113562100295e-09 	 5.67256164597381637438e-02 	 3.27752383213551639100e-06 
0.87083 	 3.65564521128765949598e-09 	 6.27433835824454944063e-02 	 3.75619538593642649459e-06 
0.87917 	 2.17400257353735621757e-09 	 6.94378128923479748247e-02 	 4.04253342963817566578e-06 
0.88750 	 6.72087153817884608616e-09 	 7.67946162935664450311e-02 	 4.54172428231125904725e-06 
0.89583 	 9.28502077260978189548e-09 	 8.50344482925411149221e-02 	 5.35324389986658580234e-06 
0.90417 	 1.01090241997029900468e-08 	 9.40843192731257715877e-02 	 5.86431995398135688793e-06 
0.91250 	 1.63847111430931615435e-08 	 1.04173447045907835440e-01 	 6.31603255294390947288e-06 
0.92083 	 1.49139292507210750315e-08 	 1.15280156760584548414e-01 	 7.26246708308879155338e-06 
0.92917 	 2.31889172106860883848e-08 	 1.27592835443662205863e-01 	 8.09798695777374281338e-06 
0.93750 	 1.87185577116975812740e-08 	 1.41213338892328732488e-01 	 9.15585897606758489274e-06 
0.94583 	 1.53657201491215898219e-08 	 1.56238195125925294349e-01 	 9.88823990599213038669e-06 
0.95417 	 1.81132731891417945211e-08 	 1.72884900473874419946e-01 	 1.10430433385468464402e-05 
0.96250 	 1.51229532486550688233e-08 	 1.91379561980448059666e-01 	 1.14465956658618793886e-05 
0.97083 	 1.66809477169503043523e-08 	 2.11765184768880621036e-01 	 1.23167930184439200633e-05 
0.97917 	 1.75863374019397793642e-08 	 2.34500673417054300574e-01 	 1.45045492210362787750e-05 
0.98750 	 1.73902996983014839958e-08 	 2.59664063097189534712e-01 	 1.57045938180950825987e-05 
0.99583 	 2.14904428004859997762e-08 	 2.87693600810812855073e-01 	 1.83451631904195089611e-05 
1.00417 	 2.77604697927180372031e-08 	 3.18898155155780460568e-01 	 2.05338455574223973353e-05 
1.01250 	 3.35525595371672891886e-08 	 3.54114205526960490467e-01 	 2.26148462946312643173e-05 
1.02083 	 3.81498462827203324575e-08 	 3.94345242874946766420e-01 	 2.43024374086010204802e-05 
1.02917 	 3.55965710395018479787e-08 	 4.43286952591815053282e-01 	 2.77080186886443478205e-05 
1.03750 	 4.01150820818009282725e-08 	 5.13434832583493094837e-01 	 2.98129325658017809656e-05 
1.04583 	 5.20669656589364743045e-08 	 8.52927372065281019786e-01 	 3.31191558147874904098e-05 
1.05417 	 5.16690386276594638851e-08 	 6.25979598877774989774e-01 	 3.79102549254641080722e-05 
1.06250 	 6.16386160907245842039e-08 	 4.84421815104570496757e-01 	 4.05413578204504989146e-05 
1.07083 	 5.87184736512940807658e-08 	 4.19928954500664697314e-01 	 4.54319194973341411795e-05 
1.07917 	 6.93796874940141583114e-08 	 3.71757169253967623135e-01 	 4.91593895218078697591e-05 
1.08750 	 8.29720386257122666149e-08 	 3.31468871968347678081e-01 	 5.55427571837857956107e-05 
1.09583 	 7.14372640238334270945e-08 	 2.96334302016493411625e-01 	 6.21320438468637151934e-05 
1.10417 	 8.18517433288037688519e-08 	 2.65116341444939396244e-01 	 7.01825817744318382774e-05 
1.11250 	 1.00148460426817895946e-07 	 2.37497050566546907824e-01 	 7.61172122280479371541e-05 
1.12083 	 9.97181998064434995327e-08 	 2.12801837077590927372e-01 	 8.55293952133895216865e-05 
1.12917 	 1.15008015906890656042e-07 	 1.90645768650350544426e-01 	 9.58393722944499089388e-05 
1.13750 	 1.35222722552108188233e-07 	 1.70855625819248568842e-01 	 1.07534561751728647617e-04 
1.14583 	 1.25905005503395392680e-07 	 1.53115450549357878796e-01 	 1.19613481423667866103e-04 
1.15417 	 1.42362016347152317195e-07 	 1.37212828718537654948e-01 	 1.30905044565766449666e-04 
1.16250 	 1.68264105632045411401e-07 	 1.22953374678075585957e-01 	 1.47403347829222806193e-04 
1.17083 	 1.79534724953566270199e-07 	 1.10181097720840184828e-01 	 1.64362170465490094748e-04 
1.17917 	 1.92795303037087934017e-07 	 9.87779987835628037196e-02 	 1.82777728590895042517e-04 
1.18750 	 1.98440107934417167272e-07 	 8.86022646913206535224e-02 	 2.02323529972010443924e-04 
1.19583 	 2.26912311190871043380e-07 	 7.93693942498439469757e-02 	 2.26391255200972301093e-04 
1.20417 	 2.69346651213127665077e-07 	 7.11477564476776791480e-02 	 2.53631508924777088112e-04 
1.21250 	 2.78443109593013747478e-07 	 6.37571824572856771240e-02 	 2.77830269524263491054e-04 
1.22083 	 3.30704058649537653195e-07 	 5.72093131904059110093e-02 	 3.09086580583634745224e-04 
1.22917 	 3.73723431600704694410e-07 	 5.12721505021599410767e-02 	 3.44320800946607929842e-04 
1.23750 	 4.17282552282671340045e-07 	 4.59543259541374676802e-02 	 3.84492901724793308474e-04 
1.24583 	 4.95388590681802294563e-07 	 4.11767817481902970167e-02 	 4.26182308263524942463e-04 
1.25417 	 5.05436448665388357208e-07 	 3.69183901678878309549e-02 	 4.70490676455538343187e-04 
1.26250 	 5.74898098984489111884e-07 	 3.31036524177179408701e-02 	 5.19908651039489052952e-04 
1.27083 	 6.46062948873369533789e-07 	 2.96698439454301417240e-02 	 5.79760571017213350263e-04 
1.27917 	 6.82414375760857266808e-07 	 2.65712404433478197041e-02 	 6.45873829401876864247e-04 
1.28750 	 7.58342913070625321135e-07 	 2.38514980979539631400e-02 	 7.23404551374426667450e-04 
1.29583 	 8.05088468609226984318e-07 	 2.13736604060064533384e-02 	 7.92441548959449144213e-04 
1.30417 	 9.57183318549037403657e-07 	 1.91584796998093727372e-02 	 8.82385292535385959423e-04 
1.31250 	 1.02839093326745870866e-06 	 1.71879179899489080430e-02 	 9.79468542094934745135e-04 
1.32083 	 1.10176246824768936746e-06 	 1.54173091186949832304e-02 	 1.08903523378618390452e-03 
1.32917 	 1.22391274069920377329e-06 	 1.38191557042785708592e-02 	 1.20881317373024892506e-03 
1.33750 	 1.35470028592467262484e-06 	 1.23901757164758732216e-02 	 1.34040319982575316035e-03 
1.34583 	 1.49194619464317681322e-06 	 1.11077444418587866631e-02 	 1.48740165798588448547e-03 
1.35417 	 1.62197313626143233017e-06 	 9.96477969208012237523e-03 	 1.65065678814168138692e-03 
1.36250 	 1.86993383306735849226e-06 	 8.93792839995770187211e-03 	 1.84114360375779609162e-03 
1.37083 	 2.01905994833221674975e-06 	 8.01538283079048126389e-03 	 2.04984718769819903791e-03 
1.37917 	 2.22768205417076585204e-06 	 7.17999261920628049222e-03 	 2.28492025311985381616e-03 
1.38750 	 2.38903435022415011965e-06 	 6.43157543133872702801e-03 	 2.53033633544353297670e-03 
1.39583 	 2.63169292877853117893e-06 	 5.76951293350396170884e-03 	 2.81509946177961167119e-03 
1.40417 	 2.91070788696320261949e-06 	 5.17409489238404660810e-03 	 3.13430155054480455087e-03 
1.41250 	 3.21136460577682927514e-06 	 4.64685205026954019358e-03 	 3.47906440506969959897e-03 
1.42083 	 3.55708695132464993599e-06 	 4.16082862390090152394e-03 	 3.86234342968673960081e-03 
1.42917 	 3.97321642206630996403e-06 	 3.73624806890954924699e-03 	 4.29593011812416571832e-03 
1.43750 	 4.39615865639958132877e-06 	 3.35412997667159078902e-03 	 4.77913941675991819913e-03 
1.44583 	 4.70130934701946430346e-06 	 3.00428405348856066362e-03 	 5.31863733088369823598e-03 
1.45417 	 5.24936503186359241678e-06 	 2.69896230584752185033e-03 	 5.91203319762586068653e-03 
1.46250 	 5.84312340295266980077e-06 	 2.41770864571923998002e-03 	 6.56803440385175015676e-03 
1.47083 	 6.52951300131407468995e-06 	 2.16800673460382708688e-03 	 7.30231990237217333528e-03 
1.47917 	 7.13408513323140027525e-06 	 1.94699923942226373746e-03 	 8.09434893512650695258e-03 
1.48750 	 7.96123466988697942699e-06 	 1.74389769214792697549e-03 	 8.99659667849390422278e-03 
1.49583 	 8.73747319156256417355e-06 	 1.56662617920782696289e-03 	 1.00040310178570266558e-02 
1.50417 	 9.67805268211621865545e-06 	 1.40621409198980295945e-03 	 1.11158634592114953510e-02 
1.51250 	 1.05868601448346303393e-05 	 1.25938624597883401524e-03 	 1.23697793976162515733e-02 
1.52083 	 1.16075645233013088859e-05 	 1.12880454046922055512e-03 	 1.37384078775721982929e-02 
1.52917 	 1.28713051025142701162e-05 	 1.01194810326560671356e-03 	 1.52696678073840526324e-02 
1.53750 	 1.41846592331932367357e-05 	 9.08562078880348995488e-04 	 1.69588960751426293116e-02 
1.54583 	 1.56754029274075117983e-05 	 8.15564377395817789208e-04 	 1.88967401374962977456e-02 
1.55417 	 1.73664040170651841984e-05 	 7.31239552476364634490e-04 	 2.09943059353894026509e-02 
1.56250 	 1.93663107060114638065e-05 	 6.55762474572197349987e-04 	 2.33146363323469621442e-02 
1.57083 	 2.13605044304875590043e-05 	 5.88025953085191438637e-04 	 2.59301512662881636362e-02 
1.57917 	 2.36106894921882847827e-05 	 5.27035673626610788947e-04 	 2.88284759927434665328e-02 
1.58750 	 2.60027864547318564542e-05 	 4.73733678201638185815e-04 	 3.20512225708804512903e-02 
1.59583 	 2.88545440041236680778e-05 	 4.24365565196732250856e-04 	 3.55674793347364529006e-02 
1.60417 	 3.17035866880791518331e-05 	 3.80432484027124579937e-04 	 3.95319171592513132762e-02 
1.61250 	 3.50173636077803800875e-05 	 3.41803230470305173701e-04 	 4.39815507268732364121e-02 
1.62083 	 3.87569967174266377294e-05 	 3.06565043167308448960e-04 	 4.89352936989877959628e-02 
1.62917 	 4.26547439557197979616e-05 	 2.76205625622533829360e-04 	 5.43700179120867252425e-02 
1.63750 	 4.69948668889193905095e-05 	 2.46938389736472193453e-04 	 6.03733963971023260275e-02 
1.64583 	 5.22520413737842547887e-05 	 2.22052161725840626607e-04 	 6.71027515564881771315e-02 
1.65417 	 5.75285841065416197787e-05 	 1.98506634105231552371e-04 	 7.45158475478708698381e-02 
1.66250 	 6.33113749483774854989e-05 	 1.78676045403873188068e-04 	 8.29079098305375156164e-02 
1.67083 	 7.00354695887236354231e-05 	 1.60746269407803380261e-04 	 9.20732710393958320161e-02 
1.67917 	 7.72272550667811705141e-05 	 1.43234781541782060657e-04 	 1.02260678821616907141e-01 
1.68750 	 8.56471778268180512078e-05 	 1.28373690739042338113e-04 	 1.13734029922704898974e-01 
1.69583 	 9.48479588785165002220e-05 	 1.15648652467292828569e-04 	 1.26509537478075861916e-01 
1.70417 	 1.04669394788486702164e-04 	 1.03933379179773214868e-04 	 1.40614429716732575182e-01 
1.71250 	 1.16063796939896754609e-04 	 9.32310908685288496122e-05 	 1.56369194204490663536e-01 
1.72083 	 1.28241172049953894817e-04 	 8.34874477074154476217e-05 	 1.73630083884839303554e-01 
1.72917 	 1.41716630161780460240e-04 	 7.53742113084699625605e-05 	 1.93208652844848310925e-01 
1.73750 	 1.57525567598968714708e-04 	 6.73409581158195544911e-05 	 2.14746544085747864683e-01 
1.74583 	 1.74420419253824501718e-04 	 6.02903774778522531862e-05 	 2.38692642102224322764e-01 
1.75417 	 1.92732687435204881003e-04 	 5.42096916160398042462e-05 	 2.65358263729921051155e-01 
1.76250 	 2.13147672186110332272e-04 	 4.86955725804230914362e-05 	 2.95092765711175264443e-01 
1.77083 	 2.35663533014734857774e-04 	 4.33786377290529056661e-05 	 3.27961738989899442842e-01 
1.77917 	 2.60581428132065624857e-04 	 3.91505804109903635243e-05 	 3.64434121483645567796e-01 
1.78750 	 2.87505647646245571843e-04 	 3.55463219288928874940e-05 	 4.04873352493387905771e-01 
1.79583 	 3.17934275727368423001e-04 	 3.19085893886428986310e-05 	 4.50241641918020130131e-01 
1.80417 	 3.52722139896678200943e-04 	 2.86445962408118320159e-05 	 5.00110950382115060364e-01 
1.81250 	 3.89152217458544962773e-04 	 2.55858527393955651125e-05 	 5.56106976041099376751e-01 
1.82083 	 4.30854003044227567946e-04 	 2.32407992478074204178e-05 	 6.18263250626189697634e-01 
1.82917 	 4.76947272749098289714e-04 	 2.08132194513626389326e-05 	 6.87122350412881832682e-01 
1.83750 	 5.27466553349912855089e-04 	 1.86373908764372604296e-05 	 7.63650436017569433922e-01 
1.84583 	 5.84413061752529186706e-04 	 1.70406330376988896815e-05 	 8.49712172563036882700e-01 
1.85417 	 6.47513314729217899154e-04 	 1.50597494125943597200e-05 	 9.44797575084700302916e-01 
1.86250 	 7.15583513894744028920e-04 	 1.34328853586669624219e-05 	 1.05032473439814388882e+00 
1.87083 	 7.91882515357722254964e-04 	 1.20848549317861907843e-05 	 1.16790568425242224926e+00 
1.87917 	 8.77061517469466199980e-04 	 1.07779286434363037099e-05 	 1.29711404877610392283e+00 
1.88750 	 9.69729652919420798303e-04 	 9.86792011087410104704e-06 	 1.44237904253490789586e+00 
1.89583 	 1.07269948359520238615e-03 	 8.73842470174013207450e-06 	 1.60213942288551791648e+00 
1.90417 	 1.18649114858425516403e-03 	 7.81875482828500587484e-06 	 1.78154480590645514226e+00 
1.91250 	 1.31403419975705199399e-03 	 7.04039903340315862383e-06 	 1.98023103618294382677e+00 
1.92083 	 1.45401600513496149884e-03 	 6.40122087133122272306e-06 	 2.20029120067023020724e+00 
1.92917 	 1.60832728915085527641e-03 	 5.80552012147547620455e-06 	 2.44175685763577954290e+00 
1.93750 	 1.78003082665331344679e-03 	 4.96213921744552043851e-06 	 2.70878534534550263757e+00 
1.94583 	 1.97124233410610888440e-03 	 4.55418362954896900445e-06 	 2.99780195558195616812e+00 
1.95417 	 2.18022768720384403640e-03 	 4.12581350126415242417e-06 	 3.30087842933898878428e+00 
1.96250 	 2.41209968588886091226e-03 	 3.68328200411562201039e-06 	 3.60148743277447369593e+00 
1.97083 	 2.67091345308021919577e-03 	 3.32917772823892631616e-06 	 3.85321848999151228554e+00 
1.97917 	 2.95832212244315478217e-03 	 3.02515462268420588915e-06 	 3.96938687651471466822e+00 
1.98750 	 3.27926169590983789676e-03 	 2.66933445452417770821e-06 	 3.81561912955115456469e+00 
1.99583 	 3.63239399676612648854e-03 	 2.40158257410573227280e-06 	 2.38033286440966485031e+00 
2.00417 	 1.38653179821588667942e+00 	 2.09200719895042215244e-05 	 2.07290903169566398390e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.673;     /* cm^-1 */
mus         = 312.0;  /* cm^-1 */
g           = 0.9;  
nt          = 1.33;
Nphotons    = 10000000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz.
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);