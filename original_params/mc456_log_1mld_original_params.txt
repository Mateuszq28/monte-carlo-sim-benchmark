time elapsed: 287.5533 seconds

=================================

sim results:

number of photons = 1000000000
overflow: 1.35339096000000000000e+08
sum: 8.64660904000000000000e+08
sum: 8.64660904000000000000e+08
avg: 8.64660903999999952418e-01
perc_in: 86.47

number of photons = 1000000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72947319999999993279e-01 
0.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73240719999999992496e-01 
0.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72900040000000010387e-01 
0.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73099360000000013216e-01 
0.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73058199999999973162e-01 
0.04583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73153480000000004058e-01 
0.05417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73432719999999962468e-01 
0.06250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73438239999999999075e-01 
0.07083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73549480000000011515e-01 
0.07917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73684000000000038355e-01 
0.08750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73986759999999995863e-01 
0.09583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74178760000000021346e-01 
0.10417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74282680000000000931e-01 
0.11250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74745640000000013181e-01 
0.12083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75065920000000019296e-01 
0.12917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75112120000000015541e-01 
0.13750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75359679999999995559e-01 
0.14583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75854560000000026410e-01 
0.15417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.76437519999999992137e-01 
0.16250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.76498839999999967976e-01 
0.17083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.76943680000000025387e-01 
0.17917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77319639999999978386e-01 
0.18750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77740240000000027099e-01 
0.19583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.78050439999999954299e-01 
0.20417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.78272199999999969577e-01 
0.21250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.79154679999999988382e-01 
0.22083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.79912479999999963542e-01 
0.22917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80183800000000038377e-01 
0.23750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80484640000000007287e-01 
0.24583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.81092320000000006619e-01 
0.25417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.81874239999999998130e-01 
0.26250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.82414239999999983066e-01 
0.27083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.83293960000000011323e-01 
0.27917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.83710120000000010076e-01 
0.28750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.83974480000000029101e-01 
0.29583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.85094440000000004520e-01 
0.30417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.85785880000000047652e-01 
0.31250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.86355280000000045337e-01 
0.32083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.87385479999999970957e-01 
0.32917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.87598120000000012642e-01 
0.33750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.88704039999999995114e-01 
0.34583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.89358879999999984989e-01 
0.35417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.90311560000000024040e-01 
0.36250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.91221280000000026789e-01 
0.37083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.91939119999999996402e-01 
0.37917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.92759920000000006812e-01 
0.38750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.93799840000000034301e-01 
0.39583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.94754920000000031344e-01 
0.40417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.95356119999999999770e-01 
0.41250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.96445599999999975793e-01 
0.42083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.97422039999999998638e-01 
0.42917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.98510319999999995666e-01 
0.43750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.99490719999999988055e-01 
0.44583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.00637200000000048838e-01 
0.45417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.01674600000000014965e-01 
0.46250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.02652000000000032109e-01 
0.47083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.03956999999999977202e-01 
0.47917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.04946639999999991044e-01 
0.48750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.06157920000000027816e-01 
0.49583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.07323359999999989878e-01 
0.50417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.08240999999999987224e-01 
0.51250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.09618959999999998622e-01 
0.52083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.10766520000000046053e-01 
0.52917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.11904239999999999267e-01 
0.53750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.13061880000000014590e-01 
0.54583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.14495760000000013079e-01 
0.55417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.15802199999999977376e-01 
0.56250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.17314680000000015614e-01 
0.57083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.18318240000000030054e-01 
0.57917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.20226960000000004936e-01 
0.58750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.21421679999999987398e-01 
0.59583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.22817760000000009146e-01 
0.60417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.24613079999999998293e-01 
0.61250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.25696199999999991270e-01 
0.62083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.27316560000000034147e-01 
0.62917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.28652040000000034148e-01 
0.63750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.30574560000000017279e-01 
0.64583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.31905959999999999877e-01 
0.65417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.33450719999999978249e-01 
0.66250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.34733279999999966403e-01 
0.67083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.36518880000000020214e-01 
0.67917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.38338919999999987454e-01 
0.68750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.39754080000000013850e-01 
0.69583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.41990039999999995146e-01 
0.70417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.43469040000000003232e-01 
0.71250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.45047280000000011757e-01 
0.72083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.47187000000000023370e-01 
0.72917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.48687719999999978793e-01 
0.73750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.50705160000000015774e-01 
0.74583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.52294559999999978839e-01 
0.75417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.54278519999999985668e-01 
0.76250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.56009760000000008429e-01 
0.77083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.57976919999999976252e-01 
0.77917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.60147239999999979609e-01 
0.78750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.61930799999999996963e-01 
0.79583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.64113719999999974064e-01 
0.80417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.66083639999999987946e-01 
0.81250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.67895040000000006497e-01 
0.82083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.70061519999999977149e-01 
0.82917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.72422520000000034646e-01 
0.83750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.74640240000000013243e-01 
0.84583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.76610400000000011822e-01 
0.85417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.78420719999999988215e-01 
0.86250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.81354600000000043547e-01 
0.87083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.83309759999999999369e-01 
0.87917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.85148880000000026769e-01 
0.88750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.87523680000000037005e-01 
0.89583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.89889839999999987530e-01 
0.90417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.92354279999999999706e-01 
0.91250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.94624919999999990150e-01 
0.92083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.97110359999999995573e-01 
0.92917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.99714239999999998432e-01 
0.93750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.02090119999999995315e-01 
0.94583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.04491439999999979893e-01 
0.95417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.07095560000000022960e-01 
0.96250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.09831200000000006600e-01 
0.97083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.11681600000000036399e-01 
0.97917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.14365040000000017795e-01 
0.98750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.17371880000000028410e-01 
0.99583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.19529719999999994862e-01 
1.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.22185560000000015268e-01 
1.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.25337599999999982359e-01 
1.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.27700999999999997847e-01 
1.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.31028240000000006926e-01 
1.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.33254720000000037583e-01 
1.04583 	 1.15844894833820460933e-01 	 1.82616033435674793850e+01 	 4.35903240000000025134e-01 
1.05417 	 2.18178682879562241270e-01 	 0.00000000000000000000e+00 	 4.39120080000000023723e-01 
1.06250 	 1.23723383887024682148e-01 	 0.00000000000000000000e+00 	 4.41867120000000002111e-01 
1.07083 	 9.66139551339257746099e-02 	 0.00000000000000000000e+00 	 4.44896999999999986919e-01 
1.07917 	 8.20123552769079500191e-02 	 0.00000000000000000000e+00 	 4.48150319999999990905e-01 
1.08750 	 7.25162003194197990474e-02 	 0.00000000000000000000e+00 	 4.51187880000000041125e-01 
1.09583 	 6.57010003335738446140e-02 	 0.00000000000000000000e+00 	 4.54001280000000007053e-01 
1.10417 	 6.04727947628543108238e-02 	 0.00000000000000000000e+00 	 4.56843600000000016337e-01 
1.11250 	 5.63440614818186760737e-02 	 0.00000000000000000000e+00 	 4.59988559999999990779e-01 
1.12083 	 5.29552401032525391078e-02 	 0.00000000000000000000e+00 	 4.63086239999999982331e-01 
1.12917 	 5.00784815862674176357e-02 	 0.00000000000000000000e+00 	 4.66257000000000032536e-01 
1.13750 	 4.76716244512307082970e-02 	 0.00000000000000000000e+00 	 4.69590600000000024661e-01 
1.14583 	 4.55661589123894719688e-02 	 0.00000000000000000000e+00 	 4.72579080000000040229e-01 
1.15417 	 4.37113472253156734593e-02 	 0.00000000000000000000e+00 	 4.76065199999999966174e-01 
1.16250 	 4.20620551301603348704e-02 	 0.00000000000000000000e+00 	 4.78629840000000028599e-01 
1.17083 	 4.05745467076831234365e-02 	 0.00000000000000000000e+00 	 4.82500319999999982556e-01 
1.17917 	 3.92672046226156326587e-02 	 0.00000000000000000000e+00 	 4.85894280000000067243e-01 
1.18750 	 3.80662542316524826758e-02 	 0.00000000000000000000e+00 	 4.89601439999999998864e-01 
1.19583 	 3.69811392542832573227e-02 	 0.00000000000000000000e+00 	 4.92874199999999929034e-01 
1.20417 	 3.59895843192030509550e-02 	 0.00000000000000000000e+00 	 4.96416840000000025857e-01 
1.21250 	 3.50842457562799761583e-02 	 0.00000000000000000000e+00 	 4.99224600000000018341e-01 
1.22083 	 3.42193389077873610926e-02 	 0.00000000000000000000e+00 	 5.03055719999999984005e-01 
1.22917 	 3.34434819581929526633e-02 	 0.00000000000000000000e+00 	 5.06433360000000054590e-01 
1.23750 	 3.26943289890866822800e-02 	 0.00000000000000000000e+00 	 5.10070440000000013825e-01 
1.24583 	 3.19980357542637566803e-02 	 0.00000000000000000000e+00 	 5.13077880000000097205e-01 
1.25417 	 3.13774882690724121748e-02 	 0.00000000000000000000e+00 	 5.17085400000000028342e-01 
1.26250 	 3.07869402057749930179e-02 	 0.00000000000000000000e+00 	 5.20908719999999991757e-01 
1.27083 	 3.02221172670115480197e-02 	 0.00000000000000000000e+00 	 5.24895239999999985159e-01 
1.27917 	 2.96935361418506939268e-02 	 0.00000000000000000000e+00 	 5.28274919999999981179e-01 
1.28750 	 2.91856666010742032968e-02 	 0.00000000000000000000e+00 	 5.32283399999999962127e-01 
1.29583 	 2.86952329416387194594e-02 	 0.00000000000000000000e+00 	 5.36172120000000029805e-01 
1.30417 	 2.82767651303011957609e-02 	 0.00000000000000000000e+00 	 5.39909520000000031636e-01 
1.31250 	 2.78452635817914261052e-02 	 0.00000000000000000000e+00 	 5.43688919999999908939e-01 
1.32083 	 2.74511027285847079848e-02 	 0.00000000000000000000e+00 	 5.47496760000000026736e-01 
1.32917 	 2.70488721643750533452e-02 	 0.00000000000000000000e+00 	 5.50938359999999960337e-01 
1.33750 	 2.67094375536403097482e-02 	 0.00000000000000000000e+00 	 5.55728760000000043817e-01 
1.34583 	 2.63694613032742983250e-02 	 0.00000000000000000000e+00 	 5.59910519999999967133e-01 
1.35417 	 2.60303111004889925484e-02 	 0.00000000000000000000e+00 	 5.63995079999999981979e-01 
1.36250 	 2.57201653993753831529e-02 	 0.00000000000000000000e+00 	 5.67919440000000053104e-01 
1.37083 	 2.53961924875910211030e-02 	 0.00000000000000000000e+00 	 5.72101439999999961117e-01 
1.37917 	 2.51186776766687304419e-02 	 0.00000000000000000000e+00 	 5.76313080000000033110e-01 
1.38750 	 2.48517067917624311091e-02 	 0.00000000000000000000e+00 	 5.79933000000000031804e-01 
1.39583 	 2.45783229714084984485e-02 	 0.00000000000000000000e+00 	 5.85033960000000075041e-01 
1.40417 	 2.43321461830740617960e-02 	 0.00000000000000000000e+00 	 5.89464119999999924815e-01 
1.41250 	 2.40996567513911408298e-02 	 0.00000000000000000000e+00 	 5.93131799999999986817e-01 
1.42083 	 2.38752408662254722582e-02 	 0.00000000000000000000e+00 	 5.98162199999999977251e-01 
1.42917 	 2.36179381444923501554e-02 	 0.00000000000000000000e+00 	 6.02518559999999925303e-01 
1.43750 	 2.34094959612724841380e-02 	 0.00000000000000000000e+00 	 6.06972240000000051730e-01 
1.44583 	 2.31982464490956483139e-02 	 0.00000000000000000000e+00 	 6.11516999999999977256e-01 
1.45417 	 2.29976487956664865653e-02 	 0.00000000000000000000e+00 	 6.16477319999999995304e-01 
1.46250 	 2.28152833135120448882e-02 	 0.00000000000000000000e+00 	 6.20761800000000030231e-01 
1.47083 	 2.26408727745568104373e-02 	 0.00000000000000000000e+00 	 6.25301040000000085683e-01 
1.47917 	 2.24375610216061352475e-02 	 0.00000000000000000000e+00 	 6.30122040000000049886e-01 
1.48750 	 2.22811331621836153372e-02 	 0.00000000000000000000e+00 	 6.34887600000000107414e-01 
1.49583 	 2.21093205467269120212e-02 	 0.00000000000000000000e+00 	 6.39434160000000084700e-01 
1.50417 	 2.19727779841395187699e-02 	 0.00000000000000000000e+00 	 6.44061600000000011867e-01 
1.51250 	 2.18170184979497965017e-02 	 0.00000000000000000000e+00 	 6.49747680000000049638e-01 
1.52083 	 2.16644960199670680301e-02 	 0.00000000000000000000e+00 	 6.53749440000000014983e-01 
1.52917 	 2.15121393442240238514e-02 	 0.00000000000000000000e+00 	 6.59227439999999997866e-01 
1.53750 	 2.13830039237813893105e-02 	 0.00000000000000000000e+00 	 6.64499639999999947015e-01 
1.54583 	 2.12459083023380929101e-02 	 0.00000000000000000000e+00 	 6.69359999999999955023e-01 
1.55417 	 2.11240917970818356530e-02 	 0.00000000000000000000e+00 	 6.74704440000000071898e-01 
1.56250 	 2.09920690034729497120e-02 	 0.00000000000000000000e+00 	 6.79748640000000015071e-01 
1.57083 	 2.08681413069805726801e-02 	 0.00000000000000000000e+00 	 6.85411199999999998234e-01 
1.57917 	 2.07671700972273005903e-02 	 0.00000000000000000000e+00 	 6.90131280000000013608e-01 
1.58750 	 2.06729191314556602632e-02 	 0.00000000000000000000e+00 	 6.94971840000000007365e-01 
1.59583 	 2.05479229224996284842e-02 	 0.00000000000000000000e+00 	 7.00641840000000071242e-01 
1.60417 	 2.04313667818766982187e-02 	 0.00000000000000000000e+00 	 7.06073520000000010022e-01 
1.61250 	 2.03359959716819214959e-02 	 0.00000000000000000000e+00 	 7.11346200000000039587e-01 
1.62083 	 2.02286009870564151281e-02 	 0.00000000000000000000e+00 	 7.16696999999999917463e-01 
1.62917 	 2.01229056293537982014e-02 	 0.00000000000000000000e+00 	 7.22570880000000026477e-01 
1.63750 	 2.00453139259776369485e-02 	 0.00000000000000000000e+00 	 7.28333879999999989074e-01 
1.64583 	 1.99616021216033855123e-02 	 0.00000000000000000000e+00 	 7.33240080000000071792e-01 
1.65417 	 1.98630847630645521185e-02 	 0.00000000000000000000e+00 	 7.39816079999999987038e-01 
1.66250 	 1.97983226022846285630e-02 	 0.00000000000000000000e+00 	 7.45371719999999959860e-01 
1.67083 	 1.97085997297102542836e-02 	 0.00000000000000000000e+00 	 7.50864960000000025708e-01 
1.67917 	 1.96332016166736178509e-02 	 0.00000000000000000000e+00 	 7.56900840000000019181e-01 
1.68750 	 1.95484924356374989429e-02 	 0.00000000000000000000e+00 	 7.62745800000000029328e-01 
1.69583 	 1.94709444599325924574e-02 	 0.00000000000000000000e+00 	 7.68782880000000057308e-01 
1.70417 	 1.94135620374661227450e-02 	 0.00000000000000000000e+00 	 7.75700759999999989169e-01 
1.71250 	 1.93548966418927853583e-02 	 0.00000000000000000000e+00 	 7.80806280000000074715e-01 
1.72083 	 1.92811175083025081178e-02 	 0.00000000000000000000e+00 	 7.87520759999999930834e-01 
1.72917 	 1.92142040782356804396e-02 	 0.00000000000000000000e+00 	 7.93563240000000003072e-01 
1.73750 	 1.91455775590893481630e-02 	 0.00000000000000000000e+00 	 7.99398839999999943906e-01 
1.74583 	 1.91008961065590315842e-02 	 0.00000000000000000000e+00 	 8.05471440000000038495e-01 
1.75417 	 1.90420214631605612399e-02 	 0.00000000000000000000e+00 	 8.12103960000000069108e-01 
1.76250 	 1.89876858192568852279e-02 	 0.00000000000000000000e+00 	 8.18836200000000014043e-01 
1.77083 	 1.89347026214520403053e-02 	 0.00000000000000000000e+00 	 8.24794440000000017577e-01 
1.77917 	 1.88805251405591012492e-02 	 0.00000000000000000000e+00 	 8.31499199999999993871e-01 
1.78750 	 1.88390640743049224415e-02 	 0.00000000000000000000e+00 	 8.38895160000000084111e-01 
1.79583 	 1.87987124835000858625e-02 	 0.00000000000000000000e+00 	 8.45013600000000031365e-01 
1.80417 	 1.87423561027734823792e-02 	 0.00000000000000000000e+00 	 8.51723879999999988755e-01 
1.81250 	 1.86955407765094644423e-02 	 0.00000000000000000000e+00 	 8.58011400000000090671e-01 
1.82083 	 1.86535305125078917921e-02 	 0.00000000000000000000e+00 	 8.64946199999999998376e-01 
1.82917 	 1.86031741124865965253e-02 	 0.00000000000000000000e+00 	 8.71414320000000075517e-01 
1.83750 	 1.85816006073863393411e-02 	 0.00000000000000000000e+00 	 8.78461559999999974657e-01 
1.84583 	 1.85316186183502734641e-02 	 0.00000000000000000000e+00 	 8.85941399999999990023e-01 
1.85417 	 1.85001620404665612085e-02 	 0.00000000000000000000e+00 	 8.93438759999999998485e-01 
1.86250 	 1.84773975705757008414e-02 	 0.00000000000000000000e+00 	 9.00200760000000044236e-01 
1.87083 	 1.84350714823380279483e-02 	 0.00000000000000000000e+00 	 9.07296120000000039241e-01 
1.87917 	 1.84069108174952991708e-02 	 0.00000000000000000000e+00 	 9.14971919999999938611e-01 
1.88750 	 1.83812563224394175110e-02 	 0.00000000000000000000e+00 	 9.22347119999999964790e-01 
1.89583 	 1.83472398007019088517e-02 	 0.00000000000000000000e+00 	 9.29345879999999957555e-01 
1.90417 	 1.83054283025986842814e-02 	 0.00000000000000000000e+00 	 9.36507120000000026216e-01 
1.91250 	 1.82901048106742271371e-02 	 0.00000000000000000000e+00 	 9.43150079999999890745e-01 
1.92083 	 1.82593022239533817053e-02 	 0.00000000000000000000e+00 	 9.51659040000000122639e-01 
1.92917 	 1.82338134169371807181e-02 	 0.00000000000000000000e+00 	 9.59330279999999868679e-01 
1.93750 	 1.82100301028393814218e-02 	 0.00000000000000000000e+00 	 9.67030440000000046652e-01 
1.94583 	 1.81977348861887232301e-02 	 0.00000000000000000000e+00 	 9.75018839999999942236e-01 
1.95417 	 1.81586175810755957871e-02 	 0.00000000000000000000e+00 	 9.83119799999999988138e-01 
1.96250 	 1.81685179500646436235e-02 	 0.00000000000000000000e+00 	 9.90985679999999979906e-01 
1.97083 	 1.81346198254075004208e-02 	 0.00000000000000000000e+00 	 9.98479079999999963313e-01 
1.97917 	 1.81146136444570587942e-02 	 0.00000000000000000000e+00 	 1.00614179999999997506e+00 
1.98750 	 1.81022508249725697094e-02 	 0.00000000000000000000e+00 	 1.01458812000000020426e+00 
1.99583 	 1.80957769378774467606e-02 	 0.00000000000000000000e+00 	 1.85339999999999983926e-02 
2.00417 	 6.55424492861475083139e-01 	 0.00000000000000000000e+00 	 2.21549927999999995976e+00 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.0;     /* cm^-1 */
mus         = 0.0;  /* cm^-1 */
g           = 0.9;  
nt          = 1.33;
Nphotons    = 1e9; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);