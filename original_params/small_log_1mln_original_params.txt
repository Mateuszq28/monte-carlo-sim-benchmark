time elapsed: 27.4483 seconds

=================================

sim results:

Small Monte Carlo by Scott Prahl (https://omlc.org)
1 W/cm^2 Uniform Illumination of Semi-Infinite Medium

Scattering =   95.000/cm
Absorption =    5.000/cm
Anisotropy =    0.500
Refr Index =    1.500
Photons    =  1000000

Specular Refl      =    0.04000
Backscattered Refl =    0.21738

 Depth         Heat
[microns]     [W/cm^3]
     0        15.64547
    20        15.50335
    40        15.24911
    60        14.88718
    80        14.54869
   100        14.09222
   120        13.64725
   140        13.10964
   160        12.59433
   180        12.12501
   200        11.58286
   220        11.08278
   240        10.60739
   260        10.11954
   280         9.61318
   300         9.16504
   320         8.72452
   340         8.29251
   360         7.86625
   380         7.48326
   400         7.09971
   420         6.72602
   440         6.39561
   460         6.07727
   480         5.75062
   500         5.46270
   520         5.15940
   540         4.90439
   560         4.64844
   580         4.40942
   600         4.18162
   620         3.94726
   640         3.73153
   660         3.54723
   680         3.36631
   700         3.19679
   720         3.01254
   740         2.86027
   760         2.70637
   780         2.55900
   800         2.41886
   820         2.29061
   840         2.17240
   860         2.05819
   880         1.95191
   900         1.84538
   920         1.74373
   940         1.66177
   960         1.57007
   980         1.48908
  1000         1.41475
  1020         1.32947
  1040         1.25515
  1060         1.18718
  1080         1.12383
  1100         1.06875
  1120         1.01203
  1140         0.95829
  1160         0.90691
  1180         0.85803
  1200         0.80790
  1220         0.76724
  1240         0.72798
  1260         0.69157
  1280         0.65687
  1300         0.62063
  1320         0.58457
  1340         0.55450
  1360         0.52653
  1380         0.50156
  1400         0.47322
  1420         0.44669
  1440         0.41991
  1460         0.40114
  1480         0.37999
  1500         0.35902
  1520         0.33965
  1540         0.32135
  1560         0.30614
  1580         0.28680
  1600         0.27188
  1620         0.25669
  1640         0.24488
  1660         0.23171
  1680         0.21973
  1700         0.20754
  1720         0.19636
  1740         0.18708
  1760         0.17650
  1780         0.16738
  1800         0.15786
  1820         0.14985
  1840         0.14107
  1860         0.13489
  1880         0.12700
  1900         0.12030
  1920         0.11446
  1940         0.10933
  1960         0.10213
  1980         0.09774
 extra         0.00344


=================================

code that generated this simulation:

char   t1[80] = "Small Monte Carlo by Scott Prahl (https://omlc.org)";
char   t2[80] = "1 W/cm^2 Uniform Illumination of Semi-Infinite Medium";

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define BINS 101

double mu_a = 5;			/* Absorption Coefficient in 1/cm */
double mu_s = 95;			/* Scattering Coefficient in 1/cm */
double g = 0.5;				/* Scattering Anisotropy -1<=g<=1 */
double n = 1.5;				/* Index of refraction of medium */
double microns_per_bin = 20;/* Thickness of one bin layer */
long   i, photons = 1e6;
double x,y,z,u,v,w,weight;
double rs, rd, bit, albedo, crit_angle, bins_per_mfp, heat[BINS];

void launch() /* Start the photon */
{
	x = 0.0; y = 0.0; z = 0.0;		  
	u = 0.0; v = 0.0; w = 1.0;		
	weight = 1.0 - rs;
}

void bounce () /* Interact with top surface */
{
double t, temp, temp1,rf;
	w = -w;
	z = -z;
	if (w <= crit_angle) return;  			/* total internal reflection */	

	t       = sqrt(1.0-n*n*(1.0-w*w));    	/* cos of exit angle */
	temp1   = (w - n*t)/(w + n*t);
	temp    = (t - n*w)/(t + n*w);
	rf      = (temp1*temp1+temp*temp)/2.0;	/* Fresnel reflection */
	rd     += (1.0-rf) * weight;
	weight -= (1.0-rf) * weight;
}

void move() /* move to next scattering or absorption event */
{
double d = -log((rand()+1.0)/(RAND_MAX+1.0));
	x += d * u;
	y += d * v;
	z += d * w;  
	if ( z<=0 ) bounce();
}

void absorb () /* Absorb light in the medium */
{
int bin=z*bins_per_mfp;

	if (bin >= BINS) bin = BINS-1;	
	heat[bin] += (1.0-albedo)*weight;
	weight *= albedo;
	if (weight < 0.001){ /* Roulette */
		bit -= weight;
		if (rand() > 0.1*RAND_MAX) weight = 0; else weight /= 0.1;
		bit += weight;
	}
}

void scatter() /* Scatter photon and establish new direction */
{
double x1, x2, x3, t, mu;

	for(;;) {								/*new direction*/
		x1=2.0*rand()/RAND_MAX - 1.0; 
		x2=2.0*rand()/RAND_MAX - 1.0; 
		if ((x3=x1*x1+x2*x2)<=1) break;
	}	
	if (g==0) {  /* isotropic */
		u = 2.0 * x3 -1.0;
		v = x1 * sqrt((1-u*u)/x3);
		w = x2 * sqrt((1-u*u)/x3);
		return;
	} 

	mu = (1-g*g)/(1-g+2.0*g*rand()/RAND_MAX);
	mu = (1 + g*g-mu*mu)/2.0/g;
	if ( fabs(w) < 0.9 ) {	
		t = mu * u + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*u*w-x2*v);
		v = mu * v + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*v*w+x2*u);
		w = mu * w - sqrt((1-mu*mu)*(1-w*w)/x3) * x1;
	} else {
		t = mu * u + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*u*v + x2*w);
		w = mu * w + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*v*w - x2*u);
		v = mu * v - sqrt((1-mu*mu)*(1-v*v)/x3) * x1;
	}
	u = t;
}

void print_results() /* Print the results */
{
int i;
	printf("%s\n%s\n\nScattering = %8.3f/cm\nAbsorption = %8.3f/cm\n",t1,t2,mu_s,mu_a);
	printf("Anisotropy = %8.3f\nRefr Index = %8.3f\nPhotons    = %8ld",g,n,photons);
	printf("\n\nSpecular Refl      = %10.5f\nBackscattered Refl = %10.5f",rs,rd/(bit+photons));
	printf("\n\n Depth         Heat\n[microns]     [W/cm^3]\n");

	for (i=0;i<BINS-1;i++){
		printf("%6.0f    %12.5f\n",i*microns_per_bin, heat[i]/microns_per_bin*1e4/(bit+photons));
	}
	printf(" extra    %12.5f\n",heat[BINS-1]/(bit+photons));
}

int main ()
{
	albedo = mu_s / (mu_s + mu_a);
	rs = (n-1.0)*(n-1.0)/(n+1.0)/(n+1.0);	/* specular reflection */
	crit_angle = sqrt(1.0-1.0/n/n);			/* cos of critical angle */
	bins_per_mfp = 1e4/microns_per_bin/(mu_a+mu_s);
	
	for (i = 1; i <= photons; i++){
		launch ();
		while (weight > 0) {
			move ();
			absorb ();
			scatter ();
		}
	}	
	print_results();
	return 0;
}
