time elapsed: 11.1414 seconds

=================================

sim results:

number of photons = 10000
overflow: 2.84626511895417343112e+03
sum: 7.15005173384127465397e+03
sum: 7.15373488104582611413e+03
avg: 7.15005173384127501457e-01
perc_in: 71.50

number of photons = 10000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.04583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.05417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.06250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.07083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.07917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.08750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.09583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.10417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.11250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.12083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.12917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.13750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.14583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.15417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.16250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.17083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 
0.17917 	 0.00000000000000000000e+00 	 3.24630196320698284922e-06 	 0.00000000000000000000e+00 
0.18750 	 0.00000000000000000000e+00 	 1.76287579131852657973e-06 	 0.00000000000000000000e+00 
0.19583 	 0.00000000000000000000e+00 	 2.65540365363185146421e-06 	 0.00000000000000000000e+00 
0.20417 	 0.00000000000000000000e+00 	 6.38074549911746032439e-06 	 0.00000000000000000000e+00 
0.21250 	 0.00000000000000000000e+00 	 4.30050253301168516884e-06 	 0.00000000000000000000e+00 
0.22083 	 0.00000000000000000000e+00 	 2.40882636261165460371e-06 	 0.00000000000000000000e+00 
0.22917 	 0.00000000000000000000e+00 	 3.50220060402343547027e-06 	 0.00000000000000000000e+00 
0.23750 	 0.00000000000000000000e+00 	 5.32037336411748374950e-06 	 0.00000000000000000000e+00 
0.24583 	 0.00000000000000000000e+00 	 9.28667506442578877322e-06 	 0.00000000000000000000e+00 
0.25417 	 0.00000000000000000000e+00 	 6.67031699691324015072e-06 	 0.00000000000000000000e+00 
0.26250 	 0.00000000000000000000e+00 	 5.67809610630042052256e-06 	 0.00000000000000000000e+00 
0.27083 	 0.00000000000000000000e+00 	 7.09938349857807141709e-06 	 0.00000000000000000000e+00 
0.27917 	 0.00000000000000000000e+00 	 4.12693005898769375243e-05 	 0.00000000000000000000e+00 
0.28750 	 0.00000000000000000000e+00 	 3.08155714905048849078e-05 	 0.00000000000000000000e+00 
0.29583 	 0.00000000000000000000e+00 	 3.15661165679692484764e-05 	 0.00000000000000000000e+00 
0.30417 	 0.00000000000000000000e+00 	 6.43979147220279134808e-05 	 0.00000000000000000000e+00 
0.31250 	 0.00000000000000000000e+00 	 4.63396529058394038140e-05 	 0.00000000000000000000e+00 
0.32083 	 0.00000000000000000000e+00 	 3.76446105008734543734e-05 	 0.00000000000000000000e+00 
0.32917 	 0.00000000000000000000e+00 	 4.85321579369803838828e-05 	 0.00000000000000000000e+00 
0.33750 	 0.00000000000000000000e+00 	 3.30715383353198259840e-05 	 0.00000000000000000000e+00 
0.34583 	 0.00000000000000000000e+00 	 5.75651585624989482509e-05 	 0.00000000000000000000e+00 
0.35417 	 0.00000000000000000000e+00 	 9.66544849639252597441e-05 	 0.00000000000000000000e+00 
0.36250 	 0.00000000000000000000e+00 	 1.19178208426391491880e-04 	 0.00000000000000000000e+00 
0.37083 	 0.00000000000000000000e+00 	 1.21341608607010724343e-04 	 0.00000000000000000000e+00 
0.37917 	 0.00000000000000000000e+00 	 1.63278327313384150890e-04 	 0.00000000000000000000e+00 
0.38750 	 0.00000000000000000000e+00 	 1.68627408043501219670e-04 	 0.00000000000000000000e+00 
0.39583 	 0.00000000000000000000e+00 	 2.29345959182210160435e-04 	 0.00000000000000000000e+00 
0.40417 	 0.00000000000000000000e+00 	 2.18177783050816661127e-04 	 0.00000000000000000000e+00 
0.41250 	 0.00000000000000000000e+00 	 2.66624554099631385761e-04 	 0.00000000000000000000e+00 
0.42083 	 0.00000000000000000000e+00 	 2.72807308492503805195e-04 	 0.00000000000000000000e+00 
0.42917 	 0.00000000000000000000e+00 	 2.88448667937399848022e-04 	 0.00000000000000000000e+00 
0.43750 	 0.00000000000000000000e+00 	 2.93519830338673855686e-04 	 0.00000000000000000000e+00 
0.44583 	 0.00000000000000000000e+00 	 2.86221677229286887087e-04 	 0.00000000000000000000e+00 
0.45417 	 0.00000000000000000000e+00 	 3.03191972345678547110e-04 	 0.00000000000000000000e+00 
0.46250 	 0.00000000000000000000e+00 	 3.78795927797051393358e-04 	 0.00000000000000000000e+00 
0.47083 	 0.00000000000000000000e+00 	 5.51324220975249121302e-04 	 0.00000000000000000000e+00 
0.47917 	 0.00000000000000000000e+00 	 5.67470118203229362958e-04 	 0.00000000000000000000e+00 
0.48750 	 0.00000000000000000000e+00 	 6.08288158883279594241e-04 	 0.00000000000000000000e+00 
0.49583 	 0.00000000000000000000e+00 	 8.25212896917244657403e-04 	 0.00000000000000000000e+00 
0.50417 	 0.00000000000000000000e+00 	 7.79382635216120927407e-04 	 0.00000000000000000000e+00 
0.51250 	 0.00000000000000000000e+00 	 8.81377140352065935325e-04 	 0.00000000000000000000e+00 
0.52083 	 0.00000000000000000000e+00 	 9.71877298756312663248e-04 	 0.00000000000000000000e+00 
0.52917 	 0.00000000000000000000e+00 	 1.08063592302502743323e-03 	 0.00000000000000000000e+00 
0.53750 	 0.00000000000000000000e+00 	 1.10549462623005158995e-03 	 0.00000000000000000000e+00 
0.54583 	 0.00000000000000000000e+00 	 1.24781655590363010216e-03 	 0.00000000000000000000e+00 
0.55417 	 0.00000000000000000000e+00 	 1.41556156825455785146e-03 	 0.00000000000000000000e+00 
0.56250 	 0.00000000000000000000e+00 	 1.59715520551364869271e-03 	 0.00000000000000000000e+00 
0.57083 	 0.00000000000000000000e+00 	 1.66020270705280101851e-03 	 0.00000000000000000000e+00 
0.57917 	 0.00000000000000000000e+00 	 1.72232182990180219227e-03 	 0.00000000000000000000e+00 
0.58750 	 0.00000000000000000000e+00 	 1.81764757094177251823e-03 	 0.00000000000000000000e+00 
0.59583 	 0.00000000000000000000e+00 	 1.98695876666030472532e-03 	 0.00000000000000000000e+00 
0.60417 	 0.00000000000000000000e+00 	 2.35195350289764577856e-03 	 0.00000000000000000000e+00 
0.61250 	 0.00000000000000000000e+00 	 2.65308544677846699228e-03 	 0.00000000000000000000e+00 
0.62083 	 0.00000000000000000000e+00 	 2.94450784850410927571e-03 	 0.00000000000000000000e+00 
0.62917 	 0.00000000000000000000e+00 	 3.25472151451679583833e-03 	 0.00000000000000000000e+00 
0.63750 	 0.00000000000000000000e+00 	 3.67861051076224425740e-03 	 0.00000000000000000000e+00 
0.64583 	 0.00000000000000000000e+00 	 4.12236911219950562246e-03 	 0.00000000000000000000e+00 
0.65417 	 0.00000000000000000000e+00 	 4.60534902354962222271e-03 	 0.00000000000000000000e+00 
0.66250 	 0.00000000000000000000e+00 	 4.95250082475367885138e-03 	 0.00000000000000000000e+00 
0.67083 	 0.00000000000000000000e+00 	 5.68582528899639824682e-03 	 0.00000000000000000000e+00 
0.67917 	 0.00000000000000000000e+00 	 6.32392544668754046089e-03 	 0.00000000000000000000e+00 
0.68750 	 0.00000000000000000000e+00 	 7.01072263029553412877e-03 	 0.00000000000000000000e+00 
0.69583 	 0.00000000000000000000e+00 	 7.59495092138544238697e-03 	 0.00000000000000000000e+00 
0.70417 	 0.00000000000000000000e+00 	 8.37177204163097946066e-03 	 0.00000000000000000000e+00 
0.71250 	 0.00000000000000000000e+00 	 8.77665647336203606776e-03 	 0.00000000000000000000e+00 
0.72083 	 0.00000000000000000000e+00 	 9.64990670469999950454e-03 	 0.00000000000000000000e+00 
0.72917 	 0.00000000000000000000e+00 	 1.05254652409414520275e-02 	 0.00000000000000000000e+00 
0.73750 	 0.00000000000000000000e+00 	 1.22921792251791811568e-02 	 0.00000000000000000000e+00 
0.74583 	 0.00000000000000000000e+00 	 1.40900501303449846024e-02 	 0.00000000000000000000e+00 
0.75417 	 0.00000000000000000000e+00 	 1.44542541833383858529e-02 	 0.00000000000000000000e+00 
0.76250 	 0.00000000000000000000e+00 	 1.61080952038567329354e-02 	 0.00000000000000000000e+00 
0.77083 	 0.00000000000000000000e+00 	 1.74332837417953342984e-02 	 0.00000000000000000000e+00 
0.77917 	 0.00000000000000000000e+00 	 2.00316158463117316435e-02 	 0.00000000000000000000e+00 
0.78750 	 0.00000000000000000000e+00 	 2.17971267118144962360e-02 	 0.00000000000000000000e+00 
0.79583 	 0.00000000000000000000e+00 	 2.33290417071386445291e-02 	 0.00000000000000000000e+00 
0.80417 	 0.00000000000000000000e+00 	 2.61816619100765264616e-02 	 0.00000000000000000000e+00 
0.81250 	 0.00000000000000000000e+00 	 2.92100366346187273470e-02 	 0.00000000000000000000e+00 
0.82083 	 0.00000000000000000000e+00 	 3.26035260300988824489e-02 	 0.00000000000000000000e+00 
0.82917 	 0.00000000000000000000e+00 	 3.64529715254665181989e-02 	 0.00000000000000000000e+00 
0.83750 	 0.00000000000000000000e+00 	 4.04397732262077105880e-02 	 0.00000000000000000000e+00 
0.84583 	 0.00000000000000000000e+00 	 4.49044046627851620168e-02 	 0.00000000000000000000e+00 
0.85417 	 0.00000000000000000000e+00 	 4.97298483653542330862e-02 	 0.00000000000000000000e+00 
0.86250 	 0.00000000000000000000e+00 	 5.59808818135333896571e-02 	 0.00000000000000000000e+00 
0.87083 	 0.00000000000000000000e+00 	 6.30557130196551240964e-02 	 0.00000000000000000000e+00 
0.87917 	 0.00000000000000000000e+00 	 6.85138719981012306315e-02 	 0.00000000000000000000e+00 
0.88750 	 0.00000000000000000000e+00 	 7.71330912252357892012e-02 	 0.00000000000000000000e+00 
0.89583 	 0.00000000000000000000e+00 	 8.53986076863157000938e-02 	 0.00000000000000000000e+00 
0.90417 	 0.00000000000000000000e+00 	 9.43073227072675351890e-02 	 0.00000000000000000000e+00 
0.91250 	 0.00000000000000000000e+00 	 1.03943638498714477358e-01 	 0.00000000000000000000e+00 
0.92083 	 0.00000000000000000000e+00 	 1.16262734970815254099e-01 	 0.00000000000000000000e+00 
0.92917 	 0.00000000000000000000e+00 	 1.27024379320481967115e-01 	 0.00000000000000000000e+00 
0.93750 	 0.00000000000000000000e+00 	 1.36336584683453415634e-01 	 0.00000000000000000000e+00 
0.94583 	 0.00000000000000000000e+00 	 1.54778979507639191660e-01 	 0.00000000000000000000e+00 
0.95417 	 0.00000000000000000000e+00 	 1.69852940048171419107e-01 	 0.00000000000000000000e+00 
0.96250 	 0.00000000000000000000e+00 	 1.90829495490734746266e-01 	 0.00000000000000000000e+00 
0.97083 	 0.00000000000000000000e+00 	 2.06415889462056051373e-01 	 0.00000000000000000000e+00 
0.97917 	 0.00000000000000000000e+00 	 2.32163554972105001806e-01 	 0.00000000000000000000e+00 
0.98750 	 0.00000000000000000000e+00 	 2.57389204220801415257e-01 	 0.00000000000000000000e+00 
0.99583 	 0.00000000000000000000e+00 	 2.79602009243815619044e-01 	 0.00000000000000000000e+00 
1.00417 	 0.00000000000000000000e+00 	 3.10280032830798579990e-01 	 0.00000000000000000000e+00 
1.01250 	 0.00000000000000000000e+00 	 3.44951128248448757319e-01 	 0.00000000000000000000e+00 
1.02083 	 0.00000000000000000000e+00 	 3.86831877110158151023e-01 	 1.54466981409412101816e-06 
1.02917 	 0.00000000000000000000e+00 	 4.38494055260014614639e-01 	 1.57806843821586088748e-06 
1.03750 	 0.00000000000000000000e+00 	 5.13398566404582590295e-01 	 3.30363380819187566623e-06 
1.04583 	 0.00000000000000000000e+00 	 8.57037685441301322342e-01 	 2.92409112322254496094e-06 
1.05417 	 0.00000000000000000000e+00 	 6.35234777816845230802e-01 	 1.18634801485935934760e-05 
1.06250 	 0.00000000000000000000e+00 	 4.90851194083597452966e-01 	 1.17262081252792678171e-05 
1.07083 	 0.00000000000000000000e+00 	 4.25651510261620125153e-01 	 1.20242592992827938787e-05 
1.07917 	 0.00000000000000000000e+00 	 3.75586462633927475885e-01 	 2.25701453520396753320e-05 
1.08750 	 0.00000000000000000000e+00 	 3.37145902682621401159e-01 	 2.83704763346320953845e-05 
1.09583 	 0.00000000000000000000e+00 	 3.04316071242990093815e-01 	 1.96488116062601871211e-05 
1.10417 	 0.00000000000000000000e+00 	 2.68510874399040255778e-01 	 5.53194320945268018389e-05 
1.11250 	 0.00000000000000000000e+00 	 2.38756689538073135770e-01 	 8.19489458035640571266e-05 
1.12083 	 0.00000000000000000000e+00 	 2.16093296854748262437e-01 	 1.14412349376004447081e-04 
1.12917 	 0.00000000000000000000e+00 	 1.94059680668723977259e-01 	 1.16312052814376509454e-04 
1.13750 	 0.00000000000000000000e+00 	 1.73495396260303830216e-01 	 1.52259903498839973277e-04 
1.14583 	 0.00000000000000000000e+00 	 1.56081267530361972318e-01 	 1.51381451550349296507e-04 
1.15417 	 0.00000000000000000000e+00 	 1.37407324726471019583e-01 	 1.57479153061397352236e-04 
1.16250 	 0.00000000000000000000e+00 	 1.25385098687188112354e-01 	 1.55867850488183341687e-04 
1.17083 	 0.00000000000000000000e+00 	 1.14065303362878664450e-01 	 1.37303315966510141016e-04 
1.17917 	 0.00000000000000000000e+00 	 1.02904764235226930946e-01 	 8.88906302118679591488e-05 
1.18750 	 0.00000000000000000000e+00 	 8.98001491411505176066e-02 	 1.64910174241063571966e-04 
1.19583 	 0.00000000000000000000e+00 	 8.00035798230583489188e-02 	 1.73734197141751640740e-04 
1.20417 	 2.67191299952905394786e-07 	 7.33201112266464727352e-02 	 9.73728849701690070233e-05 
1.21250 	 3.67344183152880539046e-07 	 6.63688185875650760170e-02 	 1.03727906338467267379e-04 
1.22083 	 6.91264993228696477785e-07 	 5.75899945215928646403e-02 	 1.30348446405892658432e-04 
1.22917 	 5.25238374121790885161e-07 	 5.21707377007650449641e-02 	 1.22253756774078634409e-04 
1.23750 	 3.18010886490395241769e-07 	 4.54860399022431957650e-02 	 1.70505534368999836156e-04 
1.24583 	 1.02952856524598685538e-06 	 4.07687501170947916296e-02 	 2.85949461851412389205e-04 
1.25417 	 6.81893550313984406626e-07 	 3.73312584956535867264e-02 	 3.62022311410761907409e-04 
1.26250 	 6.29118738095322480008e-07 	 3.23187017483849009514e-02 	 4.46843282297425985813e-04 
1.27083 	 2.21564646389502509124e-06 	 2.91740472886095301985e-02 	 5.20284288563203261083e-04 
1.27917 	 2.14394207741668344196e-06 	 2.58509001436775694149e-02 	 5.34636165865996835882e-04 
1.28750 	 1.37129024649213639759e-06 	 2.27275128620234648236e-02 	 5.96700153866764520030e-04 
1.29583 	 3.81073334959401430925e-07 	 2.03787098925029136476e-02 	 5.76643380017008476759e-04 
1.30417 	 2.72514720664055796912e-07 	 1.84095740789807851834e-02 	 6.14325746071242963578e-04 
1.31250 	 2.71272898129347857449e-07 	 1.56848567583400752556e-02 	 8.34236085190948940295e-04 
1.32083 	 5.46696554354762582817e-07 	 1.42747796072526696165e-02 	 7.96466944196243991153e-04 
1.32917 	 9.05789456841138072909e-07 	 1.26553130340679009097e-02 	 8.76680489885552820598e-04 
1.33750 	 1.03221552299916919301e-06 	 1.15526130123951315670e-02 	 1.11030115648256297138e-03 
1.34583 	 5.28628845646413652180e-07 	 1.04269258975221833924e-02 	 1.07111465162702227012e-03 
1.35417 	 2.91105562598073247295e-07 	 9.39833148089528822022e-03 	 1.41036295805548029213e-03 
1.36250 	 1.03239473133105467930e-06 	 8.56016521531133799117e-03 	 1.77787219627114408821e-03 
1.37083 	 5.60748029974165643259e-07 	 7.64139281457221382354e-03 	 2.09160001931883981346e-03 
1.37917 	 1.02548993745224464436e-06 	 6.68789524742013051506e-03 	 2.52286378422716690145e-03 
1.38750 	 2.63354639011652695929e-06 	 6.21881514250093633128e-03 	 2.59370440069260372457e-03 
1.39583 	 2.14934515712801433345e-06 	 5.76987712739883938651e-03 	 3.01437962109513298004e-03 
1.40417 	 2.43072788429426158409e-06 	 4.99710766889315590594e-03 	 3.61587487213355486884e-03 
1.41250 	 1.37659000805289725675e-06 	 4.63588947575402886281e-03 	 3.67019730046782470881e-03 
1.42083 	 2.31470824977675823032e-06 	 3.97310295527454875736e-03 	 4.08139526947019423697e-03 
1.42917 	 1.95489529600662887785e-06 	 3.66345226664046034679e-03 	 4.52505524281602341391e-03 
1.43750 	 1.81690894629084524981e-06 	 3.38164805108137232412e-03 	 4.73253006836198315821e-03 
1.44583 	 2.98109930743658858108e-06 	 2.93021273691808923148e-03 	 4.93206601855739924789e-03 
1.45417 	 3.63232176277913721741e-06 	 2.61678742459214288760e-03 	 5.01969611167323807172e-03 
1.46250 	 4.69038261288161819761e-06 	 2.33983544217937185564e-03 	 5.71055566262099190133e-03 
1.47083 	 4.16583265782139683755e-06 	 2.20604522752069001634e-03 	 6.38474098796956886226e-03 
1.47917 	 5.45044259879337689265e-06 	 1.92811964448299979352e-03 	 6.80119988438039960177e-03 
1.48750 	 4.34801873943896129707e-06 	 1.76094071105458143539e-03 	 7.96865817103739777771e-03 
1.49583 	 5.02486130017169332874e-06 	 1.67459612931038703473e-03 	 8.78179314018544959763e-03 
1.50417 	 4.77650293799988416099e-06 	 1.56485672114999312295e-03 	 1.05482272186630809951e-02 
1.51250 	 4.13026692434713861709e-06 	 1.37376373766816750263e-03 	 1.10731735855939487229e-02 
1.52083 	 5.07939407845839975856e-06 	 1.18223420783107385432e-03 	 1.29914310546338975655e-02 
1.52917 	 7.87755318341563046407e-06 	 1.01986337216336498887e-03 	 1.49908438403204558043e-02 
1.53750 	 7.43590935538003613579e-06 	 9.44629256687716111103e-04 	 1.61970639986823879142e-02 
1.54583 	 8.19884282419749979500e-06 	 9.19726788719193413986e-04 	 1.79734209565656985474e-02 
1.55417 	 9.71737472251181279303e-06 	 8.37490999216523521187e-04 	 2.05507634381820042391e-02 
1.56250 	 1.27583165587616719557e-05 	 7.32239890840344722668e-04 	 2.29863498540633891254e-02 
1.57083 	 1.33744182315920429657e-05 	 6.26517270007796874508e-04 	 2.65139609160802043608e-02 
1.57917 	 1.91212317297489035385e-05 	 5.01808646335202986587e-04 	 2.84419158297131192958e-02 
1.58750 	 2.13627509145902670575e-05 	 4.60647917707034126617e-04 	 2.96643049570802889991e-02 
1.59583 	 3.15327969555118060516e-05 	 4.37726123248839671907e-04 	 3.24000489343315226098e-02 
1.60417 	 3.14079347541146332973e-05 	 3.70179544278133624766e-04 	 3.69529593054528857077e-02 
1.61250 	 2.71821374541423624023e-05 	 3.77239533151231955059e-04 	 4.38069904545475910518e-02 
1.62083 	 2.96238208820241770381e-05 	 3.18600265137370980591e-04 	 5.02978366173651991744e-02 
1.62917 	 3.20663305870667013353e-05 	 2.66245842415354673754e-04 	 5.58873380965571181500e-02 
1.63750 	 3.38637772510766690208e-05 	 2.47149681406136595245e-04 	 6.24649313372225706287e-02 
1.64583 	 3.20511670402347820133e-05 	 2.31595225090200162272e-04 	 6.98397419208156289283e-02 
1.65417 	 4.68681842765666885125e-05 	 1.93776284312841088351e-04 	 7.58697624439640672112e-02 
1.66250 	 5.32018008098013796985e-05 	 1.83161012189674281703e-04 	 8.49151562574565477171e-02 
1.67083 	 6.01579691214781085446e-05 	 1.80496188298804867249e-04 	 9.14584407774513413747e-02 
1.67917 	 6.52185064663869613682e-05 	 1.61872149111793684016e-04 	 1.03246864255766082619e-01 
1.68750 	 7.78998824484216750548e-05 	 1.48119444412122847629e-04 	 1.14614857421155416639e-01 
1.69583 	 7.87574038696147853697e-05 	 1.23884897128230531127e-04 	 1.32474665296339694232e-01 
1.70417 	 7.51504192491064977859e-05 	 1.07412971856579513800e-04 	 1.47559307804097400441e-01 
1.71250 	 8.80798723959804423641e-05 	 1.00813917520824438876e-04 	 1.63106519980919573154e-01 
1.72083 	 1.05647453854013073909e-04 	 9.03797829250407809337e-05 	 1.78892278464662851656e-01 
1.72917 	 1.00820188327624112121e-04 	 8.17777866118240442158e-05 	 1.97746786307051114484e-01 
1.73750 	 1.11548063728975638677e-04 	 7.10603009624272082033e-05 	 2.22129474307693114410e-01 
1.74583 	 1.30347174796979547789e-04 	 6.35415698491042444914e-05 	 2.54150321570594750487e-01 
1.75417 	 1.38662123273570423452e-04 	 6.35771918739866609502e-05 	 2.72071378879820691132e-01 
1.76250 	 1.73324557907496225491e-04 	 7.39147182406792499889e-05 	 3.10586418300404898396e-01 
1.77083 	 1.97262982167338476319e-04 	 5.52183980227181970863e-05 	 3.36824806367440776622e-01 
1.77917 	 2.33924777338956975305e-04 	 3.87408743431237999485e-05 	 3.73311738182389885043e-01 
1.78750 	 2.43590419689782402071e-04 	 3.62637443578461618194e-05 	 4.08817071284094335493e-01 
1.79583 	 2.70182417131256289930e-04 	 3.97557387989016960917e-05 	 4.48891513151011167793e-01 
1.80417 	 2.87601052914097162373e-04 	 3.55986235390581893905e-05 	 4.96531360744251915040e-01 
1.81250 	 3.29514370798694689827e-04 	 3.63547303071779770423e-05 	 5.58828156055350078191e-01 
1.82083 	 3.60462814710391522399e-04 	 2.51038063456277028027e-05 	 6.22635464755497025635e-01 
1.82917 	 4.51225918117824093944e-04 	 2.96169870102694806062e-05 	 6.88581733997152167781e-01 
1.83750 	 5.05184774347714306633e-04 	 2.24241591278450907282e-05 	 7.61720371054572353842e-01 
1.84583 	 5.70645299711729659525e-04 	 1.82671049195881404358e-05 	 8.58268163841656606117e-01 
1.85417 	 6.20179379787144657854e-04 	 2.16319473464445973779e-05 	 9.54051383544749165289e-01 
1.86250 	 6.78729037606653129097e-04 	 1.69752045730761568182e-05 	 1.05859886608229469829e+00 
1.87083 	 8.03561078179181715285e-04 	 1.73805438409362327922e-05 	 1.16506496609198850756e+00 
1.87917 	 8.64284895077104334260e-04 	 2.16433728397107203595e-05 	 1.30521650539952416281e+00 
1.88750 	 9.69027228321566748946e-04 	 2.85602182435023963696e-05 	 1.45098723600681300816e+00 
1.89583 	 1.09985229265472089083e-03 	 2.78673294891019053890e-05 	 1.64367639737441373349e+00 
1.90417 	 1.18429141093935640441e-03 	 2.16642995326692549575e-05 	 1.83134409756972393879e+00 
1.91250 	 1.28200823739778530311e-03 	 2.68595569077317576330e-05 	 2.02598674807022982591e+00 
1.92083 	 1.43006921817100964532e-03 	 2.13662616988226820934e-05 	 2.25476750352020616219e+00 
1.92917 	 1.60392779514083663739e-03 	 1.57986951480086175112e-05 	 2.49483690359774179512e+00 
1.93750 	 1.78368567845068617082e-03 	 1.28480885158505513289e-05 	 2.73637959379042206010e+00 
1.94583 	 2.01124098580981970283e-03 	 1.94280163036155766553e-05 	 3.03281275876490719057e+00 
1.95417 	 2.13158043949016095045e-03 	 1.35254799656511061703e-05 	 3.32931342812135300235e+00 
1.96250 	 2.38470138259120690086e-03 	 1.04165353472610755948e-05 	 3.57284674587010986357e+00 
1.97083 	 2.67293969517044078740e-03 	 7.35021481046254657676e-06 	 3.79150487718675677229e+00 
1.97917 	 3.03473046756057686715e-03 	 4.49996209824955586737e-06 	 3.95498173258116336726e+00 
1.98750 	 3.37150464791813406912e-03 	 1.58639199686550561810e-06 	 3.78364282187683320657e+00 
1.99583 	 3.82222657690498707206e-03 	 1.40598655493283325442e-06 	 2.34737014349168360283e+00 
2.00417 	 1.38649989249115312973e+00 	 1.84063634363096045149e-05 	 2.04102705193062270439e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.673;     /* cm^-1 */
mus         = 312.0;  /* cm^-1 */
g           = 0.9;  
nt          = 1.33;
Nphotons    = 10000; /* set number of photons in simulation */ /*ID_EDIT_1_3*/
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz.
   psi - berween x-y axis
   theta between z and R
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm, mua, W);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm, double mua, long double W) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);
    fprintf(file, "\"mu_a\": %.20e,\n",  mua);
    fprintf(file, "\"name\": \"org_%dmln_cube\",\n",  (int)(Nphotons/1000000));
    fprintf(file, "\"photon_weight\": %.20e,\n",  W);
    fprintf(file, "\"normalized_already\": false,\n");

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);