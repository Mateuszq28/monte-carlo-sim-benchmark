time elapsed: 38.6884 seconds

=================================

sim results:

number of photons = 100000000
overflow: 1.35366790000000000000e+07
sum: 8.64633210000000000000e+07
sum: 8.64633210000000000000e+07
avg: 8.64633210000000040907e-01
perc_in: 86.46

number of photons = 100000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72442000000000017490e-01 
0.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72755200000000030958e-01 
0.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72656800000000032469e-01 
0.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74428000000000005265e-01 
0.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.72320799999999973995e-01 
0.04583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73718800000000039851e-01 
0.05417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73658800000000035357e-01 
0.06250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73542400000000018867e-01 
0.07083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73837600000000014333e-01 
0.07917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74556399999999978245e-01 
0.08750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73451200000000005375e-01 
0.09583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.73812399999999955824e-01 
0.10417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74118399999999984296e-01 
0.11250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75809199999999976605e-01 
0.12083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75444400000000033657e-01 
0.12917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.74292399999999991778e-01 
0.13750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75490000000000012648e-01 
0.14583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75930400000000020100e-01 
0.15417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75608799999999987129e-01 
0.16250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.75970000000000048601e-01 
0.17083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77266000000000012449e-01 
0.17917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77929599999999998872e-01 
0.18750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77486800000000033428e-01 
0.19583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.77237200000000016953e-01 
0.20417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.79179999999999983729e-01 
0.21250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.79017999999999988248e-01 
0.22083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.79388799999999992707e-01 
0.22917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80352400000000001601e-01 
0.23750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80660799999999988064e-01 
0.24583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.80990800000000040537e-01 
0.25417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.81234399999999995501e-01 
0.26250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.81811599999999995436e-01 
0.27083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.83292399999999999771e-01 
0.27917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.83210799999999984777e-01 
0.28750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.83684800000000014730e-01 
0.29583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.84817600000000004101e-01 
0.30417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.85113999999999978563e-01 
0.31250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.87505600000000027805e-01 
0.32083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.87142000000000008342e-01 
0.32917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.88290400000000002212e-01 
0.33750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.89188000000000000611e-01 
0.34583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.89219200000000009609e-01 
0.35417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.90230800000000010996e-01 
0.36250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.90020800000000023022e-01 
0.37083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.91177599999999980884e-01 
0.37917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.92204799999999986770e-01 
0.38750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.93878799999999995585e-01 
0.39583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.93907600000000046592e-01 
0.40417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.95621199999999972885e-01 
0.41250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.96607600000000026785e-01 
0.42083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.96438399999999990797e-01 
0.42917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 2.98082400000000025120e-01 
0.43750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.00458400000000014352e-01 
0.44583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.00656399999999990325e-01 
0.45417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.01712399999999991707e-01 
0.46250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.02733599999999991592e-01 
0.47083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.03902400000000016966e-01 
0.47917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.05038799999999998835e-01 
0.48750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.06489599999999973168e-01 
0.49583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.07810799999999995524e-01 
0.50417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.07378800000000007575e-01 
0.51250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.09398399999999962340e-01 
0.52083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.10729199999999983195e-01 
0.52917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.11872800000000005571e-01 
0.53750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.12240000000000017533e-01 
0.54583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.14893199999999984229e-01 
0.55417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.15836400000000017130e-01 
0.56250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.17216400000000009474e-01 
0.57083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.18402000000000018343e-01 
0.57917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.20258399999999998631e-01 
0.58750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.21128399999999980530e-01 
0.59583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.22330799999999972894e-01 
0.60417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.23946000000000011720e-01 
0.61250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.25638000000000038536e-01 
0.62083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.27319199999999976836e-01 
0.62917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.28606799999999976691e-01 
0.63750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.29924400000000006550e-01 
0.64583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.32211599999999995791e-01 
0.65417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.33148800000000022692e-01 
0.66250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.34734000000000031516e-01 
0.67083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.37667999999999968175e-01 
0.67917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.39062400000000041533e-01 
0.68750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.39779999999999970939e-01 
0.69583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.42027599999999987190e-01 
0.70417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.43347600000000030551e-01 
0.71250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.45741600000000037785e-01 
0.72083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.46987199999999995637e-01 
0.72917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.49077599999999987901e-01 
0.73750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.51579599999999992122e-01 
0.74583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.52304400000000017545e-01 
0.75417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.54470400000000018803e-01 
0.76250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.56156399999999984107e-01 
0.77083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.58592399999999977833e-01 
0.77917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.60363600000000006141e-01 
0.78750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.61969200000000046469e-01 
0.79583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.64161600000000029720e-01 
0.80417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.65342400000000011584e-01 
0.81250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.67629600000000056337e-01 
0.82083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.70058400000000009555e-01 
0.82917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.72343199999999985295e-01 
0.83750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.75008400000000019503e-01 
0.84583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.76857600000000014795e-01 
0.85417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.78046800000000016162e-01 
0.86250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.80896800000000035347e-01 
0.87083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.83882400000000012508e-01 
0.87917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.84094799999999958473e-01 
0.88750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.87325199999999980616e-01 
0.89583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.88792800000000049465e-01 
0.90417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.91619999999999968132e-01 
0.91250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.94526399999999999313e-01 
0.92083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.96908399999999994545e-01 
0.92917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 3.99020399999999997309e-01 
0.93750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.02165600000000011960e-01 
0.94583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.02789600000000025393e-01 
0.95417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.06563600000000024970e-01 
0.96250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.10223600000000021559e-01 
0.97083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.12046399999999979347e-01 
0.97917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.14139199999999985113e-01 
0.98750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.16841599999999978809e-01 
0.99583 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.19565599999999983005e-01 
1.00417 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.22125199999999978218e-01 
1.01250 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.25551199999999962831e-01 
1.02083 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.28768399999999993977e-01 
1.02917 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.32367200000000007076e-01 
1.03750 	 0.00000000000000000000e+00 	 0.00000000000000000000e+00 	 4.33478399999999985948e-01 
1.04583 	 1.15835168893043696792e-01 	 1.82616033435674793850e+01 	 4.35580799999999990213e-01 
1.05417 	 2.18264597279851202405e-01 	 0.00000000000000000000e+00 	 4.38505200000000039395e-01 
1.06250 	 1.23705806308157348350e-01 	 0.00000000000000000000e+00 	 4.41815999999999986514e-01 
1.07083 	 9.65577511560262030654e-02 	 0.00000000000000000000e+00 	 4.45519200000000004103e-01 
1.07917 	 8.19209621822056255347e-02 	 0.00000000000000000000e+00 	 4.48093200000000024819e-01 
1.08750 	 7.24182734104260039665e-02 	 0.00000000000000000000e+00 	 4.51014000000000025992e-01 
1.09583 	 6.58212839485849826593e-02 	 0.00000000000000000000e+00 	 4.53093599999999985251e-01 
1.10417 	 6.04739539774491255408e-02 	 0.00000000000000000000e+00 	 4.58245200000000019180e-01 
1.11250 	 5.61832831997687853764e-02 	 0.00000000000000000000e+00 	 4.59772800000000037013e-01 
1.12083 	 5.29008146148293445510e-02 	 0.00000000000000000000e+00 	 4.62660000000000015685e-01 
1.12917 	 5.00284214840185162410e-02 	 0.00000000000000000000e+00 	 4.66669200000000006234e-01 
1.13750 	 4.77374706634963105745e-02 	 0.00000000000000000000e+00 	 4.69827599999999956371e-01 
1.14583 	 4.55558527178616320952e-02 	 0.00000000000000000000e+00 	 4.73593199999999991956e-01 
1.15417 	 4.37518283082872147527e-02 	 0.00000000000000000000e+00 	 4.75849199999999972199e-01 
1.16250 	 4.20150154864897956708e-02 	 0.00000000000000000000e+00 	 4.77272399999999985543e-01 
1.17083 	 4.05403786536851565292e-02 	 0.00000000000000000000e+00 	 4.82028000000000067526e-01 
1.17917 	 3.92847382517642548794e-02 	 0.00000000000000000000e+00 	 4.84839599999999981694e-01 
1.18750 	 3.80466837283108122447e-02 	 0.00000000000000000000e+00 	 4.88731199999999976757e-01 
1.19583 	 3.69950623605768483260e-02 	 0.00000000000000000000e+00 	 4.93886400000000003185e-01 
1.20417 	 3.59429250382337361902e-02 	 0.00000000000000000000e+00 	 4.95556800000000075013e-01 
1.21250 	 3.50504435394892732702e-02 	 0.00000000000000000000e+00 	 4.99002000000000001112e-01 
1.22083 	 3.42079215310444120779e-02 	 0.00000000000000000000e+00 	 5.04649200000000019983e-01 
1.22917 	 3.34441076853952273806e-02 	 0.00000000000000000000e+00 	 5.06265600000000093317e-01 
1.23750 	 3.26759962100214781944e-02 	 0.00000000000000000000e+00 	 5.09205599999999924954e-01 
1.24583 	 3.20514394387494683247e-02 	 0.00000000000000000000e+00 	 5.13235200000000002518e-01 
1.25417 	 3.14184432962554480162e-02 	 0.00000000000000000000e+00 	 5.17755599999999982508e-01 
1.26250 	 3.07789420495728181792e-02 	 0.00000000000000000000e+00 	 5.20869600000000043671e-01 
1.27083 	 3.02432733143634425999e-02 	 0.00000000000000000000e+00 	 5.23945199999999999818e-01 
1.27917 	 2.97263170926357692125e-02 	 0.00000000000000000000e+00 	 5.27896800000000054887e-01 
1.28750 	 2.92204556009429163022e-02 	 0.00000000000000000000e+00 	 5.31735599999999974941e-01 
1.29583 	 2.87000838394507809537e-02 	 0.00000000000000000000e+00 	 5.34765600000000063119e-01 
1.30417 	 2.83275756663790324874e-02 	 0.00000000000000000000e+00 	 5.39929199999999998028e-01 
1.31250 	 2.78340770895134197171e-02 	 0.00000000000000000000e+00 	 5.43727199999999966096e-01 
1.32083 	 2.74185017949644081747e-02 	 0.00000000000000000000e+00 	 5.47075199999999983724e-01 
1.32917 	 2.70370725927063168537e-02 	 0.00000000000000000000e+00 	 5.49624000000000112465e-01 
1.33750 	 2.67213894798073101078e-02 	 0.00000000000000000000e+00 	 5.55030000000000023341e-01 
1.34583 	 2.63870703276648868596e-02 	 0.00000000000000000000e+00 	 5.60189999999999965752e-01 
1.35417 	 2.59961813127000222756e-02 	 0.00000000000000000000e+00 	 5.62658400000000002983e-01 
1.36250 	 2.57430457747980095951e-02 	 0.00000000000000000000e+00 	 5.66911200000000059518e-01 
1.37083 	 2.53604788711725322170e-02 	 0.00000000000000000000e+00 	 5.72835600000000000342e-01 
1.37917 	 2.50664806302225706691e-02 	 0.00000000000000000000e+00 	 5.76931200000000088401e-01 
1.38750 	 2.47964940150818269338e-02 	 0.00000000000000000000e+00 	 5.79770400000000019070e-01 
1.39583 	 2.45622224614192204151e-02 	 0.00000000000000000000e+00 	 5.84816400000000014003e-01 
1.40417 	 2.43302476413845003567e-02 	 0.00000000000000000000e+00 	 5.88565200000000010583e-01 
1.41250 	 2.40434375757717921918e-02 	 0.00000000000000000000e+00 	 5.93416799999999966531e-01 
1.42083 	 2.38285484587597330697e-02 	 0.00000000000000000000e+00 	 5.99325600000000013878e-01 
1.42917 	 2.36457746338767510474e-02 	 0.00000000000000000000e+00 	 6.02119200000000076578e-01 
1.43750 	 2.33815191573333441832e-02 	 0.00000000000000000000e+00 	 6.07863600000000059431e-01 
1.44583 	 2.32065512419080133277e-02 	 0.00000000000000000000e+00 	 6.12825600000000081380e-01 
1.45417 	 2.29958875999278951341e-02 	 0.00000000000000000000e+00 	 6.16361999999999965461e-01 
1.46250 	 2.28681081061494761997e-02 	 0.00000000000000000000e+00 	 6.21738000000000012868e-01 
1.47083 	 2.26838707498111767646e-02 	 0.00000000000000000000e+00 	 6.26186400000000031874e-01 
1.47917 	 2.24426151436656930171e-02 	 0.00000000000000000000e+00 	 6.30854399999999926330e-01 
1.48750 	 2.22455065506581700641e-02 	 0.00000000000000000000e+00 	 6.35745599999999910779e-01 
1.49583 	 2.21342232122862490884e-02 	 0.00000000000000000000e+00 	 6.38709600000000099485e-01 
1.50417 	 2.19697137913255693964e-02 	 0.00000000000000000000e+00 	 6.43840799999999990888e-01 
1.51250 	 2.17859786200742810980e-02 	 0.00000000000000000000e+00 	 6.50185200000000018683e-01 
1.52083 	 2.16878848263186672918e-02 	 0.00000000000000000000e+00 	 6.54427199999999986701e-01 
1.52917 	 2.15264733924343878990e-02 	 0.00000000000000000000e+00 	 6.59681999999999990614e-01 
1.53750 	 2.14071891636286593119e-02 	 0.00000000000000000000e+00 	 6.64336800000000060606e-01 
1.54583 	 2.12271581820993072987e-02 	 0.00000000000000000000e+00 	 6.67590000000000016733e-01 
1.55417 	 2.11411904667047241546e-02 	 0.00000000000000000000e+00 	 6.75240000000000062386e-01 
1.56250 	 2.09755042585725443027e-02 	 0.00000000000000000000e+00 	 6.79031999999999968942e-01 
1.57083 	 2.08332261503044978423e-02 	 0.00000000000000000000e+00 	 6.85972799999999938159e-01 
1.57917 	 2.07177419411167310082e-02 	 0.00000000000000000000e+00 	 6.89844000000000012740e-01 
1.58750 	 2.07006444775758059740e-02 	 0.00000000000000000000e+00 	 6.95336400000000076638e-01 
1.59583 	 2.05158742512006400660e-02 	 0.00000000000000000000e+00 	 7.00868399999999946992e-01 
1.60417 	 2.04412821505696763735e-02 	 0.00000000000000000000e+00 	 7.04563200000000056100e-01 
1.61250 	 2.03503484367281162193e-02 	 0.00000000000000000000e+00 	 7.11369599999999935314e-01 
1.62083 	 2.02189793579553751812e-02 	 0.00000000000000000000e+00 	 7.17082800000000020191e-01 
1.62917 	 2.01306733393030873325e-02 	 0.00000000000000000000e+00 	 7.22246399999999955099e-01 
1.63750 	 2.00535832686219335497e-02 	 0.00000000000000000000e+00 	 7.29451199999999966295e-01 
1.64583 	 1.99532224140298065918e-02 	 0.00000000000000000000e+00 	 7.31660399999999988552e-01 
1.65417 	 1.98222424749771655716e-02 	 0.00000000000000000000e+00 	 7.40191200000000049108e-01 
1.66250 	 1.97819493561621519151e-02 	 0.00000000000000000000e+00 	 7.44450000000000056133e-01 
1.67083 	 1.96758985801509175828e-02 	 0.00000000000000000000e+00 	 7.49977200000000010505e-01 
1.67917 	 1.96431789969020442754e-02 	 0.00000000000000000000e+00 	 7.56140400000000045821e-01 
1.68750 	 1.95211120213228325748e-02 	 0.00000000000000000000e+00 	 7.63053599999999998538e-01 
1.69583 	 1.94225380359596098978e-02 	 0.00000000000000000000e+00 	 7.67990399999999961977e-01 
1.70417 	 1.94309956335729089316e-02 	 0.00000000000000000000e+00 	 7.76743200000000078020e-01 
1.71250 	 1.93226440434871651886e-02 	 0.00000000000000000000e+00 	 7.81559999999999921450e-01 
1.72083 	 1.92572996299474503978e-02 	 0.00000000000000000000e+00 	 7.87274399999999929811e-01 
1.72917 	 1.92198761359453629272e-02 	 0.00000000000000000000e+00 	 7.94774399999999991984e-01 
1.73750 	 1.91600142413678141418e-02 	 0.00000000000000000000e+00 	 8.00206799999999995876e-01 
1.74583 	 1.90995708309829315130e-02 	 0.00000000000000000000e+00 	 8.06366400000000038695e-01 
1.75417 	 1.90329845303810925305e-02 	 0.00000000000000000000e+00 	 8.12637600000000070999e-01 
1.76250 	 1.90165389994488009950e-02 	 0.00000000000000000000e+00 	 8.19031199999999959260e-01 
1.77083 	 1.89194705243307843834e-02 	 0.00000000000000000000e+00 	 8.24061599999999949695e-01 
1.77917 	 1.89020888100460103531e-02 	 0.00000000000000000000e+00 	 8.32270799999999977281e-01 
1.78750 	 1.88668139598727885309e-02 	 0.00000000000000000000e+00 	 8.40023999999999992916e-01 
1.79583 	 1.87993994369634494224e-02 	 0.00000000000000000000e+00 	 8.45381999999999966811e-01 
1.80417 	 1.87852294294563217092e-02 	 0.00000000000000000000e+00 	 8.51541600000000009629e-01 
1.81250 	 1.87145396303836399066e-02 	 0.00000000000000000000e+00 	 8.58038399999999978895e-01 
1.82083 	 1.86655238959766087148e-02 	 0.00000000000000000000e+00 	 8.65103999999999984105e-01 
1.82917 	 1.85836579723091463445e-02 	 0.00000000000000000000e+00 	 8.70892800000000022465e-01 
1.83750 	 1.86000520635719208962e-02 	 0.00000000000000000000e+00 	 8.80071599999999953923e-01 
1.84583 	 1.85378127252190244567e-02 	 0.00000000000000000000e+00 	 8.86284000000000071751e-01 
1.85417 	 1.85147418020988122067e-02 	 0.00000000000000000000e+00 	 8.94012000000000028876e-01 
1.86250 	 1.84640325983417251388e-02 	 0.00000000000000000000e+00 	 9.02128800000000063974e-01 
1.87083 	 1.84184557884149134599e-02 	 0.00000000000000000000e+00 	 9.07627200000000078361e-01 
1.87917 	 1.83938359508661053443e-02 	 0.00000000000000000000e+00 	 9.13489200000000001189e-01 
1.88750 	 1.83917151916924599686e-02 	 0.00000000000000000000e+00 	 9.21528000000000013792e-01 
1.89583 	 1.83326482446388577818e-02 	 0.00000000000000000000e+00 	 9.31607999999999991658e-01 
1.90417 	 1.83160999362883512853e-02 	 0.00000000000000000000e+00 	 9.37443600000000043515e-01 
1.91250 	 1.82847057397047506322e-02 	 0.00000000000000000000e+00 	 9.44373600000000035237e-01 
1.92083 	 1.82461517557057709138e-02 	 0.00000000000000000000e+00 	 9.51805200000000017901e-01 
1.92917 	 1.82210765191497051085e-02 	 0.00000000000000000000e+00 	 9.56940000000000123848e-01 
1.93750 	 1.82186257020802676310e-02 	 0.00000000000000000000e+00 	 9.67710000000000070131e-01 
1.94583 	 1.82189532064715165038e-02 	 0.00000000000000000000e+00 	 9.74110799999999943388e-01 
1.95417 	 1.81343915473452625686e-02 	 0.00000000000000000000e+00 	 9.84152400000000038283e-01 
1.96250 	 1.81586101430638545418e-02 	 0.00000000000000000000e+00 	 9.92743200000000047822e-01 
1.97083 	 1.81102043843958948610e-02 	 0.00000000000000000000e+00 	 9.98957999999999901597e-01 
1.97917 	 1.81001206371034818743e-02 	 0.00000000000000000000e+00 	 1.00583640000000018588e+00 
1.98750 	 1.80976431693633879605e-02 	 0.00000000000000000000e+00 	 1.01388839999999991193e+00 
1.99583 	 1.80852503824122864962e-02 	 0.00000000000000000000e+00 	 1.84175999999999992496e-02 
2.00417 	 6.55713019851391409887e-01 	 0.00000000000000000000e+00 	 2.21702040000000000219e+00 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (long double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (long double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
long double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, long double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
long double	W;          /* photon weight */
long double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
long double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
long double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
long double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
long double (*Cube)[MAX_XY][MAX_Z] = (long double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(long double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

long double cube_overflow;
long double	Fsph;       /* fluence in spherical shell */
long double	Fcyl;       /* fluence in cylindrical shell */
long double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
long double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
long double  rnd;        /* assigned random value 0-1 */
long double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.0;     /* cm^-1 */
mus         = 0.0;  /* cm^-1 */
g           = 0.9;  
nt          = 1.33;
Nphotons    = 1e8; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        long double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "overflow: %.20e\n", cube_overflow);
long double cube_sum = 0;
for (int i=0; i<NR_xy; i++)
  for (int j=0; j<NR_xy; j++)
    for (int k=0; k<NR_z; k++)
      cube_sum += Cube[i][j][k];
fprintf(target, "sum: %.20e\n", cube_sum);
long double cube_sum2 = Nphotons - cube_overflow;
fprintf(target, "sum: %.20e\n", cube_sum2);
long double avg = cube_sum / Nphotons;
fprintf(target, "avg: %.20e\n", avg);
float perc_in = cube_sum / Nphotons * 100;
fprintf(target, "perc_in: %2.2f\n\n", perc_in);

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %.20e \t %.20e \t %.20e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);
fclose(target);

double bins_per_1_cm = NR_z/z_size;
save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow, bins_per_1_cm);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

long double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, long double arr[180][180][240], int x, int y, int z, long long Nphotons, long double cube_overflow, double bins_per_1_cm) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %.20e,\n", cube_overflow);
    fprintf(file, "\"bins_per_1_cm\": %.20e,\n",  bins_per_1_cm);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%.20e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);