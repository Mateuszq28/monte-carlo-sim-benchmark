time elapsed: 1.2259 seconds

=================================

sim results:

number of photons = 1000000.000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.553e+03 	 5.954e+01 	 5.223e+00 
0.01250 	 5.153e+02 	 1.937e+01 	 3.831e+00 
0.02083 	 1.798e+02 	 1.122e+01 	 3.290e+00 
0.02917 	 9.062e+01 	 7.854e+00 	 2.995e+00 
0.03750 	 5.424e+01 	 6.006e+00 	 2.727e+00 
0.04583 	 3.647e+01 	 4.772e+00 	 2.577e+00 
0.05417 	 2.584e+01 	 3.984e+00 	 2.423e+00 
0.06250 	 1.906e+01 	 3.390e+00 	 2.256e+00 
0.07083 	 1.471e+01 	 2.925e+00 	 2.148e+00 
0.07917 	 1.189e+01 	 2.573e+00 	 2.042e+00 
0.08750 	 9.488e+00 	 2.268e+00 	 1.949e+00 
0.09583 	 7.861e+00 	 2.085e+00 	 1.882e+00 
0.10417 	 6.641e+00 	 1.854e+00 	 1.773e+00 
0.11250 	 5.701e+00 	 1.731e+00 	 1.725e+00 
0.12083 	 4.849e+00 	 1.555e+00 	 1.645e+00 
0.12917 	 4.180e+00 	 1.448e+00 	 1.599e+00 
0.13750 	 3.679e+00 	 1.333e+00 	 1.528e+00 
0.14583 	 3.282e+00 	 1.230e+00 	 1.512e+00 
0.15417 	 2.854e+00 	 1.148e+00 	 1.454e+00 
0.16250 	 2.580e+00 	 1.051e+00 	 1.394e+00 
0.17083 	 2.340e+00 	 1.025e+00 	 1.368e+00 
0.17917 	 2.056e+00 	 9.282e-01 	 1.316e+00 
0.18750 	 1.882e+00 	 8.765e-01 	 1.267e+00 
0.19583 	 1.691e+00 	 8.185e-01 	 1.259e+00 
0.20417 	 1.549e+00 	 7.880e-01 	 1.194e+00 
0.21250 	 1.412e+00 	 7.399e-01 	 1.185e+00 
0.22083 	 1.281e+00 	 7.100e-01 	 1.137e+00 
0.22917 	 1.217e+00 	 6.786e-01 	 1.104e+00 
0.23750 	 1.111e+00 	 6.402e-01 	 1.088e+00 
0.24583 	 1.031e+00 	 6.061e-01 	 1.065e+00 
0.25417 	 9.481e-01 	 5.886e-01 	 1.033e+00 
0.26250 	 8.983e-01 	 5.647e-01 	 1.023e+00 
0.27083 	 8.184e-01 	 5.476e-01 	 9.770e-01 
0.27917 	 7.645e-01 	 5.114e-01 	 9.491e-01 
0.28750 	 7.327e-01 	 4.893e-01 	 9.380e-01 
0.29583 	 6.657e-01 	 4.724e-01 	 9.100e-01 
0.30417 	 6.345e-01 	 4.425e-01 	 9.022e-01 
0.31250 	 5.950e-01 	 4.350e-01 	 8.671e-01 
0.32083 	 5.629e-01 	 4.242e-01 	 8.710e-01 
0.32917 	 5.247e-01 	 4.027e-01 	 8.210e-01 
0.33750 	 4.999e-01 	 3.841e-01 	 8.243e-01 
0.34583 	 4.665e-01 	 3.649e-01 	 8.036e-01 
0.35417 	 4.476e-01 	 3.586e-01 	 7.961e-01 
0.36250 	 4.231e-01 	 3.444e-01 	 7.693e-01 
0.37083 	 4.017e-01 	 3.299e-01 	 7.516e-01 
0.37917 	 3.821e-01 	 3.228e-01 	 7.304e-01 
0.38750 	 3.623e-01 	 3.111e-01 	 7.340e-01 
0.39583 	 3.401e-01 	 3.020e-01 	 7.120e-01 
0.40417 	 3.242e-01 	 2.847e-01 	 6.899e-01 
0.41250 	 3.176e-01 	 2.870e-01 	 6.689e-01 
0.42083 	 2.911e-01 	 2.698e-01 	 6.775e-01 
0.42917 	 2.771e-01 	 2.651e-01 	 6.392e-01 
0.43750 	 2.705e-01 	 2.580e-01 	 6.340e-01 
0.44583 	 2.498e-01 	 2.477e-01 	 6.274e-01 
0.45417 	 2.471e-01 	 2.398e-01 	 6.137e-01 
0.46250 	 2.350e-01 	 2.341e-01 	 6.235e-01 
0.47083 	 2.222e-01 	 2.302e-01 	 5.893e-01 
0.47917 	 2.144e-01 	 2.199e-01 	 5.888e-01 
0.48750 	 2.078e-01 	 2.117e-01 	 5.734e-01 
0.49583 	 2.003e-01 	 2.084e-01 	 5.638e-01 
0.50417 	 1.889e-01 	 2.090e-01 	 5.521e-01 
0.51250 	 1.805e-01 	 1.961e-01 	 5.516e-01 
0.52083 	 1.737e-01 	 1.904e-01 	 5.243e-01 
0.52917 	 1.679e-01 	 1.833e-01 	 5.207e-01 
0.53750 	 1.615e-01 	 1.799e-01 	 5.138e-01 
0.54583 	 1.557e-01 	 1.787e-01 	 5.105e-01 
0.55417 	 1.499e-01 	 1.715e-01 	 4.974e-01 
0.56250 	 1.398e-01 	 1.697e-01 	 4.968e-01 
0.57083 	 1.371e-01 	 1.634e-01 	 4.753e-01 
0.57917 	 1.333e-01 	 1.583e-01 	 4.823e-01 
0.58750 	 1.311e-01 	 1.553e-01 	 4.736e-01 
0.59583 	 1.246e-01 	 1.502e-01 	 4.578e-01 
0.60417 	 1.191e-01 	 1.444e-01 	 4.496e-01 
0.61250 	 1.146e-01 	 1.440e-01 	 4.228e-01 
0.62083 	 1.113e-01 	 1.384e-01 	 4.457e-01 
0.62917 	 1.089e-01 	 1.339e-01 	 4.192e-01 
0.63750 	 1.005e-01 	 1.358e-01 	 4.152e-01 
0.64583 	 1.001e-01 	 1.273e-01 	 4.116e-01 
0.65417 	 9.892e-02 	 1.258e-01 	 3.990e-01 
0.66250 	 9.401e-02 	 1.208e-01 	 4.052e-01 
0.67083 	 8.963e-02 	 1.174e-01 	 3.980e-01 
0.67917 	 8.562e-02 	 1.177e-01 	 3.871e-01 
0.68750 	 8.593e-02 	 1.132e-01 	 3.799e-01 
0.69583 	 8.248e-02 	 1.119e-01 	 3.790e-01 
0.70417 	 7.807e-02 	 1.093e-01 	 3.750e-01 
0.71250 	 7.703e-02 	 1.093e-01 	 3.601e-01 
0.72083 	 7.399e-02 	 1.029e-01 	 3.572e-01 
0.72917 	 7.164e-02 	 1.031e-01 	 3.544e-01 
0.73750 	 6.870e-02 	 1.007e-01 	 3.455e-01 
0.74583 	 6.824e-02 	 9.580e-02 	 3.493e-01 
0.75417 	 6.541e-02 	 9.408e-02 	 3.404e-01 
0.76250 	 6.256e-02 	 9.531e-02 	 3.368e-01 
0.77083 	 6.030e-02 	 9.326e-02 	 3.197e-01 
0.77917 	 6.161e-02 	 8.934e-02 	 3.257e-01 
0.78750 	 5.910e-02 	 8.677e-02 	 3.271e-01 
0.79583 	 5.615e-02 	 8.510e-02 	 3.146e-01 
0.80417 	 5.555e-02 	 8.360e-02 	 2.999e-01 
0.81250 	 5.231e-02 	 8.255e-02 	 3.091e-01 
0.82083 	 5.176e-02 	 7.848e-02 	 2.984e-01 
0.82917 	 4.978e-02 	 7.788e-02 	 2.885e-01 
0.83750 	 4.990e-02 	 7.820e-02 	 2.810e-01 
0.84583 	 4.841e-02 	 7.578e-02 	 2.771e-01 
0.85417 	 4.567e-02 	 7.410e-02 	 2.816e-01 
0.86250 	 4.528e-02 	 7.221e-02 	 2.839e-01 
0.87083 	 4.460e-02 	 7.003e-02 	 2.750e-01 
0.87917 	 4.189e-02 	 7.043e-02 	 2.688e-01 
0.88750 	 4.149e-02 	 6.947e-02 	 2.698e-01 
0.89583 	 4.056e-02 	 6.942e-02 	 2.633e-01 
0.90417 	 4.018e-02 	 6.436e-02 	 2.651e-01 
0.91250 	 3.811e-02 	 6.419e-02 	 2.524e-01 
0.92083 	 3.724e-02 	 6.311e-02 	 2.543e-01 
0.92917 	 3.614e-02 	 6.201e-02 	 2.440e-01 
0.93750 	 3.660e-02 	 5.989e-02 	 2.479e-01 
0.94583 	 3.434e-02 	 6.013e-02 	 2.396e-01 
0.95417 	 3.283e-02 	 5.971e-02 	 2.358e-01 
0.96250 	 3.212e-02 	 5.856e-02 	 2.184e-01 
0.97083 	 3.048e-02 	 5.601e-02 	 2.248e-01 
0.97917 	 3.137e-02 	 5.569e-02 	 2.299e-01 
0.98750 	 3.021e-02 	 5.233e-02 	 2.296e-01 
0.99583 	 2.894e-02 	 5.280e-02 	 2.236e-01 
1.00417 	 2.908e-02 	 5.101e-02 	 2.215e-01 
1.01250 	 2.856e-02 	 5.006e-02 	 2.172e-01 
1.02083 	 2.775e-02 	 4.898e-02 	 2.206e-01 
1.02917 	 2.750e-02 	 4.914e-02 	 2.027e-01 
1.03750 	 2.671e-02 	 4.985e-02 	 2.086e-01 
1.04583 	 2.514e-02 	 4.690e-02 	 2.010e-01 
1.05417 	 2.486e-02 	 4.558e-02 	 1.974e-01 
1.06250 	 2.466e-02 	 4.501e-02 	 2.062e-01 
1.07083 	 2.347e-02 	 4.396e-02 	 1.897e-01 
1.07917 	 2.409e-02 	 4.584e-02 	 1.808e-01 
1.08750 	 2.373e-02 	 4.294e-02 	 1.876e-01 
1.09583 	 2.233e-02 	 4.228e-02 	 1.806e-01 
1.10417 	 2.127e-02 	 3.926e-02 	 1.860e-01 
1.11250 	 2.079e-02 	 4.079e-02 	 1.958e-01 
1.12083 	 2.008e-02 	 3.977e-02 	 1.751e-01 
1.12917 	 2.062e-02 	 3.795e-02 	 1.772e-01 
1.13750 	 2.018e-02 	 3.798e-02 	 1.732e-01 
1.14583 	 1.949e-02 	 3.732e-02 	 1.769e-01 
1.15417 	 1.865e-02 	 3.801e-02 	 1.583e-01 
1.16250 	 1.774e-02 	 3.611e-02 	 1.682e-01 
1.17083 	 1.766e-02 	 3.616e-02 	 1.675e-01 
1.17917 	 1.748e-02 	 3.638e-02 	 1.661e-01 
1.18750 	 1.766e-02 	 3.487e-02 	 1.643e-01 
1.19583 	 1.671e-02 	 3.424e-02 	 1.633e-01 
1.20417 	 1.613e-02 	 3.339e-02 	 1.531e-01 
1.21250 	 1.543e-02 	 3.380e-02 	 1.588e-01 
1.22083 	 1.624e-02 	 3.332e-02 	 1.514e-01 
1.22917 	 1.578e-02 	 3.218e-02 	 1.561e-01 
1.23750 	 1.572e-02 	 3.070e-02 	 1.490e-01 
1.24583 	 1.457e-02 	 3.121e-02 	 1.532e-01 
1.25417 	 1.483e-02 	 3.084e-02 	 1.404e-01 
1.26250 	 1.403e-02 	 2.948e-02 	 1.386e-01 
1.27083 	 1.433e-02 	 2.989e-02 	 1.424e-01 
1.27917 	 1.384e-02 	 2.923e-02 	 1.421e-01 
1.28750 	 1.329e-02 	 2.839e-02 	 1.363e-01 
1.29583 	 1.285e-02 	 2.709e-02 	 1.384e-01 
1.30417 	 1.271e-02 	 2.645e-02 	 1.314e-01 
1.31250 	 1.223e-02 	 2.452e-02 	 1.354e-01 
1.32083 	 1.222e-02 	 2.624e-02 	 1.336e-01 
1.32917 	 1.203e-02 	 2.628e-02 	 1.235e-01 
1.33750 	 1.147e-02 	 2.522e-02 	 1.288e-01 
1.34583 	 1.134e-02 	 2.488e-02 	 1.250e-01 
1.35417 	 1.135e-02 	 2.385e-02 	 1.243e-01 
1.36250 	 1.097e-02 	 2.307e-02 	 1.254e-01 
1.37083 	 1.066e-02 	 2.395e-02 	 1.284e-01 
1.37917 	 1.040e-02 	 2.284e-02 	 1.183e-01 
1.38750 	 1.014e-02 	 2.304e-02 	 1.140e-01 
1.39583 	 1.014e-02 	 2.215e-02 	 1.194e-01 
1.40417 	 9.861e-03 	 2.214e-02 	 1.207e-01 
1.41250 	 9.199e-03 	 2.131e-02 	 1.135e-01 
1.42083 	 9.347e-03 	 2.128e-02 	 1.133e-01 
1.42917 	 9.262e-03 	 2.262e-02 	 1.130e-01 
1.43750 	 9.219e-03 	 2.112e-02 	 1.082e-01 
1.44583 	 8.689e-03 	 2.132e-02 	 1.103e-01 
1.45417 	 8.756e-03 	 2.112e-02 	 1.103e-01 
1.46250 	 8.367e-03 	 2.001e-02 	 1.121e-01 
1.47083 	 8.184e-03 	 1.871e-02 	 1.064e-01 
1.47917 	 8.437e-03 	 1.928e-02 	 1.040e-01 
1.48750 	 8.260e-03 	 1.998e-02 	 1.028e-01 
1.49583 	 8.122e-03 	 1.947e-02 	 9.684e-02 
1.50417 	 7.665e-03 	 1.922e-02 	 9.744e-02 
1.51250 	 7.580e-03 	 1.897e-02 	 9.792e-02 
1.52083 	 7.469e-03 	 1.793e-02 	 9.516e-02 
1.52917 	 7.363e-03 	 1.705e-02 	 9.936e-02 
1.53750 	 7.138e-03 	 1.778e-02 	 9.936e-02 
1.54583 	 6.917e-03 	 1.727e-02 	 9.876e-02 
1.55417 	 7.302e-03 	 1.747e-02 	 9.432e-02 
1.56250 	 6.821e-03 	 1.629e-02 	 8.712e-02 
1.57083 	 6.935e-03 	 1.675e-02 	 8.904e-02 
1.57917 	 6.923e-03 	 1.617e-02 	 8.964e-02 
1.58750 	 6.389e-03 	 1.586e-02 	 8.772e-02 
1.59583 	 6.232e-03 	 1.484e-02 	 9.504e-02 
1.60417 	 6.438e-03 	 1.506e-02 	 8.184e-02 
1.61250 	 6.100e-03 	 1.594e-02 	 8.784e-02 
1.62083 	 5.929e-03 	 1.509e-02 	 8.616e-02 
1.62917 	 5.803e-03 	 1.515e-02 	 7.764e-02 
1.63750 	 5.698e-03 	 1.411e-02 	 7.956e-02 
1.64583 	 5.732e-03 	 1.441e-02 	 8.520e-02 
1.65417 	 5.322e-03 	 1.358e-02 	 7.596e-02 
1.66250 	 5.587e-03 	 1.406e-02 	 7.944e-02 
1.67083 	 5.562e-03 	 1.363e-02 	 6.900e-02 
1.67917 	 5.155e-03 	 1.305e-02 	 7.668e-02 
1.68750 	 5.251e-03 	 1.381e-02 	 8.124e-02 
1.69583 	 5.130e-03 	 1.297e-02 	 7.608e-02 
1.70417 	 5.014e-03 	 1.303e-02 	 7.344e-02 
1.71250 	 4.878e-03 	 1.286e-02 	 7.056e-02 
1.72083 	 4.766e-03 	 1.259e-02 	 7.092e-02 
1.72917 	 4.663e-03 	 1.270e-02 	 7.068e-02 
1.73750 	 4.587e-03 	 1.207e-02 	 7.008e-02 
1.74583 	 4.869e-03 	 1.203e-02 	 6.924e-02 
1.75417 	 4.320e-03 	 1.163e-02 	 7.272e-02 
1.76250 	 4.414e-03 	 1.159e-02 	 6.972e-02 
1.77083 	 4.105e-03 	 1.156e-02 	 6.672e-02 
1.77917 	 4.278e-03 	 1.115e-02 	 6.732e-02 
1.78750 	 4.056e-03 	 1.141e-02 	 5.832e-02 
1.79583 	 4.175e-03 	 1.101e-02 	 5.868e-02 
1.80417 	 4.142e-03 	 1.083e-02 	 6.360e-02 
1.81250 	 3.962e-03 	 1.024e-02 	 6.228e-02 
1.82083 	 3.799e-03 	 1.075e-02 	 6.156e-02 
1.82917 	 4.096e-03 	 1.063e-02 	 6.168e-02 
1.83750 	 3.824e-03 	 1.051e-02 	 6.168e-02 
1.84583 	 3.868e-03 	 1.037e-02 	 6.420e-02 
1.85417 	 3.697e-03 	 9.868e-03 	 5.904e-02 
1.86250 	 3.631e-03 	 9.598e-03 	 6.024e-02 
1.87083 	 3.612e-03 	 9.586e-03 	 5.604e-02 
1.87917 	 3.383e-03 	 9.411e-03 	 5.988e-02 
1.88750 	 3.369e-03 	 9.380e-03 	 5.652e-02 
1.89583 	 3.417e-03 	 9.611e-03 	 5.844e-02 
1.90417 	 3.239e-03 	 9.468e-03 	 5.784e-02 
1.91250 	 3.342e-03 	 9.177e-03 	 5.664e-02 
1.92083 	 3.251e-03 	 9.326e-03 	 5.664e-02 
1.92917 	 3.079e-03 	 8.524e-03 	 5.004e-02 
1.93750 	 3.170e-03 	 8.596e-03 	 5.184e-02 
1.94583 	 2.953e-03 	 8.608e-03 	 5.268e-02 
1.95417 	 3.033e-03 	 8.337e-03 	 5.352e-02 
1.96250 	 2.963e-03 	 8.593e-03 	 5.052e-02 
1.97083 	 2.889e-03 	 8.121e-03 	 5.052e-02 
1.97917 	 2.869e-03 	 7.971e-03 	 5.112e-02 
1.98750 	 2.782e-03 	 8.139e-03 	 5.052e-02 
1.99583 	 2.764e-03 	 7.981e-03 	 4.944e-02 
2.00417 	 3.205e-01 	 8.108e-01 	 4.476e+00 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
double	i_photon;   /* current photon */
double	W;          /* photon weight */
double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */
double	Fsph;       /* fluence in spherical shell */
double	Fcyl;       /* fluence in cylindrical shell */
double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
double	Nphotons;   /* number of photons in simulation */
short	NR;         /* number of radial positions */
double	radial_size;  /* maximum radial size */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
double  rnd;        /* assigned random value 0-1 */
double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.0;     /* cm^-1 */
mus         = 0.0;  /* cm^-1 */
g           = 0.90;  
nt          = 1.33;
Nphotons    = 1e6; /* set number of photons in simulation */
radial_size = 2.0;   /* cm, total range over which bins extend */
NR          = 240;	 /* set number of bins.  */
   /* IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1. */
dr          = radial_size/NR;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
i_photon = 0;
InitRandomGen;
for (ir=0; ir<=NR; ir++) {
   Csph[ir] = 0;
   Ccyl[ir] = 0;
   Cpla[ir] = 0;
   }
   
/**** RUN
   Launch N photons, initializing each one before progation.
*****/
do {


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements an isotropic point source.
*****/
i_photon += 1;	/* increment photon count */
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = 0;                      /* Set photon position to origin. */
y = 0;
z = 0;

/* Randomly set photon trajectory to yield an isotropic source. */
costheta = 2.0*RandomNum - 1.0;   
sintheta = sqrt(1.0 - costheta*costheta);	/* sintheta is always positive */
psi = 2.0*PI*RandomNum;
ux = sintheta*cos(psi);
uy = sintheta*sin(psi);
uz = costheta;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR) ir = NR;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR) ir = NR;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR) ir = NR;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */
   

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */
while (i_photon < Nphotons);


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
target = fopen("mc321_out.txt", "w");

/* print header */
fprintf(target, "number of photons = %f\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %4.3e \t %4.3e \t %4.3e \n", r, Fsph, Fcyl, Fpla);
  	}

fclose(target);


} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC

