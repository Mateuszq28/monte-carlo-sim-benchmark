time elapsed: 2.9074 seconds

=================================

sim results:

Small Monte Carlo by Scott Prahl (https://omlc.org)
1 W/cm^2 Uniform Illumination of Semi-Infinite Medium

Scattering =   95.000/cm
Absorption =    5.000/cm
Anisotropy =    0.500
Refr Index =    1.500
Photons    =   100000

Specular Refl      =    0.04000
Backscattered Refl =    0.21795

 Depth         Heat
[microns]     [W/cm^3]
     0        15.67957
    20        15.44587
    40        15.25572
    60        14.86938
    80        14.52744
   100        14.06433
   120        13.56532
   140        13.01892
   160        12.56717
   180        12.05278
   200        11.56812
   220        10.96896
   240        10.60985
   260        10.10270
   280         9.54441
   300         9.14306
   320         8.69220
   340         8.26899
   360         7.83505
   380         7.44619
   400         7.04664
   420         6.74312
   440         6.43163
   460         6.07643
   480         5.72100
   500         5.44473
   520         5.13658
   540         4.93511
   560         4.69058
   580         4.40295
   600         4.19808
   620         3.93478
   640         3.76278
   660         3.52783
   680         3.33420
   700         3.20513
   720         3.02712
   740         2.86352
   760         2.73361
   780         2.58798
   800         2.41811
   820         2.28933
   840         2.16372
   860         2.05951
   880         1.94194
   900         1.84323
   920         1.75294
   940         1.66821
   960         1.57592
   980         1.49660
  1000         1.43334
  1020         1.34012
  1040         1.27241
  1060         1.22280
  1080         1.13526
  1100         1.09340
  1120         1.02921
  1140         0.96860
  1160         0.92260
  1180         0.87532
  1200         0.81372
  1220         0.77914
  1240         0.72669
  1260         0.68806
  1280         0.65657
  1300         0.62037
  1320         0.57691
  1340         0.55019
  1360         0.52444
  1380         0.50818
  1400         0.47531
  1420         0.45213
  1440         0.42211
  1460         0.40752
  1480         0.38541
  1500         0.36330
  1520         0.34241
  1540         0.32105
  1560         0.31107
  1580         0.28857
  1600         0.27440
  1620         0.25503
  1640         0.24782
  1660         0.23399
  1680         0.22666
  1700         0.21213
  1720         0.19680
  1740         0.19402
  1760         0.18202
  1780         0.16892
  1800         0.16500
  1820         0.15082
  1840         0.14115
  1860         0.14115
  1880         0.12862
  1900         0.12202
  1920         0.11670
  1940         0.11164
  1960         0.10704
  1980         0.10143
 extra         0.00360


=================================

code that generated this simulation:

char   t1[80] = "Small Monte Carlo by Scott Prahl (https://omlc.org)";
char   t2[80] = "1 W/cm^2 Uniform Illumination of Semi-Infinite Medium";

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define BINS 101

double mu_a = 5;			/* Absorption Coefficient in 1/cm */
double mu_s = 95;			/* Scattering Coefficient in 1/cm */
double g = 0.5;				/* Scattering Anisotropy -1<=g<=1 */
double n = 1.5;				/* Index of refraction of medium */
double microns_per_bin = 20;/* Thickness of one bin layer */
long   i, photons = 100000;
double x,y,z,u,v,w,weight;
double rs, rd, bit, albedo, crit_angle, bins_per_mfp, heat[BINS];

void launch() /* Start the photon */
{
	x = 0.0; y = 0.0; z = 0.0;		  
	u = 0.0; v = 0.0; w = 1.0;		
	weight = 1.0 - rs;
}

void bounce () /* Interact with top surface */
{
double t, temp, temp1,rf;
	w = -w;
	z = -z;
	if (w <= crit_angle) return;  			/* total internal reflection */	

	t       = sqrt(1.0-n*n*(1.0-w*w));    	/* cos of exit angle */
	temp1   = (w - n*t)/(w + n*t);
	temp    = (t - n*w)/(t + n*w);
	rf      = (temp1*temp1+temp*temp)/2.0;	/* Fresnel reflection */
	rd     += (1.0-rf) * weight;
	weight -= (1.0-rf) * weight;
}

void move() /* move to next scattering or absorption event */
{
double d = -log((rand()+1.0)/(RAND_MAX+1.0));
	x += d * u;
	y += d * v;
	z += d * w;  
	if ( z<=0 ) bounce();
}

void absorb () /* Absorb light in the medium */
{
int bin=z*bins_per_mfp;

	if (bin >= BINS) bin = BINS-1;	
	heat[bin] += (1.0-albedo)*weight;
	weight *= albedo;
	if (weight < 0.001){ /* Roulette */
		bit -= weight;
		if (rand() > 0.1*RAND_MAX) weight = 0; else weight /= 0.1;
		bit += weight;
	}
}

void scatter() /* Scatter photon and establish new direction */
{
double x1, x2, x3, t, mu;

	for(;;) {								/*new direction*/
		x1=2.0*rand()/RAND_MAX - 1.0; 
		x2=2.0*rand()/RAND_MAX - 1.0; 
		if ((x3=x1*x1+x2*x2)<=1) break;
	}	
	if (g==0) {  /* isotropic */
		u = 2.0 * x3 -1.0;
		v = x1 * sqrt((1-u*u)/x3);
		w = x2 * sqrt((1-u*u)/x3);
		return;
	} 

	mu = (1-g*g)/(1-g+2.0*g*rand()/RAND_MAX);
	mu = (1 + g*g-mu*mu)/2.0/g;
	if ( fabs(w) < 0.9 ) {	
		t = mu * u + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*u*w-x2*v);
		v = mu * v + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*v*w+x2*u);
		w = mu * w - sqrt((1-mu*mu)*(1-w*w)/x3) * x1;
	} else {
		t = mu * u + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*u*v + x2*w);
		w = mu * w + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*v*w - x2*u);
		v = mu * v - sqrt((1-mu*mu)*(1-v*v)/x3) * x1;
	}
	u = t;
}

void print_results() /* Print the results */
{
int i;
	printf("%s\n%s\n\nScattering = %8.3f/cm\nAbsorption = %8.3f/cm\n",t1,t2,mu_s,mu_a);
	printf("Anisotropy = %8.3f\nRefr Index = %8.3f\nPhotons    = %8ld",g,n,photons);
	printf("\n\nSpecular Refl      = %10.5f\nBackscattered Refl = %10.5f",rs,rd/(bit+photons));
	printf("\n\n Depth         Heat\n[microns]     [W/cm^3]\n");

	for (i=0;i<BINS-1;i++){
		printf("%6.0f    %12.5f\n",i*microns_per_bin, heat[i]/microns_per_bin*1e4/(bit+photons));
	}
	printf(" extra    %12.5f\n",heat[BINS-1]/(bit+photons));
}

int main ()
{
	albedo = mu_s / (mu_s + mu_a);
	rs = (n-1.0)*(n-1.0)/(n+1.0)/(n+1.0);	/* specular reflection */
	crit_angle = sqrt(1.0-1.0/n/n);			/* cos of critical angle */
	bins_per_mfp = 1e4/microns_per_bin/(mu_a+mu_s);
	
	for (i = 1; i <= photons; i++){
		launch ();
		while (weight > 0) {
			move ();
			absorb ();
			scatter ();
		}
	}	
	print_results();
	return 0;
}
