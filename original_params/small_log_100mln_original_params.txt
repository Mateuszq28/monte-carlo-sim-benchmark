time elapsed: 14029.3987 seconds

=================================

sim results:

[                                                  ] 1%
[#                                                 ] 2%
[#                                                 ] 3%
[##                                                ] 4%
[##                                                ] 5%
[###                                               ] 6%
[###                                               ] 7%
[####                                              ] 8%
[####                                              ] 9%
[#####                                             ] 10%
[#####                                             ] 11%
[######                                            ] 12%
[######                                            ] 13%
[#######                                           ] 14%
[#######                                           ] 15%
[########                                          ] 16%
[########                                          ] 17%
[#########                                         ] 18%
[#########                                         ] 19%
[##########                                        ] 20%
[##########                                        ] 21%
[###########                                       ] 22%
[###########                                       ] 23%
[############                                      ] 24%
[############                                      ] 25%
[#############                                     ] 26%
[#############                                     ] 27%
[##############                                    ] 28%
[##############                                    ] 29%
[###############                                   ] 30%
[###############                                   ] 31%
[################                                  ] 32%
[################                                  ] 33%
[#################                                 ] 34%
[#################                                 ] 35%
[##################                                ] 36%
[##################                                ] 37%
[###################                               ] 38%
[###################                               ] 39%
[####################                              ] 40%
[####################                              ] 41%
[#####################                             ] 42%
[#####################                             ] 43%
[######################                            ] 44%
[######################                            ] 45%
[#######################                           ] 46%
[#######################                           ] 47%
[########################                          ] 48%
[########################                          ] 49%
[#########################                         ] 50%
[#########################                         ] 51%
[##########################                        ] 52%
[##########################                        ] 53%
[###########################                       ] 54%
[###########################                       ] 55%
[############################                      ] 56%
[############################                      ] 57%
[#############################                     ] 58%
[#############################                     ] 59%
[##############################                    ] 60%
[##############################                    ] 61%
[###############################                   ] 62%
[###############################                   ] 63%
[################################                  ] 64%
[################################                  ] 65%
[#################################                 ] 66%
[#################################                 ] 67%
[##################################                ] 68%
[##################################                ] 69%
[###################################               ] 70%
[###################################               ] 71%
[####################################              ] 72%
[####################################              ] 73%
[#####################################             ] 74%
[#####################################             ] 75%
[######################################            ] 76%
[######################################            ] 77%
[#######################################           ] 78%
[#######################################           ] 79%
[########################################          ] 80%
[########################################          ] 81%
[#########################################         ] 82%
[#########################################         ] 83%
[##########################################        ] 84%
[##########################################        ] 85%
[###########################################       ] 86%
[###########################################       ] 87%
[############################################      ] 88%
[############################################      ] 89%
[#############################################     ] 90%
[#############################################     ] 91%
[##############################################    ] 92%
[##############################################    ] 93%
[###############################################   ] 94%
[###############################################   ] 95%
[################################################  ] 96%
[################################################  ] 97%
[################################################# ] 98%
[################################################# ] 99%
[##################################################] 100%
Small Monte Carlo by Scott Prahl (https://omlc.org)
1 W/cm^2 Uniform Illumination of Semi-Infinite Medium

Scattering =  312.000/cm
Absorption =    1.673/cm
Anisotropy =    0.900
Refr Index =    1.330
Photons    = 100000000

Specular Refl      =    0.02006
Backscattered Refl =    0.37673

 Depth         Heat
[microns]     [W/cm^3]
     0     5.90839e+00 
    83     5.93499e+00 
   167     5.73573e+00 
   250     5.34491e+00 
   333     4.90094e+00 
   417     4.44983e+00 
   500     4.01862e+00 
   583     3.62340e+00 
   667     3.26237e+00 
   750     2.93711e+00 
   833     2.64433e+00 
   917     2.37370e+00 
  1000     2.13831e+00 
  1083     1.92283e+00 
  1167     1.72746e+00 
  1250     1.55635e+00 
  1333     1.39948e+00 
  1417     1.25739e+00 
  1500     1.12814e+00 
  1583     1.01575e+00 
  1667     9.14183e-01 
  1750     8.20948e-01 
  1833     7.41233e-01 
  1917     6.67665e-01 
  2000     6.00286e-01 
  2083     5.38960e-01 
  2167     4.85293e-01 
  2250     4.36815e-01 
  2333     3.92636e-01 
  2417     3.53263e-01 
  2500     3.17931e-01 
  2583     2.85663e-01 
  2667     2.57062e-01 
  2750     2.30760e-01 
  2833     2.08039e-01 
  2917     1.86963e-01 
  3000     1.67709e-01 
  3083     1.50679e-01 
  3167     1.36073e-01 
  3250     1.22551e-01 
  3333     1.10615e-01 
  3417     9.92625e-02 
  3500     8.92432e-02 
  3583     7.98176e-02 
  3667     7.18876e-02 
  3750     6.49257e-02 
  3833     5.75710e-02 
  3917     5.20073e-02 
  4000     4.68717e-02 
  4083     4.24161e-02 
  4167     3.80452e-02 
  4250     3.41040e-02 
  4333     3.06021e-02 
  4417     2.77402e-02 
  4500     2.50166e-02 
  4583     2.23974e-02 
  4667     2.03404e-02 
  4750     1.80456e-02 
  4833     1.61479e-02 
  4917     1.45675e-02 
  5000     1.29680e-02 
  5083     1.16910e-02 
  5167     1.05479e-02 
  5250     9.46716e-03 
  5333     8.52992e-03 
  5417     7.66615e-03 
  5500     6.90389e-03 
  5583     6.21441e-03 
  5667     5.55665e-03 
  5750     4.97760e-03 
  5833     4.49431e-03 
  5917     4.03833e-03 
  6000     3.62767e-03 
  6083     3.30845e-03 
  6167     2.98483e-03 
  6250     2.64241e-03 
  6333     2.37062e-03 
  6417     2.12485e-03 
  6500     1.91856e-03 
  6583     1.73952e-03 
  6667     1.53433e-03 
  6750     1.40451e-03 
  6833     1.25935e-03 
  6917     1.13638e-03 
  7000     1.02770e-03 
  7083     9.32877e-04 
  7167     8.46452e-04 
  7250     7.52764e-04 
  7333     6.81788e-04 
  7417     6.21199e-04 
  7500     5.58510e-04 
  7583     4.92239e-04 
  7667     4.46172e-04 
  7750     4.03369e-04 
  7833     3.52098e-04 
  7917     3.12676e-04 
  8000     2.84525e-04 
  8083     2.61342e-04 
  8167     2.32491e-04 
  8250     2.11275e-04 
  8333     1.91408e-04 
  8417     1.77063e-04 
  8500     1.61038e-04 
  8583     1.42289e-04 
  8667     1.27612e-04 
  8750     1.14808e-04 
  8833     1.05741e-04 
  8917     9.48646e-05 
  9000     8.72260e-05 
  9083     7.71781e-05 
  9167     7.01068e-05 
  9250     6.04912e-05 
  9333     5.28401e-05 
  9417     4.76789e-05 
  9500     4.29678e-05 
  9583     3.74721e-05 
  9667     3.36571e-05 
  9750     3.26064e-05 
  9833     3.05581e-05 
  9917     2.60177e-05 
 10000     2.34055e-05 
 10083     1.99639e-05 
 10167     1.68187e-05 
 10250     1.50270e-05 
 10333     1.29327e-05 
 10417     1.18505e-05 
 10500     1.12136e-05 
 10583     9.35729e-06 
 10667     7.98723e-06 
 10750     8.15783e-06 
 10833     6.64237e-06 
 10917     5.93287e-06 
 11000     6.26656e-06 
 11083     5.82167e-06 
 11167     5.24076e-06 
 11250     4.89718e-06 
 11333     5.01618e-06 
 11417     4.34881e-06 
 11500     4.15590e-06 
 11583     3.95650e-06 
 11667     3.10690e-06 
 11750     2.97857e-06 
 11833     2.99597e-06 
 11917     2.21722e-06 
 12000     1.61690e-06 
 12083     1.23739e-06 
 12167     1.35080e-06 
 12250     1.08674e-06 
 12333     1.12696e-06 
 12417     8.70977e-07 
 12500     7.91329e-07 
 12583     6.52251e-07 
 12667     7.30978e-07 
 12750     6.50269e-07 
 12833     4.78115e-07 
 12917     4.73688e-07 
 13000     6.09900e-07 
 13083     8.38010e-07 
 13167     4.35384e-07 
 13250     8.01147e-07 
 13333     6.00890e-07 
 13417     3.68915e-07 
 13500     5.24441e-07 
 13583     4.75202e-07 
 13667     3.59584e-07 
 13750     2.45257e-07 
 13833     1.91225e-07 
 13917     7.48644e-08 
 14000     1.27542e-07 
 14083     1.26610e-07 
 14167     1.38819e-07 
 14250     1.22360e-07 
 14333     8.81820e-08 
 14417     1.04503e-07 
 14500     2.27873e-07 
 14583     2.12835e-07 
 14667     9.13626e-08 
 14750     4.60487e-08 
 14833     4.44320e-08 
 14917     6.44127e-08 
 15000     8.75580e-08 
 15083     9.31926e-08 
 15167     7.39741e-08 
 15250     9.92884e-08 
 15333     4.79712e-08 
 15417     7.31886e-09 
 15500     2.02505e-09 
 15583     2.99726e-09 
 15667     5.85216e-09 
 15750     3.79841e-09 
 15833     1.86895e-09 
 15917     5.48840e-09 
 16000     0.00000e+00 
 16083     0.00000e+00 
 16167     0.00000e+00 
 16250     0.00000e+00 
 16333     0.00000e+00 
 16417     0.00000e+00 
 16500     0.00000e+00 
 16583     0.00000e+00 
 16667     0.00000e+00 
 16750     0.00000e+00 
 16833     0.00000e+00 
 16917     0.00000e+00 
 17000     0.00000e+00 
 17083     0.00000e+00 
 17167     0.00000e+00 
 17250     0.00000e+00 
 17333     0.00000e+00 
 17417     0.00000e+00 
 17500     0.00000e+00 
 17583     0.00000e+00 
 17667     0.00000e+00 
 17750     0.00000e+00 
 17833     0.00000e+00 
 17917     0.00000e+00 
 18000     0.00000e+00 
 18083     0.00000e+00 
 18167     0.00000e+00 
 18250     0.00000e+00 
 18333     0.00000e+00 
 18417     0.00000e+00 
 18500     0.00000e+00 
 18583     0.00000e+00 
 18667     0.00000e+00 
 18750     0.00000e+00 
 18833     0.00000e+00 
 18917     0.00000e+00 
 19000     0.00000e+00 
 19083     0.00000e+00 
 19167     0.00000e+00 
 19250     0.00000e+00 
 19333     0.00000e+00 
 19417     0.00000e+00 
 19500     0.00000e+00 
 19583     0.00000e+00 
 19667     0.00000e+00 
 19750     0.00000e+00 
 19833     0.00000e+00 
 19917     0.00000e+00 
 extra         0.00000


=================================

code that generated this simulation:

char   t1[80] = "Small Monte Carlo by Scott Prahl (https://omlc.org)";
char   t2[80] = "1 W/cm^2 Uniform Illumination of Semi-Infinite Medium";

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define BINS 241

double mu_a = 1.673;			/* Absorption Coefficient in 1/cm */
double mu_s = 312.0;			/* Scattering Coefficient in 1/cm */
double g = 0.9;				/* Scattering Anisotropy -1<=g<=1 */
double n = 1.33;				/* Index of refraction of medium */
double microns_per_bin = 83.3333333;/* Thickness of one bin layer */
long   i, photons = 100000000; /*ID_EDIT_1_2*/
double x,y,z,u,v,w,weight;
double rs, rd, bit, albedo, crit_angle, bins_per_mfp, heat[BINS];


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


void launch() /* Start the photon */
{
	x = 0.0; y = 0.0; z = 0.0;		  
	u = 0.0; v = 0.0; w = 1.0;		
	weight = 1.0 - rs;
}

void bounce () /* Interact with top surface */
{
double t, temp, temp1,rf;
	w = -w;
	z = -z;
	if (w <= crit_angle) return;  			/* total internal reflection */	

	t       = sqrt(1.0-n*n*(1.0-w*w));    	/* cos of exit angle */
	temp1   = (w - n*t)/(w + n*t);
	temp    = (t - n*w)/(t + n*w);
	rf      = (temp1*temp1+temp*temp)/2.0;	/* Fresnel reflection */
	rd     += (1.0-rf) * weight;
	weight -= (1.0-rf) * weight;
}

void move() /* move to next scattering or absorption event */
{
double d = -log((rand()+1.0)/(RAND_MAX+1.0));
	x += d * u;
	y += d * v;
	z += d * w;  
	if ( z<=0 ) bounce();
}

void absorb () /* Absorb light in the medium */
{
int bin=z*bins_per_mfp;

	if (bin >= BINS) bin = BINS-1;	
	heat[bin] += (1.0-albedo)*weight;
	weight *= albedo;
	if (weight < 0.001){ /* Roulette */
		bit -= weight;
		if (rand() > 0.1*RAND_MAX) weight = 0; else weight /= 0.1;
		bit += weight;
	}
}

void scatter() /* Scatter photon and establish new direction */
{
double x1, x2, x3, t, mu;

	for(;;) {								/*new direction*/
		x1=2.0*rand()/RAND_MAX - 1.0; 
		x2=2.0*rand()/RAND_MAX - 1.0; 
		if ((x3=x1*x1+x2*x2)<=1) break;
	}	
	if (g==0) {  /* isotropic */
		u = 2.0 * x3 -1.0;
		v = x1 * sqrt((1-u*u)/x3);
		w = x2 * sqrt((1-u*u)/x3);
		return;
	} 

	mu = (1-g*g)/(1-g+2.0*g*rand()/RAND_MAX);
	mu = (1 + g*g-mu*mu)/2.0/g;
	if ( fabs(w) < 0.9 ) {	
		t = mu * u + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*u*w-x2*v);
		v = mu * v + sqrt((1-mu*mu)/(1-w*w)/x3) * (x1*v*w+x2*u);
		w = mu * w - sqrt((1-mu*mu)*(1-w*w)/x3) * x1;
	} else {
		t = mu * u + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*u*v + x2*w);
		w = mu * w + sqrt((1-mu*mu)/(1-v*v)/x3) * (x1*v*w - x2*u);
		v = mu * v - sqrt((1-mu*mu)*(1-v*v)/x3) * x1;
	}
	u = t;
}

void print_results() /* Print the results */
{
int i;
	printf("%s\n%s\n\nScattering = %8.3f/cm\nAbsorption = %8.3f/cm\n",t1,t2,mu_s,mu_a);
	printf("Anisotropy = %8.3f\nRefr Index = %8.3f\nPhotons    = %8ld",g,n,photons);
	printf("\n\nSpecular Refl      = %10.5f\nBackscattered Refl = %10.5f",rs,rd/(bit+photons));
	printf("\n\n Depth         Heat\n[microns]     [W/cm^3]\n");

	for (i=0;i<BINS-1;i++){
		printf("%6.0f    %12.5e \n",i*microns_per_bin, heat[i]/microns_per_bin*1e4/(bit+photons));
	}
	printf(" extra    %12.5f\n",heat[BINS-1]/(bit+photons));
}

int main ()
{
	long progressBarStep = photons / 100;
	albedo = mu_s / (mu_s + mu_a);
	rs = (n-1.0)*(n-1.0)/(n+1.0)/(n+1.0);	/* specular reflection */
	crit_angle = sqrt(1.0-1.0/n/n);			/* cos of critical angle */
	bins_per_mfp = 1e4/microns_per_bin/(mu_a+mu_s);
	
	for (i = 1; i <= photons; i++){
		displayProgressBar(i, photons, progressBarStep);
		launch ();
		while (weight > 0) {
			move ();
			absorb ();
			scatter ();
		}
	}	
	print_results();
	return 0;
}
