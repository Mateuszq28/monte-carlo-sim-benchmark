time elapsed: 0.6321 seconds

=================================

sim results:

number of photons = 10000.000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 4.070e+03 	 5.546e+01 	 5.112e+00 
0.01250 	 4.889e+02 	 2.093e+01 	 3.840e+00 
0.02083 	 1.826e+02 	 1.027e+01 	 3.624e+00 
0.02917 	 8.980e+01 	 7.858e+00 	 2.964e+00 
0.03750 	 4.753e+01 	 5.806e+00 	 2.748e+00 
0.04583 	 3.818e+01 	 4.792e+00 	 2.724e+00 
0.05417 	 2.832e+01 	 4.689e+00 	 2.544e+00 
0.06250 	 2.078e+01 	 3.270e+00 	 2.076e+00 
0.07083 	 1.846e+01 	 3.074e+00 	 2.124e+00 
0.07917 	 1.158e+01 	 3.064e+00 	 2.076e+00 
0.08750 	 8.107e+00 	 2.488e+00 	 1.788e+00 
0.09583 	 8.214e+00 	 1.833e+00 	 1.704e+00 
0.10417 	 6.512e+00 	 1.760e+00 	 2.004e+00 
0.11250 	 6.262e+00 	 1.833e+00 	 1.776e+00 
0.12083 	 4.840e+00 	 1.391e+00 	 1.476e+00 
0.12917 	 3.720e+00 	 1.257e+00 	 1.752e+00 
0.13750 	 3.485e+00 	 1.417e+00 	 1.632e+00 
0.14583 	 3.053e+00 	 1.087e+00 	 1.416e+00 
0.15417 	 2.571e+00 	 1.103e+00 	 1.248e+00 
0.16250 	 3.146e+00 	 1.164e+00 	 1.188e+00 
0.17083 	 1.996e+00 	 8.832e-01 	 1.740e+00 
0.17917 	 2.439e+00 	 9.167e-01 	 1.500e+00 
0.18750 	 1.738e+00 	 9.269e-01 	 1.260e+00 
0.19583 	 1.793e+00 	 9.070e-01 	 1.212e+00 
0.20417 	 1.397e+00 	 7.858e-01 	 1.164e+00 
0.21250 	 1.649e+00 	 7.010e-01 	 1.116e+00 
0.22083 	 1.214e+00 	 7.697e-01 	 1.152e+00 
0.22917 	 1.273e+00 	 5.500e-01 	 1.104e+00 
0.23750 	 1.117e+00 	 6.594e-01 	 1.116e+00 
0.24583 	 1.059e+00 	 7.380e-01 	 1.128e+00 
0.25417 	 8.574e-01 	 6.387e-01 	 8.400e-01 
0.26250 	 9.562e-01 	 6.330e-01 	 1.224e+00 
0.27083 	 1.002e+00 	 4.302e-01 	 9.240e-01 
0.27917 	 7.719e-01 	 4.652e-01 	 8.880e-01 
0.28750 	 6.008e-01 	 5.647e-01 	 9.240e-01 
0.29583 	 5.237e-01 	 4.648e-01 	 7.680e-01 
0.30417 	 8.361e-01 	 4.960e-01 	 8.520e-01 
0.31250 	 6.552e-01 	 4.156e-01 	 6.480e-01 
0.32083 	 6.494e-01 	 3.810e-01 	 8.400e-01 
0.32917 	 4.319e-01 	 4.178e-01 	 8.640e-01 
0.33750 	 4.192e-01 	 3.395e-01 	 9.840e-01 
0.34583 	 4.631e-01 	 3.534e-01 	 8.160e-01 
0.35417 	 4.035e-01 	 3.074e-01 	 7.440e-01 
0.36250 	 3.052e-01 	 3.319e-01 	 6.960e-01 
0.37083 	 3.958e-01 	 3.039e-01 	 8.760e-01 
0.37917 	 3.454e-01 	 3.173e-01 	 7.440e-01 
0.38750 	 3.434e-01 	 3.647e-01 	 7.080e-01 
0.39583 	 3.901e-01 	 3.377e-01 	 6.720e-01 
0.40417 	 3.098e-01 	 2.930e-01 	 6.840e-01 
0.41250 	 3.536e-01 	 2.732e-01 	 5.640e-01 
0.42083 	 2.642e-01 	 2.405e-01 	 6.720e-01 
0.42917 	 2.437e-01 	 2.581e-01 	 6.720e-01 
0.43750 	 2.993e-01 	 3.274e-01 	 6.240e-01 
0.44583 	 2.354e-01 	 2.185e-01 	 6.600e-01 
0.45417 	 2.361e-01 	 2.775e-01 	 4.440e-01 
0.46250 	 2.946e-01 	 2.106e-01 	 5.640e-01 
0.47083 	 1.982e-01 	 2.231e-01 	 6.360e-01 
0.47917 	 2.537e-01 	 2.471e-01 	 5.760e-01 
0.48750 	 2.250e-01 	 1.802e-01 	 5.040e-01 
0.49583 	 1.903e-01 	 2.350e-01 	 5.400e-01 
0.50417 	 1.841e-01 	 2.008e-01 	 5.520e-01 
0.51250 	 1.781e-01 	 1.975e-01 	 5.640e-01 
0.52083 	 1.725e-01 	 1.687e-01 	 6.000e-01 
0.52917 	 1.637e-01 	 2.310e-01 	 4.920e-01 
0.53750 	 1.520e-01 	 1.670e-01 	 5.880e-01 
0.54583 	 1.538e-01 	 1.680e-01 	 4.920e-01 
0.55417 	 1.524e-01 	 2.068e-01 	 4.200e-01 
0.56250 	 1.147e-01 	 1.358e-01 	 6.600e-01 
0.57083 	 1.319e-01 	 1.472e-01 	 4.320e-01 
0.57917 	 1.366e-01 	 1.913e-01 	 4.920e-01 
0.58750 	 9.130e-02 	 1.430e-01 	 4.920e-01 
0.59583 	 1.264e-01 	 1.474e-01 	 4.200e-01 
0.60417 	 1.570e-01 	 1.581e-01 	 4.200e-01 
0.61250 	 9.673e-02 	 1.684e-01 	 3.240e-01 
0.62083 	 1.065e-01 	 1.138e-01 	 5.400e-01 
0.62917 	 1.351e-01 	 1.670e-01 	 4.440e-01 
0.63750 	 1.034e-01 	 1.528e-01 	 4.200e-01 
0.64583 	 1.145e-01 	 1.419e-01 	 3.240e-01 
0.65417 	 1.138e-01 	 1.139e-01 	 4.320e-01 
0.66250 	 7.397e-02 	 9.802e-02 	 3.960e-01 
0.67083 	 8.912e-02 	 1.082e-01 	 4.320e-01 
0.67917 	 7.867e-02 	 1.040e-01 	 4.320e-01 
0.68750 	 9.294e-02 	 1.222e-01 	 4.440e-01 
0.69583 	 8.875e-02 	 1.180e-01 	 3.480e-01 
0.70417 	 9.244e-02 	 1.221e-01 	 3.600e-01 
0.71250 	 6.396e-02 	 7.237e-02 	 3.720e-01 
0.72083 	 7.167e-02 	 1.007e-01 	 4.080e-01 
0.72917 	 6.466e-02 	 8.905e-02 	 3.840e-01 
0.73750 	 7.725e-02 	 1.088e-01 	 2.520e-01 
0.74583 	 8.412e-02 	 7.170e-02 	 2.880e-01 
0.75417 	 7.891e-02 	 9.117e-02 	 4.080e-01 
0.76250 	 5.584e-02 	 9.518e-02 	 2.760e-01 
0.77083 	 6.911e-02 	 1.041e-01 	 2.520e-01 
0.77917 	 5.820e-02 	 7.599e-02 	 3.840e-01 
0.78750 	 5.081e-02 	 1.067e-01 	 3.480e-01 
0.79583 	 4.372e-02 	 9.839e-02 	 3.000e-01 
0.80417 	 5.168e-02 	 9.975e-02 	 1.680e-01 
0.81250 	 6.075e-02 	 6.817e-02 	 2.880e-01 
0.82083 	 6.520e-02 	 9.074e-02 	 2.880e-01 
0.82917 	 5.000e-02 	 6.219e-02 	 3.360e-01 
0.83750 	 6.399e-02 	 8.438e-02 	 2.760e-01 
0.84583 	 5.739e-02 	 5.193e-02 	 2.160e-01 
0.85417 	 2.879e-02 	 7.602e-02 	 3.000e-01 
0.86250 	 5.391e-02 	 9.079e-02 	 2.040e-01 
0.87083 	 2.644e-02 	 6.579e-02 	 3.360e-01 
0.87917 	 4.324e-02 	 6.734e-02 	 3.960e-01 
0.88750 	 4.122e-02 	 7.532e-02 	 2.160e-01 
0.89583 	 3.927e-02 	 5.756e-02 	 2.280e-01 
0.90417 	 4.088e-02 	 7.182e-02 	 2.400e-01 
0.91250 	 4.931e-02 	 5.651e-02 	 2.520e-01 
0.92083 	 3.716e-02 	 5.185e-02 	 2.160e-01 
0.92917 	 3.208e-02 	 5.344e-02 	 3.840e-01 
0.93750 	 2.282e-02 	 4.686e-02 	 2.040e-01 
0.94583 	 2.455e-02 	 4.846e-02 	 2.280e-01 
0.95417 	 4.195e-02 	 5.604e-02 	 1.800e-01 
0.96250 	 3.195e-02 	 4.961e-02 	 1.680e-01 
0.97083 	 3.546e-02 	 5.902e-02 	 2.520e-01 
0.97917 	 2.789e-02 	 6.437e-02 	 3.360e-01 
0.98750 	 2.252e-02 	 5.028e-02 	 3.360e-01 
0.99583 	 2.889e-02 	 5.945e-02 	 2.880e-01 
1.00417 	 3.030e-02 	 6.086e-02 	 2.400e-01 
1.01250 	 3.260e-02 	 5.470e-02 	 2.280e-01 
1.02083 	 3.390e-02 	 5.238e-02 	 2.160e-01 
1.02917 	 2.524e-02 	 4.825e-02 	 2.040e-01 
1.03750 	 2.573e-02 	 5.707e-02 	 1.680e-01 
1.04583 	 2.532e-02 	 4.565e-02 	 3.000e-01 
1.05417 	 2.836e-02 	 4.348e-02 	 2.880e-01 
1.06250 	 2.538e-02 	 5.393e-02 	 2.880e-01 
1.07083 	 2.165e-02 	 3.389e-02 	 3.000e-01 
1.07917 	 2.296e-02 	 3.716e-02 	 2.160e-01 
1.08750 	 2.342e-02 	 3.512e-02 	 2.040e-01 
1.09583 	 2.068e-02 	 5.229e-02 	 2.040e-01 
1.10417 	 1.567e-02 	 3.978e-02 	 9.600e-02 
1.11250 	 1.852e-02 	 4.292e-02 	 1.440e-01 
1.12083 	 1.368e-02 	 4.090e-02 	 2.160e-01 
1.12917 	 2.472e-02 	 5.074e-02 	 1.440e-01 
1.13750 	 1.845e-02 	 3.862e-02 	 1.560e-01 
1.14583 	 1.455e-02 	 3.667e-02 	 1.680e-01 
1.15417 	 2.151e-02 	 3.475e-02 	 1.200e-01 
1.16250 	 1.625e-02 	 3.614e-02 	 1.920e-01 
1.17083 	 1.463e-02 	 4.894e-02 	 2.640e-01 
1.17917 	 1.786e-02 	 3.725e-02 	 1.200e-01 
1.18750 	 1.896e-02 	 3.699e-02 	 1.440e-01 
1.19583 	 1.536e-02 	 4.791e-02 	 1.680e-01 
1.20417 	 1.646e-02 	 3.807e-02 	 1.080e-01 
1.21250 	 2.273e-02 	 2.835e-02 	 1.200e-01 
1.22083 	 2.178e-02 	 3.129e-02 	 1.440e-01 
1.22917 	 1.454e-02 	 3.884e-02 	 1.440e-01 
1.23750 	 1.621e-02 	 3.241e-02 	 1.680e-01 
1.24583 	 1.723e-02 	 2.146e-02 	 1.320e-01 
1.25417 	 1.518e-02 	 2.741e-02 	 1.440e-01 
1.26250 	 1.977e-02 	 3.328e-02 	 1.080e-01 
1.27083 	 1.419e-02 	 2.555e-02 	 1.080e-01 
1.27917 	 1.050e-02 	 3.285e-02 	 1.800e-01 
1.28750 	 1.325e-02 	 2.373e-02 	 1.680e-01 
1.29583 	 1.365e-02 	 1.474e-02 	 9.600e-02 
1.30417 	 1.235e-02 	 3.075e-02 	 1.320e-01 
1.31250 	 8.315e-03 	 2.765e-02 	 1.560e-01 
1.32083 	 1.149e-02 	 2.603e-02 	 8.400e-02 
1.32917 	 1.243e-02 	 3.161e-02 	 1.440e-01 
1.33750 	 7.473e-03 	 1.571e-02 	 1.080e-01 
1.34583 	 1.054e-02 	 2.129e-02 	 1.440e-01 
1.35417 	 1.614e-02 	 2.821e-02 	 1.560e-01 
1.36250 	 1.080e-02 	 2.103e-02 	 9.600e-02 
1.37083 	 7.114e-03 	 3.344e-02 	 1.680e-01 
1.37917 	 1.205e-02 	 1.939e-02 	 1.200e-01 
1.38750 	 7.440e-03 	 2.753e-02 	 1.440e-01 
1.39583 	 1.323e-02 	 2.873e-02 	 9.600e-02 
1.40417 	 9.686e-03 	 1.768e-02 	 1.920e-01 
1.41250 	 9.094e-03 	 1.487e-02 	 7.200e-02 
1.42083 	 6.622e-03 	 2.420e-02 	 7.200e-02 
1.42917 	 8.883e-03 	 1.336e-02 	 9.600e-02 
1.43750 	 6.932e-03 	 2.923e-02 	 1.080e-01 
1.44583 	 1.325e-02 	 1.717e-02 	 1.200e-01 
1.45417 	 9.483e-03 	 1.839e-02 	 1.200e-01 
1.46250 	 1.161e-02 	 2.220e-02 	 1.680e-01 
1.47083 	 8.387e-03 	 2.727e-02 	 1.560e-01 
1.47917 	 4.801e-03 	 1.808e-02 	 7.200e-02 
1.48750 	 8.200e-03 	 1.926e-02 	 9.600e-02 
1.49583 	 4.268e-03 	 2.554e-02 	 1.440e-01 
1.50417 	 5.909e-03 	 2.666e-02 	 1.440e-01 
1.51250 	 8.349e-03 	 2.778e-02 	 9.600e-02 
1.52083 	 7.432e-03 	 1.507e-02 	 8.400e-02 
1.52917 	 7.759e-03 	 1.624e-02 	 6.000e-02 
1.53750 	 8.079e-03 	 1.615e-02 	 1.200e-01 
1.54583 	 7.992e-03 	 1.977e-02 	 9.600e-02 
1.55417 	 7.512e-03 	 9.831e-03 	 9.600e-02 
1.56250 	 1.134e-02 	 1.956e-02 	 1.200e-01 
1.57083 	 4.257e-03 	 1.581e-02 	 1.200e-01 
1.57917 	 7.276e-03 	 1.693e-02 	 1.320e-01 
1.58750 	 4.547e-03 	 1.684e-02 	 1.320e-01 
1.59583 	 5.250e-03 	 1.197e-02 	 8.400e-02 
1.60417 	 9.277e-03 	 1.429e-02 	 7.200e-02 
1.61250 	 8.080e-03 	 2.013e-02 	 8.400e-02 
1.62083 	 4.362e-03 	 9.427e-03 	 4.800e-02 
1.62917 	 4.317e-03 	 1.876e-02 	 1.200e-02 
1.63750 	 5.698e-03 	 1.749e-02 	 1.560e-01 
1.64583 	 6.698e-03 	 1.857e-02 	 7.200e-02 
1.65417 	 4.188e-03 	 1.501e-02 	 6.000e-02 
1.66250 	 3.110e-03 	 1.493e-02 	 1.200e-01 
1.67083 	 5.473e-03 	 1.486e-02 	 7.200e-02 
1.67917 	 7.451e-03 	 1.592e-02 	 8.400e-02 
1.68750 	 7.377e-03 	 1.245e-02 	 3.600e-02 
1.69583 	 5.977e-03 	 1.464e-02 	 6.000e-02 
1.70417 	 3.946e-03 	 6.724e-03 	 3.600e-02 
1.71250 	 6.187e-03 	 1.338e-02 	 7.200e-02 
1.72083 	 4.515e-03 	 9.989e-03 	 8.400e-02 
1.72917 	 4.791e-03 	 1.325e-02 	 4.800e-02 
1.73750 	 7.592e-03 	 1.209e-02 	 6.000e-02 
1.74583 	 5.953e-03 	 1.313e-02 	 9.600e-02 
1.75417 	 4.034e-03 	 6.533e-03 	 1.200e-01 
1.76250 	 3.996e-03 	 1.084e-02 	 3.600e-02 
1.77083 	 5.481e-03 	 1.294e-02 	 7.200e-02 
1.77917 	 5.128e-03 	 1.073e-02 	 1.080e-01 
1.78750 	 4.782e-03 	 1.282e-02 	 6.000e-02 
1.79583 	 5.034e-03 	 1.914e-02 	 8.400e-02 
1.80417 	 3.814e-03 	 8.469e-03 	 1.080e-01 
1.81250 	 3.488e-03 	 1.159e-02 	 4.800e-02 
1.82083 	 5.761e-03 	 1.259e-02 	 4.800e-02 
1.82917 	 3.996e-03 	 8.353e-03 	 2.400e-02 
1.83750 	 2.828e-03 	 1.143e-02 	 7.200e-02 
1.84583 	 4.204e-03 	 9.312e-03 	 7.200e-02 
1.85417 	 3.611e-03 	 1.030e-02 	 3.600e-02 
1.86250 	 3.579e-03 	 1.436e-02 	 8.400e-02 
1.87083 	 4.638e-03 	 9.188e-03 	 4.800e-02 
1.87917 	 1.893e-03 	 6.098e-03 	 4.800e-02 
1.88750 	 2.680e-03 	 8.095e-03 	 2.400e-02 
1.89583 	 4.251e-03 	 7.052e-03 	 3.600e-02 
1.90417 	 1.844e-03 	 9.027e-03 	 8.400e-02 
1.91250 	 2.872e-03 	 6.990e-03 	 1.200e-02 
1.92083 	 2.847e-03 	 1.193e-02 	 6.000e-02 
1.92917 	 2.309e-03 	 7.920e-03 	 1.200e-02 
1.93750 	 3.816e-03 	 8.872e-03 	 2.400e-02 
1.94583 	 3.783e-03 	 1.080e-02 	 9.600e-02 
1.95417 	 3.001e-03 	 1.368e-02 	 4.800e-02 
1.96250 	 2.727e-03 	 6.812e-03 	 1.200e-02 
1.97083 	 2.950e-03 	 8.722e-03 	 3.600e-02 
1.97917 	 3.169e-03 	 4.825e-03 	 9.600e-02 
1.98750 	 3.626e-03 	 7.687e-03 	 8.400e-02 
1.99583 	 2.637e-03 	 5.742e-03 	 2.400e-02 
2.00417 	 3.148e-01 	 7.795e-01 	 4.368e+00 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
double	i_photon;   /* current photon */
double	W;          /* photon weight */
double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */
double	Fsph;       /* fluence in spherical shell */
double	Fcyl;       /* fluence in cylindrical shell */
double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
double	Nphotons;   /* number of photons in simulation */
short	NR;         /* number of radial positions */
double	radial_size;  /* maximum radial size */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
double  rnd;        /* assigned random value 0-1 */
double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.0;     /* cm^-1 */
mus         = 0.0;  /* cm^-1 */
g           = 0.90;  
nt          = 1.33;
Nphotons    = 1e4; /* set number of photons in simulation */
radial_size = 2.0;   /* cm, total range over which bins extend */
NR          = 240;	 /* set number of bins.  */
   /* IF NR IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR + 1. */
dr          = radial_size/NR;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
i_photon = 0;
InitRandomGen;
for (ir=0; ir<=NR; ir++) {
   Csph[ir] = 0;
   Ccyl[ir] = 0;
   Cpla[ir] = 0;
   }
   
/**** RUN
   Launch N photons, initializing each one before progation.
*****/
do {


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements an isotropic point source.
*****/
i_photon += 1;	/* increment photon count */
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = 0;                      /* Set photon position to origin. */
y = 0;
z = 0;

/* Randomly set photon trajectory to yield an isotropic source. */
costheta = 2.0*RandomNum - 1.0;   
sintheta = sqrt(1.0 - costheta*costheta);	/* sintheta is always positive */
psi = 2.0*PI*RandomNum;
ux = sintheta*cos(psi);
uy = sintheta*sin(psi);
uz = costheta;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR) ir = NR;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR) ir = NR;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR) ir = NR;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */
   

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */
while (i_photon < Nphotons);


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
target = fopen("mc321_out.txt", "w");

/* print header */
fprintf(target, "number of photons = %f\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %4.3e \t %4.3e \t %4.3e \n", r, Fsph, Fcyl, Fpla);
  	}

fclose(target);


} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC

