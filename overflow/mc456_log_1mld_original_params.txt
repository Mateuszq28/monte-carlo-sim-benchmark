time elapsed: 290.9062 seconds

=================================

sim results:

number of photons = 1000000000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 0.000e+00 	 0.000e+00 	 2.729e-01 
0.01250 	 0.000e+00 	 0.000e+00 	 2.732e-01 
0.02083 	 0.000e+00 	 0.000e+00 	 2.729e-01 
0.02917 	 0.000e+00 	 0.000e+00 	 2.731e-01 
0.03750 	 0.000e+00 	 0.000e+00 	 2.731e-01 
0.04583 	 0.000e+00 	 0.000e+00 	 2.732e-01 
0.05417 	 0.000e+00 	 0.000e+00 	 2.734e-01 
0.06250 	 0.000e+00 	 0.000e+00 	 2.734e-01 
0.07083 	 0.000e+00 	 0.000e+00 	 2.735e-01 
0.07917 	 0.000e+00 	 0.000e+00 	 2.737e-01 
0.08750 	 0.000e+00 	 0.000e+00 	 2.740e-01 
0.09583 	 0.000e+00 	 0.000e+00 	 2.742e-01 
0.10417 	 0.000e+00 	 0.000e+00 	 2.743e-01 
0.11250 	 0.000e+00 	 0.000e+00 	 2.747e-01 
0.12083 	 0.000e+00 	 0.000e+00 	 2.751e-01 
0.12917 	 0.000e+00 	 0.000e+00 	 2.751e-01 
0.13750 	 0.000e+00 	 0.000e+00 	 2.754e-01 
0.14583 	 0.000e+00 	 0.000e+00 	 2.759e-01 
0.15417 	 0.000e+00 	 0.000e+00 	 2.764e-01 
0.16250 	 0.000e+00 	 0.000e+00 	 2.765e-01 
0.17083 	 0.000e+00 	 0.000e+00 	 2.769e-01 
0.17917 	 0.000e+00 	 0.000e+00 	 2.773e-01 
0.18750 	 0.000e+00 	 0.000e+00 	 2.777e-01 
0.19583 	 0.000e+00 	 0.000e+00 	 2.781e-01 
0.20417 	 0.000e+00 	 0.000e+00 	 2.783e-01 
0.21250 	 0.000e+00 	 0.000e+00 	 2.792e-01 
0.22083 	 0.000e+00 	 0.000e+00 	 2.799e-01 
0.22917 	 0.000e+00 	 0.000e+00 	 2.802e-01 
0.23750 	 0.000e+00 	 0.000e+00 	 2.805e-01 
0.24583 	 0.000e+00 	 0.000e+00 	 2.811e-01 
0.25417 	 0.000e+00 	 0.000e+00 	 2.819e-01 
0.26250 	 0.000e+00 	 0.000e+00 	 2.824e-01 
0.27083 	 0.000e+00 	 0.000e+00 	 2.833e-01 
0.27917 	 0.000e+00 	 0.000e+00 	 2.837e-01 
0.28750 	 0.000e+00 	 0.000e+00 	 2.840e-01 
0.29583 	 0.000e+00 	 0.000e+00 	 2.851e-01 
0.30417 	 0.000e+00 	 0.000e+00 	 2.858e-01 
0.31250 	 0.000e+00 	 0.000e+00 	 2.864e-01 
0.32083 	 0.000e+00 	 0.000e+00 	 2.874e-01 
0.32917 	 0.000e+00 	 0.000e+00 	 2.876e-01 
0.33750 	 0.000e+00 	 0.000e+00 	 2.887e-01 
0.34583 	 0.000e+00 	 0.000e+00 	 2.894e-01 
0.35417 	 0.000e+00 	 0.000e+00 	 2.903e-01 
0.36250 	 0.000e+00 	 0.000e+00 	 2.912e-01 
0.37083 	 0.000e+00 	 0.000e+00 	 2.919e-01 
0.37917 	 0.000e+00 	 0.000e+00 	 2.928e-01 
0.38750 	 0.000e+00 	 0.000e+00 	 2.938e-01 
0.39583 	 0.000e+00 	 0.000e+00 	 2.948e-01 
0.40417 	 0.000e+00 	 0.000e+00 	 2.954e-01 
0.41250 	 0.000e+00 	 0.000e+00 	 2.964e-01 
0.42083 	 0.000e+00 	 0.000e+00 	 2.974e-01 
0.42917 	 0.000e+00 	 0.000e+00 	 2.985e-01 
0.43750 	 0.000e+00 	 0.000e+00 	 2.995e-01 
0.44583 	 0.000e+00 	 0.000e+00 	 3.006e-01 
0.45417 	 0.000e+00 	 0.000e+00 	 3.017e-01 
0.46250 	 0.000e+00 	 0.000e+00 	 3.027e-01 
0.47083 	 0.000e+00 	 0.000e+00 	 3.040e-01 
0.47917 	 0.000e+00 	 0.000e+00 	 3.049e-01 
0.48750 	 0.000e+00 	 0.000e+00 	 3.062e-01 
0.49583 	 0.000e+00 	 0.000e+00 	 3.073e-01 
0.50417 	 0.000e+00 	 0.000e+00 	 3.082e-01 
0.51250 	 0.000e+00 	 0.000e+00 	 3.096e-01 
0.52083 	 0.000e+00 	 0.000e+00 	 3.108e-01 
0.52917 	 0.000e+00 	 0.000e+00 	 3.119e-01 
0.53750 	 0.000e+00 	 0.000e+00 	 3.131e-01 
0.54583 	 0.000e+00 	 0.000e+00 	 3.145e-01 
0.55417 	 0.000e+00 	 0.000e+00 	 3.158e-01 
0.56250 	 0.000e+00 	 0.000e+00 	 3.173e-01 
0.57083 	 0.000e+00 	 0.000e+00 	 3.183e-01 
0.57917 	 0.000e+00 	 0.000e+00 	 3.202e-01 
0.58750 	 0.000e+00 	 0.000e+00 	 3.214e-01 
0.59583 	 0.000e+00 	 0.000e+00 	 3.228e-01 
0.60417 	 0.000e+00 	 0.000e+00 	 3.246e-01 
0.61250 	 0.000e+00 	 0.000e+00 	 3.257e-01 
0.62083 	 0.000e+00 	 0.000e+00 	 3.273e-01 
0.62917 	 0.000e+00 	 0.000e+00 	 3.287e-01 
0.63750 	 0.000e+00 	 0.000e+00 	 3.306e-01 
0.64583 	 0.000e+00 	 0.000e+00 	 3.319e-01 
0.65417 	 0.000e+00 	 0.000e+00 	 3.335e-01 
0.66250 	 0.000e+00 	 0.000e+00 	 3.347e-01 
0.67083 	 0.000e+00 	 0.000e+00 	 3.365e-01 
0.67917 	 0.000e+00 	 0.000e+00 	 3.383e-01 
0.68750 	 0.000e+00 	 0.000e+00 	 3.398e-01 
0.69583 	 0.000e+00 	 0.000e+00 	 3.420e-01 
0.70417 	 0.000e+00 	 0.000e+00 	 3.435e-01 
0.71250 	 0.000e+00 	 0.000e+00 	 3.450e-01 
0.72083 	 0.000e+00 	 0.000e+00 	 3.472e-01 
0.72917 	 0.000e+00 	 0.000e+00 	 3.487e-01 
0.73750 	 0.000e+00 	 0.000e+00 	 3.507e-01 
0.74583 	 0.000e+00 	 0.000e+00 	 3.523e-01 
0.75417 	 0.000e+00 	 0.000e+00 	 3.543e-01 
0.76250 	 0.000e+00 	 0.000e+00 	 3.560e-01 
0.77083 	 0.000e+00 	 0.000e+00 	 3.580e-01 
0.77917 	 0.000e+00 	 0.000e+00 	 3.601e-01 
0.78750 	 0.000e+00 	 0.000e+00 	 3.619e-01 
0.79583 	 0.000e+00 	 0.000e+00 	 3.641e-01 
0.80417 	 0.000e+00 	 0.000e+00 	 3.661e-01 
0.81250 	 0.000e+00 	 0.000e+00 	 3.679e-01 
0.82083 	 0.000e+00 	 0.000e+00 	 3.701e-01 
0.82917 	 0.000e+00 	 0.000e+00 	 3.724e-01 
0.83750 	 0.000e+00 	 0.000e+00 	 3.746e-01 
0.84583 	 0.000e+00 	 0.000e+00 	 3.766e-01 
0.85417 	 0.000e+00 	 0.000e+00 	 3.784e-01 
0.86250 	 0.000e+00 	 0.000e+00 	 3.814e-01 
0.87083 	 0.000e+00 	 0.000e+00 	 3.833e-01 
0.87917 	 0.000e+00 	 0.000e+00 	 3.851e-01 
0.88750 	 0.000e+00 	 0.000e+00 	 3.875e-01 
0.89583 	 0.000e+00 	 0.000e+00 	 3.899e-01 
0.90417 	 0.000e+00 	 0.000e+00 	 3.924e-01 
0.91250 	 0.000e+00 	 0.000e+00 	 3.946e-01 
0.92083 	 0.000e+00 	 0.000e+00 	 3.971e-01 
0.92917 	 0.000e+00 	 0.000e+00 	 3.997e-01 
0.93750 	 0.000e+00 	 0.000e+00 	 4.021e-01 
0.94583 	 0.000e+00 	 0.000e+00 	 4.045e-01 
0.95417 	 0.000e+00 	 0.000e+00 	 4.071e-01 
0.96250 	 0.000e+00 	 0.000e+00 	 4.098e-01 
0.97083 	 0.000e+00 	 0.000e+00 	 4.117e-01 
0.97917 	 0.000e+00 	 0.000e+00 	 4.144e-01 
0.98750 	 0.000e+00 	 0.000e+00 	 4.174e-01 
0.99583 	 0.000e+00 	 0.000e+00 	 4.195e-01 
1.00417 	 0.000e+00 	 0.000e+00 	 4.222e-01 
1.01250 	 0.000e+00 	 0.000e+00 	 4.253e-01 
1.02083 	 0.000e+00 	 0.000e+00 	 4.277e-01 
1.02917 	 0.000e+00 	 0.000e+00 	 4.310e-01 
1.03750 	 0.000e+00 	 0.000e+00 	 4.333e-01 
1.04583 	 1.158e-01 	 1.826e+01 	 4.359e-01 
1.05417 	 2.182e-01 	 0.000e+00 	 4.391e-01 
1.06250 	 1.237e-01 	 0.000e+00 	 4.419e-01 
1.07083 	 9.661e-02 	 0.000e+00 	 4.449e-01 
1.07917 	 8.201e-02 	 0.000e+00 	 4.482e-01 
1.08750 	 7.252e-02 	 0.000e+00 	 4.512e-01 
1.09583 	 6.570e-02 	 0.000e+00 	 4.540e-01 
1.10417 	 6.047e-02 	 0.000e+00 	 4.568e-01 
1.11250 	 5.634e-02 	 0.000e+00 	 4.600e-01 
1.12083 	 5.296e-02 	 0.000e+00 	 4.631e-01 
1.12917 	 5.008e-02 	 0.000e+00 	 4.663e-01 
1.13750 	 4.767e-02 	 0.000e+00 	 4.696e-01 
1.14583 	 4.557e-02 	 0.000e+00 	 4.726e-01 
1.15417 	 4.371e-02 	 0.000e+00 	 4.761e-01 
1.16250 	 4.206e-02 	 0.000e+00 	 4.786e-01 
1.17083 	 4.057e-02 	 0.000e+00 	 4.825e-01 
1.17917 	 3.927e-02 	 0.000e+00 	 4.859e-01 
1.18750 	 3.807e-02 	 0.000e+00 	 4.896e-01 
1.19583 	 3.698e-02 	 0.000e+00 	 4.929e-01 
1.20417 	 3.599e-02 	 0.000e+00 	 4.964e-01 
1.21250 	 3.508e-02 	 0.000e+00 	 4.992e-01 
1.22083 	 3.422e-02 	 0.000e+00 	 5.031e-01 
1.22917 	 3.344e-02 	 0.000e+00 	 5.064e-01 
1.23750 	 3.269e-02 	 0.000e+00 	 5.101e-01 
1.24583 	 3.200e-02 	 0.000e+00 	 5.131e-01 
1.25417 	 3.138e-02 	 0.000e+00 	 5.171e-01 
1.26250 	 3.079e-02 	 0.000e+00 	 5.209e-01 
1.27083 	 3.022e-02 	 0.000e+00 	 5.249e-01 
1.27917 	 2.969e-02 	 0.000e+00 	 5.283e-01 
1.28750 	 2.919e-02 	 0.000e+00 	 5.323e-01 
1.29583 	 2.870e-02 	 0.000e+00 	 5.362e-01 
1.30417 	 2.828e-02 	 0.000e+00 	 5.399e-01 
1.31250 	 2.785e-02 	 0.000e+00 	 5.437e-01 
1.32083 	 2.745e-02 	 0.000e+00 	 5.475e-01 
1.32917 	 2.705e-02 	 0.000e+00 	 5.509e-01 
1.33750 	 2.671e-02 	 0.000e+00 	 5.557e-01 
1.34583 	 2.637e-02 	 0.000e+00 	 5.599e-01 
1.35417 	 2.603e-02 	 0.000e+00 	 5.640e-01 
1.36250 	 2.572e-02 	 0.000e+00 	 5.679e-01 
1.37083 	 2.540e-02 	 0.000e+00 	 5.721e-01 
1.37917 	 2.512e-02 	 0.000e+00 	 5.763e-01 
1.38750 	 2.485e-02 	 0.000e+00 	 5.799e-01 
1.39583 	 2.458e-02 	 0.000e+00 	 5.850e-01 
1.40417 	 2.433e-02 	 0.000e+00 	 5.895e-01 
1.41250 	 2.410e-02 	 0.000e+00 	 5.931e-01 
1.42083 	 2.388e-02 	 0.000e+00 	 5.982e-01 
1.42917 	 2.362e-02 	 0.000e+00 	 6.025e-01 
1.43750 	 2.341e-02 	 0.000e+00 	 6.070e-01 
1.44583 	 2.320e-02 	 0.000e+00 	 6.115e-01 
1.45417 	 2.300e-02 	 0.000e+00 	 6.165e-01 
1.46250 	 2.282e-02 	 0.000e+00 	 6.208e-01 
1.47083 	 2.264e-02 	 0.000e+00 	 6.253e-01 
1.47917 	 2.244e-02 	 0.000e+00 	 6.301e-01 
1.48750 	 2.228e-02 	 0.000e+00 	 6.349e-01 
1.49583 	 2.211e-02 	 0.000e+00 	 6.394e-01 
1.50417 	 2.197e-02 	 0.000e+00 	 6.441e-01 
1.51250 	 2.182e-02 	 0.000e+00 	 6.497e-01 
1.52083 	 2.166e-02 	 0.000e+00 	 6.537e-01 
1.52917 	 2.151e-02 	 0.000e+00 	 6.592e-01 
1.53750 	 2.138e-02 	 0.000e+00 	 6.645e-01 
1.54583 	 2.125e-02 	 0.000e+00 	 6.694e-01 
1.55417 	 2.112e-02 	 0.000e+00 	 6.747e-01 
1.56250 	 2.099e-02 	 0.000e+00 	 6.797e-01 
1.57083 	 2.087e-02 	 0.000e+00 	 6.854e-01 
1.57917 	 2.077e-02 	 0.000e+00 	 6.901e-01 
1.58750 	 2.067e-02 	 0.000e+00 	 6.950e-01 
1.59583 	 2.055e-02 	 0.000e+00 	 7.006e-01 
1.60417 	 2.043e-02 	 0.000e+00 	 7.061e-01 
1.61250 	 2.034e-02 	 0.000e+00 	 7.113e-01 
1.62083 	 2.023e-02 	 0.000e+00 	 7.167e-01 
1.62917 	 2.012e-02 	 0.000e+00 	 7.226e-01 
1.63750 	 2.005e-02 	 0.000e+00 	 7.283e-01 
1.64583 	 1.996e-02 	 0.000e+00 	 7.332e-01 
1.65417 	 1.986e-02 	 0.000e+00 	 7.398e-01 
1.66250 	 1.980e-02 	 0.000e+00 	 7.454e-01 
1.67083 	 1.971e-02 	 0.000e+00 	 7.509e-01 
1.67917 	 1.963e-02 	 0.000e+00 	 7.569e-01 
1.68750 	 1.955e-02 	 0.000e+00 	 7.627e-01 
1.69583 	 1.947e-02 	 0.000e+00 	 7.688e-01 
1.70417 	 1.941e-02 	 0.000e+00 	 7.757e-01 
1.71250 	 1.935e-02 	 0.000e+00 	 7.808e-01 
1.72083 	 1.928e-02 	 0.000e+00 	 7.875e-01 
1.72917 	 1.921e-02 	 0.000e+00 	 7.936e-01 
1.73750 	 1.915e-02 	 0.000e+00 	 7.994e-01 
1.74583 	 1.910e-02 	 0.000e+00 	 8.055e-01 
1.75417 	 1.904e-02 	 0.000e+00 	 8.121e-01 
1.76250 	 1.899e-02 	 0.000e+00 	 8.188e-01 
1.77083 	 1.893e-02 	 0.000e+00 	 8.248e-01 
1.77917 	 1.888e-02 	 0.000e+00 	 8.315e-01 
1.78750 	 1.884e-02 	 0.000e+00 	 8.389e-01 
1.79583 	 1.880e-02 	 0.000e+00 	 8.450e-01 
1.80417 	 1.874e-02 	 0.000e+00 	 8.517e-01 
1.81250 	 1.870e-02 	 0.000e+00 	 8.580e-01 
1.82083 	 1.865e-02 	 0.000e+00 	 8.649e-01 
1.82917 	 1.860e-02 	 0.000e+00 	 8.714e-01 
1.83750 	 1.858e-02 	 0.000e+00 	 8.785e-01 
1.84583 	 1.853e-02 	 0.000e+00 	 8.859e-01 
1.85417 	 1.850e-02 	 0.000e+00 	 8.934e-01 
1.86250 	 1.848e-02 	 0.000e+00 	 9.002e-01 
1.87083 	 1.844e-02 	 0.000e+00 	 9.073e-01 
1.87917 	 1.841e-02 	 0.000e+00 	 9.150e-01 
1.88750 	 1.838e-02 	 0.000e+00 	 9.223e-01 
1.89583 	 1.835e-02 	 0.000e+00 	 9.293e-01 
1.90417 	 1.831e-02 	 0.000e+00 	 9.365e-01 
1.91250 	 1.829e-02 	 0.000e+00 	 9.432e-01 
1.92083 	 1.826e-02 	 0.000e+00 	 9.517e-01 
1.92917 	 1.823e-02 	 0.000e+00 	 9.593e-01 
1.93750 	 1.821e-02 	 0.000e+00 	 9.670e-01 
1.94583 	 1.820e-02 	 0.000e+00 	 9.750e-01 
1.95417 	 1.816e-02 	 0.000e+00 	 9.831e-01 
1.96250 	 1.817e-02 	 0.000e+00 	 9.910e-01 
1.97083 	 1.813e-02 	 0.000e+00 	 9.985e-01 
1.97917 	 1.811e-02 	 0.000e+00 	 1.006e+00 
1.98750 	 1.810e-02 	 0.000e+00 	 1.015e+00 
1.99583 	 1.810e-02 	 0.000e+00 	 1.853e-02 
2.00417 	 6.554e-01 	 0.000e+00 	 2.215e+00 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   0.01		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, double cube_overflow);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
double	W;          /* photon weight */
double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
double (*Cube)[MAX_XY][MAX_Z] = (double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

double cube_overflow;
double	Fsph;       /* fluence in spherical shell */
double	Fcyl;       /* fluence in cylindrical shell */
double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
double  rnd;        /* assigned random value 0-1 */
double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 1.0;     /* cm^-1 */
mus         = 0.0;  /* cm^-1 */
g           = 0.9;  
nt          = 1.33;
Nphotons    = 1e9; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %4.3e \t %4.3e \t %4.3e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);

fclose(target);



save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, double arr[180][180][240], int x, int y, int z, long long Nphotons, double cube_overflow) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %4.3e,\n", cube_overflow);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%4.3e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);