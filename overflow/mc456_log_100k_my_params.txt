time elapsed: 23.9545 seconds

=================================

sim results:

number of photons = 100000
bin size = 0.00833 [cm] 
last row is overflow. Ignore.
r [cm] 	 Fsph [1/cm2] 	 Fcyl [1/cm2] 	 Fpla [1/cm2]
0.00417 	 7.684e-02 	 1.603e-01 	 2.692e-01 
0.01250 	 1.981e-02 	 1.678e-01 	 2.685e-01 
0.02083 	 1.786e-02 	 1.700e-01 	 2.697e-01 
0.02917 	 8.897e-03 	 1.611e-01 	 2.730e-01 
0.03750 	 8.482e-03 	 1.570e-01 	 2.699e-01 
0.04583 	 7.388e-03 	 1.611e-01 	 2.678e-01 
0.05417 	 9.691e-03 	 1.650e-01 	 2.704e-01 
0.06250 	 8.186e-03 	 1.601e-01 	 2.733e-01 
0.07083 	 1.171e-02 	 1.629e-01 	 2.716e-01 
0.07917 	 9.870e-03 	 1.621e-01 	 2.709e-01 
0.08750 	 1.077e-02 	 1.652e-01 	 2.762e-01 
0.09583 	 1.068e-02 	 1.610e-01 	 2.702e-01 
0.10417 	 9.170e-03 	 1.646e-01 	 2.744e-01 
0.11250 	 1.075e-02 	 1.639e-01 	 2.767e-01 
0.12083 	 1.055e-02 	 1.600e-01 	 2.719e-01 
0.12917 	 9.626e-03 	 1.624e-01 	 2.747e-01 
0.13750 	 9.906e-03 	 1.662e-01 	 2.750e-01 
0.14583 	 1.095e-02 	 1.679e-01 	 2.734e-01 
0.15417 	 1.087e-02 	 1.654e-01 	 2.769e-01 
0.16250 	 9.907e-03 	 1.666e-01 	 2.782e-01 
0.17083 	 9.310e-03 	 1.672e-01 	 2.802e-01 
0.17917 	 1.039e-02 	 1.633e-01 	 2.808e-01 
0.18750 	 1.045e-02 	 1.674e-01 	 2.844e-01 
0.19583 	 1.086e-02 	 1.626e-01 	 2.831e-01 
0.20417 	 1.103e-02 	 1.668e-01 	 2.871e-01 
0.21250 	 1.034e-02 	 1.679e-01 	 2.875e-01 
0.22083 	 1.072e-02 	 1.708e-01 	 2.905e-01 
0.22917 	 1.168e-02 	 1.671e-01 	 2.880e-01 
0.23750 	 1.127e-02 	 1.673e-01 	 2.921e-01 
0.24583 	 1.142e-02 	 1.690e-01 	 2.889e-01 
0.25417 	 1.197e-02 	 1.708e-01 	 2.901e-01 
0.26250 	 1.116e-02 	 1.673e-01 	 3.003e-01 
0.27083 	 1.174e-02 	 1.666e-01 	 3.002e-01 
0.27917 	 1.173e-02 	 1.722e-01 	 2.998e-01 
0.28750 	 1.154e-02 	 1.703e-01 	 3.007e-01 
0.29583 	 1.136e-02 	 1.727e-01 	 3.084e-01 
0.30417 	 1.168e-02 	 1.752e-01 	 3.056e-01 
0.31250 	 1.160e-02 	 1.747e-01 	 3.108e-01 
0.32083 	 1.085e-02 	 1.735e-01 	 3.137e-01 
0.32917 	 1.136e-02 	 1.756e-01 	 3.145e-01 
0.33750 	 1.223e-02 	 1.775e-01 	 3.182e-01 
0.34583 	 1.183e-02 	 1.763e-01 	 3.232e-01 
0.35417 	 1.208e-02 	 1.759e-01 	 3.204e-01 
0.36250 	 1.164e-02 	 1.773e-01 	 3.260e-01 
0.37083 	 1.201e-02 	 1.762e-01 	 3.274e-01 
0.37917 	 1.184e-02 	 1.790e-01 	 3.307e-01 
0.38750 	 1.229e-02 	 1.792e-01 	 3.326e-01 
0.39583 	 1.228e-02 	 1.795e-01 	 3.392e-01 
0.40417 	 1.203e-02 	 1.785e-01 	 3.416e-01 
0.41250 	 1.209e-02 	 1.811e-01 	 3.419e-01 
0.42083 	 1.187e-02 	 1.838e-01 	 3.438e-01 
0.42917 	 1.217e-02 	 1.848e-01 	 3.494e-01 
0.43750 	 1.227e-02 	 1.866e-01 	 3.513e-01 
0.44583 	 1.252e-02 	 1.855e-01 	 3.560e-01 
0.45417 	 1.247e-02 	 1.862e-01 	 3.620e-01 
0.46250 	 1.253e-02 	 1.875e-01 	 3.603e-01 
0.47083 	 1.268e-02 	 1.877e-01 	 3.663e-01 
0.47917 	 1.268e-02 	 1.894e-01 	 3.674e-01 
0.48750 	 1.297e-02 	 1.893e-01 	 3.719e-01 
0.49583 	 1.284e-02 	 1.932e-01 	 3.763e-01 
0.50417 	 1.280e-02 	 1.911e-01 	 3.775e-01 
0.51250 	 1.292e-02 	 1.937e-01 	 3.858e-01 
0.52083 	 1.332e-02 	 1.953e-01 	 3.843e-01 
0.52917 	 1.269e-02 	 1.982e-01 	 3.877e-01 
0.53750 	 1.303e-02 	 1.967e-01 	 3.936e-01 
0.54583 	 1.267e-02 	 1.962e-01 	 3.956e-01 
0.55417 	 1.314e-02 	 2.016e-01 	 3.957e-01 
0.56250 	 1.280e-02 	 2.024e-01 	 4.034e-01 
0.57083 	 1.273e-02 	 2.015e-01 	 4.075e-01 
0.57917 	 1.299e-02 	 2.067e-01 	 4.099e-01 
0.58750 	 1.309e-02 	 2.060e-01 	 4.157e-01 
0.59583 	 1.320e-02 	 2.076e-01 	 4.220e-01 
0.60417 	 1.304e-02 	 2.090e-01 	 4.250e-01 
0.61250 	 1.354e-02 	 2.092e-01 	 4.303e-01 
0.62083 	 1.338e-02 	 2.125e-01 	 4.382e-01 
0.62917 	 1.367e-02 	 2.122e-01 	 4.369e-01 
0.63750 	 1.353e-02 	 2.124e-01 	 4.482e-01 
0.64583 	 1.381e-02 	 2.136e-01 	 4.555e-01 
0.65417 	 1.382e-02 	 2.165e-01 	 4.545e-01 
0.66250 	 1.398e-02 	 2.188e-01 	 4.610e-01 
0.67083 	 1.364e-02 	 2.228e-01 	 4.658e-01 
0.67917 	 1.373e-02 	 2.227e-01 	 4.705e-01 
0.68750 	 1.398e-02 	 2.257e-01 	 4.811e-01 
0.69583 	 1.386e-02 	 2.250e-01 	 4.779e-01 
0.70417 	 1.407e-02 	 2.272e-01 	 4.847e-01 
0.71250 	 1.407e-02 	 2.294e-01 	 4.891e-01 
0.72083 	 1.407e-02 	 2.329e-01 	 5.057e-01 
0.72917 	 1.432e-02 	 2.339e-01 	 5.007e-01 
0.73750 	 1.428e-02 	 2.382e-01 	 5.138e-01 
0.74583 	 1.446e-02 	 2.377e-01 	 5.143e-01 
0.75417 	 1.402e-02 	 2.396e-01 	 5.258e-01 
0.76250 	 1.447e-02 	 2.453e-01 	 5.291e-01 
0.77083 	 1.431e-02 	 2.470e-01 	 5.372e-01 
0.77917 	 1.505e-02 	 2.502e-01 	 5.396e-01 
0.78750 	 1.490e-02 	 2.504e-01 	 5.541e-01 
0.79583 	 1.492e-02 	 2.566e-01 	 5.587e-01 
0.80417 	 1.517e-02 	 2.551e-01 	 5.661e-01 
0.81250 	 1.519e-02 	 2.581e-01 	 5.734e-01 
0.82083 	 1.451e-02 	 2.630e-01 	 5.794e-01 
0.82917 	 1.524e-02 	 2.665e-01 	 5.875e-01 
0.83750 	 1.505e-02 	 2.658e-01 	 5.941e-01 
0.84583 	 1.529e-02 	 2.748e-01 	 5.989e-01 
0.85417 	 1.558e-02 	 2.741e-01 	 6.034e-01 
0.86250 	 1.575e-02 	 2.824e-01 	 6.101e-01 
0.87083 	 1.607e-02 	 2.832e-01 	 6.170e-01 
0.87917 	 1.569e-02 	 2.870e-01 	 6.280e-01 
0.88750 	 1.612e-02 	 2.923e-01 	 6.400e-01 
0.89583 	 1.601e-02 	 2.986e-01 	 6.469e-01 
0.90417 	 1.635e-02 	 3.037e-01 	 6.622e-01 
0.91250 	 1.661e-02 	 3.072e-01 	 6.689e-01 
0.92083 	 1.652e-02 	 3.155e-01 	 6.679e-01 
0.92917 	 1.668e-02 	 3.203e-01 	 6.802e-01 
0.93750 	 1.675e-02 	 3.308e-01 	 6.901e-01 
0.94583 	 1.669e-02 	 3.377e-01 	 7.061e-01 
0.95417 	 1.705e-02 	 3.452e-01 	 7.092e-01 
0.96250 	 1.728e-02 	 3.543e-01 	 7.237e-01 
0.97083 	 1.701e-02 	 3.647e-01 	 7.329e-01 
0.97917 	 1.687e-02 	 3.765e-01 	 7.407e-01 
0.98750 	 1.738e-02 	 3.930e-01 	 7.429e-01 
0.99583 	 1.772e-02 	 4.101e-01 	 7.585e-01 
1.00417 	 1.750e-02 	 4.332e-01 	 7.662e-01 
1.01250 	 1.752e-02 	 4.624e-01 	 7.740e-01 
1.02083 	 1.811e-02 	 5.080e-01 	 7.831e-01 
1.02917 	 1.795e-02 	 5.676e-01 	 7.922e-01 
1.03750 	 1.818e-02 	 6.858e-01 	 8.021e-01 
1.04583 	 1.841e-02 	 1.989e+00 	 8.184e-01 
1.05417 	 1.857e-02 	 9.270e-01 	 8.245e-01 
1.06250 	 1.845e-02 	 6.318e-01 	 8.489e-01 
1.07083 	 1.854e-02 	 5.335e-01 	 8.585e-01 
1.07917 	 1.846e-02 	 4.766e-01 	 8.635e-01 
1.08750 	 1.857e-02 	 4.369e-01 	 8.724e-01 
1.09583 	 1.890e-02 	 4.070e-01 	 8.919e-01 
1.10417 	 1.919e-02 	 3.839e-01 	 8.878e-01 
1.11250 	 1.912e-02 	 3.640e-01 	 9.078e-01 
1.12083 	 1.926e-02 	 3.493e-01 	 9.331e-01 
1.12917 	 1.945e-02 	 3.329e-01 	 9.280e-01 
1.13750 	 1.924e-02 	 3.196e-01 	 9.447e-01 
1.14583 	 1.939e-02 	 3.119e-01 	 9.494e-01 
1.15417 	 1.993e-02 	 3.001e-01 	 9.663e-01 
1.16250 	 2.000e-02 	 2.935e-01 	 9.811e-01 
1.17083 	 2.034e-02 	 2.812e-01 	 1.004e+00 
1.17917 	 2.029e-02 	 2.743e-01 	 1.019e+00 
1.18750 	 2.028e-02 	 2.674e-01 	 1.025e+00 
1.19583 	 2.068e-02 	 2.615e-01 	 1.040e+00 
1.20417 	 2.089e-02 	 2.549e-01 	 1.062e+00 
1.21250 	 2.109e-02 	 2.491e-01 	 1.066e+00 
1.22083 	 2.118e-02 	 2.411e-01 	 1.092e+00 
1.22917 	 2.147e-02 	 2.356e-01 	 1.089e+00 
1.23750 	 2.181e-02 	 2.291e-01 	 1.100e+00 
1.24583 	 2.227e-02 	 2.255e-01 	 1.120e+00 
1.25417 	 2.219e-02 	 2.211e-01 	 1.136e+00 
1.26250 	 2.199e-02 	 2.157e-01 	 1.152e+00 
1.27083 	 2.212e-02 	 2.095e-01 	 1.166e+00 
1.27917 	 2.267e-02 	 2.078e-01 	 1.188e+00 
1.28750 	 2.271e-02 	 2.017e-01 	 1.203e+00 
1.29583 	 2.296e-02 	 1.957e-01 	 1.217e+00 
1.30417 	 2.293e-02 	 1.928e-01 	 1.252e+00 
1.31250 	 2.315e-02 	 1.886e-01 	 1.251e+00 
1.32083 	 2.322e-02 	 1.878e-01 	 1.277e+00 
1.32917 	 2.374e-02 	 1.825e-01 	 1.289e+00 
1.33750 	 2.386e-02 	 1.803e-01 	 1.305e+00 
1.34583 	 2.405e-02 	 1.769e-01 	 1.328e+00 
1.35417 	 2.383e-02 	 1.719e-01 	 1.349e+00 
1.36250 	 2.456e-02 	 1.701e-01 	 1.368e+00 
1.37083 	 2.516e-02 	 1.679e-01 	 1.378e+00 
1.37917 	 2.516e-02 	 1.630e-01 	 1.389e+00 
1.38750 	 2.536e-02 	 1.593e-01 	 1.423e+00 
1.39583 	 2.577e-02 	 1.567e-01 	 1.436e+00 
1.40417 	 2.547e-02 	 1.542e-01 	 1.470e+00 
1.41250 	 2.571e-02 	 1.527e-01 	 1.477e+00 
1.42083 	 2.602e-02 	 1.487e-01 	 1.498e+00 
1.42917 	 2.610e-02 	 1.467e-01 	 1.518e+00 
1.43750 	 2.637e-02 	 1.452e-01 	 1.532e+00 
1.44583 	 2.666e-02 	 1.425e-01 	 1.561e+00 
1.45417 	 2.703e-02 	 1.395e-01 	 1.578e+00 
1.46250 	 2.720e-02 	 1.368e-01 	 1.597e+00 
1.47083 	 2.733e-02 	 1.341e-01 	 1.609e+00 
1.47917 	 2.769e-02 	 1.313e-01 	 1.648e+00 
1.48750 	 2.798e-02 	 1.299e-01 	 1.676e+00 
1.49583 	 2.813e-02 	 1.266e-01 	 1.683e+00 
1.50417 	 2.819e-02 	 1.247e-01 	 1.705e+00 
1.51250 	 2.858e-02 	 1.240e-01 	 1.733e+00 
1.52083 	 2.853e-02 	 1.204e-01 	 1.741e+00 
1.52917 	 2.905e-02 	 1.195e-01 	 1.762e+00 
1.53750 	 2.905e-02 	 1.173e-01 	 1.777e+00 
1.54583 	 2.910e-02 	 1.152e-01 	 1.792e+00 
1.55417 	 2.961e-02 	 1.124e-01 	 1.810e+00 
1.56250 	 2.996e-02 	 1.103e-01 	 1.828e+00 
1.57083 	 3.032e-02 	 1.096e-01 	 1.877e+00 
1.57917 	 3.070e-02 	 1.080e-01 	 1.894e+00 
1.58750 	 3.101e-02 	 1.056e-01 	 1.912e+00 
1.59583 	 3.095e-02 	 1.049e-01 	 1.930e+00 
1.60417 	 3.125e-02 	 1.036e-01 	 1.948e+00 
1.61250 	 3.178e-02 	 1.004e-01 	 1.966e+00 
1.62083 	 3.174e-02 	 9.940e-02 	 1.991e+00 
1.62917 	 3.178e-02 	 9.659e-02 	 2.027e+00 
1.63750 	 3.216e-02 	 9.480e-02 	 2.042e+00 
1.64583 	 3.265e-02 	 9.440e-02 	 2.066e+00 
1.65417 	 3.291e-02 	 9.353e-02 	 2.099e+00 
1.66250 	 3.337e-02 	 9.082e-02 	 2.107e+00 
1.67083 	 3.354e-02 	 8.923e-02 	 2.116e+00 
1.67917 	 3.376e-02 	 8.853e-02 	 2.159e+00 
1.68750 	 3.408e-02 	 8.665e-02 	 2.177e+00 
1.69583 	 3.426e-02 	 8.462e-02 	 2.198e+00 
1.70417 	 3.465e-02 	 8.344e-02 	 2.203e+00 
1.71250 	 3.506e-02 	 8.221e-02 	 2.234e+00 
1.72083 	 3.555e-02 	 8.161e-02 	 2.242e+00 
1.72917 	 3.587e-02 	 7.929e-02 	 2.259e+00 
1.73750 	 3.605e-02 	 7.751e-02 	 2.282e+00 
1.74583 	 3.644e-02 	 7.662e-02 	 2.295e+00 
1.75417 	 3.672e-02 	 7.467e-02 	 2.319e+00 
1.76250 	 3.707e-02 	 7.380e-02 	 2.334e+00 
1.77083 	 3.740e-02 	 7.232e-02 	 2.348e+00 
1.77917 	 3.736e-02 	 7.170e-02 	 2.349e+00 
1.78750 	 3.822e-02 	 7.023e-02 	 2.359e+00 
1.79583 	 3.861e-02 	 6.992e-02 	 2.373e+00 
1.80417 	 3.871e-02 	 6.943e-02 	 2.381e+00 
1.81250 	 3.894e-02 	 6.749e-02 	 2.409e+00 
1.82083 	 4.004e-02 	 6.620e-02 	 2.420e+00 
1.82917 	 4.012e-02 	 6.537e-02 	 2.421e+00 
1.83750 	 3.970e-02 	 6.460e-02 	 2.421e+00 
1.84583 	 4.083e-02 	 6.321e-02 	 2.434e+00 
1.85417 	 4.096e-02 	 6.227e-02 	 2.444e+00 
1.86250 	 4.118e-02 	 6.204e-02 	 2.440e+00 
1.87083 	 4.158e-02 	 5.978e-02 	 2.440e+00 
1.87917 	 4.217e-02 	 5.955e-02 	 2.437e+00 
1.88750 	 4.228e-02 	 5.896e-02 	 2.439e+00 
1.89583 	 4.266e-02 	 5.758e-02 	 2.440e+00 
1.90417 	 4.292e-02 	 5.720e-02 	 2.441e+00 
1.91250 	 4.307e-02 	 5.589e-02 	 2.433e+00 
1.92083 	 4.356e-02 	 5.515e-02 	 2.432e+00 
1.92917 	 4.417e-02 	 5.434e-02 	 2.385e+00 
1.93750 	 4.454e-02 	 5.295e-02 	 2.370e+00 
1.94583 	 4.460e-02 	 5.246e-02 	 2.369e+00 
1.95417 	 4.534e-02 	 5.077e-02 	 2.324e+00 
1.96250 	 4.576e-02 	 5.056e-02 	 2.311e+00 
1.97083 	 4.598e-02 	 4.896e-02 	 2.291e+00 
1.97917 	 4.633e-02 	 4.858e-02 	 2.268e+00 
1.98750 	 4.628e-02 	 4.815e-02 	 2.215e+00 
1.99583 	 4.716e-02 	 4.746e-02 	 1.152e+00 
2.00417 	 3.992e+00 	 3.724e+00 	 7.352e+01 


=================================

code that generated this simulation:


/********************************************
 *  mc321.c    , in ANSI Standard C programing language
 *
 *  Monte Carlo simulation yielding spherical, cylindrical, and planar 
 *    responses to an isotropic point source in an infinite homogeneous 
 *    medium with no boundaries. This program is a minimal Monte Carlo 
 *    program scoring photon distributions in spherical, cylindrical, 
 *    and planar shells.
 *
 *  by Steven L. Jacques based on prior collaborative work 
 *    with Lihong Wang, Scott Prahl, and Marleen Keijzer.
 *    partially funded by the NIH (R29-HL45045, 1991-1997) and  
 *    the DOE (DE-FG05-91ER617226, DE-FG03-95ER61971, 1991-1999).
 *
 *  A published report illustrates use of the program:
 *    S. L. Jacques: "Light distributions from point, line, and plane 
 *    sources for photochemical reactions and fluorescence in turbid 
 *    biological tissues," Photochem. Photobiol. 67:23-32, 1998. 
 *
 *  Trivial fixes to remove warnings SAP, 11/2017
 **********/

#include <math.h>
#include <stdio.h>
#include <stdbool.h>

// for Cube
#define MAX_XY 180
#define MAX_Z 240

#define	PI          3.1415926
#define	LIGHTSPEED	2.997925E10 /* in vacuo speed of light [cm/s] */
#define ALIVE       1   		/* if photon not yet terminated */
#define DEAD        0    		/* if photon is to be terminated */
#define THRESHOLD   1.0E-4		/* used in roulette */
#define CHANCE      0.1  		/* used in roulette */
#define COS90D      1.0E-6
     /* If cos(theta) <= COS90D, theta >= PI/2 - 1e-6 rad. */
#define ONE_MINUS_COSZERO 1.0E-12
     /* If 1-cos(theta) <= ONE_MINUS_COSZERO, fabs(theta) <= 1e-6 rad. */
     /* If 1+cos(theta) <= ONE_MINUS_COSZERO, fabs(PI-theta) <= 1e-6 rad. */
#define SIGN(x)           ((x)>=0 ? 1:-1)
#define InitRandomGen    (double) RandomGen(0, 1, NULL)
     /* Initializes the seed for the random number generator. */     
#define RandomNum        (double) RandomGen(1, 0, NULL)
     /* Calls for a random number from the randum number generator. */

/* DECLARE FUNCTION */
double RandomGen(char Type, long Seed, long *Status);  
     /* Random number generator */

void save_3d_array_to_json(const char* filename, double arr[MAX_XY][MAX_XY][MAX_Z], int x, int y, int z, long long Nphotons, double cube_overflow);

void displayProgressBar(long long progress, long long total, long long min_step);


int main() {

/* Propagation parameters */
double	x, y, z;    /* photon position */
double	ux, uy, uz; /* photon trajectory as cosines */
double  uxx, uyy, uzz;	/* temporary values used during SPIN */
double	s;          /* step sizes. s = -log(RND)/mus [cm] */
double	costheta;   /* cos(theta) */
double  sintheta;   /* sin(theta) */
double	cospsi;     /* cos(psi) */
double  sinpsi;     /* sin(psi) */
double	psi;        /* azimuthal angle */
double	W;          /* photon weight */
double	absorb;     /* weighted deposited in a step due to absorption */
short   photon_status;  /* flag = ALIVE=1 or DEAD=0 */

/* other variables */
double	Csph[241];  /* spherical   photon concentration CC[ir=0..100] */
double	Ccyl[241];  /* cylindrical photon concentration CC[ir=0..100] */
double	Cpla[241];  /* planar      photon concentration CC[ir=0..100] */

// to avoid stack overflow
// Correct allocation with malloc
double (*Cube)[MAX_XY][MAX_Z] = (double (*)[MAX_XY][MAX_Z])malloc(MAX_XY * MAX_XY * MAX_Z * sizeof(double));
if (Cube == NULL) {
    printf("Memory allocation failed.\n");
    return 1;
}

double cube_overflow;
double	Fsph;       /* fluence in spherical shell */
double	Fcyl;       /* fluence in cylindrical shell */
double	Fpla;       /* fluence in planar shell */
double	mua;        /* absorption coefficient [cm^-1] */
double	mus;        /* scattering coefficient [cm^-1] */
double	g;          /* anisotropy [-] */
double	albedo;     /* albedo of tissue */
double	nt;         /* tissue index of refraction */
long long	Nphotons;   /* number of photons in simulation */
long long min_step_progress_bar;
short	NR_z;         /* number of z positions */
short	NR_xy;         /* number of xy positions */
double	z_size;  /* maximum z size of cube */
double	xy_size;  /* maximum xy size of cube */
double	r;          /* radial position */
double  dr;         /* radial bin size */
short	ir;         /* index to radial position */
short ix;
short iy;
short iz;
double x_start;
double y_start;
double z_start;
bool ix_is_in;
bool iy_is_in;
bool iz_is_in;
bool is_in;
double  shellvolume;  /* volume of shell at radial position r */

/* dummy variables */
double  rnd;        /* assigned random value 0-1 */
double	temp;    /* dummy variables */
FILE*	target;     /* point to output file */


/**** INPUT
   Input the optical properties
   Input the bin and array sizes 
   Input the number of photons
*****/

mua         = 0.37;     /* cm^-1 */
mus         = 23.88889;  /* cm^-1 */
g           = 0.9;  
nt          = 1.36;
Nphotons    = 1e5; /* set number of photons in simulation */
min_step_progress_bar = Nphotons/100;
z_size = 2.0;   /* cm, total range over which bins extend */
xy_size = 1.5; // cm
NR_z          = 240;	 /* set number of bins.  */
NR_xy = 180;
   /* IF NR_z IS ALTERED, THEN USER MUST ALSO ALTER THE ARRAY DECLARATION TO A SIZE = NR_z + 1. */
dr          = z_size/NR_z;  /* cm */
albedo      = mus/(mus + mua);


/**** INITIALIZATIONS 
*****/
InitRandomGen;
printf("initializing arrays with zeros...\n");
for (ir=0; ir<=NR_z; ir++) {
  Csph[ir] = 0;
  Ccyl[ir] = 0;
  Cpla[ir] = 0;
}

// [x][y][z]
for (int ix=0; ix<NR_xy; ix++)
  for (int iy=0; iy<NR_xy; iy++)
    for (int iz=0; iz<NR_z; iz++)
      Cube[ix][iy][iz] = 0;
cube_overflow = 0;
printf("initializing done...\n");

// start pos
x_start = 89 * dr;
y_start = 89 * dr;
z_start = 239 * dr;


/**** RUN
   Launch N photons, initializing each one before progation.
*****/
printf("simulation progress:\n");
for (long long i_photon = 1; i_photon <= Nphotons; i_photon++)
{
displayProgressBar(i_photon, Nphotons, min_step_progress_bar);
  


/**** LAUNCH 
   Initialize photon position and trajectory.
   Implements a point source [0,0,-1].
*****/
W = 1.0;                    /* set photon weight to one */
photon_status = ALIVE;      /* Launch an ALIVE photon */

x = x_start;    /* Set photon position to origin. */
y = y_start;
z = z_start;

/* source - vartical down [0,0,-1] */
ux = 0;
uy = 0;
uz = -1;


/* HOP_DROP_SPIN_CHECK
   Propagate one photon until it dies as determined by ROULETTE.
*******/
do {


/**** HOP
   Take step to new position
   s = stepsize
   ux, uy, uz are cosines of current photon trajectory
*****/
  while ((rnd = RandomNum) <= 0.0);   /* yields 0 < rnd <= 1 */
  s = -log(rnd)/(mua + mus);          /* Step size.  Note: log() is base e */
  x += s * ux;                        /* Update positions. */
  y += s * uy;
  z += s * uz;


/**** DROP
   Drop photon weight (W) into local bin.
*****/
   absorb = W*(1 - albedo);      /* photon weight absorbed at this step */
   W -= absorb;                  /* decrement WEIGHT by amount absorbed */
   
   /* spherical */
   r = sqrt(x*x + y*y + z*z);    /* current spherical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Csph[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* cylindrical */
   r = sqrt(x*x + y*y);          /* current cylindrical radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Ccyl[ir] += absorb;           /* DROP absorbed weight into bin */
   
   /* planar */
   r = fabs(z);                  /* current planar radial position */
   ir = (short)(r/dr);           /* ir = index to spatial bin */
   if (ir >= NR_z) ir = NR_z;        /* last bin is for overflow */
   Cpla[ir] += absorb;           /* DROP absorbed weight into bin */

  // --- cube ---
  ix = x/dr;
  iy = y/dr;
  iz = z/dr;
  ix_is_in = (0 <= ix && ix < NR_xy);
  iy_is_in = (0 <= iy && iy < NR_xy);
  iz_is_in = (0 <= iz && iz < NR_z);
  is_in = (ix_is_in && iy_is_in && iz_is_in);
  if (!is_in) cube_overflow += absorb;
  else Cube[ix][iy][iz] += absorb;

/**** SPIN 
   Scatter photon into new trajectory defined by theta and psi.
   Theta is specified by cos(theta), which is determined 
   based on the Henyey-Greenstein scattering function.
   Convert theta and psi into cosines ux, uy, uz. 
*****/
  /* Sample for costheta */
  rnd = RandomNum;
     if (g == 0.0)
        costheta = 2.0*rnd - 1.0;
     else {
        double temp = (1.0 - g*g)/(1.0 - g + 2*g*rnd);
        costheta = (1.0 + g*g - temp*temp)/(2.0*g);
        }
  sintheta = sqrt(1.0 - costheta*costheta); /* sqrt() is faster than sin(). */

  /* Sample psi. */
  psi = 2.0*PI*RandomNum;
  cospsi = cos(psi);
  if (psi < PI)
    sinpsi = sqrt(1.0 - cospsi*cospsi);     /* sqrt() is faster than sin(). */
  else
    sinpsi = -sqrt(1.0 - cospsi*cospsi);

  /* New trajectory. */
  if (1 - fabs(uz) <= ONE_MINUS_COSZERO) {      /* close to perpendicular. */
    uxx = sintheta * cospsi;
    uyy = sintheta * sinpsi;
    uzz = costheta * SIGN(uz);   /* SIGN() is faster than division. */
    } 
  else {					/* usually use this option */
    temp = sqrt(1.0 - uz * uz);
    uxx = sintheta * (ux * uz * cospsi - uy * sinpsi) / temp + ux * costheta;
    uyy = sintheta * (uy * uz * cospsi + ux * sinpsi) / temp + uy * costheta;
    uzz = -sintheta * cospsi * temp + uz * costheta;
    }
    
  /* Update trajectory */
  ux = uxx;
  uy = uyy;
  uz = uzz;


/**** CHECK ROULETTE 
   If photon weight below THRESHOLD, then terminate photon using Roulette technique.
   Photon has CHANCE probability of having its weight increased by factor of 1/CHANCE,
   and 1-CHANCE probability of terminating.
*****/
if (W < THRESHOLD) {
   if (RandomNum <= CHANCE)
      W /= CHANCE;
   else photon_status = DEAD;
   }


} /* end STEP_CHECK_HOP_SPIN */
while (photon_status == ALIVE);

  /* If photon dead, then launch new photon. */
} /* end RUN */


/**** SAVE
   Convert data to relative fluence rate [cm^-2] and save to file called "mcmin321.out".
*****/
// target = fopen("mc321.out", "w");
printf("saving data...\n");
target = fopen("mc456_out.txt", "w");

/* print header */
fprintf(target, "number of photons = %lld\n", Nphotons);
fprintf(target, "bin size = %5.5f [cm] \n", dr);
fprintf(target, "last row is overflow. Ignore.\n");

/* print column titles */
fprintf(target, "r [cm] \t Fsph [1/cm2] \t Fcyl [1/cm2] \t Fpla [1/cm2]\n");

/* print data:  radial position, fluence rates for 3D, 2D, 1D geometries */
for (ir=0; ir<=NR_z; ir++) {
  	/* r = sqrt(1.0/3 - (ir+1) + (ir+1)*(ir+1))*dr; */
  	r = (ir + 0.5)*dr;
  	shellvolume = 4.0*PI*r*r*dr; /* per spherical shell */
    Fsph = Csph[ir]/Nphotons/shellvolume/mua;
  	shellvolume = 2.0*PI*r*dr;   /* per cm length of cylinder */
    Fcyl = Ccyl[ir]/Nphotons/shellvolume/mua;
  	shellvolume = dr;            /* per cm2 area of plane */
    Fpla =Cpla[ir]/Nphotons/shellvolume/mua;
  	fprintf(target, "%5.5f \t %4.3e \t %4.3e \t %4.3e \n", r, Fsph, Fcyl, Fpla);
  	}

// Flush the buffer to ensure all data is written
fflush(target);

fclose(target);



save_3d_array_to_json("mc456_mc_cube.json", Cube, NR_xy, NR_xy, NR_z, Nphotons, cube_overflow);

} /* end of main */

 

/* SUBROUTINES */

/**************************************************************************
 *	RandomGen
 *      A random number generator that generates uniformly
 *      distributed random numbers between 0 and 1 inclusive.
 *      The algorithm is based on:
 *      W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
 *      Flannery, "Numerical Recipes in C," Cambridge University
 *      Press, 2nd edition, (1992).
 *      and
 *      D.E. Knuth, "Seminumerical Algorithms," 2nd edition, vol. 2
 *      of "The Art of Computer Programming", Addison-Wesley, (1981).
 *
 *      When Type is 0, sets Seed as the seed. Make sure 0<Seed<32000.
 *      When Type is 1, returns a random number.
 *      When Type is 2, gets the status of the generator.
 *      When Type is 3, restores the status of the generator.
 *
 *      The status of the generator is represented by Status[0..56].
 *
 *      Make sure you initialize the seed before you get random
 *      numbers.
 ****/
#define MBIG 1000000000
#define MSEED 161803398
#define MZ 0
#define FAC 1.0E-9

double RandomGen(char Type, long Seed, long *Status){
  static long i1, i2, ma[56];   /* ma[0] is not used. */
  long        mj, mk;
  short       i, ii;

  if (Type == 0) {              /* set seed. */
    mj = MSEED - (Seed < 0 ? -Seed : Seed);
    mj %= MBIG;
    ma[55] = mj;
    mk = 1;
    for (i = 1; i <= 54; i++) {
      ii = (21 * i) % 55;
      ma[ii] = mk;
      mk = mj - mk;
      if (mk < MZ)
        mk += MBIG;
      mj = ma[ii];
    }
    for (ii = 1; ii <= 4; ii++)
      for (i = 1; i <= 55; i++) {
        ma[i] -= ma[1 + (i + 30) % 55];
        if (ma[i] < MZ)
          ma[i] += MBIG;
      }
    i1 = 0;
    i2 = 31;
  } else if (Type == 1) {       /* get a number. */
    if (++i1 == 56)
      i1 = 1;
    if (++i2 == 56)
      i2 = 1;
    mj = ma[i1] - ma[i2];
    if (mj < MZ)
      mj += MBIG;
    ma[i1] = mj;
    return (mj * FAC);
  } else if (Type == 2) {       /* get status. */
    for (i = 0; i < 55; i++)
      Status[i] = ma[i + 1];
    Status[55] = i1;
    Status[56] = i2;
  } else if (Type == 3) {       /* restore status. */
    for (i = 0; i < 55; i++)
      ma[i + 1] = Status[i];
    i1 = Status[55];
    i2 = Status[56];
  } else
    puts("Wrong parameter to RandomGen().");
  return (0);
}
#undef MBIG
#undef MSEED
#undef MZ
#undef FAC



void save_3d_array_to_json(const char* filename, double arr[180][180][240], int x, int y, int z, long long Nphotons, double cube_overflow) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file!\n");
        return;
    }

    /*
    data = {
    "n_photons": Nphotons,
    "overflow": cube_overflow,
    "cube": Cube
    }
    */

    fprintf(file, "{\n");
    fprintf(file, "\"n_photons\": %lld,\n", Nphotons);
    fprintf(file, "\"overflow\": %4.3e,\n", cube_overflow);

    // Start the JSON array
    fprintf(file, "\"cube\": [\n");

    // Iterate through the 3D array
    for (int i = 0; i < x; i++) {
        fprintf(file, "  [\n");  // Start of the 2D array
        for (int j = 0; j < y; j++) {
            fprintf(file, "    [");  // Start of the 1D array
            for (int k = 0; k < z; k++) {
                fprintf(file, "%4.3e", arr[i][j][k]);
                if (k < z - 1) {
                    fprintf(file, ", ");
                }
            }
            fprintf(file, "]");  // End of the 1D array
            if (j < y - 1) {
                fprintf(file, ",\n");
            } else {
                fprintf(file, "\n");
            }
        }
        fprintf(file, "  ]");  // End of the 2D array
        if (i < x - 1) {
            fprintf(file, ",\n");
        } else {
            fprintf(file, "\n");
        }
    }

    // End the JSON array
    fprintf(file, "]\n");
    fprintf(file, "}\n");

    // Flush the buffer to ensure all data is written
    fflush(file);
    fclose(file);
}


void displayProgressBar(long long progress, long long total, long long min_step) {
    if (progress % min_step == 0)
    {
      int barWidth = 50; // Width of the progress bar
      int completed = (progress * barWidth) / total;

      printf("[");
      for (int i = 0; i < barWidth; i++) {
          if (i < completed) {
              printf("#");
          } else {
              printf(" ");
          }
      }
      printf("] %lld%%", (progress * 100) / total);
      if (progress != total) printf("\r");
      else printf("\n");
      fflush(stdout);  // Force the output to be printed immediately
    }
}


free(Cube);